// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_policy_troubleshooter_iam_protos || ($protobuf.roots._google_cloud_policy_troubleshooter_iam_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.cloud = (function() {
    
            /**
             * Namespace cloud.
             * @memberof google
             * @namespace
             */
            var cloud = {};
    
            cloud.policytroubleshooter = (function() {
    
                /**
                 * Namespace policytroubleshooter.
                 * @memberof google.cloud
                 * @namespace
                 */
                var policytroubleshooter = {};
    
                policytroubleshooter.iam = (function() {
    
                    /**
                     * Namespace iam.
                     * @memberof google.cloud.policytroubleshooter
                     * @namespace
                     */
                    var iam = {};
    
                    iam.v3 = (function() {
    
                        /**
                         * Namespace v3.
                         * @memberof google.cloud.policytroubleshooter.iam
                         * @namespace
                         */
                        var v3 = {};
    
                        v3.PolicyTroubleshooter = (function() {
    
                            /**
                             * Constructs a new PolicyTroubleshooter service.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a PolicyTroubleshooter
                             * @extends $protobuf.rpc.Service
                             * @constructor
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             */
                            function PolicyTroubleshooter(rpcImpl, requestDelimited, responseDelimited) {
                                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                            }
    
                            (PolicyTroubleshooter.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = PolicyTroubleshooter;
    
                            /**
                             * Creates new PolicyTroubleshooter service using the specified rpc implementation.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter
                             * @static
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             * @returns {PolicyTroubleshooter} RPC service. Useful where requests and/or responses are streamed.
                             */
                            PolicyTroubleshooter.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                                return new this(rpcImpl, requestDelimited, responseDelimited);
                            };
    
                            /**
                             * Callback as used by {@link google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter|troubleshootIamPolicy}.
                             * @memberof google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter
                             * @typedef TroubleshootIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} [response] TroubleshootIamPolicyResponse
                             */
    
                            /**
                             * Calls TroubleshootIamPolicy.
                             * @function troubleshootIamPolicy
                             * @memberof google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter
                             * @instance
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest} request TroubleshootIamPolicyRequest message or plain object
                             * @param {google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter.TroubleshootIamPolicyCallback} callback Node-style callback called with the error, if any, and TroubleshootIamPolicyResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(PolicyTroubleshooter.prototype.troubleshootIamPolicy = function troubleshootIamPolicy(request, callback) {
                                return this.rpcCall(troubleshootIamPolicy, $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest, $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse, request, callback);
                            }, "name", { value: "TroubleshootIamPolicy" });
    
                            /**
                             * Calls TroubleshootIamPolicy.
                             * @function troubleshootIamPolicy
                             * @memberof google.cloud.policytroubleshooter.iam.v3.PolicyTroubleshooter
                             * @instance
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest} request TroubleshootIamPolicyRequest message or plain object
                             * @returns {Promise<google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse>} Promise
                             * @variation 2
                             */
    
                            return PolicyTroubleshooter;
                        })();
    
                        /**
                         * AllowAccessState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.AllowAccessState
                         * @enum {number}
                         * @property {number} ALLOW_ACCESS_STATE_UNSPECIFIED=0 ALLOW_ACCESS_STATE_UNSPECIFIED value
                         * @property {number} ALLOW_ACCESS_STATE_GRANTED=1 ALLOW_ACCESS_STATE_GRANTED value
                         * @property {number} ALLOW_ACCESS_STATE_NOT_GRANTED=2 ALLOW_ACCESS_STATE_NOT_GRANTED value
                         * @property {number} ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL=3 ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL value
                         * @property {number} ALLOW_ACCESS_STATE_UNKNOWN_INFO=4 ALLOW_ACCESS_STATE_UNKNOWN_INFO value
                         */
                        v3.AllowAccessState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ALLOW_ACCESS_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "ALLOW_ACCESS_STATE_GRANTED"] = 1;
                            values[valuesById[2] = "ALLOW_ACCESS_STATE_NOT_GRANTED"] = 2;
                            values[valuesById[3] = "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL"] = 3;
                            values[valuesById[4] = "ALLOW_ACCESS_STATE_UNKNOWN_INFO"] = 4;
                            return values;
                        })();
    
                        /**
                         * DenyAccessState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.DenyAccessState
                         * @enum {number}
                         * @property {number} DENY_ACCESS_STATE_UNSPECIFIED=0 DENY_ACCESS_STATE_UNSPECIFIED value
                         * @property {number} DENY_ACCESS_STATE_DENIED=1 DENY_ACCESS_STATE_DENIED value
                         * @property {number} DENY_ACCESS_STATE_NOT_DENIED=2 DENY_ACCESS_STATE_NOT_DENIED value
                         * @property {number} DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL=3 DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL value
                         * @property {number} DENY_ACCESS_STATE_UNKNOWN_INFO=4 DENY_ACCESS_STATE_UNKNOWN_INFO value
                         */
                        v3.DenyAccessState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DENY_ACCESS_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "DENY_ACCESS_STATE_DENIED"] = 1;
                            values[valuesById[2] = "DENY_ACCESS_STATE_NOT_DENIED"] = 2;
                            values[valuesById[3] = "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL"] = 3;
                            values[valuesById[4] = "DENY_ACCESS_STATE_UNKNOWN_INFO"] = 4;
                            return values;
                        })();
    
                        /**
                         * RolePermissionInclusionState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState
                         * @enum {number}
                         * @property {number} ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED=0 ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED value
                         * @property {number} ROLE_PERMISSION_INCLUDED=1 ROLE_PERMISSION_INCLUDED value
                         * @property {number} ROLE_PERMISSION_NOT_INCLUDED=2 ROLE_PERMISSION_NOT_INCLUDED value
                         * @property {number} ROLE_PERMISSION_UNKNOWN_INFO=3 ROLE_PERMISSION_UNKNOWN_INFO value
                         */
                        v3.RolePermissionInclusionState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "ROLE_PERMISSION_INCLUDED"] = 1;
                            values[valuesById[2] = "ROLE_PERMISSION_NOT_INCLUDED"] = 2;
                            values[valuesById[3] = "ROLE_PERMISSION_UNKNOWN_INFO"] = 3;
                            return values;
                        })();
    
                        /**
                         * PermissionPatternMatchingState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState
                         * @enum {number}
                         * @property {number} PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED=0 PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED value
                         * @property {number} PERMISSION_PATTERN_MATCHED=1 PERMISSION_PATTERN_MATCHED value
                         * @property {number} PERMISSION_PATTERN_NOT_MATCHED=2 PERMISSION_PATTERN_NOT_MATCHED value
                         */
                        v3.PermissionPatternMatchingState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PERMISSION_PATTERN_MATCHED"] = 1;
                            values[valuesById[2] = "PERMISSION_PATTERN_NOT_MATCHED"] = 2;
                            return values;
                        })();
    
                        /**
                         * MembershipMatchingState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState
                         * @enum {number}
                         * @property {number} MEMBERSHIP_MATCHING_STATE_UNSPECIFIED=0 MEMBERSHIP_MATCHING_STATE_UNSPECIFIED value
                         * @property {number} MEMBERSHIP_MATCHED=1 MEMBERSHIP_MATCHED value
                         * @property {number} MEMBERSHIP_NOT_MATCHED=2 MEMBERSHIP_NOT_MATCHED value
                         * @property {number} MEMBERSHIP_UNKNOWN_INFO=3 MEMBERSHIP_UNKNOWN_INFO value
                         * @property {number} MEMBERSHIP_UNKNOWN_UNSUPPORTED=4 MEMBERSHIP_UNKNOWN_UNSUPPORTED value
                         */
                        v3.MembershipMatchingState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MEMBERSHIP_MATCHED"] = 1;
                            values[valuesById[2] = "MEMBERSHIP_NOT_MATCHED"] = 2;
                            values[valuesById[3] = "MEMBERSHIP_UNKNOWN_INFO"] = 3;
                            values[valuesById[4] = "MEMBERSHIP_UNKNOWN_UNSUPPORTED"] = 4;
                            return values;
                        })();
    
                        /**
                         * HeuristicRelevance enum.
                         * @name google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance
                         * @enum {number}
                         * @property {number} HEURISTIC_RELEVANCE_UNSPECIFIED=0 HEURISTIC_RELEVANCE_UNSPECIFIED value
                         * @property {number} HEURISTIC_RELEVANCE_NORMAL=1 HEURISTIC_RELEVANCE_NORMAL value
                         * @property {number} HEURISTIC_RELEVANCE_HIGH=2 HEURISTIC_RELEVANCE_HIGH value
                         */
                        v3.HeuristicRelevance = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "HEURISTIC_RELEVANCE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "HEURISTIC_RELEVANCE_NORMAL"] = 1;
                            values[valuesById[2] = "HEURISTIC_RELEVANCE_HIGH"] = 2;
                            return values;
                        })();
    
                        v3.TroubleshootIamPolicyRequest = (function() {
    
                            /**
                             * Properties of a TroubleshootIamPolicyRequest.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface ITroubleshootIamPolicyRequest
                             * @property {google.cloud.policytroubleshooter.iam.v3.IAccessTuple|null} [accessTuple] TroubleshootIamPolicyRequest accessTuple
                             */
    
                            /**
                             * Constructs a new TroubleshootIamPolicyRequest.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a TroubleshootIamPolicyRequest.
                             * @implements ITroubleshootIamPolicyRequest
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest=} [properties] Properties to set
                             */
                            function TroubleshootIamPolicyRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TroubleshootIamPolicyRequest accessTuple.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IAccessTuple|null|undefined} accessTuple
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @instance
                             */
                            TroubleshootIamPolicyRequest.prototype.accessTuple = null;
    
                            /**
                             * Creates a new TroubleshootIamPolicyRequest instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest instance
                             */
                            TroubleshootIamPolicyRequest.create = function create(properties) {
                                return new TroubleshootIamPolicyRequest(properties);
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyRequest message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.accessTuple != null && Object.hasOwnProperty.call(message, "accessTuple"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.encode(message.accessTuple, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyRequest message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TroubleshootIamPolicyRequest message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TroubleshootIamPolicyRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.verify(message.accessTuple);
                                    if (error)
                                        return "accessTuple." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TroubleshootIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             */
                            TroubleshootIamPolicyRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest();
                                if (object.accessTuple != null) {
                                    if (typeof object.accessTuple !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest.accessTuple: object expected");
                                    message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.fromObject(object.accessTuple);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TroubleshootIamPolicyRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TroubleshootIamPolicyRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.accessTuple = null;
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple"))
                                    object.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.toObject(message.accessTuple, options);
                                return object;
                            };
    
                            /**
                             * Converts this TroubleshootIamPolicyRequest to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TroubleshootIamPolicyRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TroubleshootIamPolicyRequest
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TroubleshootIamPolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyRequest";
                            };
    
                            return TroubleshootIamPolicyRequest;
                        })();
    
                        v3.TroubleshootIamPolicyResponse = (function() {
    
                            /**
                             * Properties of a TroubleshootIamPolicyResponse.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface ITroubleshootIamPolicyResponse
                             * @property {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.OverallAccessState|null} [overallAccessState] TroubleshootIamPolicyResponse overallAccessState
                             * @property {google.cloud.policytroubleshooter.iam.v3.IAccessTuple|null} [accessTuple] TroubleshootIamPolicyResponse accessTuple
                             * @property {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation|null} [allowPolicyExplanation] TroubleshootIamPolicyResponse allowPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation|null} [denyPolicyExplanation] TroubleshootIamPolicyResponse denyPolicyExplanation
                             */
    
                            /**
                             * Constructs a new TroubleshootIamPolicyResponse.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a TroubleshootIamPolicyResponse.
                             * @implements ITroubleshootIamPolicyResponse
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyResponse=} [properties] Properties to set
                             */
                            function TroubleshootIamPolicyResponse(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TroubleshootIamPolicyResponse overallAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.OverallAccessState} overallAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.overallAccessState = 0;
    
                            /**
                             * TroubleshootIamPolicyResponse accessTuple.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IAccessTuple|null|undefined} accessTuple
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.accessTuple = null;
    
                            /**
                             * TroubleshootIamPolicyResponse allowPolicyExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation|null|undefined} allowPolicyExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.allowPolicyExplanation = null;
    
                            /**
                             * TroubleshootIamPolicyResponse denyPolicyExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation|null|undefined} denyPolicyExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.denyPolicyExplanation = null;
    
                            /**
                             * Creates a new TroubleshootIamPolicyResponse instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyResponse=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse instance
                             */
                            TroubleshootIamPolicyResponse.create = function create(properties) {
                                return new TroubleshootIamPolicyResponse(properties);
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyResponse message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.overallAccessState != null && Object.hasOwnProperty.call(message, "overallAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.overallAccessState);
                                if (message.accessTuple != null && Object.hasOwnProperty.call(message, "accessTuple"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.encode(message.accessTuple, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.allowPolicyExplanation != null && Object.hasOwnProperty.call(message, "allowPolicyExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.encode(message.allowPolicyExplanation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.denyPolicyExplanation != null && Object.hasOwnProperty.call(message, "denyPolicyExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.encode(message.denyPolicyExplanation, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyResponse message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ITroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.overallAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            message.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 4: {
                                            message.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TroubleshootIamPolicyResponse message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TroubleshootIamPolicyResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.overallAccessState != null && message.hasOwnProperty("overallAccessState"))
                                    switch (message.overallAccessState) {
                                    default:
                                        return "overallAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.verify(message.accessTuple);
                                    if (error)
                                        return "accessTuple." + error;
                                }
                                if (message.allowPolicyExplanation != null && message.hasOwnProperty("allowPolicyExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.verify(message.allowPolicyExplanation);
                                    if (error)
                                        return "allowPolicyExplanation." + error;
                                }
                                if (message.denyPolicyExplanation != null && message.hasOwnProperty("denyPolicyExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.verify(message.denyPolicyExplanation);
                                    if (error)
                                        return "denyPolicyExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TroubleshootIamPolicyResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             */
                            TroubleshootIamPolicyResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse();
                                switch (object.overallAccessState) {
                                default:
                                    if (typeof object.overallAccessState === "number") {
                                        message.overallAccessState = object.overallAccessState;
                                        break;
                                    }
                                    break;
                                case "OVERALL_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.overallAccessState = 0;
                                    break;
                                case "CAN_ACCESS":
                                case 1:
                                    message.overallAccessState = 1;
                                    break;
                                case "CANNOT_ACCESS":
                                case 2:
                                    message.overallAccessState = 2;
                                    break;
                                case "UNKNOWN_INFO":
                                case 3:
                                    message.overallAccessState = 3;
                                    break;
                                case "UNKNOWN_CONDITIONAL":
                                case 4:
                                    message.overallAccessState = 4;
                                    break;
                                }
                                if (object.accessTuple != null) {
                                    if (typeof object.accessTuple !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.accessTuple: object expected");
                                    message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.fromObject(object.accessTuple);
                                }
                                if (object.allowPolicyExplanation != null) {
                                    if (typeof object.allowPolicyExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.allowPolicyExplanation: object expected");
                                    message.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.fromObject(object.allowPolicyExplanation);
                                }
                                if (object.denyPolicyExplanation != null) {
                                    if (typeof object.denyPolicyExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.denyPolicyExplanation: object expected");
                                    message.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.fromObject(object.denyPolicyExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TroubleshootIamPolicyResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TroubleshootIamPolicyResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.overallAccessState = options.enums === String ? "OVERALL_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.accessTuple = null;
                                    object.allowPolicyExplanation = null;
                                    object.denyPolicyExplanation = null;
                                }
                                if (message.overallAccessState != null && message.hasOwnProperty("overallAccessState"))
                                    object.overallAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.OverallAccessState[message.overallAccessState] === undefined ? message.overallAccessState : $root.google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.OverallAccessState[message.overallAccessState] : message.overallAccessState;
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple"))
                                    object.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple.toObject(message.accessTuple, options);
                                if (message.allowPolicyExplanation != null && message.hasOwnProperty("allowPolicyExplanation"))
                                    object.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.toObject(message.allowPolicyExplanation, options);
                                if (message.denyPolicyExplanation != null && message.hasOwnProperty("denyPolicyExplanation"))
                                    object.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.toObject(message.denyPolicyExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this TroubleshootIamPolicyResponse to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TroubleshootIamPolicyResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TroubleshootIamPolicyResponse
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TroubleshootIamPolicyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse";
                            };
    
                            /**
                             * OverallAccessState enum.
                             * @name google.cloud.policytroubleshooter.iam.v3.TroubleshootIamPolicyResponse.OverallAccessState
                             * @enum {number}
                             * @property {number} OVERALL_ACCESS_STATE_UNSPECIFIED=0 OVERALL_ACCESS_STATE_UNSPECIFIED value
                             * @property {number} CAN_ACCESS=1 CAN_ACCESS value
                             * @property {number} CANNOT_ACCESS=2 CANNOT_ACCESS value
                             * @property {number} UNKNOWN_INFO=3 UNKNOWN_INFO value
                             * @property {number} UNKNOWN_CONDITIONAL=4 UNKNOWN_CONDITIONAL value
                             */
                            TroubleshootIamPolicyResponse.OverallAccessState = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "OVERALL_ACCESS_STATE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CAN_ACCESS"] = 1;
                                values[valuesById[2] = "CANNOT_ACCESS"] = 2;
                                values[valuesById[3] = "UNKNOWN_INFO"] = 3;
                                values[valuesById[4] = "UNKNOWN_CONDITIONAL"] = 4;
                                return values;
                            })();
    
                            return TroubleshootIamPolicyResponse;
                        })();
    
                        v3.AccessTuple = (function() {
    
                            /**
                             * Properties of an AccessTuple.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IAccessTuple
                             * @property {string|null} [principal] AccessTuple principal
                             * @property {string|null} [fullResourceName] AccessTuple fullResourceName
                             * @property {string|null} [permission] AccessTuple permission
                             * @property {string|null} [permissionFqdn] AccessTuple permissionFqdn
                             * @property {google.cloud.policytroubleshooter.iam.v3.IConditionContext|null} [conditionContext] AccessTuple conditionContext
                             */
    
                            /**
                             * Constructs a new AccessTuple.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an AccessTuple.
                             * @implements IAccessTuple
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAccessTuple=} [properties] Properties to set
                             */
                            function AccessTuple(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AccessTuple principal.
                             * @member {string} principal
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.principal = "";
    
                            /**
                             * AccessTuple fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.fullResourceName = "";
    
                            /**
                             * AccessTuple permission.
                             * @member {string} permission
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.permission = "";
    
                            /**
                             * AccessTuple permissionFqdn.
                             * @member {string} permissionFqdn
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.permissionFqdn = "";
    
                            /**
                             * AccessTuple conditionContext.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IConditionContext|null|undefined} conditionContext
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.conditionContext = null;
    
                            /**
                             * Creates a new AccessTuple instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAccessTuple=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AccessTuple} AccessTuple instance
                             */
                            AccessTuple.create = function create(properties) {
                                return new AccessTuple(properties);
                            };
    
                            /**
                             * Encodes the specified AccessTuple message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AccessTuple.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAccessTuple} message AccessTuple message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AccessTuple.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.principal != null && Object.hasOwnProperty.call(message, "principal"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.principal);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.permission != null && Object.hasOwnProperty.call(message, "permission"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.permission);
                                if (message.permissionFqdn != null && Object.hasOwnProperty.call(message, "permissionFqdn"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.permissionFqdn);
                                if (message.conditionContext != null && Object.hasOwnProperty.call(message, "conditionContext"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.encode(message.conditionContext, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AccessTuple message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AccessTuple.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAccessTuple} message AccessTuple message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AccessTuple.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AccessTuple message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AccessTuple} AccessTuple
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AccessTuple.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.principal = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.permission = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.permissionFqdn = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AccessTuple message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AccessTuple} AccessTuple
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AccessTuple.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AccessTuple message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AccessTuple.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.principal != null && message.hasOwnProperty("principal"))
                                    if (!$util.isString(message.principal))
                                        return "principal: string expected";
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.permission != null && message.hasOwnProperty("permission"))
                                    if (!$util.isString(message.permission))
                                        return "permission: string expected";
                                if (message.permissionFqdn != null && message.hasOwnProperty("permissionFqdn"))
                                    if (!$util.isString(message.permissionFqdn))
                                        return "permissionFqdn: string expected";
                                if (message.conditionContext != null && message.hasOwnProperty("conditionContext")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.verify(message.conditionContext);
                                    if (error)
                                        return "conditionContext." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an AccessTuple message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AccessTuple} AccessTuple
                             */
                            AccessTuple.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.AccessTuple();
                                if (object.principal != null)
                                    message.principal = String(object.principal);
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.permission != null)
                                    message.permission = String(object.permission);
                                if (object.permissionFqdn != null)
                                    message.permissionFqdn = String(object.permissionFqdn);
                                if (object.conditionContext != null) {
                                    if (typeof object.conditionContext !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AccessTuple.conditionContext: object expected");
                                    message.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.fromObject(object.conditionContext);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AccessTuple message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.AccessTuple} message AccessTuple
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AccessTuple.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.principal = "";
                                    object.fullResourceName = "";
                                    object.permission = "";
                                    object.permissionFqdn = "";
                                    object.conditionContext = null;
                                }
                                if (message.principal != null && message.hasOwnProperty("principal"))
                                    object.principal = message.principal;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.permission != null && message.hasOwnProperty("permission"))
                                    object.permission = message.permission;
                                if (message.permissionFqdn != null && message.hasOwnProperty("permissionFqdn"))
                                    object.permissionFqdn = message.permissionFqdn;
                                if (message.conditionContext != null && message.hasOwnProperty("conditionContext"))
                                    object.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.toObject(message.conditionContext, options);
                                return object;
                            };
    
                            /**
                             * Converts this AccessTuple to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AccessTuple.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AccessTuple
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AccessTuple
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AccessTuple.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.AccessTuple";
                            };
    
                            return AccessTuple;
                        })();
    
                        v3.ConditionContext = (function() {
    
                            /**
                             * Properties of a ConditionContext.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IConditionContext
                             * @property {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource|null} [resource] ConditionContext resource
                             * @property {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer|null} [destination] ConditionContext destination
                             * @property {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest|null} [request] ConditionContext request
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag>|null} [effectiveTags] ConditionContext effectiveTags
                             */
    
                            /**
                             * Constructs a new ConditionContext.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a ConditionContext.
                             * @implements IConditionContext
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionContext=} [properties] Properties to set
                             */
                            function ConditionContext(properties) {
                                this.effectiveTags = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ConditionContext resource.
                             * @member {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource|null|undefined} resource
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.resource = null;
    
                            /**
                             * ConditionContext destination.
                             * @member {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer|null|undefined} destination
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.destination = null;
    
                            /**
                             * ConditionContext request.
                             * @member {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest|null|undefined} request
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.request = null;
    
                            /**
                             * ConditionContext effectiveTags.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag>} effectiveTags
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.effectiveTags = $util.emptyArray;
    
                            /**
                             * Creates a new ConditionContext instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionContext=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext} ConditionContext instance
                             */
                            ConditionContext.create = function create(properties) {
                                return new ConditionContext(properties);
                            };
    
                            /**
                             * Encodes the specified ConditionContext message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionContext} message ConditionContext message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionContext.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.encode(message.destination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.encode(message.request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.effectiveTags != null && message.effectiveTags.length)
                                    for (var i = 0; i < message.effectiveTags.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.encode(message.effectiveTags[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ConditionContext message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionContext} message ConditionContext message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionContext.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ConditionContext message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext} ConditionContext
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionContext.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.resource = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.destination = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            message.request = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 4: {
                                            if (!(message.effectiveTags && message.effectiveTags.length))
                                                message.effectiveTags = [];
                                            message.effectiveTags.push($root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ConditionContext message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext} ConditionContext
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionContext.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ConditionContext message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConditionContext.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.resource != null && message.hasOwnProperty("resource")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.verify(message.resource);
                                    if (error)
                                        return "resource." + error;
                                }
                                if (message.destination != null && message.hasOwnProperty("destination")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.verify(message.destination);
                                    if (error)
                                        return "destination." + error;
                                }
                                if (message.request != null && message.hasOwnProperty("request")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.verify(message.request);
                                    if (error)
                                        return "request." + error;
                                }
                                if (message.effectiveTags != null && message.hasOwnProperty("effectiveTags")) {
                                    if (!Array.isArray(message.effectiveTags))
                                        return "effectiveTags: array expected";
                                    for (var i = 0; i < message.effectiveTags.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.verify(message.effectiveTags[i]);
                                        if (error)
                                            return "effectiveTags." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a ConditionContext message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext} ConditionContext
                             */
                            ConditionContext.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext();
                                if (object.resource != null) {
                                    if (typeof object.resource !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.resource: object expected");
                                    message.resource = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.fromObject(object.resource);
                                }
                                if (object.destination != null) {
                                    if (typeof object.destination !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.destination: object expected");
                                    message.destination = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.fromObject(object.destination);
                                }
                                if (object.request != null) {
                                    if (typeof object.request !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.request: object expected");
                                    message.request = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.fromObject(object.request);
                                }
                                if (object.effectiveTags) {
                                    if (!Array.isArray(object.effectiveTags))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.effectiveTags: array expected");
                                    message.effectiveTags = [];
                                    for (var i = 0; i < object.effectiveTags.length; ++i) {
                                        if (typeof object.effectiveTags[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.effectiveTags: object expected");
                                        message.effectiveTags[i] = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.fromObject(object.effectiveTags[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ConditionContext message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext} message ConditionContext
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConditionContext.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.effectiveTags = [];
                                if (options.defaults) {
                                    object.resource = null;
                                    object.destination = null;
                                    object.request = null;
                                }
                                if (message.resource != null && message.hasOwnProperty("resource"))
                                    object.resource = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.toObject(message.resource, options);
                                if (message.destination != null && message.hasOwnProperty("destination"))
                                    object.destination = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.toObject(message.destination, options);
                                if (message.request != null && message.hasOwnProperty("request"))
                                    object.request = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.toObject(message.request, options);
                                if (message.effectiveTags && message.effectiveTags.length) {
                                    object.effectiveTags = [];
                                    for (var j = 0; j < message.effectiveTags.length; ++j)
                                        object.effectiveTags[j] = $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.toObject(message.effectiveTags[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ConditionContext to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConditionContext.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ConditionContext
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ConditionContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionContext";
                            };
    
                            ConditionContext.Resource = (function() {
    
                                /**
                                 * Properties of a Resource.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @interface IResource
                                 * @property {string|null} [service] Resource service
                                 * @property {string|null} [name] Resource name
                                 * @property {string|null} [type] Resource type
                                 */
    
                                /**
                                 * Constructs a new Resource.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @classdesc Represents a Resource.
                                 * @implements IResource
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource=} [properties] Properties to set
                                 */
                                function Resource(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Resource service.
                                 * @member {string} service
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.service = "";
    
                                /**
                                 * Resource name.
                                 * @member {string} name
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.name = "";
    
                                /**
                                 * Resource type.
                                 * @member {string} type
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.type = "";
    
                                /**
                                 * Creates a new Resource instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource} Resource instance
                                 */
                                Resource.create = function create(properties) {
                                    return new Resource(properties);
                                };
    
                                /**
                                 * Encodes the specified Resource message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource} message Resource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Resource message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IResource} message Resource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Resource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource} Resource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.service = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.type = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Resource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource} Resource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Resource message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Resource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.service != null && message.hasOwnProperty("service"))
                                        if (!$util.isString(message.service))
                                            return "service: string expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isString(message.type))
                                            return "type: string expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource} Resource
                                 */
                                Resource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource();
                                    if (object.service != null)
                                        message.service = String(object.service);
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.type != null)
                                        message.type = String(object.type);
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Resource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource} message Resource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Resource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.service = "";
                                        object.name = "";
                                        object.type = "";
                                    }
                                    if (message.service != null && message.hasOwnProperty("service"))
                                        object.service = message.service;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    return object;
                                };
    
                                /**
                                 * Converts this Resource to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Resource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Resource
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionContext.Resource";
                                };
    
                                return Resource;
                            })();
    
                            ConditionContext.Peer = (function() {
    
                                /**
                                 * Properties of a Peer.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @interface IPeer
                                 * @property {string|null} [ip] Peer ip
                                 * @property {number|Long|null} [port] Peer port
                                 */
    
                                /**
                                 * Constructs a new Peer.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @classdesc Represents a Peer.
                                 * @implements IPeer
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer=} [properties] Properties to set
                                 */
                                function Peer(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Peer ip.
                                 * @member {string} ip
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @instance
                                 */
                                Peer.prototype.ip = "";
    
                                /**
                                 * Peer port.
                                 * @member {number|Long} port
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @instance
                                 */
                                Peer.prototype.port = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new Peer instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer} Peer instance
                                 */
                                Peer.create = function create(properties) {
                                    return new Peer(properties);
                                };
    
                                /**
                                 * Encodes the specified Peer message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer} message Peer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Peer.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
                                    if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.port);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Peer message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IPeer} message Peer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Peer.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Peer message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer} Peer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Peer.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.ip = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.port = reader.int64();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Peer message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer} Peer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Peer.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Peer message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Peer.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        if (!$util.isString(message.ip))
                                            return "ip: string expected";
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (!$util.isInteger(message.port) && !(message.port && $util.isInteger(message.port.low) && $util.isInteger(message.port.high)))
                                            return "port: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a Peer message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer} Peer
                                 */
                                Peer.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer();
                                    if (object.ip != null)
                                        message.ip = String(object.ip);
                                    if (object.port != null)
                                        if ($util.Long)
                                            (message.port = $util.Long.fromValue(object.port)).unsigned = false;
                                        else if (typeof object.port === "string")
                                            message.port = parseInt(object.port, 10);
                                        else if (typeof object.port === "number")
                                            message.port = object.port;
                                        else if (typeof object.port === "object")
                                            message.port = new $util.LongBits(object.port.low >>> 0, object.port.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Peer message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer} message Peer
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Peer.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.ip = "";
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.port = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.port = options.longs === String ? "0" : 0;
                                    }
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        object.ip = message.ip;
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (typeof message.port === "number")
                                            object.port = options.longs === String ? String(message.port) : message.port;
                                        else
                                            object.port = options.longs === String ? $util.Long.prototype.toString.call(message.port) : options.longs === Number ? new $util.LongBits(message.port.low >>> 0, message.port.high >>> 0).toNumber() : message.port;
                                    return object;
                                };
    
                                /**
                                 * Converts this Peer to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Peer.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Peer
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Peer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionContext.Peer";
                                };
    
                                return Peer;
                            })();
    
                            ConditionContext.Request = (function() {
    
                                /**
                                 * Properties of a Request.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @interface IRequest
                                 * @property {google.protobuf.ITimestamp|null} [receiveTime] Request receiveTime
                                 */
    
                                /**
                                 * Constructs a new Request.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @classdesc Represents a Request.
                                 * @implements IRequest
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest=} [properties] Properties to set
                                 */
                                function Request(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Request receiveTime.
                                 * @member {google.protobuf.ITimestamp|null|undefined} receiveTime
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @instance
                                 */
                                Request.prototype.receiveTime = null;
    
                                /**
                                 * Creates a new Request instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request} Request instance
                                 */
                                Request.create = function create(properties) {
                                    return new Request(properties);
                                };
    
                                /**
                                 * Encodes the specified Request message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.receiveTime != null && Object.hasOwnProperty.call(message, "receiveTime"))
                                        $root.google.protobuf.Timestamp.encode(message.receiveTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Request message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Request message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.receiveTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Request message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Request message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Request.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.receiveTime != null && message.hasOwnProperty("receiveTime")) {
                                        var error = $root.google.protobuf.Timestamp.verify(message.receiveTime);
                                        if (error)
                                            return "receiveTime." + error;
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request} Request
                                 */
                                Request.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request();
                                    if (object.receiveTime != null) {
                                        if (typeof object.receiveTime !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request.receiveTime: object expected");
                                        message.receiveTime = $root.google.protobuf.Timestamp.fromObject(object.receiveTime);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request} message Request
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Request.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.receiveTime = null;
                                    if (message.receiveTime != null && message.hasOwnProperty("receiveTime"))
                                        object.receiveTime = $root.google.protobuf.Timestamp.toObject(message.receiveTime, options);
                                    return object;
                                };
    
                                /**
                                 * Converts this Request to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Request.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Request
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Request.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionContext.Request";
                                };
    
                                return Request;
                            })();
    
                            ConditionContext.EffectiveTag = (function() {
    
                                /**
                                 * Properties of an EffectiveTag.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @interface IEffectiveTag
                                 * @property {string|null} [tagValue] EffectiveTag tagValue
                                 * @property {string|null} [namespacedTagValue] EffectiveTag namespacedTagValue
                                 * @property {string|null} [tagKey] EffectiveTag tagKey
                                 * @property {string|null} [namespacedTagKey] EffectiveTag namespacedTagKey
                                 * @property {string|null} [tagKeyParentName] EffectiveTag tagKeyParentName
                                 * @property {boolean|null} [inherited] EffectiveTag inherited
                                 */
    
                                /**
                                 * Constructs a new EffectiveTag.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext
                                 * @classdesc Represents an EffectiveTag.
                                 * @implements IEffectiveTag
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag=} [properties] Properties to set
                                 */
                                function EffectiveTag(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * EffectiveTag tagValue.
                                 * @member {string} tagValue
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagValue = "";
    
                                /**
                                 * EffectiveTag namespacedTagValue.
                                 * @member {string} namespacedTagValue
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.namespacedTagValue = "";
    
                                /**
                                 * EffectiveTag tagKey.
                                 * @member {string} tagKey
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagKey = "";
    
                                /**
                                 * EffectiveTag namespacedTagKey.
                                 * @member {string} namespacedTagKey
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.namespacedTagKey = "";
    
                                /**
                                 * EffectiveTag tagKeyParentName.
                                 * @member {string} tagKeyParentName
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagKeyParentName = "";
    
                                /**
                                 * EffectiveTag inherited.
                                 * @member {boolean} inherited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.inherited = false;
    
                                /**
                                 * Creates a new EffectiveTag instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag} EffectiveTag instance
                                 */
                                EffectiveTag.create = function create(properties) {
                                    return new EffectiveTag(properties);
                                };
    
                                /**
                                 * Encodes the specified EffectiveTag message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag} message EffectiveTag message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EffectiveTag.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.tagValue != null && Object.hasOwnProperty.call(message, "tagValue"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tagValue);
                                    if (message.namespacedTagValue != null && Object.hasOwnProperty.call(message, "namespacedTagValue"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.namespacedTagValue);
                                    if (message.tagKey != null && Object.hasOwnProperty.call(message, "tagKey"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.tagKey);
                                    if (message.namespacedTagKey != null && Object.hasOwnProperty.call(message, "namespacedTagKey"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.namespacedTagKey);
                                    if (message.inherited != null && Object.hasOwnProperty.call(message, "inherited"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.inherited);
                                    if (message.tagKeyParentName != null && Object.hasOwnProperty.call(message, "tagKeyParentName"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.tagKeyParentName);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified EffectiveTag message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.IEffectiveTag} message EffectiveTag message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EffectiveTag.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an EffectiveTag message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag} EffectiveTag
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EffectiveTag.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.tagValue = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.namespacedTagValue = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.tagKey = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.namespacedTagKey = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.tagKeyParentName = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                message.inherited = reader.bool();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an EffectiveTag message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag} EffectiveTag
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EffectiveTag.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an EffectiveTag message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                EffectiveTag.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.tagValue != null && message.hasOwnProperty("tagValue"))
                                        if (!$util.isString(message.tagValue))
                                            return "tagValue: string expected";
                                    if (message.namespacedTagValue != null && message.hasOwnProperty("namespacedTagValue"))
                                        if (!$util.isString(message.namespacedTagValue))
                                            return "namespacedTagValue: string expected";
                                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                                        if (!$util.isString(message.tagKey))
                                            return "tagKey: string expected";
                                    if (message.namespacedTagKey != null && message.hasOwnProperty("namespacedTagKey"))
                                        if (!$util.isString(message.namespacedTagKey))
                                            return "namespacedTagKey: string expected";
                                    if (message.tagKeyParentName != null && message.hasOwnProperty("tagKeyParentName"))
                                        if (!$util.isString(message.tagKeyParentName))
                                            return "tagKeyParentName: string expected";
                                    if (message.inherited != null && message.hasOwnProperty("inherited"))
                                        if (typeof message.inherited !== "boolean")
                                            return "inherited: boolean expected";
                                    return null;
                                };
    
                                /**
                                 * Creates an EffectiveTag message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag} EffectiveTag
                                 */
                                EffectiveTag.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag();
                                    if (object.tagValue != null)
                                        message.tagValue = String(object.tagValue);
                                    if (object.namespacedTagValue != null)
                                        message.namespacedTagValue = String(object.namespacedTagValue);
                                    if (object.tagKey != null)
                                        message.tagKey = String(object.tagKey);
                                    if (object.namespacedTagKey != null)
                                        message.namespacedTagKey = String(object.namespacedTagKey);
                                    if (object.tagKeyParentName != null)
                                        message.tagKeyParentName = String(object.tagKeyParentName);
                                    if (object.inherited != null)
                                        message.inherited = Boolean(object.inherited);
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an EffectiveTag message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag} message EffectiveTag
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                EffectiveTag.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.tagValue = "";
                                        object.namespacedTagValue = "";
                                        object.tagKey = "";
                                        object.namespacedTagKey = "";
                                        object.inherited = false;
                                        object.tagKeyParentName = "";
                                    }
                                    if (message.tagValue != null && message.hasOwnProperty("tagValue"))
                                        object.tagValue = message.tagValue;
                                    if (message.namespacedTagValue != null && message.hasOwnProperty("namespacedTagValue"))
                                        object.namespacedTagValue = message.namespacedTagValue;
                                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                                        object.tagKey = message.tagKey;
                                    if (message.namespacedTagKey != null && message.hasOwnProperty("namespacedTagKey"))
                                        object.namespacedTagKey = message.namespacedTagKey;
                                    if (message.inherited != null && message.hasOwnProperty("inherited"))
                                        object.inherited = message.inherited;
                                    if (message.tagKeyParentName != null && message.hasOwnProperty("tagKeyParentName"))
                                        object.tagKeyParentName = message.tagKeyParentName;
                                    return object;
                                };
    
                                /**
                                 * Converts this EffectiveTag to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                EffectiveTag.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for EffectiveTag
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                EffectiveTag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionContext.EffectiveTag";
                                };
    
                                return EffectiveTag;
                            })();
    
                            return ConditionContext;
                        })();
    
                        v3.AllowPolicyExplanation = (function() {
    
                            /**
                             * Properties of an AllowPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IAllowPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3.AllowAccessState|null} [allowAccessState] AllowPolicyExplanation allowAccessState
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy>|null} [explainedPolicies] AllowPolicyExplanation explainedPolicies
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] AllowPolicyExplanation relevance
                             */
    
                            /**
                             * Constructs a new AllowPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an AllowPolicyExplanation.
                             * @implements IAllowPolicyExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation=} [properties] Properties to set
                             */
                            function AllowPolicyExplanation(properties) {
                                this.explainedPolicies = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AllowPolicyExplanation allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.allowAccessState = 0;
    
                            /**
                             * AllowPolicyExplanation explainedPolicies.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy>} explainedPolicies
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.explainedPolicies = $util.emptyArray;
    
                            /**
                             * AllowPolicyExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.relevance = 0;
    
                            /**
                             * Creates a new AllowPolicyExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation} AllowPolicyExplanation instance
                             */
                            AllowPolicyExplanation.create = function create(properties) {
                                return new AllowPolicyExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified AllowPolicyExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation} message AllowPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowPolicyExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.explainedPolicies != null && message.explainedPolicies.length)
                                    for (var i = 0; i < message.explainedPolicies.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.encode(message.explainedPolicies[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AllowPolicyExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowPolicyExplanation} message AllowPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowPolicyExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AllowPolicyExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation} AllowPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowPolicyExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.explainedPolicies && message.explainedPolicies.length))
                                                message.explainedPolicies = [];
                                            message.explainedPolicies.push($root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 3: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AllowPolicyExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation} AllowPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowPolicyExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AllowPolicyExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AllowPolicyExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.explainedPolicies != null && message.hasOwnProperty("explainedPolicies")) {
                                    if (!Array.isArray(message.explainedPolicies))
                                        return "explainedPolicies: array expected";
                                    for (var i = 0; i < message.explainedPolicies.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.verify(message.explainedPolicies[i]);
                                        if (error)
                                            return "explainedPolicies." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an AllowPolicyExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation} AllowPolicyExplanation
                             */
                            AllowPolicyExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.explainedPolicies) {
                                    if (!Array.isArray(object.explainedPolicies))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.explainedPolicies: array expected");
                                    message.explainedPolicies = [];
                                    for (var i = 0; i < object.explainedPolicies.length; ++i) {
                                        if (typeof object.explainedPolicies[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation.explainedPolicies: object expected");
                                        message.explainedPolicies[i] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.fromObject(object.explainedPolicies[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AllowPolicyExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation} message AllowPolicyExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AllowPolicyExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedPolicies = [];
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.explainedPolicies && message.explainedPolicies.length) {
                                    object.explainedPolicies = [];
                                    for (var j = 0; j < message.explainedPolicies.length; ++j)
                                        object.explainedPolicies[j] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.toObject(message.explainedPolicies[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this AllowPolicyExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AllowPolicyExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AllowPolicyExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AllowPolicyExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.AllowPolicyExplanation";
                            };
    
                            return AllowPolicyExplanation;
                        })();
    
                        v3.ExplainedAllowPolicy = (function() {
    
                            /**
                             * Properties of an ExplainedAllowPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IExplainedAllowPolicy
                             * @property {google.cloud.policytroubleshooter.iam.v3.AllowAccessState|null} [allowAccessState] ExplainedAllowPolicy allowAccessState
                             * @property {string|null} [fullResourceName] ExplainedAllowPolicy fullResourceName
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation>|null} [bindingExplanations] ExplainedAllowPolicy bindingExplanations
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] ExplainedAllowPolicy relevance
                             * @property {google.iam.v1.IPolicy|null} [policy] ExplainedAllowPolicy policy
                             */
    
                            /**
                             * Constructs a new ExplainedAllowPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an ExplainedAllowPolicy.
                             * @implements IExplainedAllowPolicy
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy=} [properties] Properties to set
                             */
                            function ExplainedAllowPolicy(properties) {
                                this.bindingExplanations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedAllowPolicy allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.allowAccessState = 0;
    
                            /**
                             * ExplainedAllowPolicy fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.fullResourceName = "";
    
                            /**
                             * ExplainedAllowPolicy bindingExplanations.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation>} bindingExplanations
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.bindingExplanations = $util.emptyArray;
    
                            /**
                             * ExplainedAllowPolicy relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.relevance = 0;
    
                            /**
                             * ExplainedAllowPolicy policy.
                             * @member {google.iam.v1.IPolicy|null|undefined} policy
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.policy = null;
    
                            /**
                             * Creates a new ExplainedAllowPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy} ExplainedAllowPolicy instance
                             */
                            ExplainedAllowPolicy.create = function create(properties) {
                                return new ExplainedAllowPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedAllowPolicy message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy} message ExplainedAllowPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedAllowPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.bindingExplanations != null && message.bindingExplanations.length)
                                    for (var i = 0; i < message.bindingExplanations.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.encode(message.bindingExplanations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedAllowPolicy message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedAllowPolicy} message ExplainedAllowPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedAllowPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedAllowPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy} ExplainedAllowPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedAllowPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.bindingExplanations && message.bindingExplanations.length))
                                                message.bindingExplanations = [];
                                            message.bindingExplanations.push($root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedAllowPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy} ExplainedAllowPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedAllowPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedAllowPolicy message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedAllowPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.bindingExplanations != null && message.hasOwnProperty("bindingExplanations")) {
                                    if (!Array.isArray(message.bindingExplanations))
                                        return "bindingExplanations: array expected";
                                    for (var i = 0; i < message.bindingExplanations.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.verify(message.bindingExplanations[i]);
                                        if (error)
                                            return "bindingExplanations." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    var error = $root.google.iam.v1.Policy.verify(message.policy);
                                    if (error)
                                        return "policy." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedAllowPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy} ExplainedAllowPolicy
                             */
                            ExplainedAllowPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.bindingExplanations) {
                                    if (!Array.isArray(object.bindingExplanations))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.bindingExplanations: array expected");
                                    message.bindingExplanations = [];
                                    for (var i = 0; i < object.bindingExplanations.length; ++i) {
                                        if (typeof object.bindingExplanations[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.bindingExplanations: object expected");
                                        message.bindingExplanations[i] = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.fromObject(object.bindingExplanations[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy.policy: object expected");
                                    message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedAllowPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy} message ExplainedAllowPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedAllowPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.bindingExplanations = [];
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.fullResourceName = "";
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.policy = null;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.bindingExplanations && message.bindingExplanations.length) {
                                    object.bindingExplanations = [];
                                    for (var j = 0; j < message.bindingExplanations.length; ++j)
                                        object.bindingExplanations[j] = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.toObject(message.bindingExplanations[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.policy != null && message.hasOwnProperty("policy"))
                                    object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedAllowPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedAllowPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedAllowPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedAllowPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ExplainedAllowPolicy";
                            };
    
                            return ExplainedAllowPolicy;
                        })();
    
                        v3.AllowBindingExplanation = (function() {
    
                            /**
                             * Properties of an AllowBindingExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IAllowBindingExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3.AllowAccessState|null} [allowAccessState] AllowBindingExplanation allowAccessState
                             * @property {string|null} [role] AllowBindingExplanation role
                             * @property {google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState|null} [rolePermission] AllowBindingExplanation rolePermission
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [rolePermissionRelevance] AllowBindingExplanation rolePermissionRelevance
                             * @property {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership|null} [combinedMembership] AllowBindingExplanation combinedMembership
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership>|null} [memberships] AllowBindingExplanation memberships
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] AllowBindingExplanation relevance
                             * @property {google.type.IExpr|null} [condition] AllowBindingExplanation condition
                             * @property {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation|null} [conditionExplanation] AllowBindingExplanation conditionExplanation
                             */
    
                            /**
                             * Constructs a new AllowBindingExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an AllowBindingExplanation.
                             * @implements IAllowBindingExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation=} [properties] Properties to set
                             */
                            function AllowBindingExplanation(properties) {
                                this.memberships = {};
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AllowBindingExplanation allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.allowAccessState = 0;
    
                            /**
                             * AllowBindingExplanation role.
                             * @member {string} role
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.role = "";
    
                            /**
                             * AllowBindingExplanation rolePermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState} rolePermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.rolePermission = 0;
    
                            /**
                             * AllowBindingExplanation rolePermissionRelevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} rolePermissionRelevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.rolePermissionRelevance = 0;
    
                            /**
                             * AllowBindingExplanation combinedMembership.
                             * @member {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership|null|undefined} combinedMembership
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.combinedMembership = null;
    
                            /**
                             * AllowBindingExplanation memberships.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership>} memberships
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.memberships = $util.emptyObject;
    
                            /**
                             * AllowBindingExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.relevance = 0;
    
                            /**
                             * AllowBindingExplanation condition.
                             * @member {google.type.IExpr|null|undefined} condition
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.condition = null;
    
                            /**
                             * AllowBindingExplanation conditionExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation|null|undefined} conditionExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.conditionExplanation = null;
    
                            /**
                             * Creates a new AllowBindingExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation} AllowBindingExplanation instance
                             */
                            AllowBindingExplanation.create = function create(properties) {
                                return new AllowBindingExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified AllowBindingExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation} message AllowBindingExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowBindingExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                                if (message.rolePermission != null && Object.hasOwnProperty.call(message, "rolePermission"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rolePermission);
                                if (message.rolePermissionRelevance != null && Object.hasOwnProperty.call(message, "rolePermissionRelevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.rolePermissionRelevance);
                                if (message.combinedMembership != null && Object.hasOwnProperty.call(message, "combinedMembership"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.encode(message.combinedMembership, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                if (message.memberships != null && Object.hasOwnProperty.call(message, "memberships"))
                                    for (var keys = Object.keys(message.memberships), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.encode(message.memberships[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.relevance);
                                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                    $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                if (message.conditionExplanation != null && Object.hasOwnProperty.call(message, "conditionExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.encode(message.conditionExplanation, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AllowBindingExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IAllowBindingExplanation} message AllowBindingExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowBindingExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AllowBindingExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation} AllowBindingExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowBindingExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.role = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.rolePermission = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.rolePermissionRelevance = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            message.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 6: {
                                            if (message.memberships === $util.emptyObject)
                                                message.memberships = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.memberships[key] = value;
                                            break;
                                        }
                                    case 7: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 8: {
                                            message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 9: {
                                            message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AllowBindingExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation} AllowBindingExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowBindingExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AllowBindingExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AllowBindingExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.role != null && message.hasOwnProperty("role"))
                                    if (!$util.isString(message.role))
                                        return "role: string expected";
                                if (message.rolePermission != null && message.hasOwnProperty("rolePermission"))
                                    switch (message.rolePermission) {
                                    default:
                                        return "rolePermission: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.rolePermissionRelevance != null && message.hasOwnProperty("rolePermissionRelevance"))
                                    switch (message.rolePermissionRelevance) {
                                    default:
                                        return "rolePermissionRelevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.combinedMembership != null && message.hasOwnProperty("combinedMembership")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.verify(message.combinedMembership);
                                    if (error)
                                        return "combinedMembership." + error;
                                }
                                if (message.memberships != null && message.hasOwnProperty("memberships")) {
                                    if (!$util.isObject(message.memberships))
                                        return "memberships: object expected";
                                    var key = Object.keys(message.memberships);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.verify(message.memberships[key[i]]);
                                        if (error)
                                            return "memberships." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.condition != null && message.hasOwnProperty("condition")) {
                                    var error = $root.google.type.Expr.verify(message.condition);
                                    if (error)
                                        return "condition." + error;
                                }
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.verify(message.conditionExplanation);
                                    if (error)
                                        return "conditionExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an AllowBindingExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation} AllowBindingExplanation
                             */
                            AllowBindingExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.role != null)
                                    message.role = String(object.role);
                                switch (object.rolePermission) {
                                default:
                                    if (typeof object.rolePermission === "number") {
                                        message.rolePermission = object.rolePermission;
                                        break;
                                    }
                                    break;
                                case "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED":
                                case 0:
                                    message.rolePermission = 0;
                                    break;
                                case "ROLE_PERMISSION_INCLUDED":
                                case 1:
                                    message.rolePermission = 1;
                                    break;
                                case "ROLE_PERMISSION_NOT_INCLUDED":
                                case 2:
                                    message.rolePermission = 2;
                                    break;
                                case "ROLE_PERMISSION_UNKNOWN_INFO":
                                case 3:
                                    message.rolePermission = 3;
                                    break;
                                }
                                switch (object.rolePermissionRelevance) {
                                default:
                                    if (typeof object.rolePermissionRelevance === "number") {
                                        message.rolePermissionRelevance = object.rolePermissionRelevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.rolePermissionRelevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.rolePermissionRelevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.rolePermissionRelevance = 2;
                                    break;
                                }
                                if (object.combinedMembership != null) {
                                    if (typeof object.combinedMembership !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.combinedMembership: object expected");
                                    message.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.fromObject(object.combinedMembership);
                                }
                                if (object.memberships) {
                                    if (typeof object.memberships !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.memberships: object expected");
                                    message.memberships = {};
                                    for (var keys = Object.keys(object.memberships), i = 0; i < keys.length; ++i) {
                                        if (typeof object.memberships[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.memberships: object expected");
                                        message.memberships[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.fromObject(object.memberships[keys[i]]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.condition != null) {
                                    if (typeof object.condition !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.condition: object expected");
                                    message.condition = $root.google.type.Expr.fromObject(object.condition);
                                }
                                if (object.conditionExplanation != null) {
                                    if (typeof object.conditionExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.conditionExplanation: object expected");
                                    message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.fromObject(object.conditionExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AllowBindingExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation} message AllowBindingExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AllowBindingExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.objects || options.defaults)
                                    object.memberships = {};
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.role = "";
                                    object.rolePermission = options.enums === String ? "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED" : 0;
                                    object.rolePermissionRelevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.combinedMembership = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.condition = null;
                                    object.conditionExplanation = null;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.role != null && message.hasOwnProperty("role"))
                                    object.role = message.role;
                                if (message.rolePermission != null && message.hasOwnProperty("rolePermission"))
                                    object.rolePermission = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState[message.rolePermission] === undefined ? message.rolePermission : $root.google.cloud.policytroubleshooter.iam.v3.RolePermissionInclusionState[message.rolePermission] : message.rolePermission;
                                if (message.rolePermissionRelevance != null && message.hasOwnProperty("rolePermissionRelevance"))
                                    object.rolePermissionRelevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.rolePermissionRelevance] === undefined ? message.rolePermissionRelevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.rolePermissionRelevance] : message.rolePermissionRelevance;
                                if (message.combinedMembership != null && message.hasOwnProperty("combinedMembership"))
                                    object.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.toObject(message.combinedMembership, options);
                                var keys2;
                                if (message.memberships && (keys2 = Object.keys(message.memberships)).length) {
                                    object.memberships = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.memberships[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.toObject(message.memberships[keys2[j]], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.condition != null && message.hasOwnProperty("condition"))
                                    object.condition = $root.google.type.Expr.toObject(message.condition, options);
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation"))
                                    object.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.toObject(message.conditionExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this AllowBindingExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AllowBindingExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AllowBindingExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AllowBindingExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation";
                            };
    
                            AllowBindingExplanation.AnnotatedAllowMembership = (function() {
    
                                /**
                                 * Properties of an AnnotatedAllowMembership.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                                 * @interface IAnnotatedAllowMembership
                                 * @property {google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState|null} [membership] AnnotatedAllowMembership membership
                                 * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] AnnotatedAllowMembership relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedAllowMembership.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation
                                 * @classdesc Represents an AnnotatedAllowMembership.
                                 * @implements IAnnotatedAllowMembership
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership=} [properties] Properties to set
                                 */
                                function AnnotatedAllowMembership(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedAllowMembership membership.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState} membership
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 */
                                AnnotatedAllowMembership.prototype.membership = 0;
    
                                /**
                                 * AnnotatedAllowMembership relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 */
                                AnnotatedAllowMembership.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedAllowMembership instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership instance
                                 */
                                AnnotatedAllowMembership.create = function create(properties) {
                                    return new AnnotatedAllowMembership(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedAllowMembership message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership} message AnnotatedAllowMembership message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedAllowMembership.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.membership);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedAllowMembership message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.IAnnotatedAllowMembership} message AnnotatedAllowMembership message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedAllowMembership.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedAllowMembership message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedAllowMembership.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.membership = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedAllowMembership message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedAllowMembership.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedAllowMembership message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedAllowMembership.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        switch (message.membership) {
                                        default:
                                            return "membership: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedAllowMembership message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 */
                                AnnotatedAllowMembership.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership();
                                    switch (object.membership) {
                                    default:
                                        if (typeof object.membership === "number") {
                                            message.membership = object.membership;
                                            break;
                                        }
                                        break;
                                    case "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.membership = 0;
                                        break;
                                    case "MEMBERSHIP_MATCHED":
                                    case 1:
                                        message.membership = 1;
                                        break;
                                    case "MEMBERSHIP_NOT_MATCHED":
                                    case 2:
                                        message.membership = 2;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_INFO":
                                    case 3:
                                        message.membership = 3;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_UNSUPPORTED":
                                    case 4:
                                        message.membership = 4;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedAllowMembership message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership} message AnnotatedAllowMembership
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedAllowMembership.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.membership = options.enums === String ? "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        object.membership = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState[message.membership] === undefined ? message.membership : $root.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState[message.membership] : message.membership;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedAllowMembership to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedAllowMembership.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedAllowMembership
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedAllowMembership.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.AllowBindingExplanation.AnnotatedAllowMembership";
                                };
    
                                return AnnotatedAllowMembership;
                            })();
    
                            return AllowBindingExplanation;
                        })();
    
                        v3.DenyPolicyExplanation = (function() {
    
                            /**
                             * Properties of a DenyPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IDenyPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyAccessState|null} [denyAccessState] DenyPolicyExplanation denyAccessState
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource>|null} [explainedResources] DenyPolicyExplanation explainedResources
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] DenyPolicyExplanation relevance
                             * @property {boolean|null} [permissionDeniable] DenyPolicyExplanation permissionDeniable
                             */
    
                            /**
                             * Constructs a new DenyPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a DenyPolicyExplanation.
                             * @implements IDenyPolicyExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation=} [properties] Properties to set
                             */
                            function DenyPolicyExplanation(properties) {
                                this.explainedResources = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DenyPolicyExplanation denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.denyAccessState = 0;
    
                            /**
                             * DenyPolicyExplanation explainedResources.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource>} explainedResources
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.explainedResources = $util.emptyArray;
    
                            /**
                             * DenyPolicyExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.relevance = 0;
    
                            /**
                             * DenyPolicyExplanation permissionDeniable.
                             * @member {boolean} permissionDeniable
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.permissionDeniable = false;
    
                            /**
                             * Creates a new DenyPolicyExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation} DenyPolicyExplanation instance
                             */
                            DenyPolicyExplanation.create = function create(properties) {
                                return new DenyPolicyExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified DenyPolicyExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation} message DenyPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyPolicyExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.explainedResources != null && message.explainedResources.length)
                                    for (var i = 0; i < message.explainedResources.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.encode(message.explainedResources[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.relevance);
                                if (message.permissionDeniable != null && Object.hasOwnProperty.call(message, "permissionDeniable"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.permissionDeniable);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DenyPolicyExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyPolicyExplanation} message DenyPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyPolicyExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DenyPolicyExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation} DenyPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyPolicyExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.explainedResources && message.explainedResources.length))
                                                message.explainedResources = [];
                                            message.explainedResources.push($root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 3: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.permissionDeniable = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DenyPolicyExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation} DenyPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyPolicyExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DenyPolicyExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DenyPolicyExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.explainedResources != null && message.hasOwnProperty("explainedResources")) {
                                    if (!Array.isArray(message.explainedResources))
                                        return "explainedResources: array expected";
                                    for (var i = 0; i < message.explainedResources.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.verify(message.explainedResources[i]);
                                        if (error)
                                            return "explainedResources." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.permissionDeniable != null && message.hasOwnProperty("permissionDeniable"))
                                    if (typeof message.permissionDeniable !== "boolean")
                                        return "permissionDeniable: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a DenyPolicyExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation} DenyPolicyExplanation
                             */
                            DenyPolicyExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.explainedResources) {
                                    if (!Array.isArray(object.explainedResources))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.explainedResources: array expected");
                                    message.explainedResources = [];
                                    for (var i = 0; i < object.explainedResources.length; ++i) {
                                        if (typeof object.explainedResources[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation.explainedResources: object expected");
                                        message.explainedResources[i] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.fromObject(object.explainedResources[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.permissionDeniable != null)
                                    message.permissionDeniable = Boolean(object.permissionDeniable);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DenyPolicyExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation} message DenyPolicyExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DenyPolicyExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedResources = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.permissionDeniable = false;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.explainedResources && message.explainedResources.length) {
                                    object.explainedResources = [];
                                    for (var j = 0; j < message.explainedResources.length; ++j)
                                        object.explainedResources[j] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.toObject(message.explainedResources[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.permissionDeniable != null && message.hasOwnProperty("permissionDeniable"))
                                    object.permissionDeniable = message.permissionDeniable;
                                return object;
                            };
    
                            /**
                             * Converts this DenyPolicyExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DenyPolicyExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for DenyPolicyExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            DenyPolicyExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.DenyPolicyExplanation";
                            };
    
                            return DenyPolicyExplanation;
                        })();
    
                        v3.ExplainedDenyResource = (function() {
    
                            /**
                             * Properties of an ExplainedDenyResource.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IExplainedDenyResource
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyAccessState|null} [denyAccessState] ExplainedDenyResource denyAccessState
                             * @property {string|null} [fullResourceName] ExplainedDenyResource fullResourceName
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy>|null} [explainedPolicies] ExplainedDenyResource explainedPolicies
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] ExplainedDenyResource relevance
                             */
    
                            /**
                             * Constructs a new ExplainedDenyResource.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an ExplainedDenyResource.
                             * @implements IExplainedDenyResource
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource=} [properties] Properties to set
                             */
                            function ExplainedDenyResource(properties) {
                                this.explainedPolicies = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedDenyResource denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.denyAccessState = 0;
    
                            /**
                             * ExplainedDenyResource fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.fullResourceName = "";
    
                            /**
                             * ExplainedDenyResource explainedPolicies.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy>} explainedPolicies
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.explainedPolicies = $util.emptyArray;
    
                            /**
                             * ExplainedDenyResource relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.relevance = 0;
    
                            /**
                             * Creates a new ExplainedDenyResource instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource} ExplainedDenyResource instance
                             */
                            ExplainedDenyResource.create = function create(properties) {
                                return new ExplainedDenyResource(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyResource message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource} message ExplainedDenyResource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyResource.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.explainedPolicies != null && message.explainedPolicies.length)
                                    for (var i = 0; i < message.explainedPolicies.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.encode(message.explainedPolicies[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyResource message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyResource} message ExplainedDenyResource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyResource.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedDenyResource message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource} ExplainedDenyResource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyResource.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.explainedPolicies && message.explainedPolicies.length))
                                                message.explainedPolicies = [];
                                            message.explainedPolicies.push($root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedDenyResource message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource} ExplainedDenyResource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyResource.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedDenyResource message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedDenyResource.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.explainedPolicies != null && message.hasOwnProperty("explainedPolicies")) {
                                    if (!Array.isArray(message.explainedPolicies))
                                        return "explainedPolicies: array expected";
                                    for (var i = 0; i < message.explainedPolicies.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.verify(message.explainedPolicies[i]);
                                        if (error)
                                            return "explainedPolicies." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedDenyResource message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource} ExplainedDenyResource
                             */
                            ExplainedDenyResource.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.explainedPolicies) {
                                    if (!Array.isArray(object.explainedPolicies))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.explainedPolicies: array expected");
                                    message.explainedPolicies = [];
                                    for (var i = 0; i < object.explainedPolicies.length; ++i) {
                                        if (typeof object.explainedPolicies[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource.explainedPolicies: object expected");
                                        message.explainedPolicies[i] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.fromObject(object.explainedPolicies[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedDenyResource message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource} message ExplainedDenyResource
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedDenyResource.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedPolicies = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.fullResourceName = "";
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.explainedPolicies && message.explainedPolicies.length) {
                                    object.explainedPolicies = [];
                                    for (var j = 0; j < message.explainedPolicies.length; ++j)
                                        object.explainedPolicies[j] = $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.toObject(message.explainedPolicies[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedDenyResource to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedDenyResource.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedDenyResource
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedDenyResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ExplainedDenyResource";
                            };
    
                            return ExplainedDenyResource;
                        })();
    
                        v3.ExplainedDenyPolicy = (function() {
    
                            /**
                             * Properties of an ExplainedDenyPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IExplainedDenyPolicy
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyAccessState|null} [denyAccessState] ExplainedDenyPolicy denyAccessState
                             * @property {google.iam.v2.IPolicy|null} [policy] ExplainedDenyPolicy policy
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation>|null} [ruleExplanations] ExplainedDenyPolicy ruleExplanations
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] ExplainedDenyPolicy relevance
                             */
    
                            /**
                             * Constructs a new ExplainedDenyPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents an ExplainedDenyPolicy.
                             * @implements IExplainedDenyPolicy
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy=} [properties] Properties to set
                             */
                            function ExplainedDenyPolicy(properties) {
                                this.ruleExplanations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedDenyPolicy denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.denyAccessState = 0;
    
                            /**
                             * ExplainedDenyPolicy policy.
                             * @member {google.iam.v2.IPolicy|null|undefined} policy
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.policy = null;
    
                            /**
                             * ExplainedDenyPolicy ruleExplanations.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation>} ruleExplanations
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.ruleExplanations = $util.emptyArray;
    
                            /**
                             * ExplainedDenyPolicy relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.relevance = 0;
    
                            /**
                             * Creates a new ExplainedDenyPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy} ExplainedDenyPolicy instance
                             */
                            ExplainedDenyPolicy.create = function create(properties) {
                                return new ExplainedDenyPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyPolicy message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy} message ExplainedDenyPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.iam.v2.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.ruleExplanations != null && message.ruleExplanations.length)
                                    for (var i = 0; i < message.ruleExplanations.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.encode(message.ruleExplanations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyPolicy message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IExplainedDenyPolicy} message ExplainedDenyPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedDenyPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy} ExplainedDenyPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.policy = $root.google.iam.v2.Policy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.ruleExplanations && message.ruleExplanations.length))
                                                message.ruleExplanations = [];
                                            message.ruleExplanations.push($root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedDenyPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy} ExplainedDenyPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedDenyPolicy message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedDenyPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    var error = $root.google.iam.v2.Policy.verify(message.policy);
                                    if (error)
                                        return "policy." + error;
                                }
                                if (message.ruleExplanations != null && message.hasOwnProperty("ruleExplanations")) {
                                    if (!Array.isArray(message.ruleExplanations))
                                        return "ruleExplanations: array expected";
                                    for (var i = 0; i < message.ruleExplanations.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.verify(message.ruleExplanations[i]);
                                        if (error)
                                            return "ruleExplanations." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedDenyPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy} ExplainedDenyPolicy
                             */
                            ExplainedDenyPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.policy: object expected");
                                    message.policy = $root.google.iam.v2.Policy.fromObject(object.policy);
                                }
                                if (object.ruleExplanations) {
                                    if (!Array.isArray(object.ruleExplanations))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.ruleExplanations: array expected");
                                    message.ruleExplanations = [];
                                    for (var i = 0; i < object.ruleExplanations.length; ++i) {
                                        if (typeof object.ruleExplanations[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy.ruleExplanations: object expected");
                                        message.ruleExplanations[i] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.fromObject(object.ruleExplanations[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedDenyPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy} message ExplainedDenyPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedDenyPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.ruleExplanations = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.policy = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.policy != null && message.hasOwnProperty("policy"))
                                    object.policy = $root.google.iam.v2.Policy.toObject(message.policy, options);
                                if (message.ruleExplanations && message.ruleExplanations.length) {
                                    object.ruleExplanations = [];
                                    for (var j = 0; j < message.ruleExplanations.length; ++j)
                                        object.ruleExplanations[j] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.toObject(message.ruleExplanations[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedDenyPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedDenyPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedDenyPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedDenyPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ExplainedDenyPolicy";
                            };
    
                            return ExplainedDenyPolicy;
                        })();
    
                        v3.DenyRuleExplanation = (function() {
    
                            /**
                             * Properties of a DenyRuleExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IDenyRuleExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyAccessState|null} [denyAccessState] DenyRuleExplanation denyAccessState
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching|null} [combinedDeniedPermission] DenyRuleExplanation combinedDeniedPermission
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching>|null} [deniedPermissions] DenyRuleExplanation deniedPermissions
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching|null} [combinedExceptionPermission] DenyRuleExplanation combinedExceptionPermission
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching>|null} [exceptionPermissions] DenyRuleExplanation exceptionPermissions
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null} [combinedDeniedPrincipal] DenyRuleExplanation combinedDeniedPrincipal
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>|null} [deniedPrincipals] DenyRuleExplanation deniedPrincipals
                             * @property {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null} [combinedExceptionPrincipal] DenyRuleExplanation combinedExceptionPrincipal
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>|null} [exceptionPrincipals] DenyRuleExplanation exceptionPrincipals
                             * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] DenyRuleExplanation relevance
                             * @property {google.type.IExpr|null} [condition] DenyRuleExplanation condition
                             * @property {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation|null} [conditionExplanation] DenyRuleExplanation conditionExplanation
                             */
    
                            /**
                             * Constructs a new DenyRuleExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a DenyRuleExplanation.
                             * @implements IDenyRuleExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation=} [properties] Properties to set
                             */
                            function DenyRuleExplanation(properties) {
                                this.deniedPermissions = {};
                                this.exceptionPermissions = {};
                                this.deniedPrincipals = {};
                                this.exceptionPrincipals = {};
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DenyRuleExplanation denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.denyAccessState = 0;
    
                            /**
                             * DenyRuleExplanation combinedDeniedPermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching|null|undefined} combinedDeniedPermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedDeniedPermission = null;
    
                            /**
                             * DenyRuleExplanation deniedPermissions.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching>} deniedPermissions
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.deniedPermissions = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedExceptionPermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching|null|undefined} combinedExceptionPermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedExceptionPermission = null;
    
                            /**
                             * DenyRuleExplanation exceptionPermissions.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching>} exceptionPermissions
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.exceptionPermissions = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedDeniedPrincipal.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null|undefined} combinedDeniedPrincipal
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedDeniedPrincipal = null;
    
                            /**
                             * DenyRuleExplanation deniedPrincipals.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>} deniedPrincipals
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.deniedPrincipals = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedExceptionPrincipal.
                             * @member {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null|undefined} combinedExceptionPrincipal
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedExceptionPrincipal = null;
    
                            /**
                             * DenyRuleExplanation exceptionPrincipals.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>} exceptionPrincipals
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.exceptionPrincipals = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.relevance = 0;
    
                            /**
                             * DenyRuleExplanation condition.
                             * @member {google.type.IExpr|null|undefined} condition
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.condition = null;
    
                            /**
                             * DenyRuleExplanation conditionExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation|null|undefined} conditionExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.conditionExplanation = null;
    
                            /**
                             * Creates a new DenyRuleExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation} DenyRuleExplanation instance
                             */
                            DenyRuleExplanation.create = function create(properties) {
                                return new DenyRuleExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified DenyRuleExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation} message DenyRuleExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyRuleExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.combinedDeniedPermission != null && Object.hasOwnProperty.call(message, "combinedDeniedPermission"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.combinedDeniedPermission, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.deniedPermissions != null && Object.hasOwnProperty.call(message, "deniedPermissions"))
                                    for (var keys = Object.keys(message.deniedPermissions), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.deniedPermissions[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedExceptionPermission != null && Object.hasOwnProperty.call(message, "combinedExceptionPermission"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.combinedExceptionPermission, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.exceptionPermissions != null && Object.hasOwnProperty.call(message, "exceptionPermissions"))
                                    for (var keys = Object.keys(message.exceptionPermissions), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.exceptionPermissions[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedDeniedPrincipal != null && Object.hasOwnProperty.call(message, "combinedDeniedPrincipal"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.combinedDeniedPrincipal, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                if (message.deniedPrincipals != null && Object.hasOwnProperty.call(message, "deniedPrincipals"))
                                    for (var keys = Object.keys(message.deniedPrincipals), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 7, wireType 2 =*/58).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.deniedPrincipals[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedExceptionPrincipal != null && Object.hasOwnProperty.call(message, "combinedExceptionPrincipal"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.combinedExceptionPrincipal, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                if (message.exceptionPrincipals != null && Object.hasOwnProperty.call(message, "exceptionPrincipals"))
                                    for (var keys = Object.keys(message.exceptionPrincipals), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.exceptionPrincipals[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.relevance);
                                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                    $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                                if (message.conditionExplanation != null && Object.hasOwnProperty.call(message, "conditionExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.encode(message.conditionExplanation, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DenyRuleExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IDenyRuleExplanation} message DenyRuleExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyRuleExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DenyRuleExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation} DenyRuleExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyRuleExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (message.deniedPermissions === $util.emptyObject)
                                                message.deniedPermissions = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.deniedPermissions[key] = value;
                                            break;
                                        }
                                    case 4: {
                                            message.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 5: {
                                            if (message.exceptionPermissions === $util.emptyObject)
                                                message.exceptionPermissions = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.exceptionPermissions[key] = value;
                                            break;
                                        }
                                    case 6: {
                                            message.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 7: {
                                            if (message.deniedPrincipals === $util.emptyObject)
                                                message.deniedPrincipals = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.deniedPrincipals[key] = value;
                                            break;
                                        }
                                    case 8: {
                                            message.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 9: {
                                            if (message.exceptionPrincipals === $util.emptyObject)
                                                message.exceptionPrincipals = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.exceptionPrincipals[key] = value;
                                            break;
                                        }
                                    case 10: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 11: {
                                            message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 12: {
                                            message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DenyRuleExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation} DenyRuleExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyRuleExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DenyRuleExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DenyRuleExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.combinedDeniedPermission != null && message.hasOwnProperty("combinedDeniedPermission")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.combinedDeniedPermission);
                                    if (error)
                                        return "combinedDeniedPermission." + error;
                                }
                                if (message.deniedPermissions != null && message.hasOwnProperty("deniedPermissions")) {
                                    if (!$util.isObject(message.deniedPermissions))
                                        return "deniedPermissions: object expected";
                                    var key = Object.keys(message.deniedPermissions);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.deniedPermissions[key[i]]);
                                        if (error)
                                            return "deniedPermissions." + error;
                                    }
                                }
                                if (message.combinedExceptionPermission != null && message.hasOwnProperty("combinedExceptionPermission")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.combinedExceptionPermission);
                                    if (error)
                                        return "combinedExceptionPermission." + error;
                                }
                                if (message.exceptionPermissions != null && message.hasOwnProperty("exceptionPermissions")) {
                                    if (!$util.isObject(message.exceptionPermissions))
                                        return "exceptionPermissions: object expected";
                                    var key = Object.keys(message.exceptionPermissions);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.exceptionPermissions[key[i]]);
                                        if (error)
                                            return "exceptionPermissions." + error;
                                    }
                                }
                                if (message.combinedDeniedPrincipal != null && message.hasOwnProperty("combinedDeniedPrincipal")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.combinedDeniedPrincipal);
                                    if (error)
                                        return "combinedDeniedPrincipal." + error;
                                }
                                if (message.deniedPrincipals != null && message.hasOwnProperty("deniedPrincipals")) {
                                    if (!$util.isObject(message.deniedPrincipals))
                                        return "deniedPrincipals: object expected";
                                    var key = Object.keys(message.deniedPrincipals);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.deniedPrincipals[key[i]]);
                                        if (error)
                                            return "deniedPrincipals." + error;
                                    }
                                }
                                if (message.combinedExceptionPrincipal != null && message.hasOwnProperty("combinedExceptionPrincipal")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.combinedExceptionPrincipal);
                                    if (error)
                                        return "combinedExceptionPrincipal." + error;
                                }
                                if (message.exceptionPrincipals != null && message.hasOwnProperty("exceptionPrincipals")) {
                                    if (!$util.isObject(message.exceptionPrincipals))
                                        return "exceptionPrincipals: object expected";
                                    var key = Object.keys(message.exceptionPrincipals);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.exceptionPrincipals[key[i]]);
                                        if (error)
                                            return "exceptionPrincipals." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.condition != null && message.hasOwnProperty("condition")) {
                                    var error = $root.google.type.Expr.verify(message.condition);
                                    if (error)
                                        return "condition." + error;
                                }
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.verify(message.conditionExplanation);
                                    if (error)
                                        return "conditionExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a DenyRuleExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation} DenyRuleExplanation
                             */
                            DenyRuleExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.combinedDeniedPermission != null) {
                                    if (typeof object.combinedDeniedPermission !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.combinedDeniedPermission: object expected");
                                    message.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.combinedDeniedPermission);
                                }
                                if (object.deniedPermissions) {
                                    if (typeof object.deniedPermissions !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.deniedPermissions: object expected");
                                    message.deniedPermissions = {};
                                    for (var keys = Object.keys(object.deniedPermissions), i = 0; i < keys.length; ++i) {
                                        if (typeof object.deniedPermissions[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.deniedPermissions: object expected");
                                        message.deniedPermissions[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.deniedPermissions[keys[i]]);
                                    }
                                }
                                if (object.combinedExceptionPermission != null) {
                                    if (typeof object.combinedExceptionPermission !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.combinedExceptionPermission: object expected");
                                    message.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.combinedExceptionPermission);
                                }
                                if (object.exceptionPermissions) {
                                    if (typeof object.exceptionPermissions !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.exceptionPermissions: object expected");
                                    message.exceptionPermissions = {};
                                    for (var keys = Object.keys(object.exceptionPermissions), i = 0; i < keys.length; ++i) {
                                        if (typeof object.exceptionPermissions[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.exceptionPermissions: object expected");
                                        message.exceptionPermissions[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.exceptionPermissions[keys[i]]);
                                    }
                                }
                                if (object.combinedDeniedPrincipal != null) {
                                    if (typeof object.combinedDeniedPrincipal !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.combinedDeniedPrincipal: object expected");
                                    message.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.combinedDeniedPrincipal);
                                }
                                if (object.deniedPrincipals) {
                                    if (typeof object.deniedPrincipals !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.deniedPrincipals: object expected");
                                    message.deniedPrincipals = {};
                                    for (var keys = Object.keys(object.deniedPrincipals), i = 0; i < keys.length; ++i) {
                                        if (typeof object.deniedPrincipals[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.deniedPrincipals: object expected");
                                        message.deniedPrincipals[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.deniedPrincipals[keys[i]]);
                                    }
                                }
                                if (object.combinedExceptionPrincipal != null) {
                                    if (typeof object.combinedExceptionPrincipal !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.combinedExceptionPrincipal: object expected");
                                    message.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.combinedExceptionPrincipal);
                                }
                                if (object.exceptionPrincipals) {
                                    if (typeof object.exceptionPrincipals !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.exceptionPrincipals: object expected");
                                    message.exceptionPrincipals = {};
                                    for (var keys = Object.keys(object.exceptionPrincipals), i = 0; i < keys.length; ++i) {
                                        if (typeof object.exceptionPrincipals[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.exceptionPrincipals: object expected");
                                        message.exceptionPrincipals[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.exceptionPrincipals[keys[i]]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.condition != null) {
                                    if (typeof object.condition !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.condition: object expected");
                                    message.condition = $root.google.type.Expr.fromObject(object.condition);
                                }
                                if (object.conditionExplanation != null) {
                                    if (typeof object.conditionExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.conditionExplanation: object expected");
                                    message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.fromObject(object.conditionExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DenyRuleExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation} message DenyRuleExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DenyRuleExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.objects || options.defaults) {
                                    object.deniedPermissions = {};
                                    object.exceptionPermissions = {};
                                    object.deniedPrincipals = {};
                                    object.exceptionPrincipals = {};
                                }
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.combinedDeniedPermission = null;
                                    object.combinedExceptionPermission = null;
                                    object.combinedDeniedPrincipal = null;
                                    object.combinedExceptionPrincipal = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.condition = null;
                                    object.conditionExplanation = null;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.combinedDeniedPermission != null && message.hasOwnProperty("combinedDeniedPermission"))
                                    object.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.combinedDeniedPermission, options);
                                var keys2;
                                if (message.deniedPermissions && (keys2 = Object.keys(message.deniedPermissions)).length) {
                                    object.deniedPermissions = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.deniedPermissions[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.deniedPermissions[keys2[j]], options);
                                }
                                if (message.combinedExceptionPermission != null && message.hasOwnProperty("combinedExceptionPermission"))
                                    object.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.combinedExceptionPermission, options);
                                if (message.exceptionPermissions && (keys2 = Object.keys(message.exceptionPermissions)).length) {
                                    object.exceptionPermissions = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.exceptionPermissions[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.exceptionPermissions[keys2[j]], options);
                                }
                                if (message.combinedDeniedPrincipal != null && message.hasOwnProperty("combinedDeniedPrincipal"))
                                    object.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.combinedDeniedPrincipal, options);
                                if (message.deniedPrincipals && (keys2 = Object.keys(message.deniedPrincipals)).length) {
                                    object.deniedPrincipals = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.deniedPrincipals[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.deniedPrincipals[keys2[j]], options);
                                }
                                if (message.combinedExceptionPrincipal != null && message.hasOwnProperty("combinedExceptionPrincipal"))
                                    object.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.combinedExceptionPrincipal, options);
                                if (message.exceptionPrincipals && (keys2 = Object.keys(message.exceptionPrincipals)).length) {
                                    object.exceptionPrincipals = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.exceptionPrincipals[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.exceptionPrincipals[keys2[j]], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.condition != null && message.hasOwnProperty("condition"))
                                    object.condition = $root.google.type.Expr.toObject(message.condition, options);
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation"))
                                    object.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.toObject(message.conditionExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this DenyRuleExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DenyRuleExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for DenyRuleExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            DenyRuleExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation";
                            };
    
                            DenyRuleExplanation.AnnotatedPermissionMatching = (function() {
    
                                /**
                                 * Properties of an AnnotatedPermissionMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                                 * @interface IAnnotatedPermissionMatching
                                 * @property {google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState|null} [permissionMatchingState] AnnotatedPermissionMatching permissionMatchingState
                                 * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] AnnotatedPermissionMatching relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedPermissionMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                                 * @classdesc Represents an AnnotatedPermissionMatching.
                                 * @implements IAnnotatedPermissionMatching
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching=} [properties] Properties to set
                                 */
                                function AnnotatedPermissionMatching(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedPermissionMatching permissionMatchingState.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState} permissionMatchingState
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 */
                                AnnotatedPermissionMatching.prototype.permissionMatchingState = 0;
    
                                /**
                                 * AnnotatedPermissionMatching relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 */
                                AnnotatedPermissionMatching.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedPermissionMatching instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching instance
                                 */
                                AnnotatedPermissionMatching.create = function create(properties) {
                                    return new AnnotatedPermissionMatching(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedPermissionMatching message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching} message AnnotatedPermissionMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedPermissionMatching.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.permissionMatchingState != null && Object.hasOwnProperty.call(message, "permissionMatchingState"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.permissionMatchingState);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedPermissionMatching message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedPermissionMatching} message AnnotatedPermissionMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedPermissionMatching.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedPermissionMatching message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedPermissionMatching.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.permissionMatchingState = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedPermissionMatching message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedPermissionMatching.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedPermissionMatching message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedPermissionMatching.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.permissionMatchingState != null && message.hasOwnProperty("permissionMatchingState"))
                                        switch (message.permissionMatchingState) {
                                        default:
                                            return "permissionMatchingState: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedPermissionMatching message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 */
                                AnnotatedPermissionMatching.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching();
                                    switch (object.permissionMatchingState) {
                                    default:
                                        if (typeof object.permissionMatchingState === "number") {
                                            message.permissionMatchingState = object.permissionMatchingState;
                                            break;
                                        }
                                        break;
                                    case "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.permissionMatchingState = 0;
                                        break;
                                    case "PERMISSION_PATTERN_MATCHED":
                                    case 1:
                                        message.permissionMatchingState = 1;
                                        break;
                                    case "PERMISSION_PATTERN_NOT_MATCHED":
                                    case 2:
                                        message.permissionMatchingState = 2;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedPermissionMatching message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching} message AnnotatedPermissionMatching
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedPermissionMatching.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.permissionMatchingState = options.enums === String ? "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.permissionMatchingState != null && message.hasOwnProperty("permissionMatchingState"))
                                        object.permissionMatchingState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState[message.permissionMatchingState] === undefined ? message.permissionMatchingState : $root.google.cloud.policytroubleshooter.iam.v3.PermissionPatternMatchingState[message.permissionMatchingState] : message.permissionMatchingState;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedPermissionMatching to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedPermissionMatching.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedPermissionMatching
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedPermissionMatching.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedPermissionMatching";
                                };
    
                                return AnnotatedPermissionMatching;
                            })();
    
                            DenyRuleExplanation.AnnotatedDenyPrincipalMatching = (function() {
    
                                /**
                                 * Properties of an AnnotatedDenyPrincipalMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                                 * @interface IAnnotatedDenyPrincipalMatching
                                 * @property {google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState|null} [membership] AnnotatedDenyPrincipalMatching membership
                                 * @property {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance|null} [relevance] AnnotatedDenyPrincipalMatching relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedDenyPrincipalMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation
                                 * @classdesc Represents an AnnotatedDenyPrincipalMatching.
                                 * @implements IAnnotatedDenyPrincipalMatching
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching=} [properties] Properties to set
                                 */
                                function AnnotatedDenyPrincipalMatching(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedDenyPrincipalMatching membership.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState} membership
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.membership = 0;
    
                                /**
                                 * AnnotatedDenyPrincipalMatching relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedDenyPrincipalMatching instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching instance
                                 */
                                AnnotatedDenyPrincipalMatching.create = function create(properties) {
                                    return new AnnotatedDenyPrincipalMatching(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedDenyPrincipalMatching message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedDenyPrincipalMatching.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.membership);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedDenyPrincipalMatching message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedDenyPrincipalMatching.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedDenyPrincipalMatching message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedDenyPrincipalMatching.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.membership = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedDenyPrincipalMatching message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedDenyPrincipalMatching.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedDenyPrincipalMatching message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedDenyPrincipalMatching.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        switch (message.membership) {
                                        default:
                                            return "membership: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedDenyPrincipalMatching message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 */
                                AnnotatedDenyPrincipalMatching.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching();
                                    switch (object.membership) {
                                    default:
                                        if (typeof object.membership === "number") {
                                            message.membership = object.membership;
                                            break;
                                        }
                                        break;
                                    case "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.membership = 0;
                                        break;
                                    case "MEMBERSHIP_MATCHED":
                                    case 1:
                                        message.membership = 1;
                                        break;
                                    case "MEMBERSHIP_NOT_MATCHED":
                                    case 2:
                                        message.membership = 2;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_INFO":
                                    case 3:
                                        message.membership = 3;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_UNSUPPORTED":
                                    case 4:
                                        message.membership = 4;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedDenyPrincipalMatching message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedDenyPrincipalMatching.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.membership = options.enums === String ? "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        object.membership = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState[message.membership] === undefined ? message.membership : $root.google.cloud.policytroubleshooter.iam.v3.MembershipMatchingState[message.membership] : message.membership;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedDenyPrincipalMatching to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedDenyPrincipalMatching
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedDenyPrincipalMatching.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.DenyRuleExplanation.AnnotatedDenyPrincipalMatching";
                                };
    
                                return AnnotatedDenyPrincipalMatching;
                            })();
    
                            return DenyRuleExplanation;
                        })();
    
                        v3.ConditionExplanation = (function() {
    
                            /**
                             * Properties of a ConditionExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @interface IConditionExplanation
                             * @property {google.protobuf.IValue|null} [value] ConditionExplanation value
                             * @property {Array.<google.rpc.IStatus>|null} [errors] ConditionExplanation errors
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState>|null} [evaluationStates] ConditionExplanation evaluationStates
                             */
    
                            /**
                             * Constructs a new ConditionExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3
                             * @classdesc Represents a ConditionExplanation.
                             * @implements IConditionExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation=} [properties] Properties to set
                             */
                            function ConditionExplanation(properties) {
                                this.errors = [];
                                this.evaluationStates = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ConditionExplanation value.
                             * @member {google.protobuf.IValue|null|undefined} value
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.value = null;
    
                            /**
                             * ConditionExplanation errors.
                             * @member {Array.<google.rpc.IStatus>} errors
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.errors = $util.emptyArray;
    
                            /**
                             * ConditionExplanation evaluationStates.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState>} evaluationStates
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.evaluationStates = $util.emptyArray;
    
                            /**
                             * Creates a new ConditionExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation} ConditionExplanation instance
                             */
                            ConditionExplanation.create = function create(properties) {
                                return new ConditionExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified ConditionExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation} message ConditionExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    $root.google.protobuf.Value.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.evaluationStates != null && message.evaluationStates.length)
                                    for (var i = 0; i < message.evaluationStates.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.encode(message.evaluationStates[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.errors != null && message.errors.length)
                                    for (var i = 0; i < message.errors.length; ++i)
                                        $root.google.rpc.Status.encode(message.errors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ConditionExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.IConditionExplanation} message ConditionExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ConditionExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation} ConditionExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.errors && message.errors.length))
                                                message.errors = [];
                                            message.errors.push($root.google.rpc.Status.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.evaluationStates && message.evaluationStates.length))
                                                message.evaluationStates = [];
                                            message.evaluationStates.push($root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ConditionExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation} ConditionExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ConditionExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConditionExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.value != null && message.hasOwnProperty("value")) {
                                    var error = $root.google.protobuf.Value.verify(message.value);
                                    if (error)
                                        return "value." + error;
                                }
                                if (message.errors != null && message.hasOwnProperty("errors")) {
                                    if (!Array.isArray(message.errors))
                                        return "errors: array expected";
                                    for (var i = 0; i < message.errors.length; ++i) {
                                        var error = $root.google.rpc.Status.verify(message.errors[i]);
                                        if (error)
                                            return "errors." + error;
                                    }
                                }
                                if (message.evaluationStates != null && message.hasOwnProperty("evaluationStates")) {
                                    if (!Array.isArray(message.evaluationStates))
                                        return "evaluationStates: array expected";
                                    for (var i = 0; i < message.evaluationStates.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.verify(message.evaluationStates[i]);
                                        if (error)
                                            return "evaluationStates." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a ConditionExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation} ConditionExplanation
                             */
                            ConditionExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation();
                                if (object.value != null) {
                                    if (typeof object.value !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.value: object expected");
                                    message.value = $root.google.protobuf.Value.fromObject(object.value);
                                }
                                if (object.errors) {
                                    if (!Array.isArray(object.errors))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.errors: array expected");
                                    message.errors = [];
                                    for (var i = 0; i < object.errors.length; ++i) {
                                        if (typeof object.errors[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.errors: object expected");
                                        message.errors[i] = $root.google.rpc.Status.fromObject(object.errors[i]);
                                    }
                                }
                                if (object.evaluationStates) {
                                    if (!Array.isArray(object.evaluationStates))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.evaluationStates: array expected");
                                    message.evaluationStates = [];
                                    for (var i = 0; i < object.evaluationStates.length; ++i) {
                                        if (typeof object.evaluationStates[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.evaluationStates: object expected");
                                        message.evaluationStates[i] = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.fromObject(object.evaluationStates[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ConditionExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation} message ConditionExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConditionExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.evaluationStates = [];
                                    object.errors = [];
                                }
                                if (options.defaults)
                                    object.value = null;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = $root.google.protobuf.Value.toObject(message.value, options);
                                if (message.evaluationStates && message.evaluationStates.length) {
                                    object.evaluationStates = [];
                                    for (var j = 0; j < message.evaluationStates.length; ++j)
                                        object.evaluationStates[j] = $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.toObject(message.evaluationStates[j], options);
                                }
                                if (message.errors && message.errors.length) {
                                    object.errors = [];
                                    for (var j = 0; j < message.errors.length; ++j)
                                        object.errors[j] = $root.google.rpc.Status.toObject(message.errors[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ConditionExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConditionExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ConditionExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ConditionExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionExplanation";
                            };
    
                            ConditionExplanation.EvaluationState = (function() {
    
                                /**
                                 * Properties of an EvaluationState.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                                 * @interface IEvaluationState
                                 * @property {number|null} [start] EvaluationState start
                                 * @property {number|null} [end] EvaluationState end
                                 * @property {google.protobuf.IValue|null} [value] EvaluationState value
                                 * @property {Array.<google.rpc.IStatus>|null} [errors] EvaluationState errors
                                 */
    
                                /**
                                 * Constructs a new EvaluationState.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation
                                 * @classdesc Represents an EvaluationState.
                                 * @implements IEvaluationState
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState=} [properties] Properties to set
                                 */
                                function EvaluationState(properties) {
                                    this.errors = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * EvaluationState start.
                                 * @member {number} start
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.start = 0;
    
                                /**
                                 * EvaluationState end.
                                 * @member {number} end
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.end = 0;
    
                                /**
                                 * EvaluationState value.
                                 * @member {google.protobuf.IValue|null|undefined} value
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.value = null;
    
                                /**
                                 * EvaluationState errors.
                                 * @member {Array.<google.rpc.IStatus>} errors
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.errors = $util.emptyArray;
    
                                /**
                                 * Creates a new EvaluationState instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState} EvaluationState instance
                                 */
                                EvaluationState.create = function create(properties) {
                                    return new EvaluationState(properties);
                                };
    
                                /**
                                 * Encodes the specified EvaluationState message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState} message EvaluationState message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EvaluationState.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                        $root.google.protobuf.Value.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.errors != null && message.errors.length)
                                        for (var i = 0; i < message.errors.length; ++i)
                                            $root.google.rpc.Status.encode(message.errors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified EvaluationState message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.IEvaluationState} message EvaluationState message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EvaluationState.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an EvaluationState message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState} EvaluationState
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EvaluationState.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.start = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.end = reader.int32();
                                                break;
                                            }
                                        case 3: {
                                                message.value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 4: {
                                                if (!(message.errors && message.errors.length))
                                                    message.errors = [];
                                                message.errors.push($root.google.rpc.Status.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an EvaluationState message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState} EvaluationState
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EvaluationState.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an EvaluationState message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                EvaluationState.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.start != null && message.hasOwnProperty("start"))
                                        if (!$util.isInteger(message.start))
                                            return "start: integer expected";
                                    if (message.end != null && message.hasOwnProperty("end"))
                                        if (!$util.isInteger(message.end))
                                            return "end: integer expected";
                                    if (message.value != null && message.hasOwnProperty("value")) {
                                        var error = $root.google.protobuf.Value.verify(message.value);
                                        if (error)
                                            return "value." + error;
                                    }
                                    if (message.errors != null && message.hasOwnProperty("errors")) {
                                        if (!Array.isArray(message.errors))
                                            return "errors: array expected";
                                        for (var i = 0; i < message.errors.length; ++i) {
                                            var error = $root.google.rpc.Status.verify(message.errors[i]);
                                            if (error)
                                                return "errors." + error;
                                        }
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates an EvaluationState message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState} EvaluationState
                                 */
                                EvaluationState.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState();
                                    if (object.start != null)
                                        message.start = object.start | 0;
                                    if (object.end != null)
                                        message.end = object.end | 0;
                                    if (object.value != null) {
                                        if (typeof object.value !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.value: object expected");
                                        message.value = $root.google.protobuf.Value.fromObject(object.value);
                                    }
                                    if (object.errors) {
                                        if (!Array.isArray(object.errors))
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.errors: array expected");
                                        message.errors = [];
                                        for (var i = 0; i < object.errors.length; ++i) {
                                            if (typeof object.errors[i] !== "object")
                                                throw TypeError(".google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState.errors: object expected");
                                            message.errors[i] = $root.google.rpc.Status.fromObject(object.errors[i]);
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an EvaluationState message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState} message EvaluationState
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                EvaluationState.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.errors = [];
                                    if (options.defaults) {
                                        object.start = 0;
                                        object.end = 0;
                                        object.value = null;
                                    }
                                    if (message.start != null && message.hasOwnProperty("start"))
                                        object.start = message.start;
                                    if (message.end != null && message.hasOwnProperty("end"))
                                        object.end = message.end;
                                    if (message.value != null && message.hasOwnProperty("value"))
                                        object.value = $root.google.protobuf.Value.toObject(message.value, options);
                                    if (message.errors && message.errors.length) {
                                        object.errors = [];
                                        for (var j = 0; j < message.errors.length; ++j)
                                            object.errors[j] = $root.google.rpc.Status.toObject(message.errors[j], options);
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this EvaluationState to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                EvaluationState.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for EvaluationState
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                EvaluationState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3.ConditionExplanation.EvaluationState";
                                };
    
                                return EvaluationState;
                            })();
    
                            return ConditionExplanation;
                        })();
    
                        return v3;
                    })();
    
                    iam.v3beta = (function() {
    
                        /**
                         * Namespace v3beta.
                         * @memberof google.cloud.policytroubleshooter.iam
                         * @namespace
                         */
                        var v3beta = {};
    
                        v3beta.PolicyTroubleshooter = (function() {
    
                            /**
                             * Constructs a new PolicyTroubleshooter service.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a PolicyTroubleshooter
                             * @extends $protobuf.rpc.Service
                             * @constructor
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             */
                            function PolicyTroubleshooter(rpcImpl, requestDelimited, responseDelimited) {
                                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                            }
    
                            (PolicyTroubleshooter.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = PolicyTroubleshooter;
    
                            /**
                             * Creates new PolicyTroubleshooter service using the specified rpc implementation.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter
                             * @static
                             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                             * @returns {PolicyTroubleshooter} RPC service. Useful where requests and/or responses are streamed.
                             */
                            PolicyTroubleshooter.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                                return new this(rpcImpl, requestDelimited, responseDelimited);
                            };
    
                            /**
                             * Callback as used by {@link google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter|troubleshootIamPolicy}.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter
                             * @typedef TroubleshootIamPolicyCallback
                             * @type {function}
                             * @param {Error|null} error Error, if any
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} [response] TroubleshootIamPolicyResponse
                             */
    
                            /**
                             * Calls TroubleshootIamPolicy.
                             * @function troubleshootIamPolicy
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter
                             * @instance
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest} request TroubleshootIamPolicyRequest message or plain object
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter.TroubleshootIamPolicyCallback} callback Node-style callback called with the error, if any, and TroubleshootIamPolicyResponse
                             * @returns {undefined}
                             * @variation 1
                             */
                            Object.defineProperty(PolicyTroubleshooter.prototype.troubleshootIamPolicy = function troubleshootIamPolicy(request, callback) {
                                return this.rpcCall(troubleshootIamPolicy, $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest, $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse, request, callback);
                            }, "name", { value: "TroubleshootIamPolicy" });
    
                            /**
                             * Calls TroubleshootIamPolicy.
                             * @function troubleshootIamPolicy
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.PolicyTroubleshooter
                             * @instance
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest} request TroubleshootIamPolicyRequest message or plain object
                             * @returns {Promise<google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse>} Promise
                             * @variation 2
                             */
    
                            return PolicyTroubleshooter;
                        })();
    
                        /**
                         * AllowAccessState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState
                         * @enum {number}
                         * @property {number} ALLOW_ACCESS_STATE_UNSPECIFIED=0 ALLOW_ACCESS_STATE_UNSPECIFIED value
                         * @property {number} ALLOW_ACCESS_STATE_GRANTED=1 ALLOW_ACCESS_STATE_GRANTED value
                         * @property {number} ALLOW_ACCESS_STATE_NOT_GRANTED=2 ALLOW_ACCESS_STATE_NOT_GRANTED value
                         * @property {number} ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL=3 ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL value
                         * @property {number} ALLOW_ACCESS_STATE_UNKNOWN_INFO=4 ALLOW_ACCESS_STATE_UNKNOWN_INFO value
                         */
                        v3beta.AllowAccessState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ALLOW_ACCESS_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "ALLOW_ACCESS_STATE_GRANTED"] = 1;
                            values[valuesById[2] = "ALLOW_ACCESS_STATE_NOT_GRANTED"] = 2;
                            values[valuesById[3] = "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL"] = 3;
                            values[valuesById[4] = "ALLOW_ACCESS_STATE_UNKNOWN_INFO"] = 4;
                            return values;
                        })();
    
                        /**
                         * DenyAccessState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState
                         * @enum {number}
                         * @property {number} DENY_ACCESS_STATE_UNSPECIFIED=0 DENY_ACCESS_STATE_UNSPECIFIED value
                         * @property {number} DENY_ACCESS_STATE_DENIED=1 DENY_ACCESS_STATE_DENIED value
                         * @property {number} DENY_ACCESS_STATE_NOT_DENIED=2 DENY_ACCESS_STATE_NOT_DENIED value
                         * @property {number} DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL=3 DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL value
                         * @property {number} DENY_ACCESS_STATE_UNKNOWN_INFO=4 DENY_ACCESS_STATE_UNKNOWN_INFO value
                         */
                        v3beta.DenyAccessState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DENY_ACCESS_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "DENY_ACCESS_STATE_DENIED"] = 1;
                            values[valuesById[2] = "DENY_ACCESS_STATE_NOT_DENIED"] = 2;
                            values[valuesById[3] = "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL"] = 3;
                            values[valuesById[4] = "DENY_ACCESS_STATE_UNKNOWN_INFO"] = 4;
                            return values;
                        })();
    
                        /**
                         * RolePermissionInclusionState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.RolePermissionInclusionState
                         * @enum {number}
                         * @property {number} ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED=0 ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED value
                         * @property {number} ROLE_PERMISSION_INCLUDED=1 ROLE_PERMISSION_INCLUDED value
                         * @property {number} ROLE_PERMISSION_NOT_INCLUDED=2 ROLE_PERMISSION_NOT_INCLUDED value
                         * @property {number} ROLE_PERMISSION_UNKNOWN_INFO=3 ROLE_PERMISSION_UNKNOWN_INFO value
                         */
                        v3beta.RolePermissionInclusionState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "ROLE_PERMISSION_INCLUDED"] = 1;
                            values[valuesById[2] = "ROLE_PERMISSION_NOT_INCLUDED"] = 2;
                            values[valuesById[3] = "ROLE_PERMISSION_UNKNOWN_INFO"] = 3;
                            return values;
                        })();
    
                        /**
                         * PermissionPatternMatchingState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.PermissionPatternMatchingState
                         * @enum {number}
                         * @property {number} PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED=0 PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED value
                         * @property {number} PERMISSION_PATTERN_MATCHED=1 PERMISSION_PATTERN_MATCHED value
                         * @property {number} PERMISSION_PATTERN_NOT_MATCHED=2 PERMISSION_PATTERN_NOT_MATCHED value
                         */
                        v3beta.PermissionPatternMatchingState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PERMISSION_PATTERN_MATCHED"] = 1;
                            values[valuesById[2] = "PERMISSION_PATTERN_NOT_MATCHED"] = 2;
                            return values;
                        })();
    
                        /**
                         * MembershipMatchingState enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState
                         * @enum {number}
                         * @property {number} MEMBERSHIP_MATCHING_STATE_UNSPECIFIED=0 MEMBERSHIP_MATCHING_STATE_UNSPECIFIED value
                         * @property {number} MEMBERSHIP_MATCHED=1 MEMBERSHIP_MATCHED value
                         * @property {number} MEMBERSHIP_NOT_MATCHED=2 MEMBERSHIP_NOT_MATCHED value
                         * @property {number} MEMBERSHIP_UNKNOWN_INFO=3 MEMBERSHIP_UNKNOWN_INFO value
                         * @property {number} MEMBERSHIP_UNKNOWN_UNSUPPORTED=4 MEMBERSHIP_UNKNOWN_UNSUPPORTED value
                         */
                        v3beta.MembershipMatchingState = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MEMBERSHIP_MATCHED"] = 1;
                            values[valuesById[2] = "MEMBERSHIP_NOT_MATCHED"] = 2;
                            values[valuesById[3] = "MEMBERSHIP_UNKNOWN_INFO"] = 3;
                            values[valuesById[4] = "MEMBERSHIP_UNKNOWN_UNSUPPORTED"] = 4;
                            return values;
                        })();
    
                        /**
                         * HeuristicRelevance enum.
                         * @name google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance
                         * @enum {number}
                         * @property {number} HEURISTIC_RELEVANCE_UNSPECIFIED=0 HEURISTIC_RELEVANCE_UNSPECIFIED value
                         * @property {number} HEURISTIC_RELEVANCE_NORMAL=1 HEURISTIC_RELEVANCE_NORMAL value
                         * @property {number} HEURISTIC_RELEVANCE_HIGH=2 HEURISTIC_RELEVANCE_HIGH value
                         */
                        v3beta.HeuristicRelevance = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "HEURISTIC_RELEVANCE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "HEURISTIC_RELEVANCE_NORMAL"] = 1;
                            values[valuesById[2] = "HEURISTIC_RELEVANCE_HIGH"] = 2;
                            return values;
                        })();
    
                        v3beta.TroubleshootIamPolicyRequest = (function() {
    
                            /**
                             * Properties of a TroubleshootIamPolicyRequest.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface ITroubleshootIamPolicyRequest
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple|null} [accessTuple] TroubleshootIamPolicyRequest accessTuple
                             */
    
                            /**
                             * Constructs a new TroubleshootIamPolicyRequest.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a TroubleshootIamPolicyRequest.
                             * @implements ITroubleshootIamPolicyRequest
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest=} [properties] Properties to set
                             */
                            function TroubleshootIamPolicyRequest(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TroubleshootIamPolicyRequest accessTuple.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple|null|undefined} accessTuple
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @instance
                             */
                            TroubleshootIamPolicyRequest.prototype.accessTuple = null;
    
                            /**
                             * Creates a new TroubleshootIamPolicyRequest instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest instance
                             */
                            TroubleshootIamPolicyRequest.create = function create(properties) {
                                return new TroubleshootIamPolicyRequest(properties);
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyRequest message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyRequest.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.accessTuple != null && Object.hasOwnProperty.call(message, "accessTuple"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.encode(message.accessTuple, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyRequest message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyRequest message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyRequest.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyRequest message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TroubleshootIamPolicyRequest message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TroubleshootIamPolicyRequest.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.verify(message.accessTuple);
                                    if (error)
                                        return "accessTuple." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TroubleshootIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest} TroubleshootIamPolicyRequest
                             */
                            TroubleshootIamPolicyRequest.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest();
                                if (object.accessTuple != null) {
                                    if (typeof object.accessTuple !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest.accessTuple: object expected");
                                    message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.fromObject(object.accessTuple);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TroubleshootIamPolicyRequest message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest} message TroubleshootIamPolicyRequest
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TroubleshootIamPolicyRequest.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.accessTuple = null;
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple"))
                                    object.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.toObject(message.accessTuple, options);
                                return object;
                            };
    
                            /**
                             * Converts this TroubleshootIamPolicyRequest to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TroubleshootIamPolicyRequest.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TroubleshootIamPolicyRequest
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TroubleshootIamPolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyRequest";
                            };
    
                            return TroubleshootIamPolicyRequest;
                        })();
    
                        v3beta.TroubleshootIamPolicyResponse = (function() {
    
                            /**
                             * Properties of a TroubleshootIamPolicyResponse.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface ITroubleshootIamPolicyResponse
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.OverallAccessState|null} [overallAccessState] TroubleshootIamPolicyResponse overallAccessState
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple|null} [accessTuple] TroubleshootIamPolicyResponse accessTuple
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation|null} [allowPolicyExplanation] TroubleshootIamPolicyResponse allowPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation|null} [denyPolicyExplanation] TroubleshootIamPolicyResponse denyPolicyExplanation
                             */
    
                            /**
                             * Constructs a new TroubleshootIamPolicyResponse.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a TroubleshootIamPolicyResponse.
                             * @implements ITroubleshootIamPolicyResponse
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyResponse=} [properties] Properties to set
                             */
                            function TroubleshootIamPolicyResponse(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TroubleshootIamPolicyResponse overallAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.OverallAccessState} overallAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.overallAccessState = 0;
    
                            /**
                             * TroubleshootIamPolicyResponse accessTuple.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple|null|undefined} accessTuple
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.accessTuple = null;
    
                            /**
                             * TroubleshootIamPolicyResponse allowPolicyExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation|null|undefined} allowPolicyExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.allowPolicyExplanation = null;
    
                            /**
                             * TroubleshootIamPolicyResponse denyPolicyExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation|null|undefined} denyPolicyExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @instance
                             */
                            TroubleshootIamPolicyResponse.prototype.denyPolicyExplanation = null;
    
                            /**
                             * Creates a new TroubleshootIamPolicyResponse instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyResponse=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse instance
                             */
                            TroubleshootIamPolicyResponse.create = function create(properties) {
                                return new TroubleshootIamPolicyResponse(properties);
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyResponse message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.overallAccessState != null && Object.hasOwnProperty.call(message, "overallAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.overallAccessState);
                                if (message.accessTuple != null && Object.hasOwnProperty.call(message, "accessTuple"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.encode(message.accessTuple, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.allowPolicyExplanation != null && Object.hasOwnProperty.call(message, "allowPolicyExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.encode(message.allowPolicyExplanation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.denyPolicyExplanation != null && Object.hasOwnProperty.call(message, "denyPolicyExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.encode(message.denyPolicyExplanation, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TroubleshootIamPolicyResponse message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ITroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TroubleshootIamPolicyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.overallAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            message.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 4: {
                                            message.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TroubleshootIamPolicyResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TroubleshootIamPolicyResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TroubleshootIamPolicyResponse message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TroubleshootIamPolicyResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.overallAccessState != null && message.hasOwnProperty("overallAccessState"))
                                    switch (message.overallAccessState) {
                                    default:
                                        return "overallAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.verify(message.accessTuple);
                                    if (error)
                                        return "accessTuple." + error;
                                }
                                if (message.allowPolicyExplanation != null && message.hasOwnProperty("allowPolicyExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.verify(message.allowPolicyExplanation);
                                    if (error)
                                        return "allowPolicyExplanation." + error;
                                }
                                if (message.denyPolicyExplanation != null && message.hasOwnProperty("denyPolicyExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.verify(message.denyPolicyExplanation);
                                    if (error)
                                        return "denyPolicyExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TroubleshootIamPolicyResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} TroubleshootIamPolicyResponse
                             */
                            TroubleshootIamPolicyResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse();
                                switch (object.overallAccessState) {
                                default:
                                    if (typeof object.overallAccessState === "number") {
                                        message.overallAccessState = object.overallAccessState;
                                        break;
                                    }
                                    break;
                                case "OVERALL_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.overallAccessState = 0;
                                    break;
                                case "CAN_ACCESS":
                                case 1:
                                    message.overallAccessState = 1;
                                    break;
                                case "CANNOT_ACCESS":
                                case 2:
                                    message.overallAccessState = 2;
                                    break;
                                case "UNKNOWN_INFO":
                                case 3:
                                    message.overallAccessState = 3;
                                    break;
                                case "UNKNOWN_CONDITIONAL":
                                case 4:
                                    message.overallAccessState = 4;
                                    break;
                                }
                                if (object.accessTuple != null) {
                                    if (typeof object.accessTuple !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.accessTuple: object expected");
                                    message.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.fromObject(object.accessTuple);
                                }
                                if (object.allowPolicyExplanation != null) {
                                    if (typeof object.allowPolicyExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.allowPolicyExplanation: object expected");
                                    message.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.fromObject(object.allowPolicyExplanation);
                                }
                                if (object.denyPolicyExplanation != null) {
                                    if (typeof object.denyPolicyExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.denyPolicyExplanation: object expected");
                                    message.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.fromObject(object.denyPolicyExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TroubleshootIamPolicyResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse} message TroubleshootIamPolicyResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TroubleshootIamPolicyResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.overallAccessState = options.enums === String ? "OVERALL_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.accessTuple = null;
                                    object.allowPolicyExplanation = null;
                                    object.denyPolicyExplanation = null;
                                }
                                if (message.overallAccessState != null && message.hasOwnProperty("overallAccessState"))
                                    object.overallAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.OverallAccessState[message.overallAccessState] === undefined ? message.overallAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.OverallAccessState[message.overallAccessState] : message.overallAccessState;
                                if (message.accessTuple != null && message.hasOwnProperty("accessTuple"))
                                    object.accessTuple = $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.toObject(message.accessTuple, options);
                                if (message.allowPolicyExplanation != null && message.hasOwnProperty("allowPolicyExplanation"))
                                    object.allowPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.toObject(message.allowPolicyExplanation, options);
                                if (message.denyPolicyExplanation != null && message.hasOwnProperty("denyPolicyExplanation"))
                                    object.denyPolicyExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.toObject(message.denyPolicyExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this TroubleshootIamPolicyResponse to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TroubleshootIamPolicyResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TroubleshootIamPolicyResponse
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TroubleshootIamPolicyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse";
                            };
    
                            /**
                             * OverallAccessState enum.
                             * @name google.cloud.policytroubleshooter.iam.v3beta.TroubleshootIamPolicyResponse.OverallAccessState
                             * @enum {number}
                             * @property {number} OVERALL_ACCESS_STATE_UNSPECIFIED=0 OVERALL_ACCESS_STATE_UNSPECIFIED value
                             * @property {number} CAN_ACCESS=1 CAN_ACCESS value
                             * @property {number} CANNOT_ACCESS=2 CANNOT_ACCESS value
                             * @property {number} UNKNOWN_INFO=3 UNKNOWN_INFO value
                             * @property {number} UNKNOWN_CONDITIONAL=4 UNKNOWN_CONDITIONAL value
                             */
                            TroubleshootIamPolicyResponse.OverallAccessState = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "OVERALL_ACCESS_STATE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CAN_ACCESS"] = 1;
                                values[valuesById[2] = "CANNOT_ACCESS"] = 2;
                                values[valuesById[3] = "UNKNOWN_INFO"] = 3;
                                values[valuesById[4] = "UNKNOWN_CONDITIONAL"] = 4;
                                return values;
                            })();
    
                            return TroubleshootIamPolicyResponse;
                        })();
    
                        v3beta.AccessTuple = (function() {
    
                            /**
                             * Properties of an AccessTuple.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IAccessTuple
                             * @property {string|null} [principal] AccessTuple principal
                             * @property {string|null} [fullResourceName] AccessTuple fullResourceName
                             * @property {string|null} [permission] AccessTuple permission
                             * @property {string|null} [permissionFqdn] AccessTuple permissionFqdn
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext|null} [conditionContext] AccessTuple conditionContext
                             */
    
                            /**
                             * Constructs a new AccessTuple.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an AccessTuple.
                             * @implements IAccessTuple
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple=} [properties] Properties to set
                             */
                            function AccessTuple(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AccessTuple principal.
                             * @member {string} principal
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.principal = "";
    
                            /**
                             * AccessTuple fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.fullResourceName = "";
    
                            /**
                             * AccessTuple permission.
                             * @member {string} permission
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.permission = "";
    
                            /**
                             * AccessTuple permissionFqdn.
                             * @member {string} permissionFqdn
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.permissionFqdn = "";
    
                            /**
                             * AccessTuple conditionContext.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext|null|undefined} conditionContext
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             */
                            AccessTuple.prototype.conditionContext = null;
    
                            /**
                             * Creates a new AccessTuple instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AccessTuple} AccessTuple instance
                             */
                            AccessTuple.create = function create(properties) {
                                return new AccessTuple(properties);
                            };
    
                            /**
                             * Encodes the specified AccessTuple message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple} message AccessTuple message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AccessTuple.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.principal != null && Object.hasOwnProperty.call(message, "principal"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.principal);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.permission != null && Object.hasOwnProperty.call(message, "permission"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.permission);
                                if (message.permissionFqdn != null && Object.hasOwnProperty.call(message, "permissionFqdn"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.permissionFqdn);
                                if (message.conditionContext != null && Object.hasOwnProperty.call(message, "conditionContext"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.encode(message.conditionContext, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AccessTuple message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAccessTuple} message AccessTuple message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AccessTuple.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AccessTuple message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AccessTuple} AccessTuple
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AccessTuple.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.principal = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.permission = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.permissionFqdn = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AccessTuple message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AccessTuple} AccessTuple
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AccessTuple.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AccessTuple message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AccessTuple.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.principal != null && message.hasOwnProperty("principal"))
                                    if (!$util.isString(message.principal))
                                        return "principal: string expected";
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.permission != null && message.hasOwnProperty("permission"))
                                    if (!$util.isString(message.permission))
                                        return "permission: string expected";
                                if (message.permissionFqdn != null && message.hasOwnProperty("permissionFqdn"))
                                    if (!$util.isString(message.permissionFqdn))
                                        return "permissionFqdn: string expected";
                                if (message.conditionContext != null && message.hasOwnProperty("conditionContext")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.verify(message.conditionContext);
                                    if (error)
                                        return "conditionContext." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an AccessTuple message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AccessTuple} AccessTuple
                             */
                            AccessTuple.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AccessTuple();
                                if (object.principal != null)
                                    message.principal = String(object.principal);
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.permission != null)
                                    message.permission = String(object.permission);
                                if (object.permissionFqdn != null)
                                    message.permissionFqdn = String(object.permissionFqdn);
                                if (object.conditionContext != null) {
                                    if (typeof object.conditionContext !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AccessTuple.conditionContext: object expected");
                                    message.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.fromObject(object.conditionContext);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AccessTuple message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.AccessTuple} message AccessTuple
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AccessTuple.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.principal = "";
                                    object.fullResourceName = "";
                                    object.permission = "";
                                    object.permissionFqdn = "";
                                    object.conditionContext = null;
                                }
                                if (message.principal != null && message.hasOwnProperty("principal"))
                                    object.principal = message.principal;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.permission != null && message.hasOwnProperty("permission"))
                                    object.permission = message.permission;
                                if (message.permissionFqdn != null && message.hasOwnProperty("permissionFqdn"))
                                    object.permissionFqdn = message.permissionFqdn;
                                if (message.conditionContext != null && message.hasOwnProperty("conditionContext"))
                                    object.conditionContext = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.toObject(message.conditionContext, options);
                                return object;
                            };
    
                            /**
                             * Converts this AccessTuple to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AccessTuple.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AccessTuple
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AccessTuple
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AccessTuple.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.AccessTuple";
                            };
    
                            return AccessTuple;
                        })();
    
                        v3beta.ConditionContext = (function() {
    
                            /**
                             * Properties of a ConditionContext.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IConditionContext
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource|null} [resource] ConditionContext resource
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer|null} [destination] ConditionContext destination
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest|null} [request] ConditionContext request
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag>|null} [effectiveTags] ConditionContext effectiveTags
                             */
    
                            /**
                             * Constructs a new ConditionContext.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a ConditionContext.
                             * @implements IConditionContext
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext=} [properties] Properties to set
                             */
                            function ConditionContext(properties) {
                                this.effectiveTags = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ConditionContext resource.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource|null|undefined} resource
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.resource = null;
    
                            /**
                             * ConditionContext destination.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer|null|undefined} destination
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.destination = null;
    
                            /**
                             * ConditionContext request.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest|null|undefined} request
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.request = null;
    
                            /**
                             * ConditionContext effectiveTags.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag>} effectiveTags
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @instance
                             */
                            ConditionContext.prototype.effectiveTags = $util.emptyArray;
    
                            /**
                             * Creates a new ConditionContext instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext} ConditionContext instance
                             */
                            ConditionContext.create = function create(properties) {
                                return new ConditionContext(properties);
                            };
    
                            /**
                             * Encodes the specified ConditionContext message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext} message ConditionContext message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionContext.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.encode(message.destination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.encode(message.request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.effectiveTags != null && message.effectiveTags.length)
                                    for (var i = 0; i < message.effectiveTags.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.encode(message.effectiveTags[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ConditionContext message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionContext} message ConditionContext message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionContext.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ConditionContext message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext} ConditionContext
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionContext.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.resource = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.destination = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            message.request = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 4: {
                                            if (!(message.effectiveTags && message.effectiveTags.length))
                                                message.effectiveTags = [];
                                            message.effectiveTags.push($root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ConditionContext message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext} ConditionContext
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionContext.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ConditionContext message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConditionContext.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.resource != null && message.hasOwnProperty("resource")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.verify(message.resource);
                                    if (error)
                                        return "resource." + error;
                                }
                                if (message.destination != null && message.hasOwnProperty("destination")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.verify(message.destination);
                                    if (error)
                                        return "destination." + error;
                                }
                                if (message.request != null && message.hasOwnProperty("request")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.verify(message.request);
                                    if (error)
                                        return "request." + error;
                                }
                                if (message.effectiveTags != null && message.hasOwnProperty("effectiveTags")) {
                                    if (!Array.isArray(message.effectiveTags))
                                        return "effectiveTags: array expected";
                                    for (var i = 0; i < message.effectiveTags.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.verify(message.effectiveTags[i]);
                                        if (error)
                                            return "effectiveTags." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a ConditionContext message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext} ConditionContext
                             */
                            ConditionContext.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext();
                                if (object.resource != null) {
                                    if (typeof object.resource !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.resource: object expected");
                                    message.resource = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.fromObject(object.resource);
                                }
                                if (object.destination != null) {
                                    if (typeof object.destination !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.destination: object expected");
                                    message.destination = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.fromObject(object.destination);
                                }
                                if (object.request != null) {
                                    if (typeof object.request !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.request: object expected");
                                    message.request = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.fromObject(object.request);
                                }
                                if (object.effectiveTags) {
                                    if (!Array.isArray(object.effectiveTags))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.effectiveTags: array expected");
                                    message.effectiveTags = [];
                                    for (var i = 0; i < object.effectiveTags.length; ++i) {
                                        if (typeof object.effectiveTags[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.effectiveTags: object expected");
                                        message.effectiveTags[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.fromObject(object.effectiveTags[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ConditionContext message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext} message ConditionContext
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConditionContext.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.effectiveTags = [];
                                if (options.defaults) {
                                    object.resource = null;
                                    object.destination = null;
                                    object.request = null;
                                }
                                if (message.resource != null && message.hasOwnProperty("resource"))
                                    object.resource = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.toObject(message.resource, options);
                                if (message.destination != null && message.hasOwnProperty("destination"))
                                    object.destination = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.toObject(message.destination, options);
                                if (message.request != null && message.hasOwnProperty("request"))
                                    object.request = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.toObject(message.request, options);
                                if (message.effectiveTags && message.effectiveTags.length) {
                                    object.effectiveTags = [];
                                    for (var j = 0; j < message.effectiveTags.length; ++j)
                                        object.effectiveTags[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.toObject(message.effectiveTags[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ConditionContext to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConditionContext.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ConditionContext
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ConditionContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionContext";
                            };
    
                            ConditionContext.Resource = (function() {
    
                                /**
                                 * Properties of a Resource.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @interface IResource
                                 * @property {string|null} [service] Resource service
                                 * @property {string|null} [name] Resource name
                                 * @property {string|null} [type] Resource type
                                 */
    
                                /**
                                 * Constructs a new Resource.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @classdesc Represents a Resource.
                                 * @implements IResource
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource=} [properties] Properties to set
                                 */
                                function Resource(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Resource service.
                                 * @member {string} service
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.service = "";
    
                                /**
                                 * Resource name.
                                 * @member {string} name
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.name = "";
    
                                /**
                                 * Resource type.
                                 * @member {string} type
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @instance
                                 */
                                Resource.prototype.type = "";
    
                                /**
                                 * Creates a new Resource instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource} Resource instance
                                 */
                                Resource.create = function create(properties) {
                                    return new Resource(properties);
                                };
    
                                /**
                                 * Encodes the specified Resource message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource} message Resource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Resource message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IResource} message Resource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Resource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource} Resource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.service = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.name = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.type = reader.string();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Resource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource} Resource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Resource message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Resource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.service != null && message.hasOwnProperty("service"))
                                        if (!$util.isString(message.service))
                                            return "service: string expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isString(message.type))
                                            return "type: string expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource} Resource
                                 */
                                Resource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource();
                                    if (object.service != null)
                                        message.service = String(object.service);
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.type != null)
                                        message.type = String(object.type);
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Resource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource} message Resource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Resource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.service = "";
                                        object.name = "";
                                        object.type = "";
                                    }
                                    if (message.service != null && message.hasOwnProperty("service"))
                                        object.service = message.service;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    return object;
                                };
    
                                /**
                                 * Converts this Resource to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Resource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Resource
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Resource";
                                };
    
                                return Resource;
                            })();
    
                            ConditionContext.Peer = (function() {
    
                                /**
                                 * Properties of a Peer.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @interface IPeer
                                 * @property {string|null} [ip] Peer ip
                                 * @property {number|Long|null} [port] Peer port
                                 */
    
                                /**
                                 * Constructs a new Peer.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @classdesc Represents a Peer.
                                 * @implements IPeer
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer=} [properties] Properties to set
                                 */
                                function Peer(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Peer ip.
                                 * @member {string} ip
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @instance
                                 */
                                Peer.prototype.ip = "";
    
                                /**
                                 * Peer port.
                                 * @member {number|Long} port
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @instance
                                 */
                                Peer.prototype.port = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                                /**
                                 * Creates a new Peer instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer} Peer instance
                                 */
                                Peer.create = function create(properties) {
                                    return new Peer(properties);
                                };
    
                                /**
                                 * Encodes the specified Peer message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer} message Peer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Peer.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
                                    if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.port);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Peer message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IPeer} message Peer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Peer.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Peer message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer} Peer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Peer.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.ip = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.port = reader.int64();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Peer message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer} Peer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Peer.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Peer message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Peer.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        if (!$util.isString(message.ip))
                                            return "ip: string expected";
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (!$util.isInteger(message.port) && !(message.port && $util.isInteger(message.port.low) && $util.isInteger(message.port.high)))
                                            return "port: integer|Long expected";
                                    return null;
                                };
    
                                /**
                                 * Creates a Peer message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer} Peer
                                 */
                                Peer.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer();
                                    if (object.ip != null)
                                        message.ip = String(object.ip);
                                    if (object.port != null)
                                        if ($util.Long)
                                            (message.port = $util.Long.fromValue(object.port)).unsigned = false;
                                        else if (typeof object.port === "string")
                                            message.port = parseInt(object.port, 10);
                                        else if (typeof object.port === "number")
                                            message.port = object.port;
                                        else if (typeof object.port === "object")
                                            message.port = new $util.LongBits(object.port.low >>> 0, object.port.high >>> 0).toNumber();
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Peer message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer} message Peer
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Peer.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.ip = "";
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.port = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.port = options.longs === String ? "0" : 0;
                                    }
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        object.ip = message.ip;
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (typeof message.port === "number")
                                            object.port = options.longs === String ? String(message.port) : message.port;
                                        else
                                            object.port = options.longs === String ? $util.Long.prototype.toString.call(message.port) : options.longs === Number ? new $util.LongBits(message.port.low >>> 0, message.port.high >>> 0).toNumber() : message.port;
                                    return object;
                                };
    
                                /**
                                 * Converts this Peer to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Peer.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Peer
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Peer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Peer";
                                };
    
                                return Peer;
                            })();
    
                            ConditionContext.Request = (function() {
    
                                /**
                                 * Properties of a Request.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @interface IRequest
                                 * @property {google.protobuf.ITimestamp|null} [receiveTime] Request receiveTime
                                 */
    
                                /**
                                 * Constructs a new Request.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @classdesc Represents a Request.
                                 * @implements IRequest
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest=} [properties] Properties to set
                                 */
                                function Request(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Request receiveTime.
                                 * @member {google.protobuf.ITimestamp|null|undefined} receiveTime
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @instance
                                 */
                                Request.prototype.receiveTime = null;
    
                                /**
                                 * Creates a new Request instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request} Request instance
                                 */
                                Request.create = function create(properties) {
                                    return new Request(properties);
                                };
    
                                /**
                                 * Encodes the specified Request message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.receiveTime != null && Object.hasOwnProperty.call(message, "receiveTime"))
                                        $root.google.protobuf.Timestamp.encode(message.receiveTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Request message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IRequest} message Request message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Request.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Request message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.receiveTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Request message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request} Request
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Request.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Request message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Request.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.receiveTime != null && message.hasOwnProperty("receiveTime")) {
                                        var error = $root.google.protobuf.Timestamp.verify(message.receiveTime);
                                        if (error)
                                            return "receiveTime." + error;
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request} Request
                                 */
                                Request.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request();
                                    if (object.receiveTime != null) {
                                        if (typeof object.receiveTime !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request.receiveTime: object expected");
                                        message.receiveTime = $root.google.protobuf.Timestamp.fromObject(object.receiveTime);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request} message Request
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Request.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.receiveTime = null;
                                    if (message.receiveTime != null && message.hasOwnProperty("receiveTime"))
                                        object.receiveTime = $root.google.protobuf.Timestamp.toObject(message.receiveTime, options);
                                    return object;
                                };
    
                                /**
                                 * Converts this Request to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Request.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Request
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Request.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.Request";
                                };
    
                                return Request;
                            })();
    
                            ConditionContext.EffectiveTag = (function() {
    
                                /**
                                 * Properties of an EffectiveTag.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @interface IEffectiveTag
                                 * @property {string|null} [tagValue] EffectiveTag tagValue
                                 * @property {string|null} [namespacedTagValue] EffectiveTag namespacedTagValue
                                 * @property {string|null} [tagKey] EffectiveTag tagKey
                                 * @property {string|null} [namespacedTagKey] EffectiveTag namespacedTagKey
                                 * @property {string|null} [tagKeyParentName] EffectiveTag tagKeyParentName
                                 * @property {boolean|null} [inherited] EffectiveTag inherited
                                 */
    
                                /**
                                 * Constructs a new EffectiveTag.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext
                                 * @classdesc Represents an EffectiveTag.
                                 * @implements IEffectiveTag
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag=} [properties] Properties to set
                                 */
                                function EffectiveTag(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * EffectiveTag tagValue.
                                 * @member {string} tagValue
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagValue = "";
    
                                /**
                                 * EffectiveTag namespacedTagValue.
                                 * @member {string} namespacedTagValue
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.namespacedTagValue = "";
    
                                /**
                                 * EffectiveTag tagKey.
                                 * @member {string} tagKey
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagKey = "";
    
                                /**
                                 * EffectiveTag namespacedTagKey.
                                 * @member {string} namespacedTagKey
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.namespacedTagKey = "";
    
                                /**
                                 * EffectiveTag tagKeyParentName.
                                 * @member {string} tagKeyParentName
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.tagKeyParentName = "";
    
                                /**
                                 * EffectiveTag inherited.
                                 * @member {boolean} inherited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 */
                                EffectiveTag.prototype.inherited = false;
    
                                /**
                                 * Creates a new EffectiveTag instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag} EffectiveTag instance
                                 */
                                EffectiveTag.create = function create(properties) {
                                    return new EffectiveTag(properties);
                                };
    
                                /**
                                 * Encodes the specified EffectiveTag message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag} message EffectiveTag message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EffectiveTag.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.tagValue != null && Object.hasOwnProperty.call(message, "tagValue"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tagValue);
                                    if (message.namespacedTagValue != null && Object.hasOwnProperty.call(message, "namespacedTagValue"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.namespacedTagValue);
                                    if (message.tagKey != null && Object.hasOwnProperty.call(message, "tagKey"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.tagKey);
                                    if (message.namespacedTagKey != null && Object.hasOwnProperty.call(message, "namespacedTagKey"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.namespacedTagKey);
                                    if (message.inherited != null && Object.hasOwnProperty.call(message, "inherited"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.inherited);
                                    if (message.tagKeyParentName != null && Object.hasOwnProperty.call(message, "tagKeyParentName"))
                                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.tagKeyParentName);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified EffectiveTag message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.IEffectiveTag} message EffectiveTag message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EffectiveTag.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an EffectiveTag message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag} EffectiveTag
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EffectiveTag.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.tagValue = reader.string();
                                                break;
                                            }
                                        case 2: {
                                                message.namespacedTagValue = reader.string();
                                                break;
                                            }
                                        case 3: {
                                                message.tagKey = reader.string();
                                                break;
                                            }
                                        case 4: {
                                                message.namespacedTagKey = reader.string();
                                                break;
                                            }
                                        case 6: {
                                                message.tagKeyParentName = reader.string();
                                                break;
                                            }
                                        case 5: {
                                                message.inherited = reader.bool();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an EffectiveTag message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag} EffectiveTag
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EffectiveTag.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an EffectiveTag message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                EffectiveTag.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.tagValue != null && message.hasOwnProperty("tagValue"))
                                        if (!$util.isString(message.tagValue))
                                            return "tagValue: string expected";
                                    if (message.namespacedTagValue != null && message.hasOwnProperty("namespacedTagValue"))
                                        if (!$util.isString(message.namespacedTagValue))
                                            return "namespacedTagValue: string expected";
                                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                                        if (!$util.isString(message.tagKey))
                                            return "tagKey: string expected";
                                    if (message.namespacedTagKey != null && message.hasOwnProperty("namespacedTagKey"))
                                        if (!$util.isString(message.namespacedTagKey))
                                            return "namespacedTagKey: string expected";
                                    if (message.tagKeyParentName != null && message.hasOwnProperty("tagKeyParentName"))
                                        if (!$util.isString(message.tagKeyParentName))
                                            return "tagKeyParentName: string expected";
                                    if (message.inherited != null && message.hasOwnProperty("inherited"))
                                        if (typeof message.inherited !== "boolean")
                                            return "inherited: boolean expected";
                                    return null;
                                };
    
                                /**
                                 * Creates an EffectiveTag message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag} EffectiveTag
                                 */
                                EffectiveTag.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag();
                                    if (object.tagValue != null)
                                        message.tagValue = String(object.tagValue);
                                    if (object.namespacedTagValue != null)
                                        message.namespacedTagValue = String(object.namespacedTagValue);
                                    if (object.tagKey != null)
                                        message.tagKey = String(object.tagKey);
                                    if (object.namespacedTagKey != null)
                                        message.namespacedTagKey = String(object.namespacedTagKey);
                                    if (object.tagKeyParentName != null)
                                        message.tagKeyParentName = String(object.tagKeyParentName);
                                    if (object.inherited != null)
                                        message.inherited = Boolean(object.inherited);
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an EffectiveTag message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag} message EffectiveTag
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                EffectiveTag.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.tagValue = "";
                                        object.namespacedTagValue = "";
                                        object.tagKey = "";
                                        object.namespacedTagKey = "";
                                        object.inherited = false;
                                        object.tagKeyParentName = "";
                                    }
                                    if (message.tagValue != null && message.hasOwnProperty("tagValue"))
                                        object.tagValue = message.tagValue;
                                    if (message.namespacedTagValue != null && message.hasOwnProperty("namespacedTagValue"))
                                        object.namespacedTagValue = message.namespacedTagValue;
                                    if (message.tagKey != null && message.hasOwnProperty("tagKey"))
                                        object.tagKey = message.tagKey;
                                    if (message.namespacedTagKey != null && message.hasOwnProperty("namespacedTagKey"))
                                        object.namespacedTagKey = message.namespacedTagKey;
                                    if (message.inherited != null && message.hasOwnProperty("inherited"))
                                        object.inherited = message.inherited;
                                    if (message.tagKeyParentName != null && message.hasOwnProperty("tagKeyParentName"))
                                        object.tagKeyParentName = message.tagKeyParentName;
                                    return object;
                                };
    
                                /**
                                 * Converts this EffectiveTag to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                EffectiveTag.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for EffectiveTag
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                EffectiveTag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionContext.EffectiveTag";
                                };
    
                                return EffectiveTag;
                            })();
    
                            return ConditionContext;
                        })();
    
                        v3beta.AllowPolicyExplanation = (function() {
    
                            /**
                             * Properties of an AllowPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IAllowPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState|null} [allowAccessState] AllowPolicyExplanation allowAccessState
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy>|null} [explainedPolicies] AllowPolicyExplanation explainedPolicies
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] AllowPolicyExplanation relevance
                             */
    
                            /**
                             * Constructs a new AllowPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an AllowPolicyExplanation.
                             * @implements IAllowPolicyExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation=} [properties] Properties to set
                             */
                            function AllowPolicyExplanation(properties) {
                                this.explainedPolicies = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AllowPolicyExplanation allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.allowAccessState = 0;
    
                            /**
                             * AllowPolicyExplanation explainedPolicies.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy>} explainedPolicies
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.explainedPolicies = $util.emptyArray;
    
                            /**
                             * AllowPolicyExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @instance
                             */
                            AllowPolicyExplanation.prototype.relevance = 0;
    
                            /**
                             * Creates a new AllowPolicyExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation} AllowPolicyExplanation instance
                             */
                            AllowPolicyExplanation.create = function create(properties) {
                                return new AllowPolicyExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified AllowPolicyExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation} message AllowPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowPolicyExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.explainedPolicies != null && message.explainedPolicies.length)
                                    for (var i = 0; i < message.explainedPolicies.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.encode(message.explainedPolicies[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AllowPolicyExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowPolicyExplanation} message AllowPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowPolicyExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AllowPolicyExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation} AllowPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowPolicyExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.explainedPolicies && message.explainedPolicies.length))
                                                message.explainedPolicies = [];
                                            message.explainedPolicies.push($root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 3: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AllowPolicyExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation} AllowPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowPolicyExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AllowPolicyExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AllowPolicyExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.explainedPolicies != null && message.hasOwnProperty("explainedPolicies")) {
                                    if (!Array.isArray(message.explainedPolicies))
                                        return "explainedPolicies: array expected";
                                    for (var i = 0; i < message.explainedPolicies.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.verify(message.explainedPolicies[i]);
                                        if (error)
                                            return "explainedPolicies." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an AllowPolicyExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation} AllowPolicyExplanation
                             */
                            AllowPolicyExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.explainedPolicies) {
                                    if (!Array.isArray(object.explainedPolicies))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.explainedPolicies: array expected");
                                    message.explainedPolicies = [];
                                    for (var i = 0; i < object.explainedPolicies.length; ++i) {
                                        if (typeof object.explainedPolicies[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation.explainedPolicies: object expected");
                                        message.explainedPolicies[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.fromObject(object.explainedPolicies[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AllowPolicyExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation} message AllowPolicyExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AllowPolicyExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedPolicies = [];
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.explainedPolicies && message.explainedPolicies.length) {
                                    object.explainedPolicies = [];
                                    for (var j = 0; j < message.explainedPolicies.length; ++j)
                                        object.explainedPolicies[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.toObject(message.explainedPolicies[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this AllowPolicyExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AllowPolicyExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AllowPolicyExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AllowPolicyExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.AllowPolicyExplanation";
                            };
    
                            return AllowPolicyExplanation;
                        })();
    
                        v3beta.ExplainedAllowPolicy = (function() {
    
                            /**
                             * Properties of an ExplainedAllowPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IExplainedAllowPolicy
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState|null} [allowAccessState] ExplainedAllowPolicy allowAccessState
                             * @property {string|null} [fullResourceName] ExplainedAllowPolicy fullResourceName
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation>|null} [bindingExplanations] ExplainedAllowPolicy bindingExplanations
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] ExplainedAllowPolicy relevance
                             * @property {google.iam.v1.IPolicy|null} [policy] ExplainedAllowPolicy policy
                             */
    
                            /**
                             * Constructs a new ExplainedAllowPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an ExplainedAllowPolicy.
                             * @implements IExplainedAllowPolicy
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy=} [properties] Properties to set
                             */
                            function ExplainedAllowPolicy(properties) {
                                this.bindingExplanations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedAllowPolicy allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.allowAccessState = 0;
    
                            /**
                             * ExplainedAllowPolicy fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.fullResourceName = "";
    
                            /**
                             * ExplainedAllowPolicy bindingExplanations.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation>} bindingExplanations
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.bindingExplanations = $util.emptyArray;
    
                            /**
                             * ExplainedAllowPolicy relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.relevance = 0;
    
                            /**
                             * ExplainedAllowPolicy policy.
                             * @member {google.iam.v1.IPolicy|null|undefined} policy
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             */
                            ExplainedAllowPolicy.prototype.policy = null;
    
                            /**
                             * Creates a new ExplainedAllowPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy} ExplainedAllowPolicy instance
                             */
                            ExplainedAllowPolicy.create = function create(properties) {
                                return new ExplainedAllowPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedAllowPolicy message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy} message ExplainedAllowPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedAllowPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.bindingExplanations != null && message.bindingExplanations.length)
                                    for (var i = 0; i < message.bindingExplanations.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.encode(message.bindingExplanations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedAllowPolicy message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedAllowPolicy} message ExplainedAllowPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedAllowPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedAllowPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy} ExplainedAllowPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedAllowPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.bindingExplanations && message.bindingExplanations.length))
                                                message.bindingExplanations = [];
                                            message.bindingExplanations.push($root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedAllowPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy} ExplainedAllowPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedAllowPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedAllowPolicy message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedAllowPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.bindingExplanations != null && message.hasOwnProperty("bindingExplanations")) {
                                    if (!Array.isArray(message.bindingExplanations))
                                        return "bindingExplanations: array expected";
                                    for (var i = 0; i < message.bindingExplanations.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.verify(message.bindingExplanations[i]);
                                        if (error)
                                            return "bindingExplanations." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    var error = $root.google.iam.v1.Policy.verify(message.policy);
                                    if (error)
                                        return "policy." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedAllowPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy} ExplainedAllowPolicy
                             */
                            ExplainedAllowPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.bindingExplanations) {
                                    if (!Array.isArray(object.bindingExplanations))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.bindingExplanations: array expected");
                                    message.bindingExplanations = [];
                                    for (var i = 0; i < object.bindingExplanations.length; ++i) {
                                        if (typeof object.bindingExplanations[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.bindingExplanations: object expected");
                                        message.bindingExplanations[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.fromObject(object.bindingExplanations[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy.policy: object expected");
                                    message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedAllowPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy} message ExplainedAllowPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedAllowPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.bindingExplanations = [];
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.fullResourceName = "";
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.policy = null;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.bindingExplanations && message.bindingExplanations.length) {
                                    object.bindingExplanations = [];
                                    for (var j = 0; j < message.bindingExplanations.length; ++j)
                                        object.bindingExplanations[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.toObject(message.bindingExplanations[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.policy != null && message.hasOwnProperty("policy"))
                                    object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedAllowPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedAllowPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedAllowPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedAllowPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ExplainedAllowPolicy";
                            };
    
                            return ExplainedAllowPolicy;
                        })();
    
                        v3beta.AllowBindingExplanation = (function() {
    
                            /**
                             * Properties of an AllowBindingExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IAllowBindingExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState|null} [allowAccessState] AllowBindingExplanation allowAccessState
                             * @property {string|null} [role] AllowBindingExplanation role
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.RolePermissionInclusionState|null} [rolePermission] AllowBindingExplanation rolePermission
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [rolePermissionRelevance] AllowBindingExplanation rolePermissionRelevance
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership|null} [combinedMembership] AllowBindingExplanation combinedMembership
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership>|null} [memberships] AllowBindingExplanation memberships
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] AllowBindingExplanation relevance
                             * @property {google.type.IExpr|null} [condition] AllowBindingExplanation condition
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation|null} [conditionExplanation] AllowBindingExplanation conditionExplanation
                             */
    
                            /**
                             * Constructs a new AllowBindingExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an AllowBindingExplanation.
                             * @implements IAllowBindingExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation=} [properties] Properties to set
                             */
                            function AllowBindingExplanation(properties) {
                                this.memberships = {};
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AllowBindingExplanation allowAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState} allowAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.allowAccessState = 0;
    
                            /**
                             * AllowBindingExplanation role.
                             * @member {string} role
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.role = "";
    
                            /**
                             * AllowBindingExplanation rolePermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.RolePermissionInclusionState} rolePermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.rolePermission = 0;
    
                            /**
                             * AllowBindingExplanation rolePermissionRelevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} rolePermissionRelevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.rolePermissionRelevance = 0;
    
                            /**
                             * AllowBindingExplanation combinedMembership.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership|null|undefined} combinedMembership
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.combinedMembership = null;
    
                            /**
                             * AllowBindingExplanation memberships.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership>} memberships
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.memberships = $util.emptyObject;
    
                            /**
                             * AllowBindingExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.relevance = 0;
    
                            /**
                             * AllowBindingExplanation condition.
                             * @member {google.type.IExpr|null|undefined} condition
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.condition = null;
    
                            /**
                             * AllowBindingExplanation conditionExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation|null|undefined} conditionExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             */
                            AllowBindingExplanation.prototype.conditionExplanation = null;
    
                            /**
                             * Creates a new AllowBindingExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation} AllowBindingExplanation instance
                             */
                            AllowBindingExplanation.create = function create(properties) {
                                return new AllowBindingExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified AllowBindingExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation} message AllowBindingExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowBindingExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowAccessState != null && Object.hasOwnProperty.call(message, "allowAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.allowAccessState);
                                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                                if (message.rolePermission != null && Object.hasOwnProperty.call(message, "rolePermission"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rolePermission);
                                if (message.rolePermissionRelevance != null && Object.hasOwnProperty.call(message, "rolePermissionRelevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.rolePermissionRelevance);
                                if (message.combinedMembership != null && Object.hasOwnProperty.call(message, "combinedMembership"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.encode(message.combinedMembership, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                if (message.memberships != null && Object.hasOwnProperty.call(message, "memberships"))
                                    for (var keys = Object.keys(message.memberships), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.encode(message.memberships[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.relevance);
                                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                    $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                if (message.conditionExplanation != null && Object.hasOwnProperty.call(message, "conditionExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.encode(message.conditionExplanation, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AllowBindingExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IAllowBindingExplanation} message AllowBindingExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AllowBindingExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AllowBindingExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation} AllowBindingExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowBindingExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.allowAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.role = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.rolePermission = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.rolePermissionRelevance = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            message.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 6: {
                                            if (message.memberships === $util.emptyObject)
                                                message.memberships = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.memberships[key] = value;
                                            break;
                                        }
                                    case 7: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 8: {
                                            message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 9: {
                                            message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AllowBindingExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation} AllowBindingExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AllowBindingExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AllowBindingExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AllowBindingExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    switch (message.allowAccessState) {
                                    default:
                                        return "allowAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.role != null && message.hasOwnProperty("role"))
                                    if (!$util.isString(message.role))
                                        return "role: string expected";
                                if (message.rolePermission != null && message.hasOwnProperty("rolePermission"))
                                    switch (message.rolePermission) {
                                    default:
                                        return "rolePermission: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.rolePermissionRelevance != null && message.hasOwnProperty("rolePermissionRelevance"))
                                    switch (message.rolePermissionRelevance) {
                                    default:
                                        return "rolePermissionRelevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.combinedMembership != null && message.hasOwnProperty("combinedMembership")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.verify(message.combinedMembership);
                                    if (error)
                                        return "combinedMembership." + error;
                                }
                                if (message.memberships != null && message.hasOwnProperty("memberships")) {
                                    if (!$util.isObject(message.memberships))
                                        return "memberships: object expected";
                                    var key = Object.keys(message.memberships);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.verify(message.memberships[key[i]]);
                                        if (error)
                                            return "memberships." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.condition != null && message.hasOwnProperty("condition")) {
                                    var error = $root.google.type.Expr.verify(message.condition);
                                    if (error)
                                        return "condition." + error;
                                }
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.verify(message.conditionExplanation);
                                    if (error)
                                        return "conditionExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an AllowBindingExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation} AllowBindingExplanation
                             */
                            AllowBindingExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation();
                                switch (object.allowAccessState) {
                                default:
                                    if (typeof object.allowAccessState === "number") {
                                        message.allowAccessState = object.allowAccessState;
                                        break;
                                    }
                                    break;
                                case "ALLOW_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.allowAccessState = 0;
                                    break;
                                case "ALLOW_ACCESS_STATE_GRANTED":
                                case 1:
                                    message.allowAccessState = 1;
                                    break;
                                case "ALLOW_ACCESS_STATE_NOT_GRANTED":
                                case 2:
                                    message.allowAccessState = 2;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.allowAccessState = 3;
                                    break;
                                case "ALLOW_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.allowAccessState = 4;
                                    break;
                                }
                                if (object.role != null)
                                    message.role = String(object.role);
                                switch (object.rolePermission) {
                                default:
                                    if (typeof object.rolePermission === "number") {
                                        message.rolePermission = object.rolePermission;
                                        break;
                                    }
                                    break;
                                case "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED":
                                case 0:
                                    message.rolePermission = 0;
                                    break;
                                case "ROLE_PERMISSION_INCLUDED":
                                case 1:
                                    message.rolePermission = 1;
                                    break;
                                case "ROLE_PERMISSION_NOT_INCLUDED":
                                case 2:
                                    message.rolePermission = 2;
                                    break;
                                case "ROLE_PERMISSION_UNKNOWN_INFO":
                                case 3:
                                    message.rolePermission = 3;
                                    break;
                                }
                                switch (object.rolePermissionRelevance) {
                                default:
                                    if (typeof object.rolePermissionRelevance === "number") {
                                        message.rolePermissionRelevance = object.rolePermissionRelevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.rolePermissionRelevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.rolePermissionRelevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.rolePermissionRelevance = 2;
                                    break;
                                }
                                if (object.combinedMembership != null) {
                                    if (typeof object.combinedMembership !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.combinedMembership: object expected");
                                    message.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.fromObject(object.combinedMembership);
                                }
                                if (object.memberships) {
                                    if (typeof object.memberships !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.memberships: object expected");
                                    message.memberships = {};
                                    for (var keys = Object.keys(object.memberships), i = 0; i < keys.length; ++i) {
                                        if (typeof object.memberships[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.memberships: object expected");
                                        message.memberships[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.fromObject(object.memberships[keys[i]]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.condition != null) {
                                    if (typeof object.condition !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.condition: object expected");
                                    message.condition = $root.google.type.Expr.fromObject(object.condition);
                                }
                                if (object.conditionExplanation != null) {
                                    if (typeof object.conditionExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.conditionExplanation: object expected");
                                    message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.fromObject(object.conditionExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AllowBindingExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation} message AllowBindingExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AllowBindingExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.objects || options.defaults)
                                    object.memberships = {};
                                if (options.defaults) {
                                    object.allowAccessState = options.enums === String ? "ALLOW_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.role = "";
                                    object.rolePermission = options.enums === String ? "ROLE_PERMISSION_INCLUSION_STATE_UNSPECIFIED" : 0;
                                    object.rolePermissionRelevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.combinedMembership = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.condition = null;
                                    object.conditionExplanation = null;
                                }
                                if (message.allowAccessState != null && message.hasOwnProperty("allowAccessState"))
                                    object.allowAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] === undefined ? message.allowAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.AllowAccessState[message.allowAccessState] : message.allowAccessState;
                                if (message.role != null && message.hasOwnProperty("role"))
                                    object.role = message.role;
                                if (message.rolePermission != null && message.hasOwnProperty("rolePermission"))
                                    object.rolePermission = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.RolePermissionInclusionState[message.rolePermission] === undefined ? message.rolePermission : $root.google.cloud.policytroubleshooter.iam.v3beta.RolePermissionInclusionState[message.rolePermission] : message.rolePermission;
                                if (message.rolePermissionRelevance != null && message.hasOwnProperty("rolePermissionRelevance"))
                                    object.rolePermissionRelevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.rolePermissionRelevance] === undefined ? message.rolePermissionRelevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.rolePermissionRelevance] : message.rolePermissionRelevance;
                                if (message.combinedMembership != null && message.hasOwnProperty("combinedMembership"))
                                    object.combinedMembership = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.toObject(message.combinedMembership, options);
                                var keys2;
                                if (message.memberships && (keys2 = Object.keys(message.memberships)).length) {
                                    object.memberships = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.memberships[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.toObject(message.memberships[keys2[j]], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.condition != null && message.hasOwnProperty("condition"))
                                    object.condition = $root.google.type.Expr.toObject(message.condition, options);
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation"))
                                    object.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.toObject(message.conditionExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this AllowBindingExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AllowBindingExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AllowBindingExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AllowBindingExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation";
                            };
    
                            AllowBindingExplanation.AnnotatedAllowMembership = (function() {
    
                                /**
                                 * Properties of an AnnotatedAllowMembership.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                                 * @interface IAnnotatedAllowMembership
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState|null} [membership] AnnotatedAllowMembership membership
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] AnnotatedAllowMembership relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedAllowMembership.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation
                                 * @classdesc Represents an AnnotatedAllowMembership.
                                 * @implements IAnnotatedAllowMembership
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership=} [properties] Properties to set
                                 */
                                function AnnotatedAllowMembership(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedAllowMembership membership.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState} membership
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 */
                                AnnotatedAllowMembership.prototype.membership = 0;
    
                                /**
                                 * AnnotatedAllowMembership relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 */
                                AnnotatedAllowMembership.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedAllowMembership instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership instance
                                 */
                                AnnotatedAllowMembership.create = function create(properties) {
                                    return new AnnotatedAllowMembership(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedAllowMembership message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership} message AnnotatedAllowMembership message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedAllowMembership.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.membership);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedAllowMembership message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.IAnnotatedAllowMembership} message AnnotatedAllowMembership message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedAllowMembership.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedAllowMembership message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedAllowMembership.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.membership = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedAllowMembership message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedAllowMembership.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedAllowMembership message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedAllowMembership.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        switch (message.membership) {
                                        default:
                                            return "membership: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedAllowMembership message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership} AnnotatedAllowMembership
                                 */
                                AnnotatedAllowMembership.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership();
                                    switch (object.membership) {
                                    default:
                                        if (typeof object.membership === "number") {
                                            message.membership = object.membership;
                                            break;
                                        }
                                        break;
                                    case "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.membership = 0;
                                        break;
                                    case "MEMBERSHIP_MATCHED":
                                    case 1:
                                        message.membership = 1;
                                        break;
                                    case "MEMBERSHIP_NOT_MATCHED":
                                    case 2:
                                        message.membership = 2;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_INFO":
                                    case 3:
                                        message.membership = 3;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_UNSUPPORTED":
                                    case 4:
                                        message.membership = 4;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedAllowMembership message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership} message AnnotatedAllowMembership
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedAllowMembership.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.membership = options.enums === String ? "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        object.membership = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState[message.membership] === undefined ? message.membership : $root.google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState[message.membership] : message.membership;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedAllowMembership to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedAllowMembership.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedAllowMembership
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedAllowMembership.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.AllowBindingExplanation.AnnotatedAllowMembership";
                                };
    
                                return AnnotatedAllowMembership;
                            })();
    
                            return AllowBindingExplanation;
                        })();
    
                        v3beta.DenyPolicyExplanation = (function() {
    
                            /**
                             * Properties of a DenyPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IDenyPolicyExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState|null} [denyAccessState] DenyPolicyExplanation denyAccessState
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource>|null} [explainedResources] DenyPolicyExplanation explainedResources
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] DenyPolicyExplanation relevance
                             * @property {boolean|null} [permissionDeniable] DenyPolicyExplanation permissionDeniable
                             */
    
                            /**
                             * Constructs a new DenyPolicyExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a DenyPolicyExplanation.
                             * @implements IDenyPolicyExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation=} [properties] Properties to set
                             */
                            function DenyPolicyExplanation(properties) {
                                this.explainedResources = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DenyPolicyExplanation denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.denyAccessState = 0;
    
                            /**
                             * DenyPolicyExplanation explainedResources.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource>} explainedResources
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.explainedResources = $util.emptyArray;
    
                            /**
                             * DenyPolicyExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.relevance = 0;
    
                            /**
                             * DenyPolicyExplanation permissionDeniable.
                             * @member {boolean} permissionDeniable
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @instance
                             */
                            DenyPolicyExplanation.prototype.permissionDeniable = false;
    
                            /**
                             * Creates a new DenyPolicyExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation} DenyPolicyExplanation instance
                             */
                            DenyPolicyExplanation.create = function create(properties) {
                                return new DenyPolicyExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified DenyPolicyExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation} message DenyPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyPolicyExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.explainedResources != null && message.explainedResources.length)
                                    for (var i = 0; i < message.explainedResources.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.encode(message.explainedResources[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.relevance);
                                if (message.permissionDeniable != null && Object.hasOwnProperty.call(message, "permissionDeniable"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.permissionDeniable);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DenyPolicyExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyPolicyExplanation} message DenyPolicyExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyPolicyExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DenyPolicyExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation} DenyPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyPolicyExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.explainedResources && message.explainedResources.length))
                                                message.explainedResources = [];
                                            message.explainedResources.push($root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 3: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.permissionDeniable = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DenyPolicyExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation} DenyPolicyExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyPolicyExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DenyPolicyExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DenyPolicyExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.explainedResources != null && message.hasOwnProperty("explainedResources")) {
                                    if (!Array.isArray(message.explainedResources))
                                        return "explainedResources: array expected";
                                    for (var i = 0; i < message.explainedResources.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.verify(message.explainedResources[i]);
                                        if (error)
                                            return "explainedResources." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.permissionDeniable != null && message.hasOwnProperty("permissionDeniable"))
                                    if (typeof message.permissionDeniable !== "boolean")
                                        return "permissionDeniable: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a DenyPolicyExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation} DenyPolicyExplanation
                             */
                            DenyPolicyExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.explainedResources) {
                                    if (!Array.isArray(object.explainedResources))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.explainedResources: array expected");
                                    message.explainedResources = [];
                                    for (var i = 0; i < object.explainedResources.length; ++i) {
                                        if (typeof object.explainedResources[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation.explainedResources: object expected");
                                        message.explainedResources[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.fromObject(object.explainedResources[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.permissionDeniable != null)
                                    message.permissionDeniable = Boolean(object.permissionDeniable);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DenyPolicyExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation} message DenyPolicyExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DenyPolicyExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedResources = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.permissionDeniable = false;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.explainedResources && message.explainedResources.length) {
                                    object.explainedResources = [];
                                    for (var j = 0; j < message.explainedResources.length; ++j)
                                        object.explainedResources[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.toObject(message.explainedResources[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.permissionDeniable != null && message.hasOwnProperty("permissionDeniable"))
                                    object.permissionDeniable = message.permissionDeniable;
                                return object;
                            };
    
                            /**
                             * Converts this DenyPolicyExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DenyPolicyExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for DenyPolicyExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            DenyPolicyExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.DenyPolicyExplanation";
                            };
    
                            return DenyPolicyExplanation;
                        })();
    
                        v3beta.ExplainedDenyResource = (function() {
    
                            /**
                             * Properties of an ExplainedDenyResource.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IExplainedDenyResource
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState|null} [denyAccessState] ExplainedDenyResource denyAccessState
                             * @property {string|null} [fullResourceName] ExplainedDenyResource fullResourceName
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy>|null} [explainedPolicies] ExplainedDenyResource explainedPolicies
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] ExplainedDenyResource relevance
                             */
    
                            /**
                             * Constructs a new ExplainedDenyResource.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an ExplainedDenyResource.
                             * @implements IExplainedDenyResource
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource=} [properties] Properties to set
                             */
                            function ExplainedDenyResource(properties) {
                                this.explainedPolicies = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedDenyResource denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.denyAccessState = 0;
    
                            /**
                             * ExplainedDenyResource fullResourceName.
                             * @member {string} fullResourceName
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.fullResourceName = "";
    
                            /**
                             * ExplainedDenyResource explainedPolicies.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy>} explainedPolicies
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.explainedPolicies = $util.emptyArray;
    
                            /**
                             * ExplainedDenyResource relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @instance
                             */
                            ExplainedDenyResource.prototype.relevance = 0;
    
                            /**
                             * Creates a new ExplainedDenyResource instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource} ExplainedDenyResource instance
                             */
                            ExplainedDenyResource.create = function create(properties) {
                                return new ExplainedDenyResource(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyResource message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource} message ExplainedDenyResource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyResource.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.fullResourceName != null && Object.hasOwnProperty.call(message, "fullResourceName"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullResourceName);
                                if (message.explainedPolicies != null && message.explainedPolicies.length)
                                    for (var i = 0; i < message.explainedPolicies.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.encode(message.explainedPolicies[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyResource message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyResource} message ExplainedDenyResource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyResource.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedDenyResource message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource} ExplainedDenyResource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyResource.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.fullResourceName = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.explainedPolicies && message.explainedPolicies.length))
                                                message.explainedPolicies = [];
                                            message.explainedPolicies.push($root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedDenyResource message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource} ExplainedDenyResource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyResource.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedDenyResource message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedDenyResource.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    if (!$util.isString(message.fullResourceName))
                                        return "fullResourceName: string expected";
                                if (message.explainedPolicies != null && message.hasOwnProperty("explainedPolicies")) {
                                    if (!Array.isArray(message.explainedPolicies))
                                        return "explainedPolicies: array expected";
                                    for (var i = 0; i < message.explainedPolicies.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.verify(message.explainedPolicies[i]);
                                        if (error)
                                            return "explainedPolicies." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedDenyResource message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource} ExplainedDenyResource
                             */
                            ExplainedDenyResource.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.fullResourceName != null)
                                    message.fullResourceName = String(object.fullResourceName);
                                if (object.explainedPolicies) {
                                    if (!Array.isArray(object.explainedPolicies))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.explainedPolicies: array expected");
                                    message.explainedPolicies = [];
                                    for (var i = 0; i < object.explainedPolicies.length; ++i) {
                                        if (typeof object.explainedPolicies[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource.explainedPolicies: object expected");
                                        message.explainedPolicies[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.fromObject(object.explainedPolicies[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedDenyResource message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource} message ExplainedDenyResource
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedDenyResource.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.explainedPolicies = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.fullResourceName = "";
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.fullResourceName != null && message.hasOwnProperty("fullResourceName"))
                                    object.fullResourceName = message.fullResourceName;
                                if (message.explainedPolicies && message.explainedPolicies.length) {
                                    object.explainedPolicies = [];
                                    for (var j = 0; j < message.explainedPolicies.length; ++j)
                                        object.explainedPolicies[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.toObject(message.explainedPolicies[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedDenyResource to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedDenyResource.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedDenyResource
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedDenyResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyResource";
                            };
    
                            return ExplainedDenyResource;
                        })();
    
                        v3beta.ExplainedDenyPolicy = (function() {
    
                            /**
                             * Properties of an ExplainedDenyPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IExplainedDenyPolicy
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState|null} [denyAccessState] ExplainedDenyPolicy denyAccessState
                             * @property {google.iam.v2.IPolicy|null} [policy] ExplainedDenyPolicy policy
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation>|null} [ruleExplanations] ExplainedDenyPolicy ruleExplanations
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] ExplainedDenyPolicy relevance
                             */
    
                            /**
                             * Constructs a new ExplainedDenyPolicy.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents an ExplainedDenyPolicy.
                             * @implements IExplainedDenyPolicy
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy=} [properties] Properties to set
                             */
                            function ExplainedDenyPolicy(properties) {
                                this.ruleExplanations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplainedDenyPolicy denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.denyAccessState = 0;
    
                            /**
                             * ExplainedDenyPolicy policy.
                             * @member {google.iam.v2.IPolicy|null|undefined} policy
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.policy = null;
    
                            /**
                             * ExplainedDenyPolicy ruleExplanations.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation>} ruleExplanations
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.ruleExplanations = $util.emptyArray;
    
                            /**
                             * ExplainedDenyPolicy relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @instance
                             */
                            ExplainedDenyPolicy.prototype.relevance = 0;
    
                            /**
                             * Creates a new ExplainedDenyPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy} ExplainedDenyPolicy instance
                             */
                            ExplainedDenyPolicy.create = function create(properties) {
                                return new ExplainedDenyPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyPolicy message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy} message ExplainedDenyPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.iam.v2.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.ruleExplanations != null && message.ruleExplanations.length)
                                    for (var i = 0; i < message.ruleExplanations.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.encode(message.ruleExplanations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relevance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplainedDenyPolicy message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IExplainedDenyPolicy} message ExplainedDenyPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplainedDenyPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplainedDenyPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy} ExplainedDenyPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.policy = $root.google.iam.v2.Policy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.ruleExplanations && message.ruleExplanations.length))
                                                message.ruleExplanations = [];
                                            message.ruleExplanations.push($root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 4: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplainedDenyPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy} ExplainedDenyPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplainedDenyPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplainedDenyPolicy message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplainedDenyPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    var error = $root.google.iam.v2.Policy.verify(message.policy);
                                    if (error)
                                        return "policy." + error;
                                }
                                if (message.ruleExplanations != null && message.hasOwnProperty("ruleExplanations")) {
                                    if (!Array.isArray(message.ruleExplanations))
                                        return "ruleExplanations: array expected";
                                    for (var i = 0; i < message.ruleExplanations.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.verify(message.ruleExplanations[i]);
                                        if (error)
                                            return "ruleExplanations." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates an ExplainedDenyPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy} ExplainedDenyPolicy
                             */
                            ExplainedDenyPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.policy: object expected");
                                    message.policy = $root.google.iam.v2.Policy.fromObject(object.policy);
                                }
                                if (object.ruleExplanations) {
                                    if (!Array.isArray(object.ruleExplanations))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.ruleExplanations: array expected");
                                    message.ruleExplanations = [];
                                    for (var i = 0; i < object.ruleExplanations.length; ++i) {
                                        if (typeof object.ruleExplanations[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy.ruleExplanations: object expected");
                                        message.ruleExplanations[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.fromObject(object.ruleExplanations[i]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplainedDenyPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy} message ExplainedDenyPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplainedDenyPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.ruleExplanations = [];
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.policy = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.policy != null && message.hasOwnProperty("policy"))
                                    object.policy = $root.google.iam.v2.Policy.toObject(message.policy, options);
                                if (message.ruleExplanations && message.ruleExplanations.length) {
                                    object.ruleExplanations = [];
                                    for (var j = 0; j < message.ruleExplanations.length; ++j)
                                        object.ruleExplanations[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.toObject(message.ruleExplanations[j], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                return object;
                            };
    
                            /**
                             * Converts this ExplainedDenyPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplainedDenyPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplainedDenyPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplainedDenyPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ExplainedDenyPolicy";
                            };
    
                            return ExplainedDenyPolicy;
                        })();
    
                        v3beta.DenyRuleExplanation = (function() {
    
                            /**
                             * Properties of a DenyRuleExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IDenyRuleExplanation
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState|null} [denyAccessState] DenyRuleExplanation denyAccessState
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching|null} [combinedDeniedPermission] DenyRuleExplanation combinedDeniedPermission
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching>|null} [deniedPermissions] DenyRuleExplanation deniedPermissions
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching|null} [combinedExceptionPermission] DenyRuleExplanation combinedExceptionPermission
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching>|null} [exceptionPermissions] DenyRuleExplanation exceptionPermissions
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null} [combinedDeniedPrincipal] DenyRuleExplanation combinedDeniedPrincipal
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>|null} [deniedPrincipals] DenyRuleExplanation deniedPrincipals
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null} [combinedExceptionPrincipal] DenyRuleExplanation combinedExceptionPrincipal
                             * @property {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>|null} [exceptionPrincipals] DenyRuleExplanation exceptionPrincipals
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] DenyRuleExplanation relevance
                             * @property {google.type.IExpr|null} [condition] DenyRuleExplanation condition
                             * @property {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation|null} [conditionExplanation] DenyRuleExplanation conditionExplanation
                             */
    
                            /**
                             * Constructs a new DenyRuleExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a DenyRuleExplanation.
                             * @implements IDenyRuleExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation=} [properties] Properties to set
                             */
                            function DenyRuleExplanation(properties) {
                                this.deniedPermissions = {};
                                this.exceptionPermissions = {};
                                this.deniedPrincipals = {};
                                this.exceptionPrincipals = {};
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * DenyRuleExplanation denyAccessState.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState} denyAccessState
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.denyAccessState = 0;
    
                            /**
                             * DenyRuleExplanation combinedDeniedPermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching|null|undefined} combinedDeniedPermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedDeniedPermission = null;
    
                            /**
                             * DenyRuleExplanation deniedPermissions.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching>} deniedPermissions
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.deniedPermissions = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedExceptionPermission.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching|null|undefined} combinedExceptionPermission
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedExceptionPermission = null;
    
                            /**
                             * DenyRuleExplanation exceptionPermissions.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching>} exceptionPermissions
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.exceptionPermissions = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedDeniedPrincipal.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null|undefined} combinedDeniedPrincipal
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedDeniedPrincipal = null;
    
                            /**
                             * DenyRuleExplanation deniedPrincipals.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>} deniedPrincipals
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.deniedPrincipals = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation combinedExceptionPrincipal.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching|null|undefined} combinedExceptionPrincipal
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.combinedExceptionPrincipal = null;
    
                            /**
                             * DenyRuleExplanation exceptionPrincipals.
                             * @member {Object.<string,google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching>} exceptionPrincipals
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.exceptionPrincipals = $util.emptyObject;
    
                            /**
                             * DenyRuleExplanation relevance.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.relevance = 0;
    
                            /**
                             * DenyRuleExplanation condition.
                             * @member {google.type.IExpr|null|undefined} condition
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.condition = null;
    
                            /**
                             * DenyRuleExplanation conditionExplanation.
                             * @member {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation|null|undefined} conditionExplanation
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             */
                            DenyRuleExplanation.prototype.conditionExplanation = null;
    
                            /**
                             * Creates a new DenyRuleExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation} DenyRuleExplanation instance
                             */
                            DenyRuleExplanation.create = function create(properties) {
                                return new DenyRuleExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified DenyRuleExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation} message DenyRuleExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyRuleExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.denyAccessState != null && Object.hasOwnProperty.call(message, "denyAccessState"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.denyAccessState);
                                if (message.combinedDeniedPermission != null && Object.hasOwnProperty.call(message, "combinedDeniedPermission"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.combinedDeniedPermission, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.deniedPermissions != null && Object.hasOwnProperty.call(message, "deniedPermissions"))
                                    for (var keys = Object.keys(message.deniedPermissions), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.deniedPermissions[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedExceptionPermission != null && Object.hasOwnProperty.call(message, "combinedExceptionPermission"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.combinedExceptionPermission, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.exceptionPermissions != null && Object.hasOwnProperty.call(message, "exceptionPermissions"))
                                    for (var keys = Object.keys(message.exceptionPermissions), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.encode(message.exceptionPermissions[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedDeniedPrincipal != null && Object.hasOwnProperty.call(message, "combinedDeniedPrincipal"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.combinedDeniedPrincipal, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                if (message.deniedPrincipals != null && Object.hasOwnProperty.call(message, "deniedPrincipals"))
                                    for (var keys = Object.keys(message.deniedPrincipals), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 7, wireType 2 =*/58).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.deniedPrincipals[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.combinedExceptionPrincipal != null && Object.hasOwnProperty.call(message, "combinedExceptionPrincipal"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.combinedExceptionPrincipal, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                if (message.exceptionPrincipals != null && Object.hasOwnProperty.call(message, "exceptionPrincipals"))
                                    for (var keys = Object.keys(message.exceptionPrincipals), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.encode(message.exceptionPrincipals[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.relevance);
                                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                                    $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                                if (message.conditionExplanation != null && Object.hasOwnProperty.call(message, "conditionExplanation"))
                                    $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.encode(message.conditionExplanation, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified DenyRuleExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IDenyRuleExplanation} message DenyRuleExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            DenyRuleExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a DenyRuleExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation} DenyRuleExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyRuleExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.denyAccessState = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (message.deniedPermissions === $util.emptyObject)
                                                message.deniedPermissions = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.deniedPermissions[key] = value;
                                            break;
                                        }
                                    case 4: {
                                            message.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 5: {
                                            if (message.exceptionPermissions === $util.emptyObject)
                                                message.exceptionPermissions = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.exceptionPermissions[key] = value;
                                            break;
                                        }
                                    case 6: {
                                            message.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 7: {
                                            if (message.deniedPrincipals === $util.emptyObject)
                                                message.deniedPrincipals = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.deniedPrincipals[key] = value;
                                            break;
                                        }
                                    case 8: {
                                            message.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 9: {
                                            if (message.exceptionPrincipals === $util.emptyObject)
                                                message.exceptionPrincipals = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = null;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.decode(reader, reader.uint32());
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.exceptionPrincipals[key] = value;
                                            break;
                                        }
                                    case 10: {
                                            message.relevance = reader.int32();
                                            break;
                                        }
                                    case 11: {
                                            message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 12: {
                                            message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a DenyRuleExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation} DenyRuleExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            DenyRuleExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a DenyRuleExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            DenyRuleExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    switch (message.denyAccessState) {
                                    default:
                                        return "denyAccessState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.combinedDeniedPermission != null && message.hasOwnProperty("combinedDeniedPermission")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.combinedDeniedPermission);
                                    if (error)
                                        return "combinedDeniedPermission." + error;
                                }
                                if (message.deniedPermissions != null && message.hasOwnProperty("deniedPermissions")) {
                                    if (!$util.isObject(message.deniedPermissions))
                                        return "deniedPermissions: object expected";
                                    var key = Object.keys(message.deniedPermissions);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.deniedPermissions[key[i]]);
                                        if (error)
                                            return "deniedPermissions." + error;
                                    }
                                }
                                if (message.combinedExceptionPermission != null && message.hasOwnProperty("combinedExceptionPermission")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.combinedExceptionPermission);
                                    if (error)
                                        return "combinedExceptionPermission." + error;
                                }
                                if (message.exceptionPermissions != null && message.hasOwnProperty("exceptionPermissions")) {
                                    if (!$util.isObject(message.exceptionPermissions))
                                        return "exceptionPermissions: object expected";
                                    var key = Object.keys(message.exceptionPermissions);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify(message.exceptionPermissions[key[i]]);
                                        if (error)
                                            return "exceptionPermissions." + error;
                                    }
                                }
                                if (message.combinedDeniedPrincipal != null && message.hasOwnProperty("combinedDeniedPrincipal")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.combinedDeniedPrincipal);
                                    if (error)
                                        return "combinedDeniedPrincipal." + error;
                                }
                                if (message.deniedPrincipals != null && message.hasOwnProperty("deniedPrincipals")) {
                                    if (!$util.isObject(message.deniedPrincipals))
                                        return "deniedPrincipals: object expected";
                                    var key = Object.keys(message.deniedPrincipals);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.deniedPrincipals[key[i]]);
                                        if (error)
                                            return "deniedPrincipals." + error;
                                    }
                                }
                                if (message.combinedExceptionPrincipal != null && message.hasOwnProperty("combinedExceptionPrincipal")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.combinedExceptionPrincipal);
                                    if (error)
                                        return "combinedExceptionPrincipal." + error;
                                }
                                if (message.exceptionPrincipals != null && message.hasOwnProperty("exceptionPrincipals")) {
                                    if (!$util.isObject(message.exceptionPrincipals))
                                        return "exceptionPrincipals: object expected";
                                    var key = Object.keys(message.exceptionPrincipals);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify(message.exceptionPrincipals[key[i]]);
                                        if (error)
                                            return "exceptionPrincipals." + error;
                                    }
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    switch (message.relevance) {
                                    default:
                                        return "relevance: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.condition != null && message.hasOwnProperty("condition")) {
                                    var error = $root.google.type.Expr.verify(message.condition);
                                    if (error)
                                        return "condition." + error;
                                }
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation")) {
                                    var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.verify(message.conditionExplanation);
                                    if (error)
                                        return "conditionExplanation." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a DenyRuleExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation} DenyRuleExplanation
                             */
                            DenyRuleExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation();
                                switch (object.denyAccessState) {
                                default:
                                    if (typeof object.denyAccessState === "number") {
                                        message.denyAccessState = object.denyAccessState;
                                        break;
                                    }
                                    break;
                                case "DENY_ACCESS_STATE_UNSPECIFIED":
                                case 0:
                                    message.denyAccessState = 0;
                                    break;
                                case "DENY_ACCESS_STATE_DENIED":
                                case 1:
                                    message.denyAccessState = 1;
                                    break;
                                case "DENY_ACCESS_STATE_NOT_DENIED":
                                case 2:
                                    message.denyAccessState = 2;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_CONDITIONAL":
                                case 3:
                                    message.denyAccessState = 3;
                                    break;
                                case "DENY_ACCESS_STATE_UNKNOWN_INFO":
                                case 4:
                                    message.denyAccessState = 4;
                                    break;
                                }
                                if (object.combinedDeniedPermission != null) {
                                    if (typeof object.combinedDeniedPermission !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.combinedDeniedPermission: object expected");
                                    message.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.combinedDeniedPermission);
                                }
                                if (object.deniedPermissions) {
                                    if (typeof object.deniedPermissions !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.deniedPermissions: object expected");
                                    message.deniedPermissions = {};
                                    for (var keys = Object.keys(object.deniedPermissions), i = 0; i < keys.length; ++i) {
                                        if (typeof object.deniedPermissions[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.deniedPermissions: object expected");
                                        message.deniedPermissions[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.deniedPermissions[keys[i]]);
                                    }
                                }
                                if (object.combinedExceptionPermission != null) {
                                    if (typeof object.combinedExceptionPermission !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.combinedExceptionPermission: object expected");
                                    message.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.combinedExceptionPermission);
                                }
                                if (object.exceptionPermissions) {
                                    if (typeof object.exceptionPermissions !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.exceptionPermissions: object expected");
                                    message.exceptionPermissions = {};
                                    for (var keys = Object.keys(object.exceptionPermissions), i = 0; i < keys.length; ++i) {
                                        if (typeof object.exceptionPermissions[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.exceptionPermissions: object expected");
                                        message.exceptionPermissions[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.fromObject(object.exceptionPermissions[keys[i]]);
                                    }
                                }
                                if (object.combinedDeniedPrincipal != null) {
                                    if (typeof object.combinedDeniedPrincipal !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.combinedDeniedPrincipal: object expected");
                                    message.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.combinedDeniedPrincipal);
                                }
                                if (object.deniedPrincipals) {
                                    if (typeof object.deniedPrincipals !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.deniedPrincipals: object expected");
                                    message.deniedPrincipals = {};
                                    for (var keys = Object.keys(object.deniedPrincipals), i = 0; i < keys.length; ++i) {
                                        if (typeof object.deniedPrincipals[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.deniedPrincipals: object expected");
                                        message.deniedPrincipals[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.deniedPrincipals[keys[i]]);
                                    }
                                }
                                if (object.combinedExceptionPrincipal != null) {
                                    if (typeof object.combinedExceptionPrincipal !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.combinedExceptionPrincipal: object expected");
                                    message.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.combinedExceptionPrincipal);
                                }
                                if (object.exceptionPrincipals) {
                                    if (typeof object.exceptionPrincipals !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.exceptionPrincipals: object expected");
                                    message.exceptionPrincipals = {};
                                    for (var keys = Object.keys(object.exceptionPrincipals), i = 0; i < keys.length; ++i) {
                                        if (typeof object.exceptionPrincipals[keys[i]] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.exceptionPrincipals: object expected");
                                        message.exceptionPrincipals[keys[i]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.fromObject(object.exceptionPrincipals[keys[i]]);
                                    }
                                }
                                switch (object.relevance) {
                                default:
                                    if (typeof object.relevance === "number") {
                                        message.relevance = object.relevance;
                                        break;
                                    }
                                    break;
                                case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                case 0:
                                    message.relevance = 0;
                                    break;
                                case "HEURISTIC_RELEVANCE_NORMAL":
                                case 1:
                                    message.relevance = 1;
                                    break;
                                case "HEURISTIC_RELEVANCE_HIGH":
                                case 2:
                                    message.relevance = 2;
                                    break;
                                }
                                if (object.condition != null) {
                                    if (typeof object.condition !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.condition: object expected");
                                    message.condition = $root.google.type.Expr.fromObject(object.condition);
                                }
                                if (object.conditionExplanation != null) {
                                    if (typeof object.conditionExplanation !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.conditionExplanation: object expected");
                                    message.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.fromObject(object.conditionExplanation);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a DenyRuleExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation} message DenyRuleExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            DenyRuleExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.objects || options.defaults) {
                                    object.deniedPermissions = {};
                                    object.exceptionPermissions = {};
                                    object.deniedPrincipals = {};
                                    object.exceptionPrincipals = {};
                                }
                                if (options.defaults) {
                                    object.denyAccessState = options.enums === String ? "DENY_ACCESS_STATE_UNSPECIFIED" : 0;
                                    object.combinedDeniedPermission = null;
                                    object.combinedExceptionPermission = null;
                                    object.combinedDeniedPrincipal = null;
                                    object.combinedExceptionPrincipal = null;
                                    object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    object.condition = null;
                                    object.conditionExplanation = null;
                                }
                                if (message.denyAccessState != null && message.hasOwnProperty("denyAccessState"))
                                    object.denyAccessState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] === undefined ? message.denyAccessState : $root.google.cloud.policytroubleshooter.iam.v3beta.DenyAccessState[message.denyAccessState] : message.denyAccessState;
                                if (message.combinedDeniedPermission != null && message.hasOwnProperty("combinedDeniedPermission"))
                                    object.combinedDeniedPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.combinedDeniedPermission, options);
                                var keys2;
                                if (message.deniedPermissions && (keys2 = Object.keys(message.deniedPermissions)).length) {
                                    object.deniedPermissions = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.deniedPermissions[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.deniedPermissions[keys2[j]], options);
                                }
                                if (message.combinedExceptionPermission != null && message.hasOwnProperty("combinedExceptionPermission"))
                                    object.combinedExceptionPermission = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.combinedExceptionPermission, options);
                                if (message.exceptionPermissions && (keys2 = Object.keys(message.exceptionPermissions)).length) {
                                    object.exceptionPermissions = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.exceptionPermissions[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.toObject(message.exceptionPermissions[keys2[j]], options);
                                }
                                if (message.combinedDeniedPrincipal != null && message.hasOwnProperty("combinedDeniedPrincipal"))
                                    object.combinedDeniedPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.combinedDeniedPrincipal, options);
                                if (message.deniedPrincipals && (keys2 = Object.keys(message.deniedPrincipals)).length) {
                                    object.deniedPrincipals = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.deniedPrincipals[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.deniedPrincipals[keys2[j]], options);
                                }
                                if (message.combinedExceptionPrincipal != null && message.hasOwnProperty("combinedExceptionPrincipal"))
                                    object.combinedExceptionPrincipal = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.combinedExceptionPrincipal, options);
                                if (message.exceptionPrincipals && (keys2 = Object.keys(message.exceptionPrincipals)).length) {
                                    object.exceptionPrincipals = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.exceptionPrincipals[keys2[j]] = $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.toObject(message.exceptionPrincipals[keys2[j]], options);
                                }
                                if (message.relevance != null && message.hasOwnProperty("relevance"))
                                    object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                if (message.condition != null && message.hasOwnProperty("condition"))
                                    object.condition = $root.google.type.Expr.toObject(message.condition, options);
                                if (message.conditionExplanation != null && message.hasOwnProperty("conditionExplanation"))
                                    object.conditionExplanation = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.toObject(message.conditionExplanation, options);
                                return object;
                            };
    
                            /**
                             * Converts this DenyRuleExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            DenyRuleExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for DenyRuleExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            DenyRuleExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation";
                            };
    
                            DenyRuleExplanation.AnnotatedPermissionMatching = (function() {
    
                                /**
                                 * Properties of an AnnotatedPermissionMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                                 * @interface IAnnotatedPermissionMatching
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.PermissionPatternMatchingState|null} [permissionMatchingState] AnnotatedPermissionMatching permissionMatchingState
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] AnnotatedPermissionMatching relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedPermissionMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                                 * @classdesc Represents an AnnotatedPermissionMatching.
                                 * @implements IAnnotatedPermissionMatching
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching=} [properties] Properties to set
                                 */
                                function AnnotatedPermissionMatching(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedPermissionMatching permissionMatchingState.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.PermissionPatternMatchingState} permissionMatchingState
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 */
                                AnnotatedPermissionMatching.prototype.permissionMatchingState = 0;
    
                                /**
                                 * AnnotatedPermissionMatching relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 */
                                AnnotatedPermissionMatching.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedPermissionMatching instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching instance
                                 */
                                AnnotatedPermissionMatching.create = function create(properties) {
                                    return new AnnotatedPermissionMatching(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedPermissionMatching message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching} message AnnotatedPermissionMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedPermissionMatching.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.permissionMatchingState != null && Object.hasOwnProperty.call(message, "permissionMatchingState"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.permissionMatchingState);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedPermissionMatching message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedPermissionMatching} message AnnotatedPermissionMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedPermissionMatching.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedPermissionMatching message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedPermissionMatching.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.permissionMatchingState = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedPermissionMatching message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedPermissionMatching.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedPermissionMatching message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedPermissionMatching.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.permissionMatchingState != null && message.hasOwnProperty("permissionMatchingState"))
                                        switch (message.permissionMatchingState) {
                                        default:
                                            return "permissionMatchingState: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedPermissionMatching message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching} AnnotatedPermissionMatching
                                 */
                                AnnotatedPermissionMatching.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching();
                                    switch (object.permissionMatchingState) {
                                    default:
                                        if (typeof object.permissionMatchingState === "number") {
                                            message.permissionMatchingState = object.permissionMatchingState;
                                            break;
                                        }
                                        break;
                                    case "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.permissionMatchingState = 0;
                                        break;
                                    case "PERMISSION_PATTERN_MATCHED":
                                    case 1:
                                        message.permissionMatchingState = 1;
                                        break;
                                    case "PERMISSION_PATTERN_NOT_MATCHED":
                                    case 2:
                                        message.permissionMatchingState = 2;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedPermissionMatching message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching} message AnnotatedPermissionMatching
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedPermissionMatching.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.permissionMatchingState = options.enums === String ? "PERMISSION_PATTERN_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.permissionMatchingState != null && message.hasOwnProperty("permissionMatchingState"))
                                        object.permissionMatchingState = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.PermissionPatternMatchingState[message.permissionMatchingState] === undefined ? message.permissionMatchingState : $root.google.cloud.policytroubleshooter.iam.v3beta.PermissionPatternMatchingState[message.permissionMatchingState] : message.permissionMatchingState;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedPermissionMatching to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedPermissionMatching.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedPermissionMatching
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedPermissionMatching.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedPermissionMatching";
                                };
    
                                return AnnotatedPermissionMatching;
                            })();
    
                            DenyRuleExplanation.AnnotatedDenyPrincipalMatching = (function() {
    
                                /**
                                 * Properties of an AnnotatedDenyPrincipalMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                                 * @interface IAnnotatedDenyPrincipalMatching
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState|null} [membership] AnnotatedDenyPrincipalMatching membership
                                 * @property {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance|null} [relevance] AnnotatedDenyPrincipalMatching relevance
                                 */
    
                                /**
                                 * Constructs a new AnnotatedDenyPrincipalMatching.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation
                                 * @classdesc Represents an AnnotatedDenyPrincipalMatching.
                                 * @implements IAnnotatedDenyPrincipalMatching
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching=} [properties] Properties to set
                                 */
                                function AnnotatedDenyPrincipalMatching(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * AnnotatedDenyPrincipalMatching membership.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState} membership
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.membership = 0;
    
                                /**
                                 * AnnotatedDenyPrincipalMatching relevance.
                                 * @member {google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance} relevance
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.relevance = 0;
    
                                /**
                                 * Creates a new AnnotatedDenyPrincipalMatching instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching instance
                                 */
                                AnnotatedDenyPrincipalMatching.create = function create(properties) {
                                    return new AnnotatedDenyPrincipalMatching(properties);
                                };
    
                                /**
                                 * Encodes the specified AnnotatedDenyPrincipalMatching message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedDenyPrincipalMatching.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.membership);
                                    if (message.relevance != null && Object.hasOwnProperty.call(message, "relevance"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.relevance);
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified AnnotatedDenyPrincipalMatching message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.IAnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                AnnotatedDenyPrincipalMatching.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an AnnotatedDenyPrincipalMatching message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedDenyPrincipalMatching.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.membership = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.relevance = reader.int32();
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an AnnotatedDenyPrincipalMatching message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                AnnotatedDenyPrincipalMatching.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an AnnotatedDenyPrincipalMatching message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                AnnotatedDenyPrincipalMatching.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        switch (message.membership) {
                                        default:
                                            return "membership: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                            break;
                                        }
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        switch (message.relevance) {
                                        default:
                                            return "relevance: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    return null;
                                };
    
                                /**
                                 * Creates an AnnotatedDenyPrincipalMatching message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} AnnotatedDenyPrincipalMatching
                                 */
                                AnnotatedDenyPrincipalMatching.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching();
                                    switch (object.membership) {
                                    default:
                                        if (typeof object.membership === "number") {
                                            message.membership = object.membership;
                                            break;
                                        }
                                        break;
                                    case "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED":
                                    case 0:
                                        message.membership = 0;
                                        break;
                                    case "MEMBERSHIP_MATCHED":
                                    case 1:
                                        message.membership = 1;
                                        break;
                                    case "MEMBERSHIP_NOT_MATCHED":
                                    case 2:
                                        message.membership = 2;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_INFO":
                                    case 3:
                                        message.membership = 3;
                                        break;
                                    case "MEMBERSHIP_UNKNOWN_UNSUPPORTED":
                                    case 4:
                                        message.membership = 4;
                                        break;
                                    }
                                    switch (object.relevance) {
                                    default:
                                        if (typeof object.relevance === "number") {
                                            message.relevance = object.relevance;
                                            break;
                                        }
                                        break;
                                    case "HEURISTIC_RELEVANCE_UNSPECIFIED":
                                    case 0:
                                        message.relevance = 0;
                                        break;
                                    case "HEURISTIC_RELEVANCE_NORMAL":
                                    case 1:
                                        message.relevance = 1;
                                        break;
                                    case "HEURISTIC_RELEVANCE_HIGH":
                                    case 2:
                                        message.relevance = 2;
                                        break;
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an AnnotatedDenyPrincipalMatching message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching} message AnnotatedDenyPrincipalMatching
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                AnnotatedDenyPrincipalMatching.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.membership = options.enums === String ? "MEMBERSHIP_MATCHING_STATE_UNSPECIFIED" : 0;
                                        object.relevance = options.enums === String ? "HEURISTIC_RELEVANCE_UNSPECIFIED" : 0;
                                    }
                                    if (message.membership != null && message.hasOwnProperty("membership"))
                                        object.membership = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState[message.membership] === undefined ? message.membership : $root.google.cloud.policytroubleshooter.iam.v3beta.MembershipMatchingState[message.membership] : message.membership;
                                    if (message.relevance != null && message.hasOwnProperty("relevance"))
                                        object.relevance = options.enums === String ? $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] === undefined ? message.relevance : $root.google.cloud.policytroubleshooter.iam.v3beta.HeuristicRelevance[message.relevance] : message.relevance;
                                    return object;
                                };
    
                                /**
                                 * Converts this AnnotatedDenyPrincipalMatching to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                AnnotatedDenyPrincipalMatching.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for AnnotatedDenyPrincipalMatching
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                AnnotatedDenyPrincipalMatching.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.DenyRuleExplanation.AnnotatedDenyPrincipalMatching";
                                };
    
                                return AnnotatedDenyPrincipalMatching;
                            })();
    
                            return DenyRuleExplanation;
                        })();
    
                        v3beta.ConditionExplanation = (function() {
    
                            /**
                             * Properties of a ConditionExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @interface IConditionExplanation
                             * @property {google.protobuf.IValue|null} [value] ConditionExplanation value
                             * @property {Array.<google.rpc.IStatus>|null} [errors] ConditionExplanation errors
                             * @property {Array.<google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState>|null} [evaluationStates] ConditionExplanation evaluationStates
                             */
    
                            /**
                             * Constructs a new ConditionExplanation.
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta
                             * @classdesc Represents a ConditionExplanation.
                             * @implements IConditionExplanation
                             * @constructor
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation=} [properties] Properties to set
                             */
                            function ConditionExplanation(properties) {
                                this.errors = [];
                                this.evaluationStates = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ConditionExplanation value.
                             * @member {google.protobuf.IValue|null|undefined} value
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.value = null;
    
                            /**
                             * ConditionExplanation errors.
                             * @member {Array.<google.rpc.IStatus>} errors
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.errors = $util.emptyArray;
    
                            /**
                             * ConditionExplanation evaluationStates.
                             * @member {Array.<google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState>} evaluationStates
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @instance
                             */
                            ConditionExplanation.prototype.evaluationStates = $util.emptyArray;
    
                            /**
                             * Creates a new ConditionExplanation instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation=} [properties] Properties to set
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation} ConditionExplanation instance
                             */
                            ConditionExplanation.create = function create(properties) {
                                return new ConditionExplanation(properties);
                            };
    
                            /**
                             * Encodes the specified ConditionExplanation message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation} message ConditionExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionExplanation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    $root.google.protobuf.Value.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.evaluationStates != null && message.evaluationStates.length)
                                    for (var i = 0; i < message.evaluationStates.length; ++i)
                                        $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.encode(message.evaluationStates[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.errors != null && message.errors.length)
                                    for (var i = 0; i < message.errors.length; ++i)
                                        $root.google.rpc.Status.encode(message.errors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ConditionExplanation message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.IConditionExplanation} message ConditionExplanation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConditionExplanation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ConditionExplanation message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation} ConditionExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionExplanation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            if (!(message.errors && message.errors.length))
                                                message.errors = [];
                                            message.errors.push($root.google.rpc.Status.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.evaluationStates && message.evaluationStates.length))
                                                message.evaluationStates = [];
                                            message.evaluationStates.push($root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ConditionExplanation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation} ConditionExplanation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConditionExplanation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ConditionExplanation message.
                             * @function verify
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConditionExplanation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.value != null && message.hasOwnProperty("value")) {
                                    var error = $root.google.protobuf.Value.verify(message.value);
                                    if (error)
                                        return "value." + error;
                                }
                                if (message.errors != null && message.hasOwnProperty("errors")) {
                                    if (!Array.isArray(message.errors))
                                        return "errors: array expected";
                                    for (var i = 0; i < message.errors.length; ++i) {
                                        var error = $root.google.rpc.Status.verify(message.errors[i]);
                                        if (error)
                                            return "errors." + error;
                                    }
                                }
                                if (message.evaluationStates != null && message.hasOwnProperty("evaluationStates")) {
                                    if (!Array.isArray(message.evaluationStates))
                                        return "evaluationStates: array expected";
                                    for (var i = 0; i < message.evaluationStates.length; ++i) {
                                        var error = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.verify(message.evaluationStates[i]);
                                        if (error)
                                            return "evaluationStates." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a ConditionExplanation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation} ConditionExplanation
                             */
                            ConditionExplanation.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation)
                                    return object;
                                var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation();
                                if (object.value != null) {
                                    if (typeof object.value !== "object")
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.value: object expected");
                                    message.value = $root.google.protobuf.Value.fromObject(object.value);
                                }
                                if (object.errors) {
                                    if (!Array.isArray(object.errors))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.errors: array expected");
                                    message.errors = [];
                                    for (var i = 0; i < object.errors.length; ++i) {
                                        if (typeof object.errors[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.errors: object expected");
                                        message.errors[i] = $root.google.rpc.Status.fromObject(object.errors[i]);
                                    }
                                }
                                if (object.evaluationStates) {
                                    if (!Array.isArray(object.evaluationStates))
                                        throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.evaluationStates: array expected");
                                    message.evaluationStates = [];
                                    for (var i = 0; i < object.evaluationStates.length; ++i) {
                                        if (typeof object.evaluationStates[i] !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.evaluationStates: object expected");
                                        message.evaluationStates[i] = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.fromObject(object.evaluationStates[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ConditionExplanation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation} message ConditionExplanation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConditionExplanation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.evaluationStates = [];
                                    object.errors = [];
                                }
                                if (options.defaults)
                                    object.value = null;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = $root.google.protobuf.Value.toObject(message.value, options);
                                if (message.evaluationStates && message.evaluationStates.length) {
                                    object.evaluationStates = [];
                                    for (var j = 0; j < message.evaluationStates.length; ++j)
                                        object.evaluationStates[j] = $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.toObject(message.evaluationStates[j], options);
                                }
                                if (message.errors && message.errors.length) {
                                    object.errors = [];
                                    for (var j = 0; j < message.errors.length; ++j)
                                        object.errors[j] = $root.google.rpc.Status.toObject(message.errors[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ConditionExplanation to JSON.
                             * @function toJSON
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConditionExplanation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ConditionExplanation
                             * @function getTypeUrl
                             * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ConditionExplanation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation";
                            };
    
                            ConditionExplanation.EvaluationState = (function() {
    
                                /**
                                 * Properties of an EvaluationState.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                                 * @interface IEvaluationState
                                 * @property {number|null} [start] EvaluationState start
                                 * @property {number|null} [end] EvaluationState end
                                 * @property {google.protobuf.IValue|null} [value] EvaluationState value
                                 * @property {Array.<google.rpc.IStatus>|null} [errors] EvaluationState errors
                                 */
    
                                /**
                                 * Constructs a new EvaluationState.
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation
                                 * @classdesc Represents an EvaluationState.
                                 * @implements IEvaluationState
                                 * @constructor
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState=} [properties] Properties to set
                                 */
                                function EvaluationState(properties) {
                                    this.errors = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * EvaluationState start.
                                 * @member {number} start
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.start = 0;
    
                                /**
                                 * EvaluationState end.
                                 * @member {number} end
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.end = 0;
    
                                /**
                                 * EvaluationState value.
                                 * @member {google.protobuf.IValue|null|undefined} value
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.value = null;
    
                                /**
                                 * EvaluationState errors.
                                 * @member {Array.<google.rpc.IStatus>} errors
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @instance
                                 */
                                EvaluationState.prototype.errors = $util.emptyArray;
    
                                /**
                                 * Creates a new EvaluationState instance using the specified properties.
                                 * @function create
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState=} [properties] Properties to set
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState} EvaluationState instance
                                 */
                                EvaluationState.create = function create(properties) {
                                    return new EvaluationState(properties);
                                };
    
                                /**
                                 * Encodes the specified EvaluationState message. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState} message EvaluationState message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EvaluationState.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                        $root.google.protobuf.Value.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.errors != null && message.errors.length)
                                        for (var i = 0; i < message.errors.length; ++i)
                                            $root.google.rpc.Status.encode(message.errors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified EvaluationState message, length delimited. Does not implicitly {@link google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.IEvaluationState} message EvaluationState message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EvaluationState.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes an EvaluationState message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState} EvaluationState
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EvaluationState.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.start = reader.int32();
                                                break;
                                            }
                                        case 2: {
                                                message.end = reader.int32();
                                                break;
                                            }
                                        case 3: {
                                                message.value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 4: {
                                                if (!(message.errors && message.errors.length))
                                                    message.errors = [];
                                                message.errors.push($root.google.rpc.Status.decode(reader, reader.uint32()));
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes an EvaluationState message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState} EvaluationState
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EvaluationState.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies an EvaluationState message.
                                 * @function verify
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                EvaluationState.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.start != null && message.hasOwnProperty("start"))
                                        if (!$util.isInteger(message.start))
                                            return "start: integer expected";
                                    if (message.end != null && message.hasOwnProperty("end"))
                                        if (!$util.isInteger(message.end))
                                            return "end: integer expected";
                                    if (message.value != null && message.hasOwnProperty("value")) {
                                        var error = $root.google.protobuf.Value.verify(message.value);
                                        if (error)
                                            return "value." + error;
                                    }
                                    if (message.errors != null && message.hasOwnProperty("errors")) {
                                        if (!Array.isArray(message.errors))
                                            return "errors: array expected";
                                        for (var i = 0; i < message.errors.length; ++i) {
                                            var error = $root.google.rpc.Status.verify(message.errors[i]);
                                            if (error)
                                                return "errors." + error;
                                        }
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates an EvaluationState message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState} EvaluationState
                                 */
                                EvaluationState.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState)
                                        return object;
                                    var message = new $root.google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState();
                                    if (object.start != null)
                                        message.start = object.start | 0;
                                    if (object.end != null)
                                        message.end = object.end | 0;
                                    if (object.value != null) {
                                        if (typeof object.value !== "object")
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.value: object expected");
                                        message.value = $root.google.protobuf.Value.fromObject(object.value);
                                    }
                                    if (object.errors) {
                                        if (!Array.isArray(object.errors))
                                            throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.errors: array expected");
                                        message.errors = [];
                                        for (var i = 0; i < object.errors.length; ++i) {
                                            if (typeof object.errors[i] !== "object")
                                                throw TypeError(".google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState.errors: object expected");
                                            message.errors[i] = $root.google.rpc.Status.fromObject(object.errors[i]);
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from an EvaluationState message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState} message EvaluationState
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                EvaluationState.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.errors = [];
                                    if (options.defaults) {
                                        object.start = 0;
                                        object.end = 0;
                                        object.value = null;
                                    }
                                    if (message.start != null && message.hasOwnProperty("start"))
                                        object.start = message.start;
                                    if (message.end != null && message.hasOwnProperty("end"))
                                        object.end = message.end;
                                    if (message.value != null && message.hasOwnProperty("value"))
                                        object.value = $root.google.protobuf.Value.toObject(message.value, options);
                                    if (message.errors && message.errors.length) {
                                        object.errors = [];
                                        for (var j = 0; j < message.errors.length; ++j)
                                            object.errors[j] = $root.google.rpc.Status.toObject(message.errors[j], options);
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this EvaluationState to JSON.
                                 * @function toJSON
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                EvaluationState.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for EvaluationState
                                 * @function getTypeUrl
                                 * @memberof google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                EvaluationState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.cloud.policytroubleshooter.iam.v3beta.ConditionExplanation.EvaluationState";
                                };
    
                                return EvaluationState;
                            })();
    
                            return ConditionExplanation;
                        })();
    
                        return v3beta;
                    })();
    
                    return iam;
                })();
    
                return policytroubleshooter;
            })();
    
            return cloud;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {google.protobuf.FieldOptions.OptionTargetType|null} [target] FieldOptions target
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions target.
                 * @member {google.protobuf.FieldOptions.OptionTargetType} target
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.target = 0;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.target);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 18: {
                                message.target = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.target != null && message.hasOwnProperty("target"))
                        switch (message.target) {
                        default:
                            return "target: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    switch (object.target) {
                    default:
                        if (typeof object.target === "number") {
                            message.target = object.target;
                            break;
                        }
                        break;
                    case "TARGET_TYPE_UNKNOWN":
                    case 0:
                        message.target = 0;
                        break;
                    case "TARGET_TYPE_FILE":
                    case 1:
                        message.target = 1;
                        break;
                    case "TARGET_TYPE_EXTENSION_RANGE":
                    case 2:
                        message.target = 2;
                        break;
                    case "TARGET_TYPE_MESSAGE":
                    case 3:
                        message.target = 3;
                        break;
                    case "TARGET_TYPE_FIELD":
                    case 4:
                        message.target = 4;
                        break;
                    case "TARGET_TYPE_ONEOF":
                    case 5:
                        message.target = 5;
                        break;
                    case "TARGET_TYPE_ENUM":
                    case 6:
                        message.target = 6;
                        break;
                    case "TARGET_TYPE_ENUM_ENTRY":
                    case 7:
                        message.target = 7;
                        break;
                    case "TARGET_TYPE_SERVICE":
                    case 8:
                        message.target = 8;
                        break;
                    case "TARGET_TYPE_METHOD":
                    case 9:
                        message.target = 9;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === undefined ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        case 1049: {
                                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.Struct = (function() {
    
                /**
                 * Properties of a Struct.
                 * @memberof google.protobuf
                 * @interface IStruct
                 * @property {Object.<string,google.protobuf.IValue>|null} [fields] Struct fields
                 */
    
                /**
                 * Constructs a new Struct.
                 * @memberof google.protobuf
                 * @classdesc Represents a Struct.
                 * @implements IStruct
                 * @constructor
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 */
                function Struct(properties) {
                    this.fields = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Struct fields.
                 * @member {Object.<string,google.protobuf.IValue>} fields
                 * @memberof google.protobuf.Struct
                 * @instance
                 */
                Struct.prototype.fields = $util.emptyObject;
    
                /**
                 * Creates a new Struct instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 * @returns {google.protobuf.Struct} Struct instance
                 */
                Struct.create = function create(properties) {
                    return new Struct(properties);
                };
    
                /**
                 * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && Object.hasOwnProperty.call(message, "fields"))
                        for (var keys = Object.keys(message.fields), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.google.protobuf.Value.encode(message.fields[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Struct(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (message.fields === $util.emptyObject)
                                    message.fields = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.fields[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Struct message.
                 * @function verify
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Struct.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!$util.isObject(message.fields))
                            return "fields: object expected";
                        var key = Object.keys(message.fields);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.fields[key[i]]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Struct message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Struct} Struct
                 */
                Struct.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Struct)
                        return object;
                    var message = new $root.google.protobuf.Struct();
                    if (object.fields) {
                        if (typeof object.fields !== "object")
                            throw TypeError(".google.protobuf.Struct.fields: object expected");
                        message.fields = {};
                        for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                            if (typeof object.fields[keys[i]] !== "object")
                                throw TypeError(".google.protobuf.Struct.fields: object expected");
                            message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Struct message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Struct.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.fields = {};
                    var keys2;
                    if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                        object.fields = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Struct to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Struct
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Struct.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Struct
                 * @function getTypeUrl
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Struct.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Struct";
                };
    
                return Struct;
            })();
    
            protobuf.Value = (function() {
    
                /**
                 * Properties of a Value.
                 * @memberof google.protobuf
                 * @interface IValue
                 * @property {google.protobuf.NullValue|null} [nullValue] Value nullValue
                 * @property {number|null} [numberValue] Value numberValue
                 * @property {string|null} [stringValue] Value stringValue
                 * @property {boolean|null} [boolValue] Value boolValue
                 * @property {google.protobuf.IStruct|null} [structValue] Value structValue
                 * @property {google.protobuf.IListValue|null} [listValue] Value listValue
                 */
    
                /**
                 * Constructs a new Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a Value.
                 * @implements IValue
                 * @constructor
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 */
                function Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Value nullValue.
                 * @member {google.protobuf.NullValue|null|undefined} nullValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.nullValue = null;
    
                /**
                 * Value numberValue.
                 * @member {number|null|undefined} numberValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.numberValue = null;
    
                /**
                 * Value stringValue.
                 * @member {string|null|undefined} stringValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.stringValue = null;
    
                /**
                 * Value boolValue.
                 * @member {boolean|null|undefined} boolValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.boolValue = null;
    
                /**
                 * Value structValue.
                 * @member {google.protobuf.IStruct|null|undefined} structValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.structValue = null;
    
                /**
                 * Value listValue.
                 * @member {google.protobuf.IListValue|null|undefined} listValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.listValue = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Value kind.
                 * @member {"nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue"|undefined} kind
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Object.defineProperty(Value.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 * @returns {google.protobuf.Value} Value instance
                 */
                Value.create = function create(properties) {
                    return new Value(properties);
                };
    
                /**
                 * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nullValue != null && Object.hasOwnProperty.call(message, "nullValue"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nullValue);
                    if (message.numberValue != null && Object.hasOwnProperty.call(message, "numberValue"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.numberValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                    if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                    if (message.structValue != null && Object.hasOwnProperty.call(message, "structValue"))
                        $root.google.protobuf.Struct.encode(message.structValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.listValue != null && Object.hasOwnProperty.call(message, "listValue"))
                        $root.google.protobuf.ListValue.encode(message.listValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.nullValue = reader.int32();
                                break;
                            }
                        case 2: {
                                message.numberValue = reader.double();
                                break;
                            }
                        case 3: {
                                message.stringValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.boolValue = reader.bool();
                                break;
                            }
                        case 5: {
                                message.structValue = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.listValue = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Value message.
                 * @function verify
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        properties.kind = 1;
                        switch (message.nullValue) {
                        default:
                            return "nullValue: enum value expected";
                        case 0:
                            break;
                        }
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.numberValue !== "number")
                            return "numberValue: number expected";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (!$util.isString(message.stringValue))
                            return "stringValue: string expected";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.boolValue !== "boolean")
                            return "boolValue: boolean expected";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.Struct.verify(message.structValue);
                            if (error)
                                return "structValue." + error;
                        }
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.ListValue.verify(message.listValue);
                            if (error)
                                return "listValue." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Value} Value
                 */
                Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Value)
                        return object;
                    var message = new $root.google.protobuf.Value();
                    switch (object.nullValue) {
                    default:
                        if (typeof object.nullValue === "number") {
                            message.nullValue = object.nullValue;
                            break;
                        }
                        break;
                    case "NULL_VALUE":
                    case 0:
                        message.nullValue = 0;
                        break;
                    }
                    if (object.numberValue != null)
                        message.numberValue = Number(object.numberValue);
                    if (object.stringValue != null)
                        message.stringValue = String(object.stringValue);
                    if (object.boolValue != null)
                        message.boolValue = Boolean(object.boolValue);
                    if (object.structValue != null) {
                        if (typeof object.structValue !== "object")
                            throw TypeError(".google.protobuf.Value.structValue: object expected");
                        message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
                    }
                    if (object.listValue != null) {
                        if (typeof object.listValue !== "object")
                            throw TypeError(".google.protobuf.Value.listValue: object expected");
                        message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] === undefined ? message.nullValue : $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                        if (options.oneofs)
                            object.kind = "nullValue";
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                        if (options.oneofs)
                            object.kind = "numberValue";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        object.stringValue = message.stringValue;
                        if (options.oneofs)
                            object.kind = "stringValue";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        object.boolValue = message.boolValue;
                        if (options.oneofs)
                            object.kind = "boolValue";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                        if (options.oneofs)
                            object.kind = "structValue";
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                        if (options.oneofs)
                            object.kind = "listValue";
                    }
                    return object;
                };
    
                /**
                 * Converts this Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Value";
                };
    
                return Value;
            })();
    
            /**
             * NullValue enum.
             * @name google.protobuf.NullValue
             * @enum {number}
             * @property {number} NULL_VALUE=0 NULL_VALUE value
             */
            protobuf.NullValue = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NULL_VALUE"] = 0;
                return values;
            })();
    
            protobuf.ListValue = (function() {
    
                /**
                 * Properties of a ListValue.
                 * @memberof google.protobuf
                 * @interface IListValue
                 * @property {Array.<google.protobuf.IValue>|null} [values] ListValue values
                 */
    
                /**
                 * Constructs a new ListValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a ListValue.
                 * @implements IListValue
                 * @constructor
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 */
                function ListValue(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListValue values.
                 * @member {Array.<google.protobuf.IValue>} values
                 * @memberof google.protobuf.ListValue
                 * @instance
                 */
                ListValue.prototype.values = $util.emptyArray;
    
                /**
                 * Creates a new ListValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 * @returns {google.protobuf.ListValue} ListValue instance
                 */
                ListValue.create = function create(properties) {
                    return new ListValue(properties);
                };
    
                /**
                 * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ListValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.values && message.values.length))
                                    message.values = [];
                                message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListValue message.
                 * @function verify
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.values[i]);
                            if (error)
                                return "values." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ListValue} ListValue
                 */
                ListValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ListValue)
                        return object;
                    var message = new $root.google.protobuf.ListValue();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".google.protobuf.ListValue.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i) {
                            if (typeof object.values[i] !== "object")
                                throw TypeError(".google.protobuf.ListValue.values: object expected");
                            message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ListValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ListValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ListValue";
                };
    
                return ListValue;
            })();
    
            return protobuf;
        })();
    
        google.iam = (function() {
    
            /**
             * Namespace iam.
             * @memberof google
             * @namespace
             */
            var iam = {};
    
            iam.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.iam
                 * @namespace
                 */
                var v1 = {};
    
                v1.Policy = (function() {
    
                    /**
                     * Properties of a Policy.
                     * @memberof google.iam.v1
                     * @interface IPolicy
                     * @property {number|null} [version] Policy version
                     * @property {Array.<google.iam.v1.IBinding>|null} [bindings] Policy bindings
                     * @property {Array.<google.iam.v1.IAuditConfig>|null} [auditConfigs] Policy auditConfigs
                     * @property {Uint8Array|null} [etag] Policy etag
                     */
    
                    /**
                     * Constructs a new Policy.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        this.bindings = [];
                        this.auditConfigs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Policy version.
                     * @member {number} version
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.version = 0;
    
                    /**
                     * Policy bindings.
                     * @member {Array.<google.iam.v1.IBinding>} bindings
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.bindings = $util.emptyArray;
    
                    /**
                     * Policy auditConfigs.
                     * @member {Array.<google.iam.v1.IAuditConfig>} auditConfigs
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.auditConfigs = $util.emptyArray;
    
                    /**
                     * Policy etag.
                     * @member {Uint8Array} etag
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.etag = $util.newBuffer([]);
    
                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     * @returns {google.iam.v1.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };
    
                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.version);
                        if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.etag);
                        if (message.bindings != null && message.bindings.length)
                            for (var i = 0; i < message.bindings.length; ++i)
                                $root.google.iam.v1.Binding.encode(message.bindings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.auditConfigs != null && message.auditConfigs.length)
                            for (var i = 0; i < message.auditConfigs.length; ++i)
                                $root.google.iam.v1.AuditConfig.encode(message.auditConfigs[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Policy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.version = reader.int32();
                                    break;
                                }
                            case 4: {
                                    if (!(message.bindings && message.bindings.length))
                                        message.bindings = [];
                                    message.bindings.push($root.google.iam.v1.Binding.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 6: {
                                    if (!(message.auditConfigs && message.auditConfigs.length))
                                        message.auditConfigs = [];
                                    message.auditConfigs.push($root.google.iam.v1.AuditConfig.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 3: {
                                    message.etag = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.bindings != null && message.hasOwnProperty("bindings")) {
                            if (!Array.isArray(message.bindings))
                                return "bindings: array expected";
                            for (var i = 0; i < message.bindings.length; ++i) {
                                var error = $root.google.iam.v1.Binding.verify(message.bindings[i]);
                                if (error)
                                    return "bindings." + error;
                            }
                        }
                        if (message.auditConfigs != null && message.hasOwnProperty("auditConfigs")) {
                            if (!Array.isArray(message.auditConfigs))
                                return "auditConfigs: array expected";
                            for (var i = 0; i < message.auditConfigs.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfig.verify(message.auditConfigs[i]);
                                if (error)
                                    return "auditConfigs." + error;
                            }
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!(message.etag && typeof message.etag.length === "number" || $util.isString(message.etag)))
                                return "etag: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Policy)
                            return object;
                        var message = new $root.google.iam.v1.Policy();
                        if (object.version != null)
                            message.version = object.version | 0;
                        if (object.bindings) {
                            if (!Array.isArray(object.bindings))
                                throw TypeError(".google.iam.v1.Policy.bindings: array expected");
                            message.bindings = [];
                            for (var i = 0; i < object.bindings.length; ++i) {
                                if (typeof object.bindings[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.bindings: object expected");
                                message.bindings[i] = $root.google.iam.v1.Binding.fromObject(object.bindings[i]);
                            }
                        }
                        if (object.auditConfigs) {
                            if (!Array.isArray(object.auditConfigs))
                                throw TypeError(".google.iam.v1.Policy.auditConfigs: array expected");
                            message.auditConfigs = [];
                            for (var i = 0; i < object.auditConfigs.length; ++i) {
                                if (typeof object.auditConfigs[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.auditConfigs: object expected");
                                message.auditConfigs[i] = $root.google.iam.v1.AuditConfig.fromObject(object.auditConfigs[i]);
                            }
                        }
                        if (object.etag != null)
                            if (typeof object.etag === "string")
                                $util.base64.decode(object.etag, message.etag = $util.newBuffer($util.base64.length(object.etag)), 0);
                            else if (object.etag.length >= 0)
                                message.etag = object.etag;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindings = [];
                            object.auditConfigs = [];
                        }
                        if (options.defaults) {
                            object.version = 0;
                            if (options.bytes === String)
                                object.etag = "";
                            else {
                                object.etag = [];
                                if (options.bytes !== Array)
                                    object.etag = $util.newBuffer(object.etag);
                            }
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = options.bytes === String ? $util.base64.encode(message.etag, 0, message.etag.length) : options.bytes === Array ? Array.prototype.slice.call(message.etag) : message.etag;
                        if (message.bindings && message.bindings.length) {
                            object.bindings = [];
                            for (var j = 0; j < message.bindings.length; ++j)
                                object.bindings[j] = $root.google.iam.v1.Binding.toObject(message.bindings[j], options);
                        }
                        if (message.auditConfigs && message.auditConfigs.length) {
                            object.auditConfigs = [];
                            for (var j = 0; j < message.auditConfigs.length; ++j)
                                object.auditConfigs[j] = $root.google.iam.v1.AuditConfig.toObject(message.auditConfigs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Policy
                     * @function getTypeUrl
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Policy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.Policy";
                    };
    
                    return Policy;
                })();
    
                v1.Binding = (function() {
    
                    /**
                     * Properties of a Binding.
                     * @memberof google.iam.v1
                     * @interface IBinding
                     * @property {string|null} [role] Binding role
                     * @property {Array.<string>|null} [members] Binding members
                     * @property {google.type.IExpr|null} [condition] Binding condition
                     */
    
                    /**
                     * Constructs a new Binding.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Binding.
                     * @implements IBinding
                     * @constructor
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     */
                    function Binding(properties) {
                        this.members = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Binding role.
                     * @member {string} role
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.role = "";
    
                    /**
                     * Binding members.
                     * @member {Array.<string>} members
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.members = $util.emptyArray;
    
                    /**
                     * Binding condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.condition = null;
    
                    /**
                     * Creates a new Binding instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     * @returns {google.iam.v1.Binding} Binding instance
                     */
                    Binding.create = function create(properties) {
                        return new Binding(properties);
                    };
    
                    /**
                     * Encodes the specified Binding message. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.role);
                        if (message.members != null && message.members.length)
                            for (var i = 0; i < message.members.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Binding message, length delimited. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Binding();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.role = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.members && message.members.length))
                                        message.members = [];
                                    message.members.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Binding message.
                     * @function verify
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Binding.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.members != null && message.hasOwnProperty("members")) {
                            if (!Array.isArray(message.members))
                                return "members: array expected";
                            for (var i = 0; i < message.members.length; ++i)
                                if (!$util.isString(message.members[i]))
                                    return "members: string[] expected";
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Binding message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Binding} Binding
                     */
                    Binding.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Binding)
                            return object;
                        var message = new $root.google.iam.v1.Binding();
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.members) {
                            if (!Array.isArray(object.members))
                                throw TypeError(".google.iam.v1.Binding.members: array expected");
                            message.members = [];
                            for (var i = 0; i < object.members.length; ++i)
                                message.members[i] = String(object.members[i]);
                        }
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.Binding.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Binding message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.Binding} message Binding
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Binding.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.members = [];
                        if (options.defaults) {
                            object.role = "";
                            object.condition = null;
                        }
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.members && message.members.length) {
                            object.members = [];
                            for (var j = 0; j < message.members.length; ++j)
                                object.members[j] = message.members[j];
                        }
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this Binding to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Binding
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Binding.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Binding
                     * @function getTypeUrl
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Binding.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.Binding";
                    };
    
                    return Binding;
                })();
    
                v1.AuditConfig = (function() {
    
                    /**
                     * Properties of an AuditConfig.
                     * @memberof google.iam.v1
                     * @interface IAuditConfig
                     * @property {string|null} [service] AuditConfig service
                     * @property {Array.<google.iam.v1.IAuditLogConfig>|null} [auditLogConfigs] AuditConfig auditLogConfigs
                     */
    
                    /**
                     * Constructs a new AuditConfig.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfig.
                     * @implements IAuditConfig
                     * @constructor
                     * @param {google.iam.v1.IAuditConfig=} [properties] Properties to set
                     */
                    function AuditConfig(properties) {
                        this.auditLogConfigs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfig service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     */
                    AuditConfig.prototype.service = "";
    
                    /**
                     * AuditConfig auditLogConfigs.
                     * @member {Array.<google.iam.v1.IAuditLogConfig>} auditLogConfigs
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     */
                    AuditConfig.prototype.auditLogConfigs = $util.emptyArray;
    
                    /**
                     * Creates a new AuditConfig instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfig} AuditConfig instance
                     */
                    AuditConfig.create = function create(properties) {
                        return new AuditConfig(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfig message. Does not implicitly {@link google.iam.v1.AuditConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig} message AuditConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                        if (message.auditLogConfigs != null && message.auditLogConfigs.length)
                            for (var i = 0; i < message.auditLogConfigs.length; ++i)
                                $root.google.iam.v1.AuditLogConfig.encode(message.auditLogConfigs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfig message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig} message AuditConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.service = reader.string();
                                    break;
                                }
                            case 3: {
                                    if (!(message.auditLogConfigs && message.auditLogConfigs.length))
                                        message.auditLogConfigs = [];
                                    message.auditLogConfigs.push($root.google.iam.v1.AuditLogConfig.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfig message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.auditLogConfigs != null && message.hasOwnProperty("auditLogConfigs")) {
                            if (!Array.isArray(message.auditLogConfigs))
                                return "auditLogConfigs: array expected";
                            for (var i = 0; i < message.auditLogConfigs.length; ++i) {
                                var error = $root.google.iam.v1.AuditLogConfig.verify(message.auditLogConfigs[i]);
                                if (error)
                                    return "auditLogConfigs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     */
                    AuditConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfig)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfig();
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.auditLogConfigs) {
                            if (!Array.isArray(object.auditLogConfigs))
                                throw TypeError(".google.iam.v1.AuditConfig.auditLogConfigs: array expected");
                            message.auditLogConfigs = [];
                            for (var i = 0; i < object.auditLogConfigs.length; ++i) {
                                if (typeof object.auditLogConfigs[i] !== "object")
                                    throw TypeError(".google.iam.v1.AuditConfig.auditLogConfigs: object expected");
                                message.auditLogConfigs[i] = $root.google.iam.v1.AuditLogConfig.fromObject(object.auditLogConfigs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.AuditConfig} message AuditConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.auditLogConfigs = [];
                        if (options.defaults)
                            object.service = "";
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.auditLogConfigs && message.auditLogConfigs.length) {
                            object.auditLogConfigs = [];
                            for (var j = 0; j < message.auditLogConfigs.length; ++j)
                                object.auditLogConfigs[j] = $root.google.iam.v1.AuditLogConfig.toObject(message.auditLogConfigs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfig to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditConfig
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditConfig";
                    };
    
                    return AuditConfig;
                })();
    
                v1.AuditLogConfig = (function() {
    
                    /**
                     * Properties of an AuditLogConfig.
                     * @memberof google.iam.v1
                     * @interface IAuditLogConfig
                     * @property {google.iam.v1.AuditLogConfig.LogType|null} [logType] AuditLogConfig logType
                     * @property {Array.<string>|null} [exemptedMembers] AuditLogConfig exemptedMembers
                     */
    
                    /**
                     * Constructs a new AuditLogConfig.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditLogConfig.
                     * @implements IAuditLogConfig
                     * @constructor
                     * @param {google.iam.v1.IAuditLogConfig=} [properties] Properties to set
                     */
                    function AuditLogConfig(properties) {
                        this.exemptedMembers = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditLogConfig logType.
                     * @member {google.iam.v1.AuditLogConfig.LogType} logType
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     */
                    AuditLogConfig.prototype.logType = 0;
    
                    /**
                     * AuditLogConfig exemptedMembers.
                     * @member {Array.<string>} exemptedMembers
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     */
                    AuditLogConfig.prototype.exemptedMembers = $util.emptyArray;
    
                    /**
                     * Creates a new AuditLogConfig instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig instance
                     */
                    AuditLogConfig.create = function create(properties) {
                        return new AuditLogConfig(properties);
                    };
    
                    /**
                     * Encodes the specified AuditLogConfig message. Does not implicitly {@link google.iam.v1.AuditLogConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig} message AuditLogConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditLogConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logType);
                        if (message.exemptedMembers != null && message.exemptedMembers.length)
                            for (var i = 0; i < message.exemptedMembers.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.exemptedMembers[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditLogConfig message, length delimited. Does not implicitly {@link google.iam.v1.AuditLogConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig} message AuditLogConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditLogConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditLogConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditLogConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditLogConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.logType = reader.int32();
                                    break;
                                }
                            case 2: {
                                    if (!(message.exemptedMembers && message.exemptedMembers.length))
                                        message.exemptedMembers = [];
                                    message.exemptedMembers.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditLogConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditLogConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditLogConfig message.
                     * @function verify
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditLogConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            switch (message.logType) {
                            default:
                                return "logType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.exemptedMembers != null && message.hasOwnProperty("exemptedMembers")) {
                            if (!Array.isArray(message.exemptedMembers))
                                return "exemptedMembers: array expected";
                            for (var i = 0; i < message.exemptedMembers.length; ++i)
                                if (!$util.isString(message.exemptedMembers[i]))
                                    return "exemptedMembers: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AuditLogConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     */
                    AuditLogConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditLogConfig)
                            return object;
                        var message = new $root.google.iam.v1.AuditLogConfig();
                        switch (object.logType) {
                        default:
                            if (typeof object.logType === "number") {
                                message.logType = object.logType;
                                break;
                            }
                            break;
                        case "LOG_TYPE_UNSPECIFIED":
                        case 0:
                            message.logType = 0;
                            break;
                        case "ADMIN_READ":
                        case 1:
                            message.logType = 1;
                            break;
                        case "DATA_WRITE":
                        case 2:
                            message.logType = 2;
                            break;
                        case "DATA_READ":
                        case 3:
                            message.logType = 3;
                            break;
                        }
                        if (object.exemptedMembers) {
                            if (!Array.isArray(object.exemptedMembers))
                                throw TypeError(".google.iam.v1.AuditLogConfig.exemptedMembers: array expected");
                            message.exemptedMembers = [];
                            for (var i = 0; i < object.exemptedMembers.length; ++i)
                                message.exemptedMembers[i] = String(object.exemptedMembers[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditLogConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.AuditLogConfig} message AuditLogConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditLogConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.exemptedMembers = [];
                        if (options.defaults)
                            object.logType = options.enums === String ? "LOG_TYPE_UNSPECIFIED" : 0;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = options.enums === String ? $root.google.iam.v1.AuditLogConfig.LogType[message.logType] === undefined ? message.logType : $root.google.iam.v1.AuditLogConfig.LogType[message.logType] : message.logType;
                        if (message.exemptedMembers && message.exemptedMembers.length) {
                            object.exemptedMembers = [];
                            for (var j = 0; j < message.exemptedMembers.length; ++j)
                                object.exemptedMembers[j] = message.exemptedMembers[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AuditLogConfig to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditLogConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditLogConfig
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditLogConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditLogConfig";
                    };
    
                    /**
                     * LogType enum.
                     * @name google.iam.v1.AuditLogConfig.LogType
                     * @enum {number}
                     * @property {number} LOG_TYPE_UNSPECIFIED=0 LOG_TYPE_UNSPECIFIED value
                     * @property {number} ADMIN_READ=1 ADMIN_READ value
                     * @property {number} DATA_WRITE=2 DATA_WRITE value
                     * @property {number} DATA_READ=3 DATA_READ value
                     */
                    AuditLogConfig.LogType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LOG_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADMIN_READ"] = 1;
                        values[valuesById[2] = "DATA_WRITE"] = 2;
                        values[valuesById[3] = "DATA_READ"] = 3;
                        return values;
                    })();
    
                    return AuditLogConfig;
                })();
    
                v1.PolicyDelta = (function() {
    
                    /**
                     * Properties of a PolicyDelta.
                     * @memberof google.iam.v1
                     * @interface IPolicyDelta
                     * @property {Array.<google.iam.v1.IBindingDelta>|null} [bindingDeltas] PolicyDelta bindingDeltas
                     * @property {Array.<google.iam.v1.IAuditConfigDelta>|null} [auditConfigDeltas] PolicyDelta auditConfigDeltas
                     */
    
                    /**
                     * Constructs a new PolicyDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a PolicyDelta.
                     * @implements IPolicyDelta
                     * @constructor
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     */
                    function PolicyDelta(properties) {
                        this.bindingDeltas = [];
                        this.auditConfigDeltas = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyDelta bindingDeltas.
                     * @member {Array.<google.iam.v1.IBindingDelta>} bindingDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.bindingDeltas = $util.emptyArray;
    
                    /**
                     * PolicyDelta auditConfigDeltas.
                     * @member {Array.<google.iam.v1.IAuditConfigDelta>} auditConfigDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.auditConfigDeltas = $util.emptyArray;
    
                    /**
                     * Creates a new PolicyDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta instance
                     */
                    PolicyDelta.create = function create(properties) {
                        return new PolicyDelta(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bindingDeltas != null && message.bindingDeltas.length)
                            for (var i = 0; i < message.bindingDeltas.length; ++i)
                                $root.google.iam.v1.BindingDelta.encode(message.bindingDeltas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.auditConfigDeltas != null && message.auditConfigDeltas.length)
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i)
                                $root.google.iam.v1.AuditConfigDelta.encode(message.auditConfigDeltas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message, length delimited. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.PolicyDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.bindingDeltas && message.bindingDeltas.length))
                                        message.bindingDeltas = [];
                                    message.bindingDeltas.push($root.google.iam.v1.BindingDelta.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    if (!(message.auditConfigDeltas && message.auditConfigDeltas.length))
                                        message.auditConfigDeltas = [];
                                    message.auditConfigDeltas.push($root.google.iam.v1.AuditConfigDelta.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyDelta message.
                     * @function verify
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bindingDeltas != null && message.hasOwnProperty("bindingDeltas")) {
                            if (!Array.isArray(message.bindingDeltas))
                                return "bindingDeltas: array expected";
                            for (var i = 0; i < message.bindingDeltas.length; ++i) {
                                var error = $root.google.iam.v1.BindingDelta.verify(message.bindingDeltas[i]);
                                if (error)
                                    return "bindingDeltas." + error;
                            }
                        }
                        if (message.auditConfigDeltas != null && message.hasOwnProperty("auditConfigDeltas")) {
                            if (!Array.isArray(message.auditConfigDeltas))
                                return "auditConfigDeltas: array expected";
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfigDelta.verify(message.auditConfigDeltas[i]);
                                if (error)
                                    return "auditConfigDeltas." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PolicyDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     */
                    PolicyDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.PolicyDelta)
                            return object;
                        var message = new $root.google.iam.v1.PolicyDelta();
                        if (object.bindingDeltas) {
                            if (!Array.isArray(object.bindingDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
                            message.bindingDeltas = [];
                            for (var i = 0; i < object.bindingDeltas.length; ++i) {
                                if (typeof object.bindingDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
                                message.bindingDeltas[i] = $root.google.iam.v1.BindingDelta.fromObject(object.bindingDeltas[i]);
                            }
                        }
                        if (object.auditConfigDeltas) {
                            if (!Array.isArray(object.auditConfigDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
                            message.auditConfigDeltas = [];
                            for (var i = 0; i < object.auditConfigDeltas.length; ++i) {
                                if (typeof object.auditConfigDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
                                message.auditConfigDeltas[i] = $root.google.iam.v1.AuditConfigDelta.fromObject(object.auditConfigDeltas[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.PolicyDelta} message PolicyDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindingDeltas = [];
                            object.auditConfigDeltas = [];
                        }
                        if (message.bindingDeltas && message.bindingDeltas.length) {
                            object.bindingDeltas = [];
                            for (var j = 0; j < message.bindingDeltas.length; ++j)
                                object.bindingDeltas[j] = $root.google.iam.v1.BindingDelta.toObject(message.bindingDeltas[j], options);
                        }
                        if (message.auditConfigDeltas && message.auditConfigDeltas.length) {
                            object.auditConfigDeltas = [];
                            for (var j = 0; j < message.auditConfigDeltas.length; ++j)
                                object.auditConfigDeltas[j] = $root.google.iam.v1.AuditConfigDelta.toObject(message.auditConfigDeltas[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PolicyDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PolicyDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PolicyDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.PolicyDelta";
                    };
    
                    return PolicyDelta;
                })();
    
                v1.BindingDelta = (function() {
    
                    /**
                     * Properties of a BindingDelta.
                     * @memberof google.iam.v1
                     * @interface IBindingDelta
                     * @property {google.iam.v1.BindingDelta.Action|null} [action] BindingDelta action
                     * @property {string|null} [role] BindingDelta role
                     * @property {string|null} [member] BindingDelta member
                     * @property {google.type.IExpr|null} [condition] BindingDelta condition
                     */
    
                    /**
                     * Constructs a new BindingDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a BindingDelta.
                     * @implements IBindingDelta
                     * @constructor
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     */
                    function BindingDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BindingDelta action.
                     * @member {google.iam.v1.BindingDelta.Action} action
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.action = 0;
    
                    /**
                     * BindingDelta role.
                     * @member {string} role
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.role = "";
    
                    /**
                     * BindingDelta member.
                     * @member {string} member
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.member = "";
    
                    /**
                     * BindingDelta condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.condition = null;
    
                    /**
                     * Creates a new BindingDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.BindingDelta} BindingDelta instance
                     */
                    BindingDelta.create = function create(properties) {
                        return new BindingDelta(properties);
                    };
    
                    /**
                     * Encodes the specified BindingDelta message. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                        if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.member);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BindingDelta message, length delimited. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.BindingDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.action = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.role = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.member = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BindingDelta message.
                     * @function verify
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BindingDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.member != null && message.hasOwnProperty("member"))
                            if (!$util.isString(message.member))
                                return "member: string expected";
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BindingDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     */
                    BindingDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.BindingDelta)
                            return object;
                        var message = new $root.google.iam.v1.BindingDelta();
                        switch (object.action) {
                        default:
                            if (typeof object.action === "number") {
                                message.action = object.action;
                                break;
                            }
                            break;
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.member != null)
                            message.member = String(object.member);
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BindingDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.BindingDelta} message BindingDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BindingDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.role = "";
                            object.member = "";
                            object.condition = null;
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.BindingDelta.Action[message.action] === undefined ? message.action : $root.google.iam.v1.BindingDelta.Action[message.action] : message.action;
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.member != null && message.hasOwnProperty("member"))
                            object.member = message.member;
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this BindingDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BindingDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BindingDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BindingDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.BindingDelta";
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.BindingDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    BindingDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return BindingDelta;
                })();
    
                v1.AuditConfigDelta = (function() {
    
                    /**
                     * Properties of an AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @interface IAuditConfigDelta
                     * @property {google.iam.v1.AuditConfigDelta.Action|null} [action] AuditConfigDelta action
                     * @property {string|null} [service] AuditConfigDelta service
                     * @property {string|null} [exemptedMember] AuditConfigDelta exemptedMember
                     * @property {string|null} [logType] AuditConfigDelta logType
                     */
    
                    /**
                     * Constructs a new AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfigDelta.
                     * @implements IAuditConfigDelta
                     * @constructor
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     */
                    function AuditConfigDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfigDelta action.
                     * @member {google.iam.v1.AuditConfigDelta.Action} action
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.action = 0;
    
                    /**
                     * AuditConfigDelta service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.service = "";
    
                    /**
                     * AuditConfigDelta exemptedMember.
                     * @member {string} exemptedMember
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.exemptedMember = "";
    
                    /**
                     * AuditConfigDelta logType.
                     * @member {string} logType
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.logType = "";
    
                    /**
                     * Creates a new AuditConfigDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta instance
                     */
                    AuditConfigDelta.create = function create(properties) {
                        return new AuditConfigDelta(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.service);
                        if (message.exemptedMember != null && Object.hasOwnProperty.call(message, "exemptedMember"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.exemptedMember);
                        if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.logType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfigDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.action = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.service = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.exemptedMember = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.logType = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfigDelta message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfigDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            if (!$util.isString(message.exemptedMember))
                                return "exemptedMember: string expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            if (!$util.isString(message.logType))
                                return "logType: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfigDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     */
                    AuditConfigDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfigDelta)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfigDelta();
                        switch (object.action) {
                        default:
                            if (typeof object.action === "number") {
                                message.action = object.action;
                                break;
                            }
                            break;
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.exemptedMember != null)
                            message.exemptedMember = String(object.exemptedMember);
                        if (object.logType != null)
                            message.logType = String(object.logType);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfigDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.AuditConfigDelta} message AuditConfigDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfigDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.service = "";
                            object.exemptedMember = "";
                            object.logType = "";
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.AuditConfigDelta.Action[message.action] === undefined ? message.action : $root.google.iam.v1.AuditConfigDelta.Action[message.action] : message.action;
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            object.exemptedMember = message.exemptedMember;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = message.logType;
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfigDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfigDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditConfigDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditConfigDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditConfigDelta";
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.AuditConfigDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    AuditConfigDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return AuditConfigDelta;
                })();
    
                return v1;
            })();
    
            iam.v2 = (function() {
    
                /**
                 * Namespace v2.
                 * @memberof google.iam
                 * @namespace
                 */
                var v2 = {};
    
                v2.Policies = (function() {
    
                    /**
                     * Constructs a new Policies service.
                     * @memberof google.iam.v2
                     * @classdesc Represents a Policies
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Policies(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Policies.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Policies;
    
                    /**
                     * Creates new Policies service using the specified rpc implementation.
                     * @function create
                     * @memberof google.iam.v2.Policies
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Policies} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Policies.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.iam.v2.Policies|listPolicies}.
                     * @memberof google.iam.v2.Policies
                     * @typedef ListPoliciesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v2.ListPoliciesResponse} [response] ListPoliciesResponse
                     */
    
                    /**
                     * Calls ListPolicies.
                     * @function listPolicies
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IListPoliciesRequest} request ListPoliciesRequest message or plain object
                     * @param {google.iam.v2.Policies.ListPoliciesCallback} callback Node-style callback called with the error, if any, and ListPoliciesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Policies.prototype.listPolicies = function listPolicies(request, callback) {
                        return this.rpcCall(listPolicies, $root.google.iam.v2.ListPoliciesRequest, $root.google.iam.v2.ListPoliciesResponse, request, callback);
                    }, "name", { value: "ListPolicies" });
    
                    /**
                     * Calls ListPolicies.
                     * @function listPolicies
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IListPoliciesRequest} request ListPoliciesRequest message or plain object
                     * @returns {Promise<google.iam.v2.ListPoliciesResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v2.Policies|getPolicy}.
                     * @memberof google.iam.v2.Policies
                     * @typedef GetPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v2.Policy} [response] Policy
                     */
    
                    /**
                     * Calls GetPolicy.
                     * @function getPolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IGetPolicyRequest} request GetPolicyRequest message or plain object
                     * @param {google.iam.v2.Policies.GetPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Policies.prototype.getPolicy = function getPolicy(request, callback) {
                        return this.rpcCall(getPolicy, $root.google.iam.v2.GetPolicyRequest, $root.google.iam.v2.Policy, request, callback);
                    }, "name", { value: "GetPolicy" });
    
                    /**
                     * Calls GetPolicy.
                     * @function getPolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IGetPolicyRequest} request GetPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v2.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v2.Policies|createPolicy}.
                     * @memberof google.iam.v2.Policies
                     * @typedef CreatePolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.longrunning.Operation} [response] Operation
                     */
    
                    /**
                     * Calls CreatePolicy.
                     * @function createPolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.ICreatePolicyRequest} request CreatePolicyRequest message or plain object
                     * @param {google.iam.v2.Policies.CreatePolicyCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Policies.prototype.createPolicy = function createPolicy(request, callback) {
                        return this.rpcCall(createPolicy, $root.google.iam.v2.CreatePolicyRequest, $root.google.longrunning.Operation, request, callback);
                    }, "name", { value: "CreatePolicy" });
    
                    /**
                     * Calls CreatePolicy.
                     * @function createPolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.ICreatePolicyRequest} request CreatePolicyRequest message or plain object
                     * @returns {Promise<google.longrunning.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v2.Policies|updatePolicy}.
                     * @memberof google.iam.v2.Policies
                     * @typedef UpdatePolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.longrunning.Operation} [response] Operation
                     */
    
                    /**
                     * Calls UpdatePolicy.
                     * @function updatePolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IUpdatePolicyRequest} request UpdatePolicyRequest message or plain object
                     * @param {google.iam.v2.Policies.UpdatePolicyCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Policies.prototype.updatePolicy = function updatePolicy(request, callback) {
                        return this.rpcCall(updatePolicy, $root.google.iam.v2.UpdatePolicyRequest, $root.google.longrunning.Operation, request, callback);
                    }, "name", { value: "UpdatePolicy" });
    
                    /**
                     * Calls UpdatePolicy.
                     * @function updatePolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IUpdatePolicyRequest} request UpdatePolicyRequest message or plain object
                     * @returns {Promise<google.longrunning.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v2.Policies|deletePolicy}.
                     * @memberof google.iam.v2.Policies
                     * @typedef DeletePolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.longrunning.Operation} [response] Operation
                     */
    
                    /**
                     * Calls DeletePolicy.
                     * @function deletePolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IDeletePolicyRequest} request DeletePolicyRequest message or plain object
                     * @param {google.iam.v2.Policies.DeletePolicyCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Policies.prototype.deletePolicy = function deletePolicy(request, callback) {
                        return this.rpcCall(deletePolicy, $root.google.iam.v2.DeletePolicyRequest, $root.google.longrunning.Operation, request, callback);
                    }, "name", { value: "DeletePolicy" });
    
                    /**
                     * Calls DeletePolicy.
                     * @function deletePolicy
                     * @memberof google.iam.v2.Policies
                     * @instance
                     * @param {google.iam.v2.IDeletePolicyRequest} request DeletePolicyRequest message or plain object
                     * @returns {Promise<google.longrunning.Operation>} Promise
                     * @variation 2
                     */
    
                    return Policies;
                })();
    
                v2.Policy = (function() {
    
                    /**
                     * Properties of a Policy.
                     * @memberof google.iam.v2
                     * @interface IPolicy
                     * @property {string|null} [name] Policy name
                     * @property {string|null} [uid] Policy uid
                     * @property {string|null} [kind] Policy kind
                     * @property {string|null} [displayName] Policy displayName
                     * @property {Object.<string,string>|null} [annotations] Policy annotations
                     * @property {string|null} [etag] Policy etag
                     * @property {google.protobuf.ITimestamp|null} [createTime] Policy createTime
                     * @property {google.protobuf.ITimestamp|null} [updateTime] Policy updateTime
                     * @property {google.protobuf.ITimestamp|null} [deleteTime] Policy deleteTime
                     * @property {Array.<google.iam.v2.IPolicyRule>|null} [rules] Policy rules
                     * @property {string|null} [managingAuthority] Policy managingAuthority
                     */
    
                    /**
                     * Constructs a new Policy.
                     * @memberof google.iam.v2
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {google.iam.v2.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        this.annotations = {};
                        this.rules = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Policy name.
                     * @member {string} name
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.name = "";
    
                    /**
                     * Policy uid.
                     * @member {string} uid
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.uid = "";
    
                    /**
                     * Policy kind.
                     * @member {string} kind
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.kind = "";
    
                    /**
                     * Policy displayName.
                     * @member {string} displayName
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.displayName = "";
    
                    /**
                     * Policy annotations.
                     * @member {Object.<string,string>} annotations
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.annotations = $util.emptyObject;
    
                    /**
                     * Policy etag.
                     * @member {string} etag
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.etag = "";
    
                    /**
                     * Policy createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.createTime = null;
    
                    /**
                     * Policy updateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.updateTime = null;
    
                    /**
                     * Policy deleteTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.deleteTime = null;
    
                    /**
                     * Policy rules.
                     * @member {Array.<google.iam.v2.IPolicyRule>} rules
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.rules = $util.emptyArray;
    
                    /**
                     * Policy managingAuthority.
                     * @member {string} managingAuthority
                     * @memberof google.iam.v2.Policy
                     * @instance
                     */
                    Policy.prototype.managingAuthority = "";
    
                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {google.iam.v2.IPolicy=} [properties] Properties to set
                     * @returns {google.iam.v2.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };
    
                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link google.iam.v2.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {google.iam.v2.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
                        if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.kind);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.displayName);
                        if (message.annotations != null && Object.hasOwnProperty.call(message, "annotations"))
                            for (var keys = Object.keys(message.annotations), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.annotations[keys[i]]).ldelim();
                        if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.etag);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                            $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.deleteTime != null && Object.hasOwnProperty.call(message, "deleteTime"))
                            $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.rules != null && message.rules.length)
                            for (var i = 0; i < message.rules.length; ++i)
                                $root.google.iam.v2.PolicyRule.encode(message.rules[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.managingAuthority != null && Object.hasOwnProperty.call(message, "managingAuthority"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.managingAuthority);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link google.iam.v2.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {google.iam.v2.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.Policy(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.uid = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.kind = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.displayName = reader.string();
                                    break;
                                }
                            case 5: {
                                    if (message.annotations === $util.emptyObject)
                                        message.annotations = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.annotations[key] = value;
                                    break;
                                }
                            case 6: {
                                    message.etag = reader.string();
                                    break;
                                }
                            case 7: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 9: {
                                    message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 10: {
                                    if (!(message.rules && message.rules.length))
                                        message.rules = [];
                                    message.rules.push($root.google.iam.v2.PolicyRule.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 11: {
                                    message.managingAuthority = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            if (!$util.isString(message.uid))
                                return "uid: string expected";
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            if (!$util.isString(message.kind))
                                return "kind: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.annotations != null && message.hasOwnProperty("annotations")) {
                            if (!$util.isObject(message.annotations))
                                return "annotations: object expected";
                            var key = Object.keys(message.annotations);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.annotations[key[i]]))
                                    return "annotations: string{k:string} expected";
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!$util.isString(message.etag))
                                return "etag: string expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                            if (error)
                                return "updateTime." + error;
                        }
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                            if (error)
                                return "deleteTime." + error;
                        }
                        if (message.rules != null && message.hasOwnProperty("rules")) {
                            if (!Array.isArray(message.rules))
                                return "rules: array expected";
                            for (var i = 0; i < message.rules.length; ++i) {
                                var error = $root.google.iam.v2.PolicyRule.verify(message.rules[i]);
                                if (error)
                                    return "rules." + error;
                            }
                        }
                        if (message.managingAuthority != null && message.hasOwnProperty("managingAuthority"))
                            if (!$util.isString(message.managingAuthority))
                                return "managingAuthority: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.Policy)
                            return object;
                        var message = new $root.google.iam.v2.Policy();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.uid != null)
                            message.uid = String(object.uid);
                        if (object.kind != null)
                            message.kind = String(object.kind);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.annotations) {
                            if (typeof object.annotations !== "object")
                                throw TypeError(".google.iam.v2.Policy.annotations: object expected");
                            message.annotations = {};
                            for (var keys = Object.keys(object.annotations), i = 0; i < keys.length; ++i)
                                message.annotations[keys[i]] = String(object.annotations[keys[i]]);
                        }
                        if (object.etag != null)
                            message.etag = String(object.etag);
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.iam.v2.Policy.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.updateTime != null) {
                            if (typeof object.updateTime !== "object")
                                throw TypeError(".google.iam.v2.Policy.updateTime: object expected");
                            message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                        }
                        if (object.deleteTime != null) {
                            if (typeof object.deleteTime !== "object")
                                throw TypeError(".google.iam.v2.Policy.deleteTime: object expected");
                            message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                        }
                        if (object.rules) {
                            if (!Array.isArray(object.rules))
                                throw TypeError(".google.iam.v2.Policy.rules: array expected");
                            message.rules = [];
                            for (var i = 0; i < object.rules.length; ++i) {
                                if (typeof object.rules[i] !== "object")
                                    throw TypeError(".google.iam.v2.Policy.rules: object expected");
                                message.rules[i] = $root.google.iam.v2.PolicyRule.fromObject(object.rules[i]);
                            }
                        }
                        if (object.managingAuthority != null)
                            message.managingAuthority = String(object.managingAuthority);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {google.iam.v2.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.rules = [];
                        if (options.objects || options.defaults)
                            object.annotations = {};
                        if (options.defaults) {
                            object.name = "";
                            object.uid = "";
                            object.kind = "";
                            object.displayName = "";
                            object.etag = "";
                            object.createTime = null;
                            object.updateTime = null;
                            object.deleteTime = null;
                            object.managingAuthority = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            object.uid = message.uid;
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            object.kind = message.kind;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        var keys2;
                        if (message.annotations && (keys2 = Object.keys(message.annotations)).length) {
                            object.annotations = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.annotations[keys2[j]] = message.annotations[keys2[j]];
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = message.etag;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                            object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                            object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                        if (message.rules && message.rules.length) {
                            object.rules = [];
                            for (var j = 0; j < message.rules.length; ++j)
                                object.rules[j] = $root.google.iam.v2.PolicyRule.toObject(message.rules[j], options);
                        }
                        if (message.managingAuthority != null && message.hasOwnProperty("managingAuthority"))
                            object.managingAuthority = message.managingAuthority;
                        return object;
                    };
    
                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Policy
                     * @function getTypeUrl
                     * @memberof google.iam.v2.Policy
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Policy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.Policy";
                    };
    
                    return Policy;
                })();
    
                v2.PolicyRule = (function() {
    
                    /**
                     * Properties of a PolicyRule.
                     * @memberof google.iam.v2
                     * @interface IPolicyRule
                     * @property {google.iam.v2.IDenyRule|null} [denyRule] PolicyRule denyRule
                     * @property {string|null} [description] PolicyRule description
                     */
    
                    /**
                     * Constructs a new PolicyRule.
                     * @memberof google.iam.v2
                     * @classdesc Represents a PolicyRule.
                     * @implements IPolicyRule
                     * @constructor
                     * @param {google.iam.v2.IPolicyRule=} [properties] Properties to set
                     */
                    function PolicyRule(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyRule denyRule.
                     * @member {google.iam.v2.IDenyRule|null|undefined} denyRule
                     * @memberof google.iam.v2.PolicyRule
                     * @instance
                     */
                    PolicyRule.prototype.denyRule = null;
    
                    /**
                     * PolicyRule description.
                     * @member {string} description
                     * @memberof google.iam.v2.PolicyRule
                     * @instance
                     */
                    PolicyRule.prototype.description = "";
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * PolicyRule kind.
                     * @member {"denyRule"|undefined} kind
                     * @memberof google.iam.v2.PolicyRule
                     * @instance
                     */
                    Object.defineProperty(PolicyRule.prototype, "kind", {
                        get: $util.oneOfGetter($oneOfFields = ["denyRule"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new PolicyRule instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {google.iam.v2.IPolicyRule=} [properties] Properties to set
                     * @returns {google.iam.v2.PolicyRule} PolicyRule instance
                     */
                    PolicyRule.create = function create(properties) {
                        return new PolicyRule(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyRule message. Does not implicitly {@link google.iam.v2.PolicyRule.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {google.iam.v2.IPolicyRule} message PolicyRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyRule.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                        if (message.denyRule != null && Object.hasOwnProperty.call(message, "denyRule"))
                            $root.google.iam.v2.DenyRule.encode(message.denyRule, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyRule message, length delimited. Does not implicitly {@link google.iam.v2.PolicyRule.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {google.iam.v2.IPolicyRule} message PolicyRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyRule.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyRule message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.PolicyRule} PolicyRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyRule.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.PolicyRule();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.denyRule = $root.google.iam.v2.DenyRule.decode(reader, reader.uint32());
                                    break;
                                }
                            case 1: {
                                    message.description = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyRule message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.PolicyRule} PolicyRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyRule.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyRule message.
                     * @function verify
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyRule.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.denyRule != null && message.hasOwnProperty("denyRule")) {
                            properties.kind = 1;
                            {
                                var error = $root.google.iam.v2.DenyRule.verify(message.denyRule);
                                if (error)
                                    return "denyRule." + error;
                            }
                        }
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a PolicyRule message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.PolicyRule} PolicyRule
                     */
                    PolicyRule.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.PolicyRule)
                            return object;
                        var message = new $root.google.iam.v2.PolicyRule();
                        if (object.denyRule != null) {
                            if (typeof object.denyRule !== "object")
                                throw TypeError(".google.iam.v2.PolicyRule.denyRule: object expected");
                            message.denyRule = $root.google.iam.v2.DenyRule.fromObject(object.denyRule);
                        }
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyRule message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {google.iam.v2.PolicyRule} message PolicyRule
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyRule.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.description = "";
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.denyRule != null && message.hasOwnProperty("denyRule")) {
                            object.denyRule = $root.google.iam.v2.DenyRule.toObject(message.denyRule, options);
                            if (options.oneofs)
                                object.kind = "denyRule";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PolicyRule to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.PolicyRule
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyRule.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PolicyRule
                     * @function getTypeUrl
                     * @memberof google.iam.v2.PolicyRule
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PolicyRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.PolicyRule";
                    };
    
                    return PolicyRule;
                })();
    
                v2.ListPoliciesRequest = (function() {
    
                    /**
                     * Properties of a ListPoliciesRequest.
                     * @memberof google.iam.v2
                     * @interface IListPoliciesRequest
                     * @property {string|null} [parent] ListPoliciesRequest parent
                     * @property {number|null} [pageSize] ListPoliciesRequest pageSize
                     * @property {string|null} [pageToken] ListPoliciesRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListPoliciesRequest.
                     * @memberof google.iam.v2
                     * @classdesc Represents a ListPoliciesRequest.
                     * @implements IListPoliciesRequest
                     * @constructor
                     * @param {google.iam.v2.IListPoliciesRequest=} [properties] Properties to set
                     */
                    function ListPoliciesRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListPoliciesRequest parent.
                     * @member {string} parent
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @instance
                     */
                    ListPoliciesRequest.prototype.parent = "";
    
                    /**
                     * ListPoliciesRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @instance
                     */
                    ListPoliciesRequest.prototype.pageSize = 0;
    
                    /**
                     * ListPoliciesRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @instance
                     */
                    ListPoliciesRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListPoliciesRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {google.iam.v2.IListPoliciesRequest=} [properties] Properties to set
                     * @returns {google.iam.v2.ListPoliciesRequest} ListPoliciesRequest instance
                     */
                    ListPoliciesRequest.create = function create(properties) {
                        return new ListPoliciesRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListPoliciesRequest message. Does not implicitly {@link google.iam.v2.ListPoliciesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {google.iam.v2.IListPoliciesRequest} message ListPoliciesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListPoliciesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListPoliciesRequest message, length delimited. Does not implicitly {@link google.iam.v2.ListPoliciesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {google.iam.v2.IListPoliciesRequest} message ListPoliciesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListPoliciesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListPoliciesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.ListPoliciesRequest} ListPoliciesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListPoliciesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.ListPoliciesRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.pageSize = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.pageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListPoliciesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.ListPoliciesRequest} ListPoliciesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListPoliciesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListPoliciesRequest message.
                     * @function verify
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListPoliciesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListPoliciesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.ListPoliciesRequest} ListPoliciesRequest
                     */
                    ListPoliciesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.ListPoliciesRequest)
                            return object;
                        var message = new $root.google.iam.v2.ListPoliciesRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListPoliciesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {google.iam.v2.ListPoliciesRequest} message ListPoliciesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListPoliciesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListPoliciesRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListPoliciesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListPoliciesRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v2.ListPoliciesRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListPoliciesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.ListPoliciesRequest";
                    };
    
                    return ListPoliciesRequest;
                })();
    
                v2.ListPoliciesResponse = (function() {
    
                    /**
                     * Properties of a ListPoliciesResponse.
                     * @memberof google.iam.v2
                     * @interface IListPoliciesResponse
                     * @property {Array.<google.iam.v2.IPolicy>|null} [policies] ListPoliciesResponse policies
                     * @property {string|null} [nextPageToken] ListPoliciesResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListPoliciesResponse.
                     * @memberof google.iam.v2
                     * @classdesc Represents a ListPoliciesResponse.
                     * @implements IListPoliciesResponse
                     * @constructor
                     * @param {google.iam.v2.IListPoliciesResponse=} [properties] Properties to set
                     */
                    function ListPoliciesResponse(properties) {
                        this.policies = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListPoliciesResponse policies.
                     * @member {Array.<google.iam.v2.IPolicy>} policies
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @instance
                     */
                    ListPoliciesResponse.prototype.policies = $util.emptyArray;
    
                    /**
                     * ListPoliciesResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @instance
                     */
                    ListPoliciesResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListPoliciesResponse instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {google.iam.v2.IListPoliciesResponse=} [properties] Properties to set
                     * @returns {google.iam.v2.ListPoliciesResponse} ListPoliciesResponse instance
                     */
                    ListPoliciesResponse.create = function create(properties) {
                        return new ListPoliciesResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListPoliciesResponse message. Does not implicitly {@link google.iam.v2.ListPoliciesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {google.iam.v2.IListPoliciesResponse} message ListPoliciesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListPoliciesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.policies != null && message.policies.length)
                            for (var i = 0; i < message.policies.length; ++i)
                                $root.google.iam.v2.Policy.encode(message.policies[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListPoliciesResponse message, length delimited. Does not implicitly {@link google.iam.v2.ListPoliciesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {google.iam.v2.IListPoliciesResponse} message ListPoliciesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListPoliciesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListPoliciesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.ListPoliciesResponse} ListPoliciesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListPoliciesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.ListPoliciesResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.policies && message.policies.length))
                                        message.policies = [];
                                    message.policies.push($root.google.iam.v2.Policy.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    message.nextPageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListPoliciesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.ListPoliciesResponse} ListPoliciesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListPoliciesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListPoliciesResponse message.
                     * @function verify
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListPoliciesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.policies != null && message.hasOwnProperty("policies")) {
                            if (!Array.isArray(message.policies))
                                return "policies: array expected";
                            for (var i = 0; i < message.policies.length; ++i) {
                                var error = $root.google.iam.v2.Policy.verify(message.policies[i]);
                                if (error)
                                    return "policies." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListPoliciesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.ListPoliciesResponse} ListPoliciesResponse
                     */
                    ListPoliciesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.ListPoliciesResponse)
                            return object;
                        var message = new $root.google.iam.v2.ListPoliciesResponse();
                        if (object.policies) {
                            if (!Array.isArray(object.policies))
                                throw TypeError(".google.iam.v2.ListPoliciesResponse.policies: array expected");
                            message.policies = [];
                            for (var i = 0; i < object.policies.length; ++i) {
                                if (typeof object.policies[i] !== "object")
                                    throw TypeError(".google.iam.v2.ListPoliciesResponse.policies: object expected");
                                message.policies[i] = $root.google.iam.v2.Policy.fromObject(object.policies[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListPoliciesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {google.iam.v2.ListPoliciesResponse} message ListPoliciesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListPoliciesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.policies = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.policies && message.policies.length) {
                            object.policies = [];
                            for (var j = 0; j < message.policies.length; ++j)
                                object.policies[j] = $root.google.iam.v2.Policy.toObject(message.policies[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListPoliciesResponse to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListPoliciesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListPoliciesResponse
                     * @function getTypeUrl
                     * @memberof google.iam.v2.ListPoliciesResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListPoliciesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.ListPoliciesResponse";
                    };
    
                    return ListPoliciesResponse;
                })();
    
                v2.GetPolicyRequest = (function() {
    
                    /**
                     * Properties of a GetPolicyRequest.
                     * @memberof google.iam.v2
                     * @interface IGetPolicyRequest
                     * @property {string|null} [name] GetPolicyRequest name
                     */
    
                    /**
                     * Constructs a new GetPolicyRequest.
                     * @memberof google.iam.v2
                     * @classdesc Represents a GetPolicyRequest.
                     * @implements IGetPolicyRequest
                     * @constructor
                     * @param {google.iam.v2.IGetPolicyRequest=} [properties] Properties to set
                     */
                    function GetPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetPolicyRequest name.
                     * @member {string} name
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @instance
                     */
                    GetPolicyRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {google.iam.v2.IGetPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v2.GetPolicyRequest} GetPolicyRequest instance
                     */
                    GetPolicyRequest.create = function create(properties) {
                        return new GetPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetPolicyRequest message. Does not implicitly {@link google.iam.v2.GetPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {google.iam.v2.IGetPolicyRequest} message GetPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v2.GetPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {google.iam.v2.IGetPolicyRequest} message GetPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.GetPolicyRequest} GetPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.GetPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.GetPolicyRequest} GetPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.GetPolicyRequest} GetPolicyRequest
                     */
                    GetPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.GetPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v2.GetPolicyRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {google.iam.v2.GetPolicyRequest} message GetPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetPolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v2.GetPolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetPolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.GetPolicyRequest";
                    };
    
                    return GetPolicyRequest;
                })();
    
                v2.CreatePolicyRequest = (function() {
    
                    /**
                     * Properties of a CreatePolicyRequest.
                     * @memberof google.iam.v2
                     * @interface ICreatePolicyRequest
                     * @property {string|null} [parent] CreatePolicyRequest parent
                     * @property {google.iam.v2.IPolicy|null} [policy] CreatePolicyRequest policy
                     * @property {string|null} [policyId] CreatePolicyRequest policyId
                     */
    
                    /**
                     * Constructs a new CreatePolicyRequest.
                     * @memberof google.iam.v2
                     * @classdesc Represents a CreatePolicyRequest.
                     * @implements ICreatePolicyRequest
                     * @constructor
                     * @param {google.iam.v2.ICreatePolicyRequest=} [properties] Properties to set
                     */
                    function CreatePolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreatePolicyRequest parent.
                     * @member {string} parent
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @instance
                     */
                    CreatePolicyRequest.prototype.parent = "";
    
                    /**
                     * CreatePolicyRequest policy.
                     * @member {google.iam.v2.IPolicy|null|undefined} policy
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @instance
                     */
                    CreatePolicyRequest.prototype.policy = null;
    
                    /**
                     * CreatePolicyRequest policyId.
                     * @member {string} policyId
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @instance
                     */
                    CreatePolicyRequest.prototype.policyId = "";
    
                    /**
                     * Creates a new CreatePolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {google.iam.v2.ICreatePolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v2.CreatePolicyRequest} CreatePolicyRequest instance
                     */
                    CreatePolicyRequest.create = function create(properties) {
                        return new CreatePolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreatePolicyRequest message. Does not implicitly {@link google.iam.v2.CreatePolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {google.iam.v2.ICreatePolicyRequest} message CreatePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreatePolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                            $root.google.iam.v2.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.policyId != null && Object.hasOwnProperty.call(message, "policyId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.policyId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreatePolicyRequest message, length delimited. Does not implicitly {@link google.iam.v2.CreatePolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {google.iam.v2.ICreatePolicyRequest} message CreatePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreatePolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreatePolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.CreatePolicyRequest} CreatePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreatePolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.CreatePolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.policy = $root.google.iam.v2.Policy.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.policyId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreatePolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.CreatePolicyRequest} CreatePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreatePolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreatePolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreatePolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.policy != null && message.hasOwnProperty("policy")) {
                            var error = $root.google.iam.v2.Policy.verify(message.policy);
                            if (error)
                                return "policy." + error;
                        }
                        if (message.policyId != null && message.hasOwnProperty("policyId"))
                            if (!$util.isString(message.policyId))
                                return "policyId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CreatePolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.CreatePolicyRequest} CreatePolicyRequest
                     */
                    CreatePolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.CreatePolicyRequest)
                            return object;
                        var message = new $root.google.iam.v2.CreatePolicyRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.policy != null) {
                            if (typeof object.policy !== "object")
                                throw TypeError(".google.iam.v2.CreatePolicyRequest.policy: object expected");
                            message.policy = $root.google.iam.v2.Policy.fromObject(object.policy);
                        }
                        if (object.policyId != null)
                            message.policyId = String(object.policyId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreatePolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {google.iam.v2.CreatePolicyRequest} message CreatePolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreatePolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.policy = null;
                            object.policyId = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            object.policy = $root.google.iam.v2.Policy.toObject(message.policy, options);
                        if (message.policyId != null && message.hasOwnProperty("policyId"))
                            object.policyId = message.policyId;
                        return object;
                    };
    
                    /**
                     * Converts this CreatePolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreatePolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CreatePolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v2.CreatePolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreatePolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.CreatePolicyRequest";
                    };
    
                    return CreatePolicyRequest;
                })();
    
                v2.UpdatePolicyRequest = (function() {
    
                    /**
                     * Properties of an UpdatePolicyRequest.
                     * @memberof google.iam.v2
                     * @interface IUpdatePolicyRequest
                     * @property {google.iam.v2.IPolicy|null} [policy] UpdatePolicyRequest policy
                     */
    
                    /**
                     * Constructs a new UpdatePolicyRequest.
                     * @memberof google.iam.v2
                     * @classdesc Represents an UpdatePolicyRequest.
                     * @implements IUpdatePolicyRequest
                     * @constructor
                     * @param {google.iam.v2.IUpdatePolicyRequest=} [properties] Properties to set
                     */
                    function UpdatePolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdatePolicyRequest policy.
                     * @member {google.iam.v2.IPolicy|null|undefined} policy
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @instance
                     */
                    UpdatePolicyRequest.prototype.policy = null;
    
                    /**
                     * Creates a new UpdatePolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {google.iam.v2.IUpdatePolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v2.UpdatePolicyRequest} UpdatePolicyRequest instance
                     */
                    UpdatePolicyRequest.create = function create(properties) {
                        return new UpdatePolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdatePolicyRequest message. Does not implicitly {@link google.iam.v2.UpdatePolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {google.iam.v2.IUpdatePolicyRequest} message UpdatePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdatePolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                            $root.google.iam.v2.Policy.encode(message.policy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdatePolicyRequest message, length delimited. Does not implicitly {@link google.iam.v2.UpdatePolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {google.iam.v2.IUpdatePolicyRequest} message UpdatePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdatePolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdatePolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.UpdatePolicyRequest} UpdatePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdatePolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.UpdatePolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.policy = $root.google.iam.v2.Policy.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdatePolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.UpdatePolicyRequest} UpdatePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdatePolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdatePolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdatePolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.policy != null && message.hasOwnProperty("policy")) {
                            var error = $root.google.iam.v2.Policy.verify(message.policy);
                            if (error)
                                return "policy." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdatePolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.UpdatePolicyRequest} UpdatePolicyRequest
                     */
                    UpdatePolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.UpdatePolicyRequest)
                            return object;
                        var message = new $root.google.iam.v2.UpdatePolicyRequest();
                        if (object.policy != null) {
                            if (typeof object.policy !== "object")
                                throw TypeError(".google.iam.v2.UpdatePolicyRequest.policy: object expected");
                            message.policy = $root.google.iam.v2.Policy.fromObject(object.policy);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdatePolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {google.iam.v2.UpdatePolicyRequest} message UpdatePolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdatePolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.policy = null;
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            object.policy = $root.google.iam.v2.Policy.toObject(message.policy, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdatePolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdatePolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UpdatePolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v2.UpdatePolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UpdatePolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.UpdatePolicyRequest";
                    };
    
                    return UpdatePolicyRequest;
                })();
    
                v2.DeletePolicyRequest = (function() {
    
                    /**
                     * Properties of a DeletePolicyRequest.
                     * @memberof google.iam.v2
                     * @interface IDeletePolicyRequest
                     * @property {string|null} [name] DeletePolicyRequest name
                     * @property {string|null} [etag] DeletePolicyRequest etag
                     */
    
                    /**
                     * Constructs a new DeletePolicyRequest.
                     * @memberof google.iam.v2
                     * @classdesc Represents a DeletePolicyRequest.
                     * @implements IDeletePolicyRequest
                     * @constructor
                     * @param {google.iam.v2.IDeletePolicyRequest=} [properties] Properties to set
                     */
                    function DeletePolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeletePolicyRequest name.
                     * @member {string} name
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @instance
                     */
                    DeletePolicyRequest.prototype.name = "";
    
                    /**
                     * DeletePolicyRequest etag.
                     * @member {string} etag
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @instance
                     */
                    DeletePolicyRequest.prototype.etag = "";
    
                    /**
                     * Creates a new DeletePolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {google.iam.v2.IDeletePolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v2.DeletePolicyRequest} DeletePolicyRequest instance
                     */
                    DeletePolicyRequest.create = function create(properties) {
                        return new DeletePolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeletePolicyRequest message. Does not implicitly {@link google.iam.v2.DeletePolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {google.iam.v2.IDeletePolicyRequest} message DeletePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeletePolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.etag);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeletePolicyRequest message, length delimited. Does not implicitly {@link google.iam.v2.DeletePolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {google.iam.v2.IDeletePolicyRequest} message DeletePolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeletePolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeletePolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.DeletePolicyRequest} DeletePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeletePolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.DeletePolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.etag = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeletePolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.DeletePolicyRequest} DeletePolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeletePolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeletePolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeletePolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!$util.isString(message.etag))
                                return "etag: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeletePolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.DeletePolicyRequest} DeletePolicyRequest
                     */
                    DeletePolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.DeletePolicyRequest)
                            return object;
                        var message = new $root.google.iam.v2.DeletePolicyRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.etag != null)
                            message.etag = String(object.etag);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeletePolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {google.iam.v2.DeletePolicyRequest} message DeletePolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeletePolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.etag = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = message.etag;
                        return object;
                    };
    
                    /**
                     * Converts this DeletePolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeletePolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeletePolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v2.DeletePolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeletePolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.DeletePolicyRequest";
                    };
    
                    return DeletePolicyRequest;
                })();
    
                v2.PolicyOperationMetadata = (function() {
    
                    /**
                     * Properties of a PolicyOperationMetadata.
                     * @memberof google.iam.v2
                     * @interface IPolicyOperationMetadata
                     * @property {google.protobuf.ITimestamp|null} [createTime] PolicyOperationMetadata createTime
                     */
    
                    /**
                     * Constructs a new PolicyOperationMetadata.
                     * @memberof google.iam.v2
                     * @classdesc Represents a PolicyOperationMetadata.
                     * @implements IPolicyOperationMetadata
                     * @constructor
                     * @param {google.iam.v2.IPolicyOperationMetadata=} [properties] Properties to set
                     */
                    function PolicyOperationMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyOperationMetadata createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @instance
                     */
                    PolicyOperationMetadata.prototype.createTime = null;
    
                    /**
                     * Creates a new PolicyOperationMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {google.iam.v2.IPolicyOperationMetadata=} [properties] Properties to set
                     * @returns {google.iam.v2.PolicyOperationMetadata} PolicyOperationMetadata instance
                     */
                    PolicyOperationMetadata.create = function create(properties) {
                        return new PolicyOperationMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyOperationMetadata message. Does not implicitly {@link google.iam.v2.PolicyOperationMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {google.iam.v2.IPolicyOperationMetadata} message PolicyOperationMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyOperationMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyOperationMetadata message, length delimited. Does not implicitly {@link google.iam.v2.PolicyOperationMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {google.iam.v2.IPolicyOperationMetadata} message PolicyOperationMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyOperationMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyOperationMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.PolicyOperationMetadata} PolicyOperationMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyOperationMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.PolicyOperationMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyOperationMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.PolicyOperationMetadata} PolicyOperationMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyOperationMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyOperationMetadata message.
                     * @function verify
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyOperationMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PolicyOperationMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.PolicyOperationMetadata} PolicyOperationMetadata
                     */
                    PolicyOperationMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.PolicyOperationMetadata)
                            return object;
                        var message = new $root.google.iam.v2.PolicyOperationMetadata();
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.iam.v2.PolicyOperationMetadata.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyOperationMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {google.iam.v2.PolicyOperationMetadata} message PolicyOperationMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyOperationMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.createTime = null;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this PolicyOperationMetadata to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyOperationMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PolicyOperationMetadata
                     * @function getTypeUrl
                     * @memberof google.iam.v2.PolicyOperationMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PolicyOperationMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.PolicyOperationMetadata";
                    };
    
                    return PolicyOperationMetadata;
                })();
    
                v2.DenyRule = (function() {
    
                    /**
                     * Properties of a DenyRule.
                     * @memberof google.iam.v2
                     * @interface IDenyRule
                     * @property {Array.<string>|null} [deniedPrincipals] DenyRule deniedPrincipals
                     * @property {Array.<string>|null} [exceptionPrincipals] DenyRule exceptionPrincipals
                     * @property {Array.<string>|null} [deniedPermissions] DenyRule deniedPermissions
                     * @property {Array.<string>|null} [exceptionPermissions] DenyRule exceptionPermissions
                     * @property {google.type.IExpr|null} [denialCondition] DenyRule denialCondition
                     */
    
                    /**
                     * Constructs a new DenyRule.
                     * @memberof google.iam.v2
                     * @classdesc Represents a DenyRule.
                     * @implements IDenyRule
                     * @constructor
                     * @param {google.iam.v2.IDenyRule=} [properties] Properties to set
                     */
                    function DenyRule(properties) {
                        this.deniedPrincipals = [];
                        this.exceptionPrincipals = [];
                        this.deniedPermissions = [];
                        this.exceptionPermissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DenyRule deniedPrincipals.
                     * @member {Array.<string>} deniedPrincipals
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     */
                    DenyRule.prototype.deniedPrincipals = $util.emptyArray;
    
                    /**
                     * DenyRule exceptionPrincipals.
                     * @member {Array.<string>} exceptionPrincipals
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     */
                    DenyRule.prototype.exceptionPrincipals = $util.emptyArray;
    
                    /**
                     * DenyRule deniedPermissions.
                     * @member {Array.<string>} deniedPermissions
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     */
                    DenyRule.prototype.deniedPermissions = $util.emptyArray;
    
                    /**
                     * DenyRule exceptionPermissions.
                     * @member {Array.<string>} exceptionPermissions
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     */
                    DenyRule.prototype.exceptionPermissions = $util.emptyArray;
    
                    /**
                     * DenyRule denialCondition.
                     * @member {google.type.IExpr|null|undefined} denialCondition
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     */
                    DenyRule.prototype.denialCondition = null;
    
                    /**
                     * Creates a new DenyRule instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {google.iam.v2.IDenyRule=} [properties] Properties to set
                     * @returns {google.iam.v2.DenyRule} DenyRule instance
                     */
                    DenyRule.create = function create(properties) {
                        return new DenyRule(properties);
                    };
    
                    /**
                     * Encodes the specified DenyRule message. Does not implicitly {@link google.iam.v2.DenyRule.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {google.iam.v2.IDenyRule} message DenyRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenyRule.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.deniedPrincipals != null && message.deniedPrincipals.length)
                            for (var i = 0; i < message.deniedPrincipals.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.deniedPrincipals[i]);
                        if (message.exceptionPrincipals != null && message.exceptionPrincipals.length)
                            for (var i = 0; i < message.exceptionPrincipals.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.exceptionPrincipals[i]);
                        if (message.deniedPermissions != null && message.deniedPermissions.length)
                            for (var i = 0; i < message.deniedPermissions.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.deniedPermissions[i]);
                        if (message.exceptionPermissions != null && message.exceptionPermissions.length)
                            for (var i = 0; i < message.exceptionPermissions.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.exceptionPermissions[i]);
                        if (message.denialCondition != null && Object.hasOwnProperty.call(message, "denialCondition"))
                            $root.google.type.Expr.encode(message.denialCondition, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DenyRule message, length delimited. Does not implicitly {@link google.iam.v2.DenyRule.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {google.iam.v2.IDenyRule} message DenyRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenyRule.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DenyRule message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v2.DenyRule} DenyRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenyRule.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v2.DenyRule();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.deniedPrincipals && message.deniedPrincipals.length))
                                        message.deniedPrincipals = [];
                                    message.deniedPrincipals.push(reader.string());
                                    break;
                                }
                            case 2: {
                                    if (!(message.exceptionPrincipals && message.exceptionPrincipals.length))
                                        message.exceptionPrincipals = [];
                                    message.exceptionPrincipals.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    if (!(message.deniedPermissions && message.deniedPermissions.length))
                                        message.deniedPermissions = [];
                                    message.deniedPermissions.push(reader.string());
                                    break;
                                }
                            case 4: {
                                    if (!(message.exceptionPermissions && message.exceptionPermissions.length))
                                        message.exceptionPermissions = [];
                                    message.exceptionPermissions.push(reader.string());
                                    break;
                                }
                            case 5: {
                                    message.denialCondition = $root.google.type.Expr.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DenyRule message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v2.DenyRule} DenyRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenyRule.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DenyRule message.
                     * @function verify
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DenyRule.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.deniedPrincipals != null && message.hasOwnProperty("deniedPrincipals")) {
                            if (!Array.isArray(message.deniedPrincipals))
                                return "deniedPrincipals: array expected";
                            for (var i = 0; i < message.deniedPrincipals.length; ++i)
                                if (!$util.isString(message.deniedPrincipals[i]))
                                    return "deniedPrincipals: string[] expected";
                        }
                        if (message.exceptionPrincipals != null && message.hasOwnProperty("exceptionPrincipals")) {
                            if (!Array.isArray(message.exceptionPrincipals))
                                return "exceptionPrincipals: array expected";
                            for (var i = 0; i < message.exceptionPrincipals.length; ++i)
                                if (!$util.isString(message.exceptionPrincipals[i]))
                                    return "exceptionPrincipals: string[] expected";
                        }
                        if (message.deniedPermissions != null && message.hasOwnProperty("deniedPermissions")) {
                            if (!Array.isArray(message.deniedPermissions))
                                return "deniedPermissions: array expected";
                            for (var i = 0; i < message.deniedPermissions.length; ++i)
                                if (!$util.isString(message.deniedPermissions[i]))
                                    return "deniedPermissions: string[] expected";
                        }
                        if (message.exceptionPermissions != null && message.hasOwnProperty("exceptionPermissions")) {
                            if (!Array.isArray(message.exceptionPermissions))
                                return "exceptionPermissions: array expected";
                            for (var i = 0; i < message.exceptionPermissions.length; ++i)
                                if (!$util.isString(message.exceptionPermissions[i]))
                                    return "exceptionPermissions: string[] expected";
                        }
                        if (message.denialCondition != null && message.hasOwnProperty("denialCondition")) {
                            var error = $root.google.type.Expr.verify(message.denialCondition);
                            if (error)
                                return "denialCondition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DenyRule message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v2.DenyRule} DenyRule
                     */
                    DenyRule.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v2.DenyRule)
                            return object;
                        var message = new $root.google.iam.v2.DenyRule();
                        if (object.deniedPrincipals) {
                            if (!Array.isArray(object.deniedPrincipals))
                                throw TypeError(".google.iam.v2.DenyRule.deniedPrincipals: array expected");
                            message.deniedPrincipals = [];
                            for (var i = 0; i < object.deniedPrincipals.length; ++i)
                                message.deniedPrincipals[i] = String(object.deniedPrincipals[i]);
                        }
                        if (object.exceptionPrincipals) {
                            if (!Array.isArray(object.exceptionPrincipals))
                                throw TypeError(".google.iam.v2.DenyRule.exceptionPrincipals: array expected");
                            message.exceptionPrincipals = [];
                            for (var i = 0; i < object.exceptionPrincipals.length; ++i)
                                message.exceptionPrincipals[i] = String(object.exceptionPrincipals[i]);
                        }
                        if (object.deniedPermissions) {
                            if (!Array.isArray(object.deniedPermissions))
                                throw TypeError(".google.iam.v2.DenyRule.deniedPermissions: array expected");
                            message.deniedPermissions = [];
                            for (var i = 0; i < object.deniedPermissions.length; ++i)
                                message.deniedPermissions[i] = String(object.deniedPermissions[i]);
                        }
                        if (object.exceptionPermissions) {
                            if (!Array.isArray(object.exceptionPermissions))
                                throw TypeError(".google.iam.v2.DenyRule.exceptionPermissions: array expected");
                            message.exceptionPermissions = [];
                            for (var i = 0; i < object.exceptionPermissions.length; ++i)
                                message.exceptionPermissions[i] = String(object.exceptionPermissions[i]);
                        }
                        if (object.denialCondition != null) {
                            if (typeof object.denialCondition !== "object")
                                throw TypeError(".google.iam.v2.DenyRule.denialCondition: object expected");
                            message.denialCondition = $root.google.type.Expr.fromObject(object.denialCondition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DenyRule message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {google.iam.v2.DenyRule} message DenyRule
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DenyRule.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.deniedPrincipals = [];
                            object.exceptionPrincipals = [];
                            object.deniedPermissions = [];
                            object.exceptionPermissions = [];
                        }
                        if (options.defaults)
                            object.denialCondition = null;
                        if (message.deniedPrincipals && message.deniedPrincipals.length) {
                            object.deniedPrincipals = [];
                            for (var j = 0; j < message.deniedPrincipals.length; ++j)
                                object.deniedPrincipals[j] = message.deniedPrincipals[j];
                        }
                        if (message.exceptionPrincipals && message.exceptionPrincipals.length) {
                            object.exceptionPrincipals = [];
                            for (var j = 0; j < message.exceptionPrincipals.length; ++j)
                                object.exceptionPrincipals[j] = message.exceptionPrincipals[j];
                        }
                        if (message.deniedPermissions && message.deniedPermissions.length) {
                            object.deniedPermissions = [];
                            for (var j = 0; j < message.deniedPermissions.length; ++j)
                                object.deniedPermissions[j] = message.deniedPermissions[j];
                        }
                        if (message.exceptionPermissions && message.exceptionPermissions.length) {
                            object.exceptionPermissions = [];
                            for (var j = 0; j < message.exceptionPermissions.length; ++j)
                                object.exceptionPermissions[j] = message.exceptionPermissions[j];
                        }
                        if (message.denialCondition != null && message.hasOwnProperty("denialCondition"))
                            object.denialCondition = $root.google.type.Expr.toObject(message.denialCondition, options);
                        return object;
                    };
    
                    /**
                     * Converts this DenyRule to JSON.
                     * @function toJSON
                     * @memberof google.iam.v2.DenyRule
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DenyRule.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DenyRule
                     * @function getTypeUrl
                     * @memberof google.iam.v2.DenyRule
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DenyRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v2.DenyRule";
                    };
    
                    return DenyRule;
                })();
    
                return v2;
            })();
    
            return iam;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Expr = (function() {
    
                /**
                 * Properties of an Expr.
                 * @memberof google.type
                 * @interface IExpr
                 * @property {string|null} [expression] Expr expression
                 * @property {string|null} [title] Expr title
                 * @property {string|null} [description] Expr description
                 * @property {string|null} [location] Expr location
                 */
    
                /**
                 * Constructs a new Expr.
                 * @memberof google.type
                 * @classdesc Represents an Expr.
                 * @implements IExpr
                 * @constructor
                 * @param {google.type.IExpr=} [properties] Properties to set
                 */
                function Expr(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Expr expression.
                 * @member {string} expression
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.expression = "";
    
                /**
                 * Expr title.
                 * @member {string} title
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.title = "";
    
                /**
                 * Expr description.
                 * @member {string} description
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.description = "";
    
                /**
                 * Expr location.
                 * @member {string} location
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.location = "";
    
                /**
                 * Creates a new Expr instance using the specified properties.
                 * @function create
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr=} [properties] Properties to set
                 * @returns {google.type.Expr} Expr instance
                 */
                Expr.create = function create(properties) {
                    return new Expr(properties);
                };
    
                /**
                 * Encodes the specified Expr message. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.expression);
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.location);
                    return writer;
                };
    
                /**
                 * Encodes the specified Expr message, length delimited. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Expr();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.expression = reader.string();
                                break;
                            }
                        case 2: {
                                message.title = reader.string();
                                break;
                            }
                        case 3: {
                                message.description = reader.string();
                                break;
                            }
                        case 4: {
                                message.location = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Expr message.
                 * @function verify
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Expr.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    return null;
                };
    
                /**
                 * Creates an Expr message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Expr} Expr
                 */
                Expr.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Expr)
                        return object;
                    var message = new $root.google.type.Expr();
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };
    
                /**
                 * Creates a plain object from an Expr message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.Expr} message Expr
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Expr.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.expression = "";
                        object.title = "";
                        object.description = "";
                        object.location = "";
                    }
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    return object;
                };
    
                /**
                 * Converts this Expr to JSON.
                 * @function toJSON
                 * @memberof google.type.Expr
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Expr.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Expr
                 * @function getTypeUrl
                 * @memberof google.type.Expr
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Expr.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.type.Expr";
                };
    
                return Expr;
            })();
    
            return type;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.done = reader.bool();
                                break;
                            }
                        case 4: {
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Operation
                 * @function getTypeUrl
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.Operation";
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 1: {
                                message.filter = reader.string();
                                break;
                            }
                        case 2: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 3: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operations && message.operations.length))
                                    message.operations = [];
                                message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsResponse
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CancelOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for WaitOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.responseType = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadataType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OperationInfo
                 * @function getTypeUrl
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.OperationInfo";
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
