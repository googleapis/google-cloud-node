// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as tasksModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2.TasksClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = tasksModule.v2.TasksClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = tasksModule.v2.TasksClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = tasksModule.v2.TasksClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new tasksModule.v2.TasksClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new tasksModule.v2.TasksClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.tasksStub, undefined);
      await client.initialize();
      assert(client.tasksStub);
    });

    it('has close method for the initialized client', done => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.tasksStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.tasksStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getTask', () => {
    it('invokes getTask without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.GetTaskRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.GetTaskRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.run.v2.Task()
      );
      client.innerApiCalls.getTask = stubSimpleCall(expectedResponse);
      const [response] = await client.getTask(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getTask as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTask as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTask without error using callback', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.GetTaskRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.GetTaskRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.run.v2.Task()
      );
      client.innerApiCalls.getTask =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTask(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.run.v2.ITask | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getTask as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTask as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTask with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.GetTaskRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.GetTaskRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTask = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getTask(request), expectedError);
      const actualRequest = (client.innerApiCalls.getTask as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTask as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTask with closed client', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.GetTaskRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.GetTaskRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTask(request), expectedError);
    });
  });

  describe('listTasks', () => {
    it('invokes listTasks without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
      ];
      client.innerApiCalls.listTasks = stubSimpleCall(expectedResponse);
      const [response] = await client.listTasks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTasks without error using callback', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
      ];
      client.innerApiCalls.listTasks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTasks(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.run.v2.ITask[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTasks with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTasks = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listTasks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTasks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTasksStream without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
      ];
      client.descriptors.page.listTasks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTasksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.run.v2.Task[] = [];
        stream.on('data', (response: protos.google.cloud.run.v2.Task) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTasks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTasks, request)
      );
      assert(
        (client.descriptors.page.listTasks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTasksStream with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTasks.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTasksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.run.v2.Task[] = [];
        stream.on('data', (response: protos.google.cloud.run.v2.Task) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTasks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTasks, request)
      );
      assert(
        (client.descriptors.page.listTasks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTasks without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
        generateSampleMessage(new protos.google.cloud.run.v2.Task()),
      ];
      client.descriptors.page.listTasks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.run.v2.ITask[] = [];
      const iterable = client.listTasksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listTasks.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listTasks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTasks with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.run.v2.ListTasksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.run.v2.ListTasksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTasks.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listTasksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.run.v2.ITask[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listTasks.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listTasks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('cryptoKey', () => {
      const fakePath = '/rendered/path/cryptoKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cryptoKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cryptoKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cryptoKeyPath', () => {
        const result = client.cryptoKeyPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCryptoKeyName', () => {
        const result = client.matchProjectFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCryptoKeyName', () => {
        const result = client.matchLocationFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromCryptoKeyName', () => {
        const result = client.matchKeyRingFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromCryptoKeyName', () => {
        const result = client.matchCryptoKeyFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('execution', () => {
      const fakePath = '/rendered/path/execution';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        job: 'jobValue',
        execution: 'executionValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.executionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.executionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('executionPath', () => {
        const result = client.executionPath(
          'projectValue',
          'locationValue',
          'jobValue',
          'executionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.executionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromExecutionName', () => {
        const result = client.matchProjectFromExecutionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromExecutionName', () => {
        const result = client.matchLocationFromExecutionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromExecutionName', () => {
        const result = client.matchJobFromExecutionName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExecutionFromExecutionName', () => {
        const result = client.matchExecutionFromExecutionName(fakePath);
        assert.strictEqual(result, 'executionValue');
        assert(
          (client.pathTemplates.executionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('job', () => {
      const fakePath = '/rendered/path/job';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        job: 'jobValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.jobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.jobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('jobPath', () => {
        const result = client.jobPath(
          'projectValue',
          'locationValue',
          'jobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.jobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromJobName', () => {
        const result = client.matchProjectFromJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromJobName', () => {
        const result = client.matchLocationFromJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromJobName', () => {
        const result = client.matchJobFromJobName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('revision', () => {
      const fakePath = '/rendered/path/revision';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service: 'serviceValue',
        revision: 'revisionValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.revisionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.revisionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('revisionPath', () => {
        const result = client.revisionPath(
          'projectValue',
          'locationValue',
          'serviceValue',
          'revisionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.revisionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRevisionName', () => {
        const result = client.matchProjectFromRevisionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.revisionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRevisionName', () => {
        const result = client.matchLocationFromRevisionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.revisionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromRevisionName', () => {
        const result = client.matchServiceFromRevisionName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.revisionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRevisionFromRevisionName', () => {
        const result = client.matchRevisionFromRevisionName(fakePath);
        assert.strictEqual(result, 'revisionValue');
        assert(
          (client.pathTemplates.revisionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('service', () => {
      const fakePath = '/rendered/path/service';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service: 'serviceValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.servicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.servicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('servicePath', () => {
        const result = client.servicePath(
          'projectValue',
          'locationValue',
          'serviceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.servicePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceName', () => {
        const result = client.matchProjectFromServiceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceName', () => {
        const result = client.matchLocationFromServiceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromServiceName', () => {
        const result = client.matchServiceFromServiceName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('task', () => {
      const fakePath = '/rendered/path/task';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        job: 'jobValue',
        execution: 'executionValue',
        task: 'taskValue',
      };
      const client = new tasksModule.v2.TasksClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taskPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taskPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taskPath', () => {
        const result = client.taskPath(
          'projectValue',
          'locationValue',
          'jobValue',
          'executionValue',
          'taskValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.taskPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTaskName', () => {
        const result = client.matchProjectFromTaskName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTaskName', () => {
        const result = client.matchLocationFromTaskName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromTaskName', () => {
        const result = client.matchJobFromTaskName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExecutionFromTaskName', () => {
        const result = client.matchExecutionFromTaskName(fakePath);
        assert.strictEqual(result, 'executionValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaskFromTaskName', () => {
        const result = client.matchTaskFromTaskName(fakePath);
        assert.strictEqual(result, 'taskValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
