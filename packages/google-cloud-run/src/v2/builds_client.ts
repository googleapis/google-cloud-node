// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LocationsClient,
  LocationProtos,
} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v2/builds_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './builds_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Cloud Run Build Control Plane API
 * @class
 * @memberof v2
 */
export class BuildsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  buildsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BuildsClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BuildsClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BuildsClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'run.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      executionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}/executions/{execution}'
      ),
      jobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}'
      ),
      revisionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}/revisions/{revision}'
      ),
      servicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobs/{job}/executions/{execution}/tasks/{task}'
      ),
      workerPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workerPools/{worker_pool}'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.run.v2.Builds',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.buildsStub) {
      return this.buildsStub;
    }

    // Put together the "service stub" for
    // google.cloud.run.v2.Builds.
    this.buildsStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.run.v2.Builds'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.run.v2.Builds,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const buildsStubMethods = ['submitBuild'];
    for (const methodName of buildsStubMethods) {
      const callPromise = this.buildsStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.buildsStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'run.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'run.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Submits a build in a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to build in. Location must be a region,
   *   e.g., 'us-central1' or 'global' if the global builder is to be used.
   *   Format:
   *   `projects/{project}/locations/{location}`
   * @param {google.cloud.run.v2.StorageSource} request.storageSource
   *   Required. Source for the build.
   * @param {string} request.imageUri
   *   Required. Artifact Registry URI to store the built image.
   * @param {google.cloud.run.v2.SubmitBuildRequest.BuildpacksBuild} request.buildpackBuild
   *   Build the source using Buildpacks.
   * @param {google.cloud.run.v2.SubmitBuildRequest.DockerBuild} request.dockerBuild
   *   Build the source using Docker. This means the source has a Dockerfile.
   * @param {string} [request.serviceAccount]
   *   Optional. The service account to use for the build. If not set, the default
   *   Cloud Build service account for the project will be used.
   * @param {string} [request.workerPool]
   *   Optional. Name of the Cloud Build Custom Worker Pool that should be used to
   *   build the function. The format of this field is
   *   `projects/{project}/locations/{region}/workerPools/{workerPool}` where
   *   `{project}` and `{region}` are the project id and region respectively where
   *   the worker pool is defined and `{workerPool}` is the short name of the
   *   worker pool.
   * @param {string[]} [request.tags]
   *   Optional. Additional tags to annotate the build.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.run.v2.SubmitBuildResponse|SubmitBuildResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/builds.submit_build.js</caption>
   * region_tag:run_v2_generated_Builds_SubmitBuild_async
   */
  submitBuild(
    request?: protos.google.cloud.run.v2.ISubmitBuildRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.run.v2.ISubmitBuildResponse,
      protos.google.cloud.run.v2.ISubmitBuildRequest | undefined,
      {} | undefined,
    ]
  >;
  submitBuild(
    request: protos.google.cloud.run.v2.ISubmitBuildRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.run.v2.ISubmitBuildResponse,
      protos.google.cloud.run.v2.ISubmitBuildRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitBuild(
    request: protos.google.cloud.run.v2.ISubmitBuildRequest,
    callback: Callback<
      protos.google.cloud.run.v2.ISubmitBuildResponse,
      protos.google.cloud.run.v2.ISubmitBuildRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitBuild(
    request?: protos.google.cloud.run.v2.ISubmitBuildRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.run.v2.ISubmitBuildResponse,
          protos.google.cloud.run.v2.ISubmitBuildRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.run.v2.ISubmitBuildResponse,
      protos.google.cloud.run.v2.ISubmitBuildRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.run.v2.ISubmitBuildResponse,
      protos.google.cloud.run.v2.ISubmitBuildRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitBuild(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified execution resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @param {string} execution
   * @returns {string} Resource name string.
   */
  executionPath(
    project: string,
    location: string,
    job: string,
    execution: string
  ) {
    return this.pathTemplates.executionPathTemplate.render({
      project: project,
      location: location,
      job: job,
      execution: execution,
    });
  }

  /**
   * Parse the project from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .project;
  }

  /**
   * Parse the location from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .location;
  }

  /**
   * Parse the job from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName).job;
  }

  /**
   * Parse the execution from Execution resource.
   *
   * @param {string} executionName
   *   A fully-qualified path representing Execution resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromExecutionName(executionName: string) {
    return this.pathTemplates.executionPathTemplate.match(executionName)
      .execution;
  }

  /**
   * Return a fully-qualified job resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @returns {string} Resource name string.
   */
  jobPath(project: string, location: string, job: string) {
    return this.pathTemplates.jobPathTemplate.render({
      project: project,
      location: location,
      job: job,
    });
  }

  /**
   * Parse the project from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).project;
  }

  /**
   * Parse the location from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).location;
  }

  /**
   * Parse the job from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).job;
  }

  /**
   * Return a fully-qualified revision resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @param {string} revision
   * @returns {string} Resource name string.
   */
  revisionPath(
    project: string,
    location: string,
    service: string,
    revision: string
  ) {
    return this.pathTemplates.revisionPathTemplate.render({
      project: project,
      location: location,
      service: service,
      revision: revision,
    });
  }

  /**
   * Parse the project from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).project;
  }

  /**
   * Parse the location from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).location;
  }

  /**
   * Parse the service from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).service;
  }

  /**
   * Parse the revision from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the revision.
   */
  matchRevisionFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).revision;
  }

  /**
   * Return a fully-qualified service resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @returns {string} Resource name string.
   */
  servicePath(project: string, location: string, service: string) {
    return this.pathTemplates.servicePathTemplate.render({
      project: project,
      location: location,
      service: service,
    });
  }

  /**
   * Parse the project from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).project;
  }

  /**
   * Parse the location from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).location;
  }

  /**
   * Parse the service from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).service;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job
   * @param {string} execution
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(
    project: string,
    location: string,
    job: string,
    execution: string,
    task: string
  ) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      job: job,
      execution: execution,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the job from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).job;
  }

  /**
   * Parse the execution from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the execution.
   */
  matchExecutionFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).execution;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified workerPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} worker_pool
   * @returns {string} Resource name string.
   */
  workerPoolPath(project: string, location: string, workerPool: string) {
    return this.pathTemplates.workerPoolPathTemplate.render({
      project: project,
      location: location,
      worker_pool: workerPool,
    });
  }

  /**
   * Parse the project from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .project;
  }

  /**
   * Parse the location from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .location;
  }

  /**
   * Parse the worker_pool from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the worker_pool.
   */
  matchWorkerPoolFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .worker_pool;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.buildsStub && !this._terminated) {
      return this.buildsStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
