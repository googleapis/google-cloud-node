// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/migration_center_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './migration_center_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources.
 * @class
 * @memberof v1
 */
export class MigrationCenterClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  migrationCenterStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MigrationCenterClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new MigrationCenterClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MigrationCenterClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/assets/{asset}'
      ),
      errorFramePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sources/{source}/errorFrames/{error_frame}'
      ),
      groupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/groups/{group}'
      ),
      importDataFilePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/importJobs/{import_job}/importDataFiles/{import_data_file}'
      ),
      importJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/importJobs/{import_job}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      preferenceSetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/preferenceSets/{preference_set}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      reportPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reportConfigs/{report_config}/reports/{report}'
      ),
      reportConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reportConfigs/{report_config}'
      ),
      settingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/settings'
      ),
      sourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sources/{source}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAssets: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'assets'
      ),
      listImportJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'importJobs'
      ),
      listImportDataFiles: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'importDataFiles'
      ),
      listGroups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'groups'
      ),
      listErrorFrames: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'errorFrames'
      ),
      listSources: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'sources'
      ),
      listPreferenceSets: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'preferenceSets'
      ),
      listReportConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'reportConfigs'
      ),
      listReports: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'reports'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createImportJobResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.ImportJob'
    ) as gax.protobuf.Type;
    const createImportJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteImportJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteImportJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateImportJobResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.ImportJob'
    ) as gax.protobuf.Type;
    const updateImportJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const validateImportJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const validateImportJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const runImportJobResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const runImportJobMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createImportDataFileResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.ImportDataFile'
    ) as gax.protobuf.Type;
    const createImportDataFileMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteImportDataFileResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteImportDataFileMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Group'
    ) as gax.protobuf.Type;
    const createGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Group'
    ) as gax.protobuf.Type;
    const updateGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGroupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const addAssetsToGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Group'
    ) as gax.protobuf.Type;
    const addAssetsToGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const removeAssetsFromGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Group'
    ) as gax.protobuf.Type;
    const removeAssetsFromGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSourceResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Source'
    ) as gax.protobuf.Type;
    const createSourceMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateSourceResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Source'
    ) as gax.protobuf.Type;
    const updateSourceMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteSourceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteSourceMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createPreferenceSetResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.PreferenceSet'
    ) as gax.protobuf.Type;
    const createPreferenceSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updatePreferenceSetResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.PreferenceSet'
    ) as gax.protobuf.Type;
    const updatePreferenceSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePreferenceSetResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePreferenceSetMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateSettingsResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Settings'
    ) as gax.protobuf.Type;
    const updateSettingsMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createReportConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.ReportConfig'
    ) as gax.protobuf.Type;
    const createReportConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteReportConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteReportConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createReportResponse = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.Report'
    ) as gax.protobuf.Type;
    const createReportMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteReportResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteReportMetadata = protoFilesRoot.lookup(
      '.google.cloud.migrationcenter.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createImportJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createImportJobResponse.decode.bind(createImportJobResponse),
        createImportJobMetadata.decode.bind(createImportJobMetadata)
      ),
      deleteImportJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteImportJobResponse.decode.bind(deleteImportJobResponse),
        deleteImportJobMetadata.decode.bind(deleteImportJobMetadata)
      ),
      updateImportJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateImportJobResponse.decode.bind(updateImportJobResponse),
        updateImportJobMetadata.decode.bind(updateImportJobMetadata)
      ),
      validateImportJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        validateImportJobResponse.decode.bind(validateImportJobResponse),
        validateImportJobMetadata.decode.bind(validateImportJobMetadata)
      ),
      runImportJob: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        runImportJobResponse.decode.bind(runImportJobResponse),
        runImportJobMetadata.decode.bind(runImportJobMetadata)
      ),
      createImportDataFile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createImportDataFileResponse.decode.bind(createImportDataFileResponse),
        createImportDataFileMetadata.decode.bind(createImportDataFileMetadata)
      ),
      deleteImportDataFile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteImportDataFileResponse.decode.bind(deleteImportDataFileResponse),
        deleteImportDataFileMetadata.decode.bind(deleteImportDataFileMetadata)
      ),
      createGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGroupResponse.decode.bind(createGroupResponse),
        createGroupMetadata.decode.bind(createGroupMetadata)
      ),
      updateGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGroupResponse.decode.bind(updateGroupResponse),
        updateGroupMetadata.decode.bind(updateGroupMetadata)
      ),
      deleteGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGroupResponse.decode.bind(deleteGroupResponse),
        deleteGroupMetadata.decode.bind(deleteGroupMetadata)
      ),
      addAssetsToGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        addAssetsToGroupResponse.decode.bind(addAssetsToGroupResponse),
        addAssetsToGroupMetadata.decode.bind(addAssetsToGroupMetadata)
      ),
      removeAssetsFromGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        removeAssetsFromGroupResponse.decode.bind(
          removeAssetsFromGroupResponse
        ),
        removeAssetsFromGroupMetadata.decode.bind(removeAssetsFromGroupMetadata)
      ),
      createSource: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSourceResponse.decode.bind(createSourceResponse),
        createSourceMetadata.decode.bind(createSourceMetadata)
      ),
      updateSource: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSourceResponse.decode.bind(updateSourceResponse),
        updateSourceMetadata.decode.bind(updateSourceMetadata)
      ),
      deleteSource: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteSourceResponse.decode.bind(deleteSourceResponse),
        deleteSourceMetadata.decode.bind(deleteSourceMetadata)
      ),
      createPreferenceSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPreferenceSetResponse.decode.bind(createPreferenceSetResponse),
        createPreferenceSetMetadata.decode.bind(createPreferenceSetMetadata)
      ),
      updatePreferenceSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updatePreferenceSetResponse.decode.bind(updatePreferenceSetResponse),
        updatePreferenceSetMetadata.decode.bind(updatePreferenceSetMetadata)
      ),
      deletePreferenceSet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePreferenceSetResponse.decode.bind(deletePreferenceSetResponse),
        deletePreferenceSetMetadata.decode.bind(deletePreferenceSetMetadata)
      ),
      updateSettings: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSettingsResponse.decode.bind(updateSettingsResponse),
        updateSettingsMetadata.decode.bind(updateSettingsMetadata)
      ),
      createReportConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createReportConfigResponse.decode.bind(createReportConfigResponse),
        createReportConfigMetadata.decode.bind(createReportConfigMetadata)
      ),
      deleteReportConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteReportConfigResponse.decode.bind(deleteReportConfigResponse),
        deleteReportConfigMetadata.decode.bind(deleteReportConfigMetadata)
      ),
      createReport: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createReportResponse.decode.bind(createReportResponse),
        createReportMetadata.decode.bind(createReportMetadata)
      ),
      deleteReport: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteReportResponse.decode.bind(deleteReportResponse),
        deleteReportMetadata.decode.bind(deleteReportMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.migrationcenter.v1.MigrationCenter',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.migrationCenterStub) {
      return this.migrationCenterStub;
    }

    // Put together the "service stub" for
    // google.cloud.migrationcenter.v1.MigrationCenter.
    this.migrationCenterStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.migrationcenter.v1.MigrationCenter'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.migrationcenter.v1.MigrationCenter,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const migrationCenterStubMethods = [
      'listAssets',
      'getAsset',
      'updateAsset',
      'batchUpdateAssets',
      'deleteAsset',
      'batchDeleteAssets',
      'reportAssetFrames',
      'aggregateAssetsValues',
      'createImportJob',
      'listImportJobs',
      'getImportJob',
      'deleteImportJob',
      'updateImportJob',
      'validateImportJob',
      'runImportJob',
      'getImportDataFile',
      'listImportDataFiles',
      'createImportDataFile',
      'deleteImportDataFile',
      'listGroups',
      'getGroup',
      'createGroup',
      'updateGroup',
      'deleteGroup',
      'addAssetsToGroup',
      'removeAssetsFromGroup',
      'listErrorFrames',
      'getErrorFrame',
      'listSources',
      'getSource',
      'createSource',
      'updateSource',
      'deleteSource',
      'listPreferenceSets',
      'getPreferenceSet',
      'createPreferenceSet',
      'updatePreferenceSet',
      'deletePreferenceSet',
      'getSettings',
      'updateSettings',
      'createReportConfig',
      'getReportConfig',
      'listReportConfigs',
      'deleteReportConfig',
      'createReport',
      'getReport',
      'listReports',
      'deleteReport',
    ];
    for (const methodName of migrationCenterStubMethods) {
      const callPromise = this.migrationCenterStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.migrationCenterStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'migrationcenter.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'migrationcenter.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the details of an asset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {google.cloud.migrationcenter.v1.AssetView} request.view
   *   View of the assets. Defaults to BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Asset|Asset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_asset.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetAsset_async
   */
  getAsset(
    request?: protos.google.cloud.migrationcenter.v1.IGetAssetRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset,
      protos.google.cloud.migrationcenter.v1.IGetAssetRequest | undefined,
      {} | undefined,
    ]
  >;
  getAsset(
    request: protos.google.cloud.migrationcenter.v1.IGetAssetRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IGetAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAsset(
    request: protos.google.cloud.migrationcenter.v1.IGetAssetRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IGetAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAsset(
    request?: protos.google.cloud.migrationcenter.v1.IGetAssetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IAsset,
          | protos.google.cloud.migrationcenter.v1.IGetAssetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IGetAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset,
      protos.google.cloud.migrationcenter.v1.IGetAssetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAsset(request, options, callback);
  }
  /**
   * Updates the parameters of an asset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `Asset` resource by the update.
   *   The values specified in the `update_mask` field are relative to the
   *   resource, not the full request.
   *   A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.Asset} request.asset
   *   Required. The resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Asset|Asset}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_asset.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateAsset_async
   */
  updateAsset(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset,
      protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest | undefined,
      {} | undefined,
    ]
  >;
  updateAsset(
    request: protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAsset(
    request: protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAsset(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IAsset,
          | protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IAsset,
      | protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset,
      protos.google.cloud.migrationcenter.v1.IUpdateAssetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'asset.name': request.asset!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAsset(request, options, callback);
  }
  /**
   * Updates the parameters of a list of assets.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for batch asset update.
   * @param {number[]} request.requests
   *   Required. The request message specifying the resources to update.
   *   A maximum of 1000 assets can be modified in a batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.BatchUpdateAssetsResponse|BatchUpdateAssetsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.batch_update_assets.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_BatchUpdateAssets_async
   */
  batchUpdateAssets(
    request?: protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchUpdateAssets(
    request: protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
      | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateAssets(
    request: protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
      | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateAssets(
    request?: protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
          | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
      | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IBatchUpdateAssetsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchUpdateAssets(request, options, callback);
  }
  /**
   * Deletes an asset.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_asset.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteAsset_async
   */
  deleteAsset(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteAsset(
    request: protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAsset(
    request: protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAsset(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.migrationcenter.v1.IDeleteAssetRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAsset(request, options, callback);
  }
  /**
   * Deletes list of Assets.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for batch asset delete.
   * @param {string[]} request.names
   *   Required. The IDs of the assets to delete.
   *   A maximum of 1000 assets can be deleted in a batch.
   *   Format: projects/{project}/locations/{location}/assets/{name}.
   * @param {boolean} [request.allowMissing]
   *   Optional. When this value is set to `true` the request is a no-op for
   *   non-existing assets. See https://google.aip.dev/135#delete-if-existing for
   *   additional details. Default value is `false`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.batch_delete_assets.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_BatchDeleteAssets_async
   */
  batchDeleteAssets(
    request?: protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  batchDeleteAssets(
    request: protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteAssets(
    request: protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteAssets(
    request?: protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.migrationcenter.v1.IBatchDeleteAssetsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchDeleteAssets(request, options, callback);
  }
  /**
   * Reports a set of frames.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent of the resource.
   * @param {google.cloud.migrationcenter.v1.Frames} request.frames
   *   Collection of frames data.
   * @param {string} request.source
   *   Required. Reference to a source.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.ReportAssetFramesResponse|ReportAssetFramesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.report_asset_frames.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ReportAssetFrames_async
   */
  reportAssetFrames(
    request?: protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  reportAssetFrames(
    request: protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
      | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  reportAssetFrames(
    request: protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
      | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  reportAssetFrames(
    request?: protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
          | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
      | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportAssetFramesResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IReportAssetFramesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.reportAssetFrames(request, options, callback);
  }
  /**
   * Aggregates the requested fields based on provided function.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `AggregateAssetsValuesRequest`.
   * @param {number[]} request.aggregations
   *   Array of aggregations to perform.
   *   Up to 25 aggregations can be defined.
   * @param {string} request.filter
   *   The aggregation will be performed on assets that match the provided filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.AggregateAssetsValuesResponse|AggregateAssetsValuesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.aggregate_assets_values.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_AggregateAssetsValues_async
   */
  aggregateAssetsValues(
    request?: protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  aggregateAssetsValues(
    request: protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
      | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  aggregateAssetsValues(
    request: protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
      | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  aggregateAssetsValues(
    request?: protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
          | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
      | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesResponse,
      (
        | protos.google.cloud.migrationcenter.v1.IAggregateAssetsValuesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.aggregateAssetsValues(request, options, callback);
  }
  /**
   * Gets the details of an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {google.cloud.migrationcenter.v1.ImportJobView} [request.view]
   *   Optional. The level of details of the import job.
   *   Default value is FULL.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.ImportJob|ImportJob}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetImportJob_async
   */
  getImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IGetImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportJob,
      protos.google.cloud.migrationcenter.v1.IGetImportJobRequest | undefined,
      {} | undefined,
    ]
  >;
  getImportJob(
    request: protos.google.cloud.migrationcenter.v1.IGetImportJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IImportJob,
      | protos.google.cloud.migrationcenter.v1.IGetImportJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getImportJob(
    request: protos.google.cloud.migrationcenter.v1.IGetImportJobRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IImportJob,
      | protos.google.cloud.migrationcenter.v1.IGetImportJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IGetImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IImportJob,
          | protos.google.cloud.migrationcenter.v1.IGetImportJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IImportJob,
      | protos.google.cloud.migrationcenter.v1.IGetImportJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportJob,
      protos.google.cloud.migrationcenter.v1.IGetImportJobRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getImportJob(request, options, callback);
  }
  /**
   * Gets an import data file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the ImportDataFile.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.ImportDataFile|ImportDataFile}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_import_data_file.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetImportDataFile_async
   */
  getImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportDataFile,
      (
        | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IImportDataFile,
      | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IImportDataFile,
      | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IImportDataFile,
          | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IImportDataFile,
      | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportDataFile,
      (
        | protos.google.cloud.migrationcenter.v1.IGetImportDataFileRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getImportDataFile(request, options, callback);
  }
  /**
   * Gets the details of a group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Group|Group}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetGroup_async
   */
  getGroup(
    request?: protos.google.cloud.migrationcenter.v1.IGetGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IGroup,
      protos.google.cloud.migrationcenter.v1.IGetGroupRequest | undefined,
      {} | undefined,
    ]
  >;
  getGroup(
    request: protos.google.cloud.migrationcenter.v1.IGetGroupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IGroup,
      | protos.google.cloud.migrationcenter.v1.IGetGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGroup(
    request: protos.google.cloud.migrationcenter.v1.IGetGroupRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IGroup,
      | protos.google.cloud.migrationcenter.v1.IGetGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGroup(
    request?: protos.google.cloud.migrationcenter.v1.IGetGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IGroup,
          | protos.google.cloud.migrationcenter.v1.IGetGroupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IGroup,
      | protos.google.cloud.migrationcenter.v1.IGetGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IGroup,
      protos.google.cloud.migrationcenter.v1.IGetGroupRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGroup(request, options, callback);
  }
  /**
   * Gets the details of an error frame.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the frame to retrieve.
   *   Format:
   *   projects/{project}/locations/{location}/sources/{source}/errorFrames/{error_frame}
   * @param {google.cloud.migrationcenter.v1.ErrorFrameView} [request.view]
   *   Optional. An optional view mode to control the level of details for the
   *   frame. The default is a basic frame view.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.ErrorFrame|ErrorFrame}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_error_frame.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetErrorFrame_async
   */
  getErrorFrame(
    request?: protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IErrorFrame,
      protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest | undefined,
      {} | undefined,
    ]
  >;
  getErrorFrame(
    request: protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IErrorFrame,
      | protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getErrorFrame(
    request: protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IErrorFrame,
      | protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getErrorFrame(
    request?: protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IErrorFrame,
          | protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IErrorFrame,
      | protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IErrorFrame,
      protos.google.cloud.migrationcenter.v1.IGetErrorFrameRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getErrorFrame(request, options, callback);
  }
  /**
   * Gets the details of a source.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Source|Source}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetSource_async
   */
  getSource(
    request?: protos.google.cloud.migrationcenter.v1.IGetSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISource,
      protos.google.cloud.migrationcenter.v1.IGetSourceRequest | undefined,
      {} | undefined,
    ]
  >;
  getSource(
    request: protos.google.cloud.migrationcenter.v1.IGetSourceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.ISource,
      | protos.google.cloud.migrationcenter.v1.IGetSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSource(
    request: protos.google.cloud.migrationcenter.v1.IGetSourceRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.ISource,
      | protos.google.cloud.migrationcenter.v1.IGetSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSource(
    request?: protos.google.cloud.migrationcenter.v1.IGetSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.ISource,
          | protos.google.cloud.migrationcenter.v1.IGetSourceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.ISource,
      | protos.google.cloud.migrationcenter.v1.IGetSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISource,
      protos.google.cloud.migrationcenter.v1.IGetSourceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSource(request, options, callback);
  }
  /**
   * Gets the details of a preference set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.PreferenceSet|PreferenceSet}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetPreferenceSet_async
   */
  getPreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IPreferenceSet,
      (
        | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IPreferenceSet,
      | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IPreferenceSet,
      | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IPreferenceSet,
          | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IPreferenceSet,
      | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IPreferenceSet,
      (
        | protos.google.cloud.migrationcenter.v1.IGetPreferenceSetRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPreferenceSet(request, options, callback);
  }
  /**
   * Gets the details of regional settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Settings|Settings}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_settings.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetSettings_async
   */
  getSettings(
    request?: protos.google.cloud.migrationcenter.v1.IGetSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISettings,
      protos.google.cloud.migrationcenter.v1.IGetSettingsRequest | undefined,
      {} | undefined,
    ]
  >;
  getSettings(
    request: protos.google.cloud.migrationcenter.v1.IGetSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.ISettings,
      | protos.google.cloud.migrationcenter.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSettings(
    request: protos.google.cloud.migrationcenter.v1.IGetSettingsRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.ISettings,
      | protos.google.cloud.migrationcenter.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSettings(
    request?: protos.google.cloud.migrationcenter.v1.IGetSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.ISettings,
          | protos.google.cloud.migrationcenter.v1.IGetSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.ISettings,
      | protos.google.cloud.migrationcenter.v1.IGetSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISettings,
      protos.google.cloud.migrationcenter.v1.IGetSettingsRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSettings(request, options, callback);
  }
  /**
   * Gets details of a single ReportConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.ReportConfig|ReportConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_report_config.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetReportConfig_async
   */
  getReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportConfig,
      (
        | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getReportConfig(
    request: protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReportConfig,
      | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReportConfig(
    request: protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReportConfig,
      | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IReportConfig,
          | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IReportConfig,
      | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportConfig,
      (
        | protos.google.cloud.migrationcenter.v1.IGetReportConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getReportConfig(request, options, callback);
  }
  /**
   * Gets details of a single Report.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {google.cloud.migrationcenter.v1.ReportView} request.view
   *   Determines what information to retrieve for the Report.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.migrationcenter.v1.Report|Report}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.get_report.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_GetReport_async
   */
  getReport(
    request?: protos.google.cloud.migrationcenter.v1.IGetReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReport,
      protos.google.cloud.migrationcenter.v1.IGetReportRequest | undefined,
      {} | undefined,
    ]
  >;
  getReport(
    request: protos.google.cloud.migrationcenter.v1.IGetReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReport,
      | protos.google.cloud.migrationcenter.v1.IGetReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReport(
    request: protos.google.cloud.migrationcenter.v1.IGetReportRequest,
    callback: Callback<
      protos.google.cloud.migrationcenter.v1.IReport,
      | protos.google.cloud.migrationcenter.v1.IGetReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReport(
    request?: protos.google.cloud.migrationcenter.v1.IGetReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.migrationcenter.v1.IReport,
          | protos.google.cloud.migrationcenter.v1.IGetReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.migrationcenter.v1.IReport,
      | protos.google.cloud.migrationcenter.v1.IGetReportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReport,
      protos.google.cloud.migrationcenter.v1.IGetReportRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getReport(request, options, callback);
  }

  /**
   * Creates an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.importJobId
   *   Required. ID of the import job.
   * @param {google.cloud.migrationcenter.v1.ImportJob} request.importJob
   *   Required. The resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateImportJob_async
   */
  createImportJob(
    request?: protos.google.cloud.migrationcenter.v1.ICreateImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createImportJob(
    request: protos.google.cloud.migrationcenter.v1.ICreateImportJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createImportJob(
    request: protos.google.cloud.migrationcenter.v1.ICreateImportJobRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createImportJob(
    request?: protos.google.cloud.migrationcenter.v1.ICreateImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IImportJob,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createImportJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createImportJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateImportJob_async
   */
  async checkCreateImportJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.ImportJob,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createImportJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.ImportJob,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to `true`, any `ImportDataFiles` of this job will also be
   *   deleted If set to `false`, the request only works if the job has no data
   *   files.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteImportJob_async
   */
  deleteImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteImportJob(
    request: protos.google.cloud.migrationcenter.v1.IDeleteImportJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteImportJob(
    request: protos.google.cloud.migrationcenter.v1.IDeleteImportJobRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteImportJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteImportJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteImportJob_async
   */
  async checkDeleteImportJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteImportJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Updates an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `Asset` resource by the update.
   *   The values specified in the `update_mask` field are relative to the
   *   resource, not the full request.
   *   A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.ImportJob} request.importJob
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateImportJob_async
   */
  updateImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateImportJob(
    request: protos.google.cloud.migrationcenter.v1.IUpdateImportJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateImportJob(
    request: protos.google.cloud.migrationcenter.v1.IUpdateImportJobRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IImportJob,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportJob,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'import_job.name': request.importJob!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateImportJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateImportJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateImportJob_async
   */
  async checkUpdateImportJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.ImportJob,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateImportJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.ImportJob,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Validates an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the import job to validate.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.validate_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ValidateImportJob_async
   */
  validateImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IValidateImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  validateImportJob(
    request: protos.google.cloud.migrationcenter.v1.IValidateImportJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateImportJob(
    request: protos.google.cloud.migrationcenter.v1.IValidateImportJobRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IValidateImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.validateImportJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `validateImportJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.validate_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ValidateImportJob_async
   */
  async checkValidateImportJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.validateImportJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Runs an import job.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the import job to run.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.run_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_RunImportJob_async
   */
  runImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IRunImportJobRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  runImportJob(
    request: protos.google.cloud.migrationcenter.v1.IRunImportJobRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runImportJob(
    request: protos.google.cloud.migrationcenter.v1.IRunImportJobRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runImportJob(
    request?: protos.google.cloud.migrationcenter.v1.IRunImportJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.runImportJob(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `runImportJob()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.run_import_job.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_RunImportJob_async
   */
  async checkRunImportJobProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.runImportJob,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates an import data file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent of the ImportDataFile.
   * @param {string} request.importDataFileId
   *   Required. The ID of the new data file.
   * @param {google.cloud.migrationcenter.v1.ImportDataFile} request.importDataFile
   *   Required. The resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_import_data_file.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateImportDataFile_async
   */
  createImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.ICreateImportDataFileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportDataFile,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.ICreateImportDataFileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportDataFile,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.ICreateImportDataFileRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportDataFile,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.ICreateImportDataFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IImportDataFile,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportDataFile,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IImportDataFile,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createImportDataFile(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createImportDataFile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_import_data_file.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateImportDataFile_async
   */
  async checkCreateImportDataFileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.ImportDataFile,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createImportDataFile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.ImportDataFile,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Delete an import data file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the ImportDataFile to delete.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_import_data_file.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteImportDataFile_async
   */
  deleteImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteImportDataFileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.IDeleteImportDataFileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteImportDataFile(
    request: protos.google.cloud.migrationcenter.v1.IDeleteImportDataFileRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteImportDataFile(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteImportDataFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteImportDataFile(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteImportDataFile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_import_data_file.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteImportDataFile_async
   */
  async checkDeleteImportDataFileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteImportDataFile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new group in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.groupId
   *   Required. User specified ID for the group. It will become the last
   *   component of the group name. The ID must be unique within the project, must
   *   conform with RFC-1034, is restricted to lower-cased letters, and has a
   *   maximum length of 63 characters. The ID must match the regular expression:
   *   `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
   * @param {google.cloud.migrationcenter.v1.Group} request.group
   *   Required. The group resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateGroup_async
   */
  createGroup(
    request?: protos.google.cloud.migrationcenter.v1.ICreateGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createGroup(
    request: protos.google.cloud.migrationcenter.v1.ICreateGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGroup(
    request: protos.google.cloud.migrationcenter.v1.ICreateGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGroup(
    request?: protos.google.cloud.migrationcenter.v1.ICreateGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IGroup,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateGroup_async
   */
  async checkCreateGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `Group` resource by the update.
   *   The values specified in the `update_mask` are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.Group} request.group
   *   Required. The group resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateGroup_async
   */
  updateGroup(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateGroup(
    request: protos.google.cloud.migrationcenter.v1.IUpdateGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGroup(
    request: protos.google.cloud.migrationcenter.v1.IUpdateGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGroup(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IGroup,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'group.name': request.group!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateGroup_async
   */
  async checkUpdateGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the group resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteGroup_async
   */
  deleteGroup(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteGroup(
    request: protos.google.cloud.migrationcenter.v1.IDeleteGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGroup(
    request: protos.google.cloud.migrationcenter.v1.IDeleteGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGroup(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteGroup_async
   */
  async checkDeleteGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Adds assets to a group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.group
   *   Required. Group reference.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {google.cloud.migrationcenter.v1.AssetList} request.assets
   *   Required. List of assets to be added.
   *   The maximum number of assets that can be added in a single request is
   *   1000.
   * @param {boolean} [request.allowExisting]
   *   Optional. When this value is set to `false` and one of the given assets is
   *   already an existing member of the group, the operation fails with an
   *   `Already Exists` error. When set to `true` this situation is silently
   *   ignored by the server.
   *
   *   Default value is `false`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.add_assets_to_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_AddAssetsToGroup_async
   */
  addAssetsToGroup(
    request?: protos.google.cloud.migrationcenter.v1.IAddAssetsToGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  addAssetsToGroup(
    request: protos.google.cloud.migrationcenter.v1.IAddAssetsToGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  addAssetsToGroup(
    request: protos.google.cloud.migrationcenter.v1.IAddAssetsToGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  addAssetsToGroup(
    request?: protos.google.cloud.migrationcenter.v1.IAddAssetsToGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IGroup,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        group: request.group ?? '',
      });
    this.initialize();
    return this.innerApiCalls.addAssetsToGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `addAssetsToGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.add_assets_to_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_AddAssetsToGroup_async
   */
  async checkAddAssetsToGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.addAssetsToGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Removes assets from a group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.group
   *   Required. Group reference.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {google.cloud.migrationcenter.v1.AssetList} request.assets
   *   Required. List of assets to be removed.
   *   The maximum number of assets that can be removed in a single request is
   *   1000.
   * @param {boolean} [request.allowMissing]
   *   Optional. When this value is set to `false` and one of the given assets is
   *   not an existing member of the group, the operation fails with a `Not Found`
   *   error. When set to `true` this situation is silently ignored by the server.
   *
   *   Default value is `false`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.remove_assets_from_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_RemoveAssetsFromGroup_async
   */
  removeAssetsFromGroup(
    request?: protos.google.cloud.migrationcenter.v1.IRemoveAssetsFromGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  removeAssetsFromGroup(
    request: protos.google.cloud.migrationcenter.v1.IRemoveAssetsFromGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  removeAssetsFromGroup(
    request: protos.google.cloud.migrationcenter.v1.IRemoveAssetsFromGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  removeAssetsFromGroup(
    request?: protos.google.cloud.migrationcenter.v1.IRemoveAssetsFromGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IGroup,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IGroup,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        group: request.group ?? '',
      });
    this.initialize();
    return this.innerApiCalls.removeAssetsFromGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `removeAssetsFromGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.remove_assets_from_group.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_RemoveAssetsFromGroup_async
   */
  async checkRemoveAssetsFromGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.removeAssetsFromGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Group,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new source in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.sourceId
   *   Required. User specified ID for the source. It will become the last
   *   component of the source name. The ID must be unique within the project,
   *   must conform with RFC-1034, is restricted to lower-cased letters, and has a
   *   maximum length of 63 characters. The ID must match the regular expression:
   *   `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
   * @param {google.cloud.migrationcenter.v1.Source} request.source
   *   Required. The resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateSource_async
   */
  createSource(
    request?: protos.google.cloud.migrationcenter.v1.ICreateSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSource(
    request: protos.google.cloud.migrationcenter.v1.ICreateSourceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSource(
    request: protos.google.cloud.migrationcenter.v1.ICreateSourceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSource(
    request?: protos.google.cloud.migrationcenter.v1.ICreateSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.ISource,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSource(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createSource()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateSource_async
   */
  async checkCreateSourceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Source,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSource,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Source,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a source.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `Source` resource by the update.
   *   The values specified in the `update_mask` field are relative to the
   *   resource, not the full request.
   *   A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.Source} request.source
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateSource_async
   */
  updateSource(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateSource(
    request: protos.google.cloud.migrationcenter.v1.IUpdateSourceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSource(
    request: protos.google.cloud.migrationcenter.v1.IUpdateSourceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSource(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.ISource,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISource,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'source.name': request.source!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSource(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateSource()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateSource_async
   */
  async checkUpdateSourceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Source,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateSource,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Source,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a source.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteSource_async
   */
  deleteSource(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteSource(
    request: protos.google.cloud.migrationcenter.v1.IDeleteSourceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSource(
    request: protos.google.cloud.migrationcenter.v1.IDeleteSourceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSource(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSource(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteSource()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_source.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteSource_async
   */
  async checkDeleteSourceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteSource,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new preference set in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.preferenceSetId
   *   Required. User specified ID for the preference set. It will become the last
   *   component of the preference set name. The ID must be unique within the
   *   project, must conform with RFC-1034, is restricted to lower-cased letters,
   *   and has a maximum length of 63 characters. The ID must match the regular
   *   expression
   *   `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
   * @param {google.cloud.migrationcenter.v1.PreferenceSet} request.preferenceSet
   *   Required. The preference set resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreatePreferenceSet_async
   */
  createPreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.ICreatePreferenceSetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createPreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.ICreatePreferenceSetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.ICreatePreferenceSetRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.ICreatePreferenceSetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IPreferenceSet,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPreferenceSet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createPreferenceSet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreatePreferenceSet_async
   */
  async checkCreatePreferenceSetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.PreferenceSet,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createPreferenceSet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.PreferenceSet,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a preference set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `PreferenceSet` resource by the update.
   *   The values specified in the `update_mask` field are relative to the
   *   resource, not the full request.
   *   A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.PreferenceSet} request.preferenceSet
   *   Required. The preference set resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdatePreferenceSet_async
   */
  updatePreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IUpdatePreferenceSetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updatePreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IUpdatePreferenceSetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IUpdatePreferenceSetRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IUpdatePreferenceSetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IPreferenceSet,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IPreferenceSet,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'preference_set.name': request.preferenceSet!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePreferenceSet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updatePreferenceSet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdatePreferenceSet_async
   */
  async checkUpdatePreferenceSetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.PreferenceSet,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updatePreferenceSet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.PreferenceSet,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a preference set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the group resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeletePreferenceSet_async
   */
  deletePreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IDeletePreferenceSetRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deletePreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IDeletePreferenceSetRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePreferenceSet(
    request: protos.google.cloud.migrationcenter.v1.IDeletePreferenceSetRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePreferenceSet(
    request?: protos.google.cloud.migrationcenter.v1.IDeletePreferenceSetRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePreferenceSet(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deletePreferenceSet()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_preference_set.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeletePreferenceSet_async
   */
  async checkDeletePreferenceSetProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePreferenceSet,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Updates the regional-level project settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   `Settings` resource by the update.
   *   The values specified in the `update_mask` field are relative to the
   *   resource, not the full request.
   *   A field will be overwritten if it is in the mask.
   *   A single * value in the mask lets you to overwrite all fields.
   * @param {google.cloud.migrationcenter.v1.Settings} request.settings
   *   Required. The project settings resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_settings.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateSettings_async
   */
  updateSettings(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISettings,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateSettings(
    request: protos.google.cloud.migrationcenter.v1.IUpdateSettingsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISettings,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSettings(
    request: protos.google.cloud.migrationcenter.v1.IUpdateSettingsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISettings,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSettings(
    request?: protos.google.cloud.migrationcenter.v1.IUpdateSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.ISettings,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISettings,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.ISettings,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'settings.name': request.settings!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSettings(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateSettings()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.update_settings.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_UpdateSettings_async
   */
  async checkUpdateSettingsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Settings,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateSettings,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Settings,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates a report configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.reportConfigId
   *   Required. User specified ID for the report config. It will become the last
   *   component of the report config name. The ID must be unique within the
   *   project, must conform with RFC-1034, is restricted to lower-cased letters,
   *   and has a maximum length of 63 characters. The ID must match the regular
   *   expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
   * @param {google.cloud.migrationcenter.v1.ReportConfig} request.reportConfig
   *   Required. The report config set resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_report_config.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateReportConfig_async
   */
  createReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.ICreateReportConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReportConfig,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createReportConfig(
    request: protos.google.cloud.migrationcenter.v1.ICreateReportConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReportConfig,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReportConfig(
    request: protos.google.cloud.migrationcenter.v1.ICreateReportConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReportConfig,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.ICreateReportConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IReportConfig,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReportConfig,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReportConfig,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createReportConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createReportConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_report_config.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateReportConfig_async
   */
  async checkCreateReportConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.ReportConfig,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createReportConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.ReportConfig,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a ReportConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to `true`, any child `Reports` of this entity will also be
   *   deleted. If set to `false`, the request only works if the resource has no
   *   children.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_report_config.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteReportConfig_async
   */
  deleteReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteReportConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteReportConfig(
    request: protos.google.cloud.migrationcenter.v1.IDeleteReportConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReportConfig(
    request: protos.google.cloud.migrationcenter.v1.IDeleteReportConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReportConfig(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteReportConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteReportConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteReportConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_report_config.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteReportConfig_async
   */
  async checkDeleteReportConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteReportConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Creates a report.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.reportId
   *   Required. User specified id for the report. It will become the last
   *   component of the report name. The id must be unique within the project,
   *   must conform with RFC-1034, is restricted to lower-cased letters, and has a
   *   maximum length of 63 characters. The id must match the regular expression:
   *   [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
   * @param {google.cloud.migrationcenter.v1.Report} request.report
   *   Required. The report resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_report.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateReport_async
   */
  createReport(
    request?: protos.google.cloud.migrationcenter.v1.ICreateReportRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReport,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createReport(
    request: protos.google.cloud.migrationcenter.v1.ICreateReportRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReport,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReport(
    request: protos.google.cloud.migrationcenter.v1.ICreateReportRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReport,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReport(
    request?: protos.google.cloud.migrationcenter.v1.ICreateReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.migrationcenter.v1.IReport,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReport,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.migrationcenter.v1.IReport,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createReport(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createReport()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.create_report.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_CreateReport_async
   */
  async checkCreateReportProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.migrationcenter.v1.Report,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createReport,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.migrationcenter.v1.Report,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a Report.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_report.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteReport_async
   */
  deleteReport(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteReportRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteReport(
    request: protos.google.cloud.migrationcenter.v1.IDeleteReportRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReport(
    request: protos.google.cloud.migrationcenter.v1.IDeleteReportRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReport(
    request?: protos.google.cloud.migrationcenter.v1.IDeleteReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.migrationcenter.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.migrationcenter.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteReport(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteReport()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.delete_report.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_DeleteReport_async
   */
  async checkDeleteReportProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteReport,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.migrationcenter.v1.OperationMetadata
    >;
  }
  /**
   * Lists all the assets in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListAssetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.AssetView} request.view
   *   View of the assets. Defaults to BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.Asset|Asset}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAssetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAssets(
    request?: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset[],
      protos.google.cloud.migrationcenter.v1.IListAssetsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListAssetsResponse,
    ]
  >;
  listAssets(
    request: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListAssetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IAsset
    >
  ): void;
  listAssets(
    request: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListAssetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IAsset
    >
  ): void;
  listAssets(
    request?: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
          | protos.google.cloud.migrationcenter.v1.IListAssetsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IAsset
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListAssetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IAsset
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IAsset[],
      protos.google.cloud.migrationcenter.v1.IListAssetsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListAssetsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAssets(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListAssetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.AssetView} request.view
   *   View of the assets. Defaults to BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.Asset|Asset} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAssetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAssetsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAssets.createStream(
      this.innerApiCalls.listAssets as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAssets`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListAssetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.AssetView} request.view
   *   View of the assets. Defaults to BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.Asset|Asset}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_assets.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListAssets_async
   */
  listAssetsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListAssetsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IAsset> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAssets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAssets.asyncIterate(
      this.innerApiCalls['listAssets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IAsset>;
  }
  /**
   * Lists all import jobs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListImportJobsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ImportJobView} [request.view]
   *   Optional. The level of details of each import job.
   *   Default value is BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.ImportJob|ImportJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listImportJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listImportJobs(
    request?: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportJob[],
      protos.google.cloud.migrationcenter.v1.IListImportJobsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListImportJobsResponse,
    ]
  >;
  listImportJobs(
    request: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportJobsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportJob
    >
  ): void;
  listImportJobs(
    request: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportJobsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportJob
    >
  ): void;
  listImportJobs(
    request?: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
          | protos.google.cloud.migrationcenter.v1.IListImportJobsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IImportJob
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportJobsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportJob
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportJob[],
      protos.google.cloud.migrationcenter.v1.IListImportJobsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListImportJobsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listImportJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListImportJobsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ImportJobView} [request.view]
   *   Optional. The level of details of each import job.
   *   Default value is BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.ImportJob|ImportJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listImportJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listImportJobsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listImportJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listImportJobs.createStream(
      this.innerApiCalls.listImportJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listImportJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListImportJobsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ImportJobView} [request.view]
   *   Optional. The level of details of each import job.
   *   Default value is BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.ImportJob|ImportJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_import_jobs.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListImportJobs_async
   */
  listImportJobsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListImportJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IImportJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listImportJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listImportJobs.asyncIterate(
      this.innerApiCalls['listImportJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IImportJob>;
  }
  /**
   * List import data files.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent of the `ImportDataFiles` resource.
   * @param {number} request.pageSize
   *   The maximum number of data files to return. The service may return
   *   fewer than this value. If unspecified, at most 500 data files will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListImportDataFiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListImportDataFiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.ImportDataFile|ImportDataFile}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listImportDataFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listImportDataFiles(
    request?: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportDataFile[],
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse,
    ]
  >;
  listImportDataFiles(
    request: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportDataFile
    >
  ): void;
  listImportDataFiles(
    request: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportDataFile
    >
  ): void;
  listImportDataFiles(
    request?: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
          | protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IImportDataFile
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
      | protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IImportDataFile
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IImportDataFile[],
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListImportDataFilesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listImportDataFiles(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent of the `ImportDataFiles` resource.
   * @param {number} request.pageSize
   *   The maximum number of data files to return. The service may return
   *   fewer than this value. If unspecified, at most 500 data files will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListImportDataFiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListImportDataFiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.ImportDataFile|ImportDataFile} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listImportDataFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listImportDataFilesStream(
    request?: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listImportDataFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listImportDataFiles.createStream(
      this.innerApiCalls.listImportDataFiles as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listImportDataFiles`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent of the `ImportDataFiles` resource.
   * @param {number} request.pageSize
   *   The maximum number of data files to return. The service may return
   *   fewer than this value. If unspecified, at most 500 data files will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListImportDataFiles` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListImportDataFiles`
   *   must match the call that provided the page token.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.ImportDataFile|ImportDataFile}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_import_data_files.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListImportDataFiles_async
   */
  listImportDataFilesAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListImportDataFilesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IImportDataFile> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listImportDataFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listImportDataFiles.asyncIterate(
      this.innerApiCalls['listImportDataFiles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IImportDataFile>;
  }
  /**
   * Lists all groups in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListGroupsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.Group|Group}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGroups(
    request?: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IGroup[],
      protos.google.cloud.migrationcenter.v1.IListGroupsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListGroupsResponse,
    ]
  >;
  listGroups(
    request: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
      | protos.google.cloud.migrationcenter.v1.IListGroupsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IGroup
    >
  ): void;
  listGroups(
    request: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
      | protos.google.cloud.migrationcenter.v1.IListGroupsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IGroup
    >
  ): void;
  listGroups(
    request?: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
          | protos.google.cloud.migrationcenter.v1.IListGroupsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IGroup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
      | protos.google.cloud.migrationcenter.v1.IListGroupsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IGroup
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IGroup[],
      protos.google.cloud.migrationcenter.v1.IListGroupsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListGroupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGroups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListGroupsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.Group|Group} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGroupsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGroups.createStream(
      this.innerApiCalls.listGroups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGroups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListGroupsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.Group|Group}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_groups.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListGroups_async
   */
  listGroupsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListGroupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IGroup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGroups.asyncIterate(
      this.innerApiCalls['listGroups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IGroup>;
  }
  /**
   * Lists all error frames in a given source and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value (the source) for `ListErrorFramesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {google.cloud.migrationcenter.v1.ErrorFrameView} [request.view]
   *   Optional. An optional view mode to control the level of details of each
   *   error frame. The default is a BASIC frame view.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.ErrorFrame|ErrorFrame}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listErrorFramesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listErrorFrames(
    request?: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IErrorFrame[],
      protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse,
    ]
  >;
  listErrorFrames(
    request: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
      | protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IErrorFrame
    >
  ): void;
  listErrorFrames(
    request: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
      | protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IErrorFrame
    >
  ): void;
  listErrorFrames(
    request?: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
          | protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IErrorFrame
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
      | protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IErrorFrame
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IErrorFrame[],
      protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListErrorFramesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listErrorFrames(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value (the source) for `ListErrorFramesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {google.cloud.migrationcenter.v1.ErrorFrameView} [request.view]
   *   Optional. An optional view mode to control the level of details of each
   *   error frame. The default is a BASIC frame view.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.ErrorFrame|ErrorFrame} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listErrorFramesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listErrorFramesStream(
    request?: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listErrorFrames'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listErrorFrames.createStream(
      this.innerApiCalls.listErrorFrames as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listErrorFrames`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value (the source) for `ListErrorFramesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {google.cloud.migrationcenter.v1.ErrorFrameView} [request.view]
   *   Optional. An optional view mode to control the level of details of each
   *   error frame. The default is a BASIC frame view.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.ErrorFrame|ErrorFrame}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_error_frames.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListErrorFrames_async
   */
  listErrorFramesAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListErrorFramesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IErrorFrame> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listErrorFrames'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listErrorFrames.asyncIterate(
      this.innerApiCalls['listErrorFrames'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IErrorFrame>;
  }
  /**
   * Lists all the sources in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListSourcesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.Source|Source}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSources(
    request?: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISource[],
      protos.google.cloud.migrationcenter.v1.IListSourcesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListSourcesResponse,
    ]
  >;
  listSources(
    request: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
      | protos.google.cloud.migrationcenter.v1.IListSourcesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.ISource
    >
  ): void;
  listSources(
    request: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
      | protos.google.cloud.migrationcenter.v1.IListSourcesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.ISource
    >
  ): void;
  listSources(
    request?: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
          | protos.google.cloud.migrationcenter.v1.IListSourcesResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.ISource
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
      | protos.google.cloud.migrationcenter.v1.IListSourcesResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.ISource
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.ISource[],
      protos.google.cloud.migrationcenter.v1.IListSourcesRequest | null,
      protos.google.cloud.migrationcenter.v1.IListSourcesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSources(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListSourcesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.Source|Source} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSourcesStream(
    request?: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSources.createStream(
      this.innerApiCalls.listSources as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSources`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListSourcesRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.Source|Source}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_sources.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListSources_async
   */
  listSourcesAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListSourcesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.ISource> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSources.asyncIterate(
      this.innerApiCalls['listSources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.ISource>;
  }
  /**
   * Lists all the preference sets in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListPreferenceSetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, at most 500 preference sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.PreferenceSet|PreferenceSet}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPreferenceSetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPreferenceSets(
    request?: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IPreferenceSet[],
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse,
    ]
  >;
  listPreferenceSets(
    request: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IPreferenceSet
    >
  ): void;
  listPreferenceSets(
    request: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IPreferenceSet
    >
  ): void;
  listPreferenceSets(
    request?: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
          | protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IPreferenceSet
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
      | protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IPreferenceSet
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IPreferenceSet[],
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListPreferenceSetsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPreferenceSets(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListPreferenceSetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, at most 500 preference sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.PreferenceSet|PreferenceSet} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPreferenceSetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPreferenceSetsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPreferenceSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPreferenceSets.createStream(
      this.innerApiCalls.listPreferenceSets as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPreferenceSets`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListPreferenceSetsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, at most 500 preference sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.PreferenceSet|PreferenceSet}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_preference_sets.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListPreferenceSets_async
   */
  listPreferenceSetsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListPreferenceSetsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IPreferenceSet> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPreferenceSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPreferenceSets.asyncIterate(
      this.innerApiCalls['listPreferenceSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IPreferenceSet>;
  }
  /**
   * Lists ReportConfigs in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportConfigsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.ReportConfig|ReportConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReportConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReportConfigs(
    request?: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportConfig[],
      protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse,
    ]
  >;
  listReportConfigs(
    request: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReportConfig
    >
  ): void;
  listReportConfigs(
    request: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReportConfig
    >
  ): void;
  listReportConfigs(
    request?: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
          | protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IReportConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReportConfig
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReportConfig[],
      protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListReportConfigsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listReportConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportConfigsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.ReportConfig|ReportConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReportConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReportConfigsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReportConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReportConfigs.createStream(
      this.innerApiCalls.listReportConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReportConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportConfigsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.ReportConfig|ReportConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_report_configs.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListReportConfigs_async
   */
  listReportConfigsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListReportConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IReportConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReportConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReportConfigs.asyncIterate(
      this.innerApiCalls['listReportConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IReportConfig>;
  }
  /**
   * Lists Reports in a given ReportConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ReportView} request.view
   *   Determines what information to retrieve for each Report.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.migrationcenter.v1.Report|Report}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReports(
    request?: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReport[],
      protos.google.cloud.migrationcenter.v1.IListReportsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListReportsResponse,
    ]
  >;
  listReports(
    request: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReport
    >
  ): void;
  listReports(
    request: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    callback: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReport
    >
  ): void;
  listReports(
    request?: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.migrationcenter.v1.IListReportsRequest,
          | protos.google.cloud.migrationcenter.v1.IListReportsResponse
          | null
          | undefined,
          protos.google.cloud.migrationcenter.v1.IReport
        >,
    callback?: PaginationCallback<
      protos.google.cloud.migrationcenter.v1.IListReportsRequest,
      | protos.google.cloud.migrationcenter.v1.IListReportsResponse
      | null
      | undefined,
      protos.google.cloud.migrationcenter.v1.IReport
    >
  ): Promise<
    [
      protos.google.cloud.migrationcenter.v1.IReport[],
      protos.google.cloud.migrationcenter.v1.IListReportsRequest | null,
      protos.google.cloud.migrationcenter.v1.IListReportsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listReports(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ReportView} request.view
   *   Determines what information to retrieve for each Report.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.migrationcenter.v1.Report|Report} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReportsStream(
    request?: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReports.createStream(
      this.innerApiCalls.listReports as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReports`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for `ListReportsRequest`.
   * @param {number} request.pageSize
   *   Requested page size. The server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default value.
   * @param {string} request.pageToken
   *   A token identifying a page of results that the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Field to sort by. See https://google.aip.dev/132#ordering for more details.
   * @param {google.cloud.migrationcenter.v1.ReportView} request.view
   *   Determines what information to retrieve for each Report.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.migrationcenter.v1.Report|Report}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/migration_center.list_reports.js</caption>
   * region_tag:migrationcenter_v1_generated_MigrationCenter_ListReports_async
   */
  listReportsAsync(
    request?: protos.google.cloud.migrationcenter.v1.IListReportsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.migrationcenter.v1.IReport> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReports.asyncIterate(
      this.innerApiCalls['listReports'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.migrationcenter.v1.IReport>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(project: string, location: string, asset: string) {
    return this.pathTemplates.assetPathTemplate.render({
      project: project,
      location: location,
      asset: asset,
    });
  }

  /**
   * Parse the project from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified errorFrame resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} source
   * @param {string} error_frame
   * @returns {string} Resource name string.
   */
  errorFramePath(
    project: string,
    location: string,
    source: string,
    errorFrame: string
  ) {
    return this.pathTemplates.errorFramePathTemplate.render({
      project: project,
      location: location,
      source: source,
      error_frame: errorFrame,
    });
  }

  /**
   * Parse the project from ErrorFrame resource.
   *
   * @param {string} errorFrameName
   *   A fully-qualified path representing ErrorFrame resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromErrorFrameName(errorFrameName: string) {
    return this.pathTemplates.errorFramePathTemplate.match(errorFrameName)
      .project;
  }

  /**
   * Parse the location from ErrorFrame resource.
   *
   * @param {string} errorFrameName
   *   A fully-qualified path representing ErrorFrame resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromErrorFrameName(errorFrameName: string) {
    return this.pathTemplates.errorFramePathTemplate.match(errorFrameName)
      .location;
  }

  /**
   * Parse the source from ErrorFrame resource.
   *
   * @param {string} errorFrameName
   *   A fully-qualified path representing ErrorFrame resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromErrorFrameName(errorFrameName: string) {
    return this.pathTemplates.errorFramePathTemplate.match(errorFrameName)
      .source;
  }

  /**
   * Parse the error_frame from ErrorFrame resource.
   *
   * @param {string} errorFrameName
   *   A fully-qualified path representing ErrorFrame resource.
   * @returns {string} A string representing the error_frame.
   */
  matchErrorFrameFromErrorFrameName(errorFrameName: string) {
    return this.pathTemplates.errorFramePathTemplate.match(errorFrameName)
      .error_frame;
  }

  /**
   * Return a fully-qualified group resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} group
   * @returns {string} Resource name string.
   */
  groupPath(project: string, location: string, group: string) {
    return this.pathTemplates.groupPathTemplate.render({
      project: project,
      location: location,
      group: group,
    });
  }

  /**
   * Parse the project from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).project;
  }

  /**
   * Parse the location from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).location;
  }

  /**
   * Parse the group from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).group;
  }

  /**
   * Return a fully-qualified importDataFile resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} import_job
   * @param {string} import_data_file
   * @returns {string} Resource name string.
   */
  importDataFilePath(
    project: string,
    location: string,
    importJob: string,
    importDataFile: string
  ) {
    return this.pathTemplates.importDataFilePathTemplate.render({
      project: project,
      location: location,
      import_job: importJob,
      import_data_file: importDataFile,
    });
  }

  /**
   * Parse the project from ImportDataFile resource.
   *
   * @param {string} importDataFileName
   *   A fully-qualified path representing ImportDataFile resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromImportDataFileName(importDataFileName: string) {
    return this.pathTemplates.importDataFilePathTemplate.match(
      importDataFileName
    ).project;
  }

  /**
   * Parse the location from ImportDataFile resource.
   *
   * @param {string} importDataFileName
   *   A fully-qualified path representing ImportDataFile resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromImportDataFileName(importDataFileName: string) {
    return this.pathTemplates.importDataFilePathTemplate.match(
      importDataFileName
    ).location;
  }

  /**
   * Parse the import_job from ImportDataFile resource.
   *
   * @param {string} importDataFileName
   *   A fully-qualified path representing ImportDataFile resource.
   * @returns {string} A string representing the import_job.
   */
  matchImportJobFromImportDataFileName(importDataFileName: string) {
    return this.pathTemplates.importDataFilePathTemplate.match(
      importDataFileName
    ).import_job;
  }

  /**
   * Parse the import_data_file from ImportDataFile resource.
   *
   * @param {string} importDataFileName
   *   A fully-qualified path representing ImportDataFile resource.
   * @returns {string} A string representing the import_data_file.
   */
  matchImportDataFileFromImportDataFileName(importDataFileName: string) {
    return this.pathTemplates.importDataFilePathTemplate.match(
      importDataFileName
    ).import_data_file;
  }

  /**
   * Return a fully-qualified importJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} import_job
   * @returns {string} Resource name string.
   */
  importJobPath(project: string, location: string, importJob: string) {
    return this.pathTemplates.importJobPathTemplate.render({
      project: project,
      location: location,
      import_job: importJob,
    });
  }

  /**
   * Parse the project from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .project;
  }

  /**
   * Parse the location from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .location;
  }

  /**
   * Parse the import_job from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the import_job.
   */
  matchImportJobFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .import_job;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified preferenceSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} preference_set
   * @returns {string} Resource name string.
   */
  preferenceSetPath(project: string, location: string, preferenceSet: string) {
    return this.pathTemplates.preferenceSetPathTemplate.render({
      project: project,
      location: location,
      preference_set: preferenceSet,
    });
  }

  /**
   * Parse the project from PreferenceSet resource.
   *
   * @param {string} preferenceSetName
   *   A fully-qualified path representing PreferenceSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPreferenceSetName(preferenceSetName: string) {
    return this.pathTemplates.preferenceSetPathTemplate.match(preferenceSetName)
      .project;
  }

  /**
   * Parse the location from PreferenceSet resource.
   *
   * @param {string} preferenceSetName
   *   A fully-qualified path representing PreferenceSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPreferenceSetName(preferenceSetName: string) {
    return this.pathTemplates.preferenceSetPathTemplate.match(preferenceSetName)
      .location;
  }

  /**
   * Parse the preference_set from PreferenceSet resource.
   *
   * @param {string} preferenceSetName
   *   A fully-qualified path representing PreferenceSet resource.
   * @returns {string} A string representing the preference_set.
   */
  matchPreferenceSetFromPreferenceSetName(preferenceSetName: string) {
    return this.pathTemplates.preferenceSetPathTemplate.match(preferenceSetName)
      .preference_set;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified report resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} report_config
   * @param {string} report
   * @returns {string} Resource name string.
   */
  reportPath(
    project: string,
    location: string,
    reportConfig: string,
    report: string
  ) {
    return this.pathTemplates.reportPathTemplate.render({
      project: project,
      location: location,
      report_config: reportConfig,
      report: report,
    });
  }

  /**
   * Parse the project from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).project;
  }

  /**
   * Parse the location from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).location;
  }

  /**
   * Parse the report_config from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the report_config.
   */
  matchReportConfigFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName)
      .report_config;
  }

  /**
   * Parse the report from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the report.
   */
  matchReportFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).report;
  }

  /**
   * Return a fully-qualified reportConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} report_config
   * @returns {string} Resource name string.
   */
  reportConfigPath(project: string, location: string, reportConfig: string) {
    return this.pathTemplates.reportConfigPathTemplate.render({
      project: project,
      location: location,
      report_config: reportConfig,
    });
  }

  /**
   * Parse the project from ReportConfig resource.
   *
   * @param {string} reportConfigName
   *   A fully-qualified path representing ReportConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReportConfigName(reportConfigName: string) {
    return this.pathTemplates.reportConfigPathTemplate.match(reportConfigName)
      .project;
  }

  /**
   * Parse the location from ReportConfig resource.
   *
   * @param {string} reportConfigName
   *   A fully-qualified path representing ReportConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReportConfigName(reportConfigName: string) {
    return this.pathTemplates.reportConfigPathTemplate.match(reportConfigName)
      .location;
  }

  /**
   * Parse the report_config from ReportConfig resource.
   *
   * @param {string} reportConfigName
   *   A fully-qualified path representing ReportConfig resource.
   * @returns {string} A string representing the report_config.
   */
  matchReportConfigFromReportConfigName(reportConfigName: string) {
    return this.pathTemplates.reportConfigPathTemplate.match(reportConfigName)
      .report_config;
  }

  /**
   * Return a fully-qualified settings resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  settingsPath(project: string, location: string) {
    return this.pathTemplates.settingsPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Settings resource.
   *
   * @param {string} settingsName
   *   A fully-qualified path representing Settings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSettingsName(settingsName: string) {
    return this.pathTemplates.settingsPathTemplate.match(settingsName).project;
  }

  /**
   * Parse the location from Settings resource.
   *
   * @param {string} settingsName
   *   A fully-qualified path representing Settings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSettingsName(settingsName: string) {
    return this.pathTemplates.settingsPathTemplate.match(settingsName).location;
  }

  /**
   * Return a fully-qualified source resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} source
   * @returns {string} Resource name string.
   */
  sourcePath(project: string, location: string, source: string) {
    return this.pathTemplates.sourcePathTemplate.render({
      project: project,
      location: location,
      source: source,
    });
  }

  /**
   * Parse the project from Source resource.
   *
   * @param {string} sourceName
   *   A fully-qualified path representing Source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSourceName(sourceName: string) {
    return this.pathTemplates.sourcePathTemplate.match(sourceName).project;
  }

  /**
   * Parse the location from Source resource.
   *
   * @param {string} sourceName
   *   A fully-qualified path representing Source resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSourceName(sourceName: string) {
    return this.pathTemplates.sourcePathTemplate.match(sourceName).location;
  }

  /**
   * Parse the source from Source resource.
   *
   * @param {string} sourceName
   *   A fully-qualified path representing Source resource.
   * @returns {string} A string representing the source.
   */
  matchSourceFromSourceName(sourceName: string) {
    return this.pathTemplates.sourcePathTemplate.match(sourceName).source;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.migrationCenterStub && !this._terminated) {
      return this.migrationCenterStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
