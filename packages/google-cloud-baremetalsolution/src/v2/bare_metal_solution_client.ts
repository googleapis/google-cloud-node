// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/bare_metal_solution_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './bare_metal_solution_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Performs management operations on Bare Metal Solution servers.
 *
 *  The `baremetalsolution.googleapis.com` service provides management
 *  capabilities for Bare Metal Solution servers. To access the API methods, you
 *  must assign Bare Metal Solution IAM roles containing the desired permissions
 *  to your staff in your Google Cloud project. You must also enable the Bare
 *  Metal Solution API. Once enabled, the methods act
 *  upon specific servers in your Bare Metal Solution environment.
 * @class
 * @memberof v2
 */
export class BareMetalSolutionClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  bareMetalSolutionStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BareMetalSolutionClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BareMetalSolutionClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BareMetalSolutionClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}'
      ),
      instanceConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instanceConfigs/{instance_config}'
      ),
      instanceQuotaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instanceQuotas/{instance_quota}'
      ),
      lunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}/luns/{lun}'
      ),
      nFSSharePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/nfsShares/{nfs_share}'
      ),
      networkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/networks/{network}'
      ),
      networkConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/networkConfigs/{network_config}'
      ),
      osImagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/osImages/{os_image}'
      ),
      provisioningConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/provisioningConfigs/{provisioning_config}'
      ),
      provisioningQuotaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/provisioningQuotas/{provisioning_quota}'
      ),
      serverNetworkTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}'
      ),
      sshKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sshKeys/{ssh_key}'
      ),
      volumePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}'
      ),
      volumeConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumeConfigs/{volume_config}'
      ),
      volumeSnapshotPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}/snapshots/{snapshot}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInstances: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'instances'
      ),
      listSSHKeys: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'sshKeys'
      ),
      listVolumes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'volumes'
      ),
      listNetworks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'networks'
      ),
      listVolumeSnapshots: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'volumeSnapshots'
      ),
      listLuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'luns'
      ),
      listNfsShares: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'nfsShares'
      ),
      listProvisioningQuotas: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'provisioningQuotas'
      ),
      listOSImages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'osImages'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v2/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v2/{name=projects/*}/locations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const updateInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.Instance'
    ) as gax.protobuf.Type;
    const updateInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const resetInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.ResetInstanceResponse'
    ) as gax.protobuf.Type;
    const resetInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const startInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.StartInstanceResponse'
    ) as gax.protobuf.Type;
    const startInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const stopInstanceResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.StopInstanceResponse'
    ) as gax.protobuf.Type;
    const stopInstanceMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const enableInteractiveSerialConsoleResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.EnableInteractiveSerialConsoleResponse'
    ) as gax.protobuf.Type;
    const enableInteractiveSerialConsoleMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const disableInteractiveSerialConsoleResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.DisableInteractiveSerialConsoleResponse'
    ) as gax.protobuf.Type;
    const disableInteractiveSerialConsoleMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const detachLunResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.Instance'
    ) as gax.protobuf.Type;
    const detachLunMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateVolumeResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.Volume'
    ) as gax.protobuf.Type;
    const updateVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const evictVolumeResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const evictVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const resizeVolumeResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.Volume'
    ) as gax.protobuf.Type;
    const resizeVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateNetworkResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.Network'
    ) as gax.protobuf.Type;
    const updateNetworkMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const restoreVolumeSnapshotResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.VolumeSnapshot'
    ) as gax.protobuf.Type;
    const restoreVolumeSnapshotMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const evictLunResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const evictLunMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateNfsShareResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.NfsShare'
    ) as gax.protobuf.Type;
    const updateNfsShareMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const createNfsShareResponse = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.NfsShare'
    ) as gax.protobuf.Type;
    const createNfsShareMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteNfsShareResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteNfsShareMetadata = protoFilesRoot.lookup(
      '.google.cloud.baremetalsolution.v2.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      updateInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateInstanceResponse.decode.bind(updateInstanceResponse),
        updateInstanceMetadata.decode.bind(updateInstanceMetadata)
      ),
      resetInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        resetInstanceResponse.decode.bind(resetInstanceResponse),
        resetInstanceMetadata.decode.bind(resetInstanceMetadata)
      ),
      startInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startInstanceResponse.decode.bind(startInstanceResponse),
        startInstanceMetadata.decode.bind(startInstanceMetadata)
      ),
      stopInstance: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopInstanceResponse.decode.bind(stopInstanceResponse),
        stopInstanceMetadata.decode.bind(stopInstanceMetadata)
      ),
      enableInteractiveSerialConsole: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        enableInteractiveSerialConsoleResponse.decode.bind(
          enableInteractiveSerialConsoleResponse
        ),
        enableInteractiveSerialConsoleMetadata.decode.bind(
          enableInteractiveSerialConsoleMetadata
        )
      ),
      disableInteractiveSerialConsole:
        new this._gaxModule.LongrunningDescriptor(
          this.operationsClient,
          disableInteractiveSerialConsoleResponse.decode.bind(
            disableInteractiveSerialConsoleResponse
          ),
          disableInteractiveSerialConsoleMetadata.decode.bind(
            disableInteractiveSerialConsoleMetadata
          )
        ),
      detachLun: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        detachLunResponse.decode.bind(detachLunResponse),
        detachLunMetadata.decode.bind(detachLunMetadata)
      ),
      updateVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateVolumeResponse.decode.bind(updateVolumeResponse),
        updateVolumeMetadata.decode.bind(updateVolumeMetadata)
      ),
      evictVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        evictVolumeResponse.decode.bind(evictVolumeResponse),
        evictVolumeMetadata.decode.bind(evictVolumeMetadata)
      ),
      resizeVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        resizeVolumeResponse.decode.bind(resizeVolumeResponse),
        resizeVolumeMetadata.decode.bind(resizeVolumeMetadata)
      ),
      updateNetwork: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateNetworkResponse.decode.bind(updateNetworkResponse),
        updateNetworkMetadata.decode.bind(updateNetworkMetadata)
      ),
      restoreVolumeSnapshot: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreVolumeSnapshotResponse.decode.bind(
          restoreVolumeSnapshotResponse
        ),
        restoreVolumeSnapshotMetadata.decode.bind(restoreVolumeSnapshotMetadata)
      ),
      evictLun: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        evictLunResponse.decode.bind(evictLunResponse),
        evictLunMetadata.decode.bind(evictLunMetadata)
      ),
      updateNfsShare: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateNfsShareResponse.decode.bind(updateNfsShareResponse),
        updateNfsShareMetadata.decode.bind(updateNfsShareMetadata)
      ),
      createNfsShare: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createNfsShareResponse.decode.bind(createNfsShareResponse),
        createNfsShareMetadata.decode.bind(createNfsShareMetadata)
      ),
      deleteNfsShare: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteNfsShareResponse.decode.bind(deleteNfsShareResponse),
        deleteNfsShareMetadata.decode.bind(deleteNfsShareMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.baremetalsolution.v2.BareMetalSolution',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.bareMetalSolutionStub) {
      return this.bareMetalSolutionStub;
    }

    // Put together the "service stub" for
    // google.cloud.baremetalsolution.v2.BareMetalSolution.
    this.bareMetalSolutionStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.baremetalsolution.v2.BareMetalSolution'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.baremetalsolution.v2
            .BareMetalSolution,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const bareMetalSolutionStubMethods = [
      'listInstances',
      'getInstance',
      'updateInstance',
      'renameInstance',
      'resetInstance',
      'startInstance',
      'stopInstance',
      'enableInteractiveSerialConsole',
      'disableInteractiveSerialConsole',
      'detachLun',
      'listSshKeys',
      'createSshKey',
      'deleteSshKey',
      'listVolumes',
      'getVolume',
      'updateVolume',
      'renameVolume',
      'evictVolume',
      'resizeVolume',
      'listNetworks',
      'listNetworkUsage',
      'getNetwork',
      'updateNetwork',
      'createVolumeSnapshot',
      'restoreVolumeSnapshot',
      'deleteVolumeSnapshot',
      'getVolumeSnapshot',
      'listVolumeSnapshots',
      'getLun',
      'listLuns',
      'evictLun',
      'getNfsShare',
      'listNfsShares',
      'updateNfsShare',
      'createNfsShare',
      'renameNfsShare',
      'deleteNfsShare',
      'listProvisioningQuotas',
      'submitProvisioningConfig',
      'getProvisioningConfig',
      'createProvisioningConfig',
      'updateProvisioningConfig',
      'renameNetwork',
      'listOsImages',
    ];
    for (const methodName of bareMetalSolutionStubMethods) {
      const callPromise = this.bareMetalSolutionStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.bareMetalSolutionStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'baremetalsolution.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'baremetalsolution.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Get details about a single server.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Instance|Instance}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetInstance_async
   */
  getInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance,
      protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest | undefined,
      {} | undefined,
    ]
  >;
  getInstance(
    request: protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request: protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IInstance,
          | protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance,
      protos.google.cloud.baremetalsolution.v2.IGetInstanceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInstance(request, options, callback);
  }
  /**
   * RenameInstance sets a new name for an instance.
   * Use with caution, previous names become immediately invalidated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The `name` field is used to identify the instance.
   *   Format: projects/{project}/locations/{location}/instances/{instance}
   * @param {string} request.newInstanceId
   *   Required. The new `id` of the instance.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Instance|Instance}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.rename_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RenameInstance_async
   */
  renameInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  renameInstance(
    request: protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameInstance(
    request: protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IInstance,
          | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IInstance,
      | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameInstanceRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.renameInstance(request, options, callback);
  }
  /**
   * Register a public SSH key in the specified project for use with the
   * interactive serial console feature.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent containing the SSH keys.
   * @param {google.cloud.baremetalsolution.v2.SSHKey} request.sshKey
   *   Required. The SSH key to register.
   * @param {string} request.sshKeyId
   *   Required. The ID to use for the key, which will become the final component
   *   of the key's resource name.
   *
   *   This value must match the regex:
   *     [a-zA-Z0-9@.\-_]{1,64}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.SSHKey|SSHKey}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.create_s_s_h_key.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_CreateSSHKey_async
   */
  createSSHKey(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISSHKey,
      protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest | undefined,
      {} | undefined,
    ]
  >;
  createSSHKey(
    request: protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ISSHKey,
      | protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createSSHKey(
    request: protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ISSHKey,
      | protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createSSHKey(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.ISSHKey,
          | protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.ISSHKey,
      | protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISSHKey,
      protos.google.cloud.baremetalsolution.v2.ICreateSSHKeyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSshKey(request, options, callback);
  }
  /**
   * Deletes a public SSH key registered in the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the SSH key to delete.
   *   Currently, the only valid value for the location is "global".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.delete_s_s_h_key.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DeleteSSHKey_async
   */
  deleteSSHKey(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteSSHKey(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSSHKey(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSSHKey(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.baremetalsolution.v2.IDeleteSSHKeyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSshKey(request, options, callback);
  }
  /**
   * Get details of a single storage volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Volume|Volume}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetVolume_async
   */
  getVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume,
      protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest | undefined,
      {} | undefined,
    ]
  >;
  getVolume(
    request: protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolume(
    request: protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IVolume,
          | protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume,
      protos.google.cloud.baremetalsolution.v2.IGetVolumeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVolume(request, options, callback);
  }
  /**
   * RenameVolume sets a new name for a volume.
   * Use with caution, previous names become immediately invalidated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The `name` field is used to identify the volume.
   *   Format: projects/{project}/locations/{location}/volumes/{volume}
   * @param {string} request.newVolumeId
   *   Required. The new `id` of the volume.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Volume|Volume}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.rename_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RenameVolume_async
   */
  renameVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume,
      protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest | undefined,
      {} | undefined,
    ]
  >;
  renameVolume(
    request: protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameVolume(
    request: protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IVolume,
          | protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolume,
      | protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume,
      protos.google.cloud.baremetalsolution.v2.IRenameVolumeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.renameVolume(request, options, callback);
  }
  /**
   * List all Networks (and used IPs for each Network) in the vendor account
   * associated with the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.location
   *   Required. Parent value (project and location).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.ListNetworkUsageResponse|ListNetworkUsageResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_network_usage.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListNetworkUsage_async
   */
  listNetworkUsage(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
      (
        | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  listNetworkUsage(
    request: protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
      | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listNetworkUsage(
    request: protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
      | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listNetworkUsage(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
          | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
      | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse,
      (
        | protos.google.cloud.baremetalsolution.v2.IListNetworkUsageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        location: request.location ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNetworkUsage(request, options, callback);
  }
  /**
   * Get details of a single network.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Network|Network}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_network.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetNetwork_async
   */
  getNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork,
      protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest | undefined,
      {} | undefined,
    ]
  >;
  getNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.INetwork,
          | protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork,
      protos.google.cloud.baremetalsolution.v2.IGetNetworkRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getNetwork(request, options, callback);
  }
  /**
   * Takes a snapshot of a boot volume.
   * Returns INVALID_ARGUMENT if called for a non-boot volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume to snapshot.
   * @param {google.cloud.baremetalsolution.v2.VolumeSnapshot} request.volumeSnapshot
   *   Required. The snapshot to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.VolumeSnapshot|VolumeSnapshot}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.create_volume_snapshot.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_CreateVolumeSnapshot_async
   */
  createVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      (
        | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
          | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      (
        | protos.google.cloud.baremetalsolution.v2.ICreateVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createVolumeSnapshot(request, options, callback);
  }
  /**
   * Deletes a volume snapshot.
   * Returns INVALID_ARGUMENT if called for a non-boot volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the snapshot to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.delete_volume_snapshot.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DeleteVolumeSnapshot_async
   */
  deleteVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  deleteVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.baremetalsolution.v2.IDeleteVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteVolumeSnapshot(request, options, callback);
  }
  /**
   * Returns the specified snapshot resource.
   * Returns INVALID_ARGUMENT if called for a non-boot volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the snapshot.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.VolumeSnapshot|VolumeSnapshot}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_volume_snapshot.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetVolumeSnapshot_async
   */
  getVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      (
        | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
          | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
      (
        | protos.google.cloud.baremetalsolution.v2.IGetVolumeSnapshotRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVolumeSnapshot(request, options, callback);
  }
  /**
   * Get details of a single storage logical unit number(LUN).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Lun|Lun}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_lun.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetLun_async
   */
  getLun(
    request?: protos.google.cloud.baremetalsolution.v2.IGetLunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ILun,
      protos.google.cloud.baremetalsolution.v2.IGetLunRequest | undefined,
      {} | undefined,
    ]
  >;
  getLun(
    request: protos.google.cloud.baremetalsolution.v2.IGetLunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ILun,
      | protos.google.cloud.baremetalsolution.v2.IGetLunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLun(
    request: protos.google.cloud.baremetalsolution.v2.IGetLunRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ILun,
      | protos.google.cloud.baremetalsolution.v2.IGetLunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLun(
    request?: protos.google.cloud.baremetalsolution.v2.IGetLunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.ILun,
          | protos.google.cloud.baremetalsolution.v2.IGetLunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.ILun,
      | protos.google.cloud.baremetalsolution.v2.IGetLunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ILun,
      protos.google.cloud.baremetalsolution.v2.IGetLunRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLun(request, options, callback);
  }
  /**
   * Get details of a single NFS share.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.NfsShare|NfsShare}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetNfsShare_async
   */
  getNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest | undefined,
      {} | undefined,
    ]
  >;
  getNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.INfsShare,
          | protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      protos.google.cloud.baremetalsolution.v2.IGetNfsShareRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getNfsShare(request, options, callback);
  }
  /**
   * RenameNfsShare sets a new name for an nfsshare.
   * Use with caution, previous names become immediately invalidated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The `name` field is used to identify the nfsshare.
   *   Format: projects/{project}/locations/{location}/nfsshares/{nfsshare}
   * @param {string} request.newNfsshareId
   *   Required. The new `id` of the nfsshare.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.NfsShare|NfsShare}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.rename_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RenameNfsShare_async
   */
  renameNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  renameNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.INfsShare,
          | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameNfsShareRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.renameNfsShare(request, options, callback);
  }
  /**
   * Submit a provisiong configuration for a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent project and location containing the
   *   ProvisioningConfig.
   * @param {google.cloud.baremetalsolution.v2.ProvisioningConfig} request.provisioningConfig
   *   Required. The ProvisioningConfig to create.
   * @param {string} [request.email]
   *   Optional. Email provided to send a confirmation with provisioning config
   *   to.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.SubmitProvisioningConfigResponse|SubmitProvisioningConfigResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.submit_provisioning_config.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_SubmitProvisioningConfig_async
   */
  submitProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
      (
        | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  submitProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
      | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  submitProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
      | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  submitProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
          | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
      | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigResponse,
      (
        | protos.google.cloud.baremetalsolution.v2.ISubmitProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitProvisioningConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Get ProvisioningConfig by name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the ProvisioningConfig.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.ProvisioningConfig|ProvisioningConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.get_provisioning_config.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_GetProvisioningConfig_async
   */
  getProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
          | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.IGetProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getProvisioningConfig(request, options, callback);
  }
  /**
   * Create new ProvisioningConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent project and location containing the
   *   ProvisioningConfig.
   * @param {google.cloud.baremetalsolution.v2.ProvisioningConfig} request.provisioningConfig
   *   Required. The ProvisioningConfig to create.
   * @param {string} [request.email]
   *   Optional. Email provided to send a confirmation with provisioning config
   *   to.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.ProvisioningConfig|ProvisioningConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.create_provisioning_config.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_CreateProvisioningConfig_async
   */
  createProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
          | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.ICreateProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createProvisioningConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Update existing ProvisioningConfig.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.baremetalsolution.v2.ProvisioningConfig} request.provisioningConfig
   *   Required. The ProvisioningConfig to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to update.
   * @param {string} [request.email]
   *   Optional. Email provided to send a confirmation with provisioning config
   *   to.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.ProvisioningConfig|ProvisioningConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_provisioning_config.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateProvisioningConfig_async
   */
  updateProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProvisioningConfig(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProvisioningConfig(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
          | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningConfig,
      (
        | protos.google.cloud.baremetalsolution.v2.IUpdateProvisioningConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'provisioning_config.name': request.provisioningConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateProvisioningConfig(
      request,
      options,
      callback
    );
  }
  /**
   * RenameNetwork sets a new name for a network.
   * Use with caution, previous names become immediately invalidated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The `name` field is used to identify the network.
   *   Format: projects/{project}/locations/{location}/networks/{network}
   * @param {string} request.newNetworkId
   *   Required. The new `id` of the network.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.baremetalsolution.v2.Network|Network}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.rename_network.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RenameNetwork_async
   */
  renameNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  renameNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest,
    callback: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  renameNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.baremetalsolution.v2.INetwork,
          | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.baremetalsolution.v2.INetwork,
      | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork,
      (
        | protos.google.cloud.baremetalsolution.v2.IRenameNetworkRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.renameNetwork(request, options, callback);
  }

  /**
   * Update details of a single server.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.baremetalsolution.v2.Instance} request.instance
   *   Required. The server to update.
   *
   *   The `name` field is used to identify the instance to update.
   *   Format: projects/{project}/locations/{location}/instances/{instance}
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   *   The currently supported fields are:
   *     `labels`
   *     `hyperthreading_enabled`
   *     `os_image`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateInstance_async
   */
  updateInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateInstance(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInstance(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IInstance,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'instance.name': request.instance!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateInstance_async
   */
  async checkUpdateInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.Instance,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.Instance,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Perform an ungraceful, hard reset on a server. Equivalent to shutting the
   * power off and then turning it back on.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.reset_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ResetInstance_async
   */
  resetInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IResetInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  resetInstance(
    request: protos.google.cloud.baremetalsolution.v2.IResetInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resetInstance(
    request: protos.google.cloud.baremetalsolution.v2.IResetInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resetInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IResetInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resetInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `resetInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.reset_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ResetInstance_async
   */
  async checkResetInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.ResetInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.resetInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.ResetInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Starts a server that was shutdown.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.start_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_StartInstance_async
   */
  startInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IStartInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  startInstance(
    request: protos.google.cloud.baremetalsolution.v2.IStartInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startInstance(
    request: protos.google.cloud.baremetalsolution.v2.IStartInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IStartInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `startInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.start_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_StartInstance_async
   */
  async checkStartInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.StartInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.startInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.StartInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Stop a running server.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.stop_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_StopInstance_async
   */
  stopInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IStopInstanceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  stopInstance(
    request: protos.google.cloud.baremetalsolution.v2.IStopInstanceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopInstance(
    request: protos.google.cloud.baremetalsolution.v2.IStopInstanceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopInstance(
    request?: protos.google.cloud.baremetalsolution.v2.IStopInstanceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.stopInstance(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `stopInstance()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.stop_instance.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_StopInstance_async
   */
  async checkStopInstanceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.StopInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.stopInstance,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.StopInstanceResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Enable the interactive serial console feature on an instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.enable_interactive_serial_console.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EnableInteractiveSerialConsole_async
   */
  enableInteractiveSerialConsole(
    request?: protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  enableInteractiveSerialConsole(
    request: protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  enableInteractiveSerialConsole(
    request: protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  enableInteractiveSerialConsole(
    request?: protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IEnableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.enableInteractiveSerialConsole(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `enableInteractiveSerialConsole()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.enable_interactive_serial_console.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EnableInteractiveSerialConsole_async
   */
  async checkEnableInteractiveSerialConsoleProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.EnableInteractiveSerialConsoleResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.enableInteractiveSerialConsole,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.EnableInteractiveSerialConsoleResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Disable the interactive serial console feature on an instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.disable_interactive_serial_console.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DisableInteractiveSerialConsole_async
   */
  disableInteractiveSerialConsole(
    request?: protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  disableInteractiveSerialConsole(
    request: protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  disableInteractiveSerialConsole(
    request: protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  disableInteractiveSerialConsole(
    request?: protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IDisableInteractiveSerialConsoleResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.disableInteractiveSerialConsole(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `disableInteractiveSerialConsole()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.disable_interactive_serial_console.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DisableInteractiveSerialConsole_async
   */
  async checkDisableInteractiveSerialConsoleProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.DisableInteractiveSerialConsoleResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.disableInteractiveSerialConsole,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.DisableInteractiveSerialConsoleResponse,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Detach LUN from Instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.instance
   *   Required. Name of the instance.
   * @param {string} request.lun
   *   Required. Name of the Lun to detach.
   * @param {boolean} request.skipReboot
   *   If true, performs lun unmapping without instance reboot.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.detach_lun.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DetachLun_async
   */
  detachLun(
    request?: protos.google.cloud.baremetalsolution.v2.IDetachLunRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  detachLun(
    request: protos.google.cloud.baremetalsolution.v2.IDetachLunRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  detachLun(
    request: protos.google.cloud.baremetalsolution.v2.IDetachLunRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  detachLun(
    request?: protos.google.cloud.baremetalsolution.v2.IDetachLunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IInstance,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        instance: request.instance ?? '',
      });
    this.initialize();
    return this.innerApiCalls.detachLun(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `detachLun()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.detach_lun.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DetachLun_async
   */
  async checkDetachLunProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.Instance,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.detachLun,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.Instance,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Update details of a single storage volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.baremetalsolution.v2.Volume} request.volume
   *   Required. The volume to update.
   *
   *   The `name` field is used to identify the volume to update.
   *   Format: projects/{project}/locations/{location}/volumes/{volume}
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   *   The only currently supported fields are:
   *     'labels'
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateVolume_async
   */
  updateVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateVolume(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateVolume(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IVolume,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'volume.name': request.volume!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateVolume_async
   */
  async checkUpdateVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.Volume,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.Volume,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Skips volume's cooloff and deletes it now.
   * Volume must be in cooloff state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Volume.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.evict_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EvictVolume_async
   */
  evictVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IEvictVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  evictVolume(
    request: protos.google.cloud.baremetalsolution.v2.IEvictVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  evictVolume(
    request: protos.google.cloud.baremetalsolution.v2.IEvictVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  evictVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IEvictVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.evictVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `evictVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.evict_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EvictVolume_async
   */
  async checkEvictVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.evictVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Emergency Volume resize.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.volume
   *   Required. Volume to resize.
   * @param {number} request.sizeGib
   *   New Volume size, in GiB.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.resize_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ResizeVolume_async
   */
  resizeVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IResizeVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  resizeVolume(
    request: protos.google.cloud.baremetalsolution.v2.IResizeVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resizeVolume(
    request: protos.google.cloud.baremetalsolution.v2.IResizeVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resizeVolume(
    request?: protos.google.cloud.baremetalsolution.v2.IResizeVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IVolume,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        volume: request.volume ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resizeVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `resizeVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.resize_volume.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ResizeVolume_async
   */
  async checkResizeVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.Volume,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.resizeVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.Volume,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Update details of a single network.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.baremetalsolution.v2.Network} request.network
   *   Required. The network to update.
   *
   *   The `name` field is used to identify the instance to update.
   *   Format: projects/{project}/locations/{location}/networks/{network}
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   *   The only currently supported fields are:
   *     `labels`, `reservations`, `vrf.vlan_attachments`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_network.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateNetwork_async
   */
  updateNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateNetworkRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateNetworkRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNetwork(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateNetworkRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNetwork(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateNetworkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.INetwork,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'network.name': request.network!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateNetwork(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateNetwork()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_network.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateNetwork_async
   */
  async checkUpdateNetworkProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.Network,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateNetwork,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.Network,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Uses the specified snapshot to restore its parent volume.
   * Returns INVALID_ARGUMENT if called for a non-boot volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.volumeSnapshot
   *   Required. Name of the snapshot which will be used to restore its parent
   *   volume.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.restore_volume_snapshot.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RestoreVolumeSnapshot_async
   */
  restoreVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IRestoreVolumeSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  restoreVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IRestoreVolumeSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreVolumeSnapshot(
    request: protos.google.cloud.baremetalsolution.v2.IRestoreVolumeSnapshotRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreVolumeSnapshot(
    request?: protos.google.cloud.baremetalsolution.v2.IRestoreVolumeSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        volume_snapshot: request.volumeSnapshot ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restoreVolumeSnapshot(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `restoreVolumeSnapshot()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.restore_volume_snapshot.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_RestoreVolumeSnapshot_async
   */
  async checkRestoreVolumeSnapshotProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.VolumeSnapshot,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.restoreVolumeSnapshot,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.VolumeSnapshot,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Skips lun's cooloff and deletes it now.
   * Lun must be in cooloff state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the lun.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.evict_lun.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EvictLun_async
   */
  evictLun(
    request?: protos.google.cloud.baremetalsolution.v2.IEvictLunRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  evictLun(
    request: protos.google.cloud.baremetalsolution.v2.IEvictLunRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  evictLun(
    request: protos.google.cloud.baremetalsolution.v2.IEvictLunRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  evictLun(
    request?: protos.google.cloud.baremetalsolution.v2.IEvictLunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.evictLun(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `evictLun()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.evict_lun.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_EvictLun_async
   */
  async checkEvictLunProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.evictLun,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Update details of a single NFS share.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.baremetalsolution.v2.NfsShare} request.nfsShare
   *   Required. The NFS share to update.
   *
   *   The `name` field is used to identify the NFS share to update.
   *   Format: projects/{project}/locations/{location}/nfsShares/{nfs_share}
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   *   The only currently supported fields are:
   *     `labels`
   *     `allowed_clients`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateNfsShare_async
   */
  updateNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateNfsShareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateNfsShareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IUpdateNfsShareRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IUpdateNfsShareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.INfsShare,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'nfs_share.name': request.nfsShare!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateNfsShare(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateNfsShare()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.update_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_UpdateNfsShare_async
   */
  async checkUpdateNfsShareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.NfsShare,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateNfsShare,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.NfsShare,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Create an NFS share.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent project and location.
   * @param {google.cloud.baremetalsolution.v2.NfsShare} request.nfsShare
   *   Required. The NfsShare to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.create_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_CreateNfsShare_async
   */
  createNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateNfsShareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.ICreateNfsShareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.ICreateNfsShareRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.ICreateNfsShareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.baremetalsolution.v2.INfsShare,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createNfsShare(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createNfsShare()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.create_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_CreateNfsShare_async
   */
  async checkCreateNfsShareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.baremetalsolution.v2.NfsShare,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createNfsShare,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.baremetalsolution.v2.NfsShare,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * Delete an NFS share. The underlying volume is automatically deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the NFS share to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.delete_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DeleteNfsShare_async
   */
  deleteNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteNfsShareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteNfsShareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNfsShare(
    request: protos.google.cloud.baremetalsolution.v2.IDeleteNfsShareRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNfsShare(
    request?: protos.google.cloud.baremetalsolution.v2.IDeleteNfsShareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.baremetalsolution.v2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteNfsShare(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteNfsShare()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.delete_nfs_share.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_DeleteNfsShare_async
   */
  async checkDeleteNfsShareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteNfsShare,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.baremetalsolution.v2.OperationMetadata
    >;
  }
  /**
   * List servers in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInstancesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.Instance|Instance}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInstancesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInstances(
    request?: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance[],
      protos.google.cloud.baremetalsolution.v2.IListInstancesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListInstancesResponse,
    ]
  >;
  listInstances(
    request: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IInstance
    >
  ): void;
  listInstances(
    request: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IInstance
    >
  ): void;
  listInstances(
    request?: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
          | protos.google.cloud.baremetalsolution.v2.IListInstancesResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.IInstance
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListInstancesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IInstance
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IInstance[],
      protos.google.cloud.baremetalsolution.v2.IListInstancesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListInstancesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInstances(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInstancesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.Instance|Instance} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInstancesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listInstancesStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.createStream(
      this.innerApiCalls.listInstances as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInstances`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListInstancesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.Instance|Instance}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_instances.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListInstances_async
   */
  listInstancesAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListInstancesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.IInstance> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInstances'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInstances.asyncIterate(
      this.innerApiCalls['listInstances'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.IInstance>;
  }
  /**
   * Lists the public SSH keys registered for the specified project.
   * These SSH keys are used only for the interactive serial console feature.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent containing the SSH keys.
   *   Currently, the only valid value for the location is "global".
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.SSHKey|SSHKey}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSSHKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSSHKeys(
    request?: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISSHKey[],
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse,
    ]
  >;
  listSSHKeys(
    request: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
      | protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ISSHKey
    >
  ): void;
  listSSHKeys(
    request: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
      | protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ISSHKey
    >
  ): void;
  listSSHKeys(
    request?: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
          | protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.ISSHKey
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
      | protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ISSHKey
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ISSHKey[],
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListSSHKeysResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSshKeys(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent containing the SSH keys.
   *   Currently, the only valid value for the location is "global".
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.SSHKey|SSHKey} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSSHKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSSHKeysStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSshKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSSHKeys.createStream(
      this.innerApiCalls.listSshKeys as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSSHKeys`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent containing the SSH keys.
   *   Currently, the only valid value for the location is "global".
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.SSHKey|SSHKey}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_s_s_h_keys.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListSSHKeys_async
   */
  listSSHKeysAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListSSHKeysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.ISSHKey> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSshKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSSHKeys.asyncIterate(
      this.innerApiCalls['listSshKeys'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.ISSHKey>;
  }
  /**
   * List storage volumes in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.Volume|Volume}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVolumesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumes(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume[],
      protos.google.cloud.baremetalsolution.v2.IListVolumesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListVolumesResponse,
    ]
  >;
  listVolumes(
    request: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolume
    >
  ): void;
  listVolumes(
    request: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolume
    >
  ): void;
  listVolumes(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
          | protos.google.cloud.baremetalsolution.v2.IListVolumesResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.IVolume
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolume
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolume[],
      protos.google.cloud.baremetalsolution.v2.IListVolumesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListVolumesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVolumes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.Volume|Volume} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVolumesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumesStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumes.createStream(
      this.innerApiCalls.listVolumes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVolumes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.Volume|Volume}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_volumes.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListVolumes_async
   */
  listVolumesAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.IVolume> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumes.asyncIterate(
      this.innerApiCalls['listVolumes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.IVolume>;
  }
  /**
   * List network in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.Network|Network}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNetworksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNetworks(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork[],
      protos.google.cloud.baremetalsolution.v2.IListNetworksRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListNetworksResponse,
    ]
  >;
  listNetworks(
    request: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INetwork
    >
  ): void;
  listNetworks(
    request: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INetwork
    >
  ): void;
  listNetworks(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
          | protos.google.cloud.baremetalsolution.v2.IListNetworksResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.INetwork
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNetworksResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INetwork
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INetwork[],
      protos.google.cloud.baremetalsolution.v2.IListNetworksRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListNetworksResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNetworks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.Network|Network} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNetworksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNetworksStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNetworks.createStream(
      this.innerApiCalls.listNetworks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNetworks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNetworksRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.Network|Network}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_networks.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListNetworks_async
   */
  listNetworksAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListNetworksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.INetwork> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNetworks.asyncIterate(
      this.innerApiCalls['listNetworks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.INetwork>;
  }
  /**
   * Retrieves the list of snapshots for the specified volume.
   * Returns a response with an empty list of snapshots if called
   * for a non-boot volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.VolumeSnapshot|VolumeSnapshot}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVolumeSnapshotsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumeSnapshots(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot[],
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse,
    ]
  >;
  listVolumeSnapshots(
    request: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot
    >
  ): void;
  listVolumeSnapshots(
    request: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot
    >
  ): void;
  listVolumeSnapshots(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
          | protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot[],
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVolumeSnapshots(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.VolumeSnapshot|VolumeSnapshot} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVolumeSnapshotsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumeSnapshotsStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeSnapshots'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeSnapshots.createStream(
      this.innerApiCalls.listVolumeSnapshots as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVolumeSnapshots`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.VolumeSnapshot|VolumeSnapshot}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_volume_snapshots.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListVolumeSnapshots_async
   */
  listVolumeSnapshotsAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListVolumeSnapshotsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumeSnapshots'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumeSnapshots.asyncIterate(
      this.innerApiCalls['listVolumeSnapshots'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.IVolumeSnapshot>;
  }
  /**
   * List storage volume luns for given storage volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListLunsRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.Lun|Lun}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listLunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLuns(
    request?: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ILun[],
      protos.google.cloud.baremetalsolution.v2.IListLunsRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListLunsResponse,
    ]
  >;
  listLuns(
    request: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListLunsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ILun
    >
  ): void;
  listLuns(
    request: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListLunsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ILun
    >
  ): void;
  listLuns(
    request?: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
          | protos.google.cloud.baremetalsolution.v2.IListLunsResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.ILun
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
      | protos.google.cloud.baremetalsolution.v2.IListLunsResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.ILun
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.ILun[],
      protos.google.cloud.baremetalsolution.v2.IListLunsRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListLunsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listLuns(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListLunsRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.Lun|Lun} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listLunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLunsStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLuns.createStream(
      this.innerApiCalls.listLuns as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listLuns`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListLunsRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.Lun|Lun}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_luns.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListLuns_async
   */
  listLunsAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListLunsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.ILun> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLuns.asyncIterate(
      this.innerApiCalls['listLuns'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.ILun>;
  }
  /**
   * List NFS shares.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNfsSharesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.NfsShare|NfsShare}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNfsSharesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNfsShares(
    request?: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare[],
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse,
    ]
  >;
  listNfsShares(
    request: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INfsShare
    >
  ): void;
  listNfsShares(
    request: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INfsShare
    >
  ): void;
  listNfsShares(
    request?: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
          | protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.INfsShare
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.INfsShare
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.INfsShare[],
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListNfsSharesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNfsShares(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNfsSharesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.NfsShare|NfsShare} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNfsSharesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNfsSharesStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNfsShares'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNfsShares.createStream(
      this.innerApiCalls.listNfsShares as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNfsShares`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListNfsSharesRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.NfsShare|NfsShare}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_nfs_shares.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListNfsShares_async
   */
  listNfsSharesAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListNfsSharesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.INfsShare> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNfsShares'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNfsShares.asyncIterate(
      this.innerApiCalls['listNfsShares'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.INfsShare>;
  }
  /**
   * List the budget details to provision resources on a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.ProvisioningQuota|ProvisioningQuota}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listProvisioningQuotasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listProvisioningQuotas(
    request?: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningQuota[],
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse,
    ]
  >;
  listProvisioningQuotas(
    request: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
      | protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IProvisioningQuota
    >
  ): void;
  listProvisioningQuotas(
    request: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
      | protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IProvisioningQuota
    >
  ): void;
  listProvisioningQuotas(
    request?: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
          | protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.IProvisioningQuota
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
      | protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IProvisioningQuota
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IProvisioningQuota[],
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listProvisioningQuotas(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.ProvisioningQuota|ProvisioningQuota} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listProvisioningQuotasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listProvisioningQuotasStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProvisioningQuotas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProvisioningQuotas.createStream(
      this.innerApiCalls.listProvisioningQuotas as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listProvisioningQuotas`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.ProvisioningQuota|ProvisioningQuota}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_provisioning_quotas.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListProvisioningQuotas_async
   */
  listProvisioningQuotasAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListProvisioningQuotasRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.IProvisioningQuota> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProvisioningQuotas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProvisioningQuotas.asyncIterate(
      this.innerApiCalls['listProvisioningQuotas'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.IProvisioningQuota>;
  }
  /**
   * Retrieves the list of OS images which are currently approved.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.baremetalsolution.v2.OSImage|OSImage}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOSImagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOSImages(
    request?: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IOSImage[],
      protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse,
    ]
  >;
  listOSImages(
    request: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IOSImage
    >
  ): void;
  listOSImages(
    request: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    callback: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IOSImage
    >
  ): void;
  listOSImages(
    request?: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
          | protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse
          | null
          | undefined,
          protos.google.cloud.baremetalsolution.v2.IOSImage
        >,
    callback?: PaginationCallback<
      protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
      | protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse
      | null
      | undefined,
      protos.google.cloud.baremetalsolution.v2.IOSImage
    >
  ): Promise<
    [
      protos.google.cloud.baremetalsolution.v2.IOSImage[],
      protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest | null,
      protos.google.cloud.baremetalsolution.v2.IListOSImagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOsImages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.baremetalsolution.v2.OSImage|OSImage} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOSImagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOSImagesStream(
    request?: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOsImages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOSImages.createStream(
      this.innerApiCalls.listOsImages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOSImages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListProvisioningQuotasRequest.
   * @param {number} request.pageSize
   *   Requested page size. The server might return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   *   Notice that page_size field is not supported and won't be respected in
   *   the API request for now, will be updated when pagination is supported.
   * @param {string} request.pageToken
   *   A token identifying a page of results from the server.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.baremetalsolution.v2.OSImage|OSImage}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/bare_metal_solution.list_o_s_images.js</caption>
   * region_tag:baremetalsolution_v2_generated_BareMetalSolution_ListOSImages_async
   */
  listOSImagesAsync(
    request?: protos.google.cloud.baremetalsolution.v2.IListOSImagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.baremetalsolution.v2.IOSImage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOsImages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOSImages.asyncIterate(
      this.innerApiCalls['listOsImages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.baremetalsolution.v2.IOSImage>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, location: string, instance: string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified instanceConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance_config
   * @returns {string} Resource name string.
   */
  instanceConfigPath(
    project: string,
    location: string,
    instanceConfig: string
  ) {
    return this.pathTemplates.instanceConfigPathTemplate.render({
      project: project,
      location: location,
      instance_config: instanceConfig,
    });
  }

  /**
   * Parse the project from InstanceConfig resource.
   *
   * @param {string} instanceConfigName
   *   A fully-qualified path representing InstanceConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceConfigName(instanceConfigName: string) {
    return this.pathTemplates.instanceConfigPathTemplate.match(
      instanceConfigName
    ).project;
  }

  /**
   * Parse the location from InstanceConfig resource.
   *
   * @param {string} instanceConfigName
   *   A fully-qualified path representing InstanceConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceConfigName(instanceConfigName: string) {
    return this.pathTemplates.instanceConfigPathTemplate.match(
      instanceConfigName
    ).location;
  }

  /**
   * Parse the instance_config from InstanceConfig resource.
   *
   * @param {string} instanceConfigName
   *   A fully-qualified path representing InstanceConfig resource.
   * @returns {string} A string representing the instance_config.
   */
  matchInstanceConfigFromInstanceConfigName(instanceConfigName: string) {
    return this.pathTemplates.instanceConfigPathTemplate.match(
      instanceConfigName
    ).instance_config;
  }

  /**
   * Return a fully-qualified instanceQuota resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance_quota
   * @returns {string} Resource name string.
   */
  instanceQuotaPath(project: string, location: string, instanceQuota: string) {
    return this.pathTemplates.instanceQuotaPathTemplate.render({
      project: project,
      location: location,
      instance_quota: instanceQuota,
    });
  }

  /**
   * Parse the project from InstanceQuota resource.
   *
   * @param {string} instanceQuotaName
   *   A fully-qualified path representing InstanceQuota resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceQuotaName(instanceQuotaName: string) {
    return this.pathTemplates.instanceQuotaPathTemplate.match(instanceQuotaName)
      .project;
  }

  /**
   * Parse the location from InstanceQuota resource.
   *
   * @param {string} instanceQuotaName
   *   A fully-qualified path representing InstanceQuota resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceQuotaName(instanceQuotaName: string) {
    return this.pathTemplates.instanceQuotaPathTemplate.match(instanceQuotaName)
      .location;
  }

  /**
   * Parse the instance_quota from InstanceQuota resource.
   *
   * @param {string} instanceQuotaName
   *   A fully-qualified path representing InstanceQuota resource.
   * @returns {string} A string representing the instance_quota.
   */
  matchInstanceQuotaFromInstanceQuotaName(instanceQuotaName: string) {
    return this.pathTemplates.instanceQuotaPathTemplate.match(instanceQuotaName)
      .instance_quota;
  }

  /**
   * Return a fully-qualified lun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @param {string} lun
   * @returns {string} Resource name string.
   */
  lunPath(project: string, location: string, volume: string, lun: string) {
    return this.pathTemplates.lunPathTemplate.render({
      project: project,
      location: location,
      volume: volume,
      lun: lun,
    });
  }

  /**
   * Parse the project from Lun resource.
   *
   * @param {string} lunName
   *   A fully-qualified path representing Lun resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLunName(lunName: string) {
    return this.pathTemplates.lunPathTemplate.match(lunName).project;
  }

  /**
   * Parse the location from Lun resource.
   *
   * @param {string} lunName
   *   A fully-qualified path representing Lun resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLunName(lunName: string) {
    return this.pathTemplates.lunPathTemplate.match(lunName).location;
  }

  /**
   * Parse the volume from Lun resource.
   *
   * @param {string} lunName
   *   A fully-qualified path representing Lun resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromLunName(lunName: string) {
    return this.pathTemplates.lunPathTemplate.match(lunName).volume;
  }

  /**
   * Parse the lun from Lun resource.
   *
   * @param {string} lunName
   *   A fully-qualified path representing Lun resource.
   * @returns {string} A string representing the lun.
   */
  matchLunFromLunName(lunName: string) {
    return this.pathTemplates.lunPathTemplate.match(lunName).lun;
  }

  /**
   * Return a fully-qualified nFSShare resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} nfs_share
   * @returns {string} Resource name string.
   */
  nFSSharePath(project: string, location: string, nfsShare: string) {
    return this.pathTemplates.nFSSharePathTemplate.render({
      project: project,
      location: location,
      nfs_share: nfsShare,
    });
  }

  /**
   * Parse the project from NFSShare resource.
   *
   * @param {string} nFSShareName
   *   A fully-qualified path representing NFSShare resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNFSShareName(nFSShareName: string) {
    return this.pathTemplates.nFSSharePathTemplate.match(nFSShareName).project;
  }

  /**
   * Parse the location from NFSShare resource.
   *
   * @param {string} nFSShareName
   *   A fully-qualified path representing NFSShare resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNFSShareName(nFSShareName: string) {
    return this.pathTemplates.nFSSharePathTemplate.match(nFSShareName).location;
  }

  /**
   * Parse the nfs_share from NFSShare resource.
   *
   * @param {string} nFSShareName
   *   A fully-qualified path representing NFSShare resource.
   * @returns {string} A string representing the nfs_share.
   */
  matchNfsShareFromNFSShareName(nFSShareName: string) {
    return this.pathTemplates.nFSSharePathTemplate.match(nFSShareName)
      .nfs_share;
  }

  /**
   * Return a fully-qualified network resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} network
   * @returns {string} Resource name string.
   */
  networkPath(project: string, location: string, network: string) {
    return this.pathTemplates.networkPathTemplate.render({
      project: project,
      location: location,
      network: network,
    });
  }

  /**
   * Parse the project from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).project;
  }

  /**
   * Parse the location from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).location;
  }

  /**
   * Parse the network from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the network.
   */
  matchNetworkFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).network;
  }

  /**
   * Return a fully-qualified networkConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} network_config
   * @returns {string} Resource name string.
   */
  networkConfigPath(project: string, location: string, networkConfig: string) {
    return this.pathTemplates.networkConfigPathTemplate.render({
      project: project,
      location: location,
      network_config: networkConfig,
    });
  }

  /**
   * Parse the project from NetworkConfig resource.
   *
   * @param {string} networkConfigName
   *   A fully-qualified path representing NetworkConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNetworkConfigName(networkConfigName: string) {
    return this.pathTemplates.networkConfigPathTemplate.match(networkConfigName)
      .project;
  }

  /**
   * Parse the location from NetworkConfig resource.
   *
   * @param {string} networkConfigName
   *   A fully-qualified path representing NetworkConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNetworkConfigName(networkConfigName: string) {
    return this.pathTemplates.networkConfigPathTemplate.match(networkConfigName)
      .location;
  }

  /**
   * Parse the network_config from NetworkConfig resource.
   *
   * @param {string} networkConfigName
   *   A fully-qualified path representing NetworkConfig resource.
   * @returns {string} A string representing the network_config.
   */
  matchNetworkConfigFromNetworkConfigName(networkConfigName: string) {
    return this.pathTemplates.networkConfigPathTemplate.match(networkConfigName)
      .network_config;
  }

  /**
   * Return a fully-qualified osImage resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} os_image
   * @returns {string} Resource name string.
   */
  osImagePath(project: string, location: string, osImage: string) {
    return this.pathTemplates.osImagePathTemplate.render({
      project: project,
      location: location,
      os_image: osImage,
    });
  }

  /**
   * Parse the project from OsImage resource.
   *
   * @param {string} osImageName
   *   A fully-qualified path representing OsImage resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOsImageName(osImageName: string) {
    return this.pathTemplates.osImagePathTemplate.match(osImageName).project;
  }

  /**
   * Parse the location from OsImage resource.
   *
   * @param {string} osImageName
   *   A fully-qualified path representing OsImage resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOsImageName(osImageName: string) {
    return this.pathTemplates.osImagePathTemplate.match(osImageName).location;
  }

  /**
   * Parse the os_image from OsImage resource.
   *
   * @param {string} osImageName
   *   A fully-qualified path representing OsImage resource.
   * @returns {string} A string representing the os_image.
   */
  matchOsImageFromOsImageName(osImageName: string) {
    return this.pathTemplates.osImagePathTemplate.match(osImageName).os_image;
  }

  /**
   * Return a fully-qualified provisioningConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} provisioning_config
   * @returns {string} Resource name string.
   */
  provisioningConfigPath(
    project: string,
    location: string,
    provisioningConfig: string
  ) {
    return this.pathTemplates.provisioningConfigPathTemplate.render({
      project: project,
      location: location,
      provisioning_config: provisioningConfig,
    });
  }

  /**
   * Parse the project from ProvisioningConfig resource.
   *
   * @param {string} provisioningConfigName
   *   A fully-qualified path representing ProvisioningConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProvisioningConfigName(provisioningConfigName: string) {
    return this.pathTemplates.provisioningConfigPathTemplate.match(
      provisioningConfigName
    ).project;
  }

  /**
   * Parse the location from ProvisioningConfig resource.
   *
   * @param {string} provisioningConfigName
   *   A fully-qualified path representing ProvisioningConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProvisioningConfigName(provisioningConfigName: string) {
    return this.pathTemplates.provisioningConfigPathTemplate.match(
      provisioningConfigName
    ).location;
  }

  /**
   * Parse the provisioning_config from ProvisioningConfig resource.
   *
   * @param {string} provisioningConfigName
   *   A fully-qualified path representing ProvisioningConfig resource.
   * @returns {string} A string representing the provisioning_config.
   */
  matchProvisioningConfigFromProvisioningConfigName(
    provisioningConfigName: string
  ) {
    return this.pathTemplates.provisioningConfigPathTemplate.match(
      provisioningConfigName
    ).provisioning_config;
  }

  /**
   * Return a fully-qualified provisioningQuota resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} provisioning_quota
   * @returns {string} Resource name string.
   */
  provisioningQuotaPath(
    project: string,
    location: string,
    provisioningQuota: string
  ) {
    return this.pathTemplates.provisioningQuotaPathTemplate.render({
      project: project,
      location: location,
      provisioning_quota: provisioningQuota,
    });
  }

  /**
   * Parse the project from ProvisioningQuota resource.
   *
   * @param {string} provisioningQuotaName
   *   A fully-qualified path representing ProvisioningQuota resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProvisioningQuotaName(provisioningQuotaName: string) {
    return this.pathTemplates.provisioningQuotaPathTemplate.match(
      provisioningQuotaName
    ).project;
  }

  /**
   * Parse the location from ProvisioningQuota resource.
   *
   * @param {string} provisioningQuotaName
   *   A fully-qualified path representing ProvisioningQuota resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProvisioningQuotaName(provisioningQuotaName: string) {
    return this.pathTemplates.provisioningQuotaPathTemplate.match(
      provisioningQuotaName
    ).location;
  }

  /**
   * Parse the provisioning_quota from ProvisioningQuota resource.
   *
   * @param {string} provisioningQuotaName
   *   A fully-qualified path representing ProvisioningQuota resource.
   * @returns {string} A string representing the provisioning_quota.
   */
  matchProvisioningQuotaFromProvisioningQuotaName(
    provisioningQuotaName: string
  ) {
    return this.pathTemplates.provisioningQuotaPathTemplate.match(
      provisioningQuotaName
    ).provisioning_quota;
  }

  /**
   * Return a fully-qualified serverNetworkTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} server_network_template
   * @returns {string} Resource name string.
   */
  serverNetworkTemplatePath(
    project: string,
    location: string,
    serverNetworkTemplate: string
  ) {
    return this.pathTemplates.serverNetworkTemplatePathTemplate.render({
      project: project,
      location: location,
      server_network_template: serverNetworkTemplate,
    });
  }

  /**
   * Parse the project from ServerNetworkTemplate resource.
   *
   * @param {string} serverNetworkTemplateName
   *   A fully-qualified path representing ServerNetworkTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServerNetworkTemplateName(serverNetworkTemplateName: string) {
    return this.pathTemplates.serverNetworkTemplatePathTemplate.match(
      serverNetworkTemplateName
    ).project;
  }

  /**
   * Parse the location from ServerNetworkTemplate resource.
   *
   * @param {string} serverNetworkTemplateName
   *   A fully-qualified path representing ServerNetworkTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServerNetworkTemplateName(
    serverNetworkTemplateName: string
  ) {
    return this.pathTemplates.serverNetworkTemplatePathTemplate.match(
      serverNetworkTemplateName
    ).location;
  }

  /**
   * Parse the server_network_template from ServerNetworkTemplate resource.
   *
   * @param {string} serverNetworkTemplateName
   *   A fully-qualified path representing ServerNetworkTemplate resource.
   * @returns {string} A string representing the server_network_template.
   */
  matchServerNetworkTemplateFromServerNetworkTemplateName(
    serverNetworkTemplateName: string
  ) {
    return this.pathTemplates.serverNetworkTemplatePathTemplate.match(
      serverNetworkTemplateName
    ).server_network_template;
  }

  /**
   * Return a fully-qualified sshKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} ssh_key
   * @returns {string} Resource name string.
   */
  sshKeyPath(project: string, location: string, sshKey: string) {
    return this.pathTemplates.sshKeyPathTemplate.render({
      project: project,
      location: location,
      ssh_key: sshKey,
    });
  }

  /**
   * Parse the project from SshKey resource.
   *
   * @param {string} sshKeyName
   *   A fully-qualified path representing SshKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSshKeyName(sshKeyName: string) {
    return this.pathTemplates.sshKeyPathTemplate.match(sshKeyName).project;
  }

  /**
   * Parse the location from SshKey resource.
   *
   * @param {string} sshKeyName
   *   A fully-qualified path representing SshKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSshKeyName(sshKeyName: string) {
    return this.pathTemplates.sshKeyPathTemplate.match(sshKeyName).location;
  }

  /**
   * Parse the ssh_key from SshKey resource.
   *
   * @param {string} sshKeyName
   *   A fully-qualified path representing SshKey resource.
   * @returns {string} A string representing the ssh_key.
   */
  matchSshKeyFromSshKeyName(sshKeyName: string) {
    return this.pathTemplates.sshKeyPathTemplate.match(sshKeyName).ssh_key;
  }

  /**
   * Return a fully-qualified volume resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @returns {string} Resource name string.
   */
  volumePath(project: string, location: string, volume: string) {
    return this.pathTemplates.volumePathTemplate.render({
      project: project,
      location: location,
      volume: volume,
    });
  }

  /**
   * Parse the project from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).project;
  }

  /**
   * Parse the location from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).location;
  }

  /**
   * Parse the volume from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).volume;
  }

  /**
   * Return a fully-qualified volumeConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume_config
   * @returns {string} Resource name string.
   */
  volumeConfigPath(project: string, location: string, volumeConfig: string) {
    return this.pathTemplates.volumeConfigPathTemplate.render({
      project: project,
      location: location,
      volume_config: volumeConfig,
    });
  }

  /**
   * Parse the project from VolumeConfig resource.
   *
   * @param {string} volumeConfigName
   *   A fully-qualified path representing VolumeConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeConfigName(volumeConfigName: string) {
    return this.pathTemplates.volumeConfigPathTemplate.match(volumeConfigName)
      .project;
  }

  /**
   * Parse the location from VolumeConfig resource.
   *
   * @param {string} volumeConfigName
   *   A fully-qualified path representing VolumeConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeConfigName(volumeConfigName: string) {
    return this.pathTemplates.volumeConfigPathTemplate.match(volumeConfigName)
      .location;
  }

  /**
   * Parse the volume_config from VolumeConfig resource.
   *
   * @param {string} volumeConfigName
   *   A fully-qualified path representing VolumeConfig resource.
   * @returns {string} A string representing the volume_config.
   */
  matchVolumeConfigFromVolumeConfigName(volumeConfigName: string) {
    return this.pathTemplates.volumeConfigPathTemplate.match(volumeConfigName)
      .volume_config;
  }

  /**
   * Return a fully-qualified volumeSnapshot resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @param {string} snapshot
   * @returns {string} Resource name string.
   */
  volumeSnapshotPath(
    project: string,
    location: string,
    volume: string,
    snapshot: string
  ) {
    return this.pathTemplates.volumeSnapshotPathTemplate.render({
      project: project,
      location: location,
      volume: volume,
      snapshot: snapshot,
    });
  }

  /**
   * Parse the project from VolumeSnapshot resource.
   *
   * @param {string} volumeSnapshotName
   *   A fully-qualified path representing VolumeSnapshot resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeSnapshotName(volumeSnapshotName: string) {
    return this.pathTemplates.volumeSnapshotPathTemplate.match(
      volumeSnapshotName
    ).project;
  }

  /**
   * Parse the location from VolumeSnapshot resource.
   *
   * @param {string} volumeSnapshotName
   *   A fully-qualified path representing VolumeSnapshot resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeSnapshotName(volumeSnapshotName: string) {
    return this.pathTemplates.volumeSnapshotPathTemplate.match(
      volumeSnapshotName
    ).location;
  }

  /**
   * Parse the volume from VolumeSnapshot resource.
   *
   * @param {string} volumeSnapshotName
   *   A fully-qualified path representing VolumeSnapshot resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromVolumeSnapshotName(volumeSnapshotName: string) {
    return this.pathTemplates.volumeSnapshotPathTemplate.match(
      volumeSnapshotName
    ).volume;
  }

  /**
   * Parse the snapshot from VolumeSnapshot resource.
   *
   * @param {string} volumeSnapshotName
   *   A fully-qualified path representing VolumeSnapshot resource.
   * @returns {string} A string representing the snapshot.
   */
  matchSnapshotFromVolumeSnapshotName(volumeSnapshotName: string) {
    return this.pathTemplates.volumeSnapshotPathTemplate.match(
      volumeSnapshotName
    ).snapshot;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.bareMetalSolutionStub && !this._terminated) {
      return this.bareMetalSolutionStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
