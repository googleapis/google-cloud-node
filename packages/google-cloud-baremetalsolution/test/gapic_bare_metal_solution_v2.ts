// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as baremetalsolutionModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2.BareMetalSolutionClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        baremetalsolutionModule.v2.BareMetalSolutionClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        baremetalsolutionModule.v2.BareMetalSolutionClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = baremetalsolutionModule.v2.BareMetalSolutionClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.bareMetalSolutionStub, undefined);
      await client.initialize();
      assert(client.bareMetalSolutionStub);
    });

    it('has close method for the initialized client', done => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.bareMetalSolutionStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.bareMetalSolutionStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getInstance', () => {
    it('invokes getInstance without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Instance()
      );
      client.innerApiCalls.getInstance = stubSimpleCall(expectedResponse);
      const [response] = await client.getInstance(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstance without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Instance()
      );
      client.innerApiCalls.getInstance =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getInstance(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.IInstance | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstance with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getInstance = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getInstance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getInstance with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getInstance(request), expectedError);
    });
  });

  describe('getVolume', () => {
    it('invokes getVolume without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Volume()
      );
      client.innerApiCalls.getVolume = stubSimpleCall(expectedResponse);
      const [response] = await client.getVolume(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Volume()
      );
      client.innerApiCalls.getVolume =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVolume(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.IVolume | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVolume = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getVolume(request), expectedError);
    });
  });

  describe('listNetworkUsage', () => {
    it('invokes listNetworkUsage without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageResponse()
      );
      client.innerApiCalls.listNetworkUsage = stubSimpleCall(expectedResponse);
      const [response] = await client.listNetworkUsage(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkUsage without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageResponse()
      );
      client.innerApiCalls.listNetworkUsage =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNetworkUsage(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.IListNetworkUsageResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkUsage with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNetworkUsage = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNetworkUsage(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworkUsage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworkUsage with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworkUsageRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.listNetworkUsage(request), expectedError);
    });
  });

  describe('getNetwork', () => {
    it('invokes getNetwork without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Network()
      );
      client.innerApiCalls.getNetwork = stubSimpleCall(expectedResponse);
      const [response] = await client.getNetwork(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Network()
      );
      client.innerApiCalls.getNetwork =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNetwork(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.INetwork | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNetwork = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNetwork(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNetwork(request), expectedError);
    });
  });

  describe('getLun', () => {
    it('invokes getLun without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetLunRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Lun()
      );
      client.innerApiCalls.getLun = stubSimpleCall(expectedResponse);
      const [response] = await client.getLun(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getLun as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLun without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetLunRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.Lun()
      );
      client.innerApiCalls.getLun =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLun(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.ILun | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.getLun as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLun with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetLunRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getLun = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getLun(request), expectedError);
      const actualRequest = (client.innerApiCalls.getLun as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLun with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetLunRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getLun(request), expectedError);
    });
  });

  describe('getNfsShare', () => {
    it('invokes getNfsShare without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNfsShareRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNfsShareRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.NfsShare()
      );
      client.innerApiCalls.getNfsShare = stubSimpleCall(expectedResponse);
      const [response] = await client.getNfsShare(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNfsShare without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNfsShareRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNfsShareRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.NfsShare()
      );
      client.innerApiCalls.getNfsShare =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNfsShare(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.INfsShare | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNfsShare with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNfsShareRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNfsShareRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNfsShare = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNfsShare(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNfsShare with closed client', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.GetNfsShareRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.GetNfsShareRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNfsShare(request), expectedError);
    });
  });

  describe('updateInstance', () => {
    it('invokes updateInstance without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateInstanceRequest()
      );
      request.instance ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateInstanceRequest',
        ['instance', 'name']
      );
      request.instance.name = defaultValue1;
      const expectedHeaderRequestParams = `instance.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateInstance =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateInstance without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateInstanceRequest()
      );
      request.instance ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateInstanceRequest',
        ['instance', 'name']
      );
      request.instance.name = defaultValue1;
      const expectedHeaderRequestParams = `instance.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateInstance =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IInstance,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateInstance with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateInstanceRequest()
      );
      request.instance ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateInstanceRequest',
        ['instance', 'name']
      );
      request.instance.name = defaultValue1;
      const expectedHeaderRequestParams = `instance.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateInstance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateInstance with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateInstanceRequest()
      );
      request.instance ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateInstanceRequest',
        ['instance', 'name']
      );
      request.instance.name = defaultValue1;
      const expectedHeaderRequestParams = `instance.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateInstance(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateInstanceProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateInstanceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateInstanceProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateInstanceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resetInstance', () => {
    it('invokes resetInstance without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetInstance =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resetInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetInstance without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resetInstance =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resetInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IResetInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetInstance with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resetInstance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resetInstance with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResetInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResetInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resetInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resetInstance(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resetInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResetInstanceProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResetInstanceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResetInstanceProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResetInstanceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('startInstance', () => {
    it('invokes startInstance without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StartInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StartInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startInstance =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.startInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startInstance without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StartInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StartInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startInstance =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IStartInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startInstance with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StartInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StartInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startInstance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startInstance with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StartInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StartInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.startInstance(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStartInstanceProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStartInstanceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStartInstanceProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStartInstanceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('stopInstance', () => {
    it('invokes stopInstance without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StopInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StopInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopInstance = stubLongRunningCall(expectedResponse);
      const [operation] = await client.stopInstance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopInstance without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StopInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StopInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopInstance =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.stopInstance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IStopInstanceResponse,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopInstance with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StopInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StopInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopInstance = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.stopInstance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopInstance with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.StopInstanceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.StopInstanceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopInstance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.stopInstance(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopInstance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStopInstanceProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStopInstanceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStopInstanceProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkStopInstanceProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('detachLun', () => {
    it('invokes detachLun without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.DetachLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.DetachLunRequest',
        ['instance']
      );
      request.instance = defaultValue1;
      const expectedHeaderRequestParams = `instance=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.detachLun = stubLongRunningCall(expectedResponse);
      const [operation] = await client.detachLun(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachLun without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.DetachLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.DetachLunRequest',
        ['instance']
      );
      request.instance = defaultValue1;
      const expectedHeaderRequestParams = `instance=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.detachLun =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.detachLun(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IInstance,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IInstance,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachLun with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.DetachLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.DetachLunRequest',
        ['instance']
      );
      request.instance = defaultValue1;
      const expectedHeaderRequestParams = `instance=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.detachLun = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.detachLun(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detachLun with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.DetachLunRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.DetachLunRequest',
        ['instance']
      );
      request.instance = defaultValue1;
      const expectedHeaderRequestParams = `instance=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.detachLun = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.detachLun(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detachLun as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDetachLunProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDetachLunProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDetachLunProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDetachLunProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateVolume', () => {
    it('invokes updateVolume without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IVolume,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateVolumeProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateVolumeProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resizeVolume', () => {
    it('invokes resizeVolume without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResizeVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResizeVolumeRequest',
        ['volume']
      );
      request.volume = defaultValue1;
      const expectedHeaderRequestParams = `volume=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resizeVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.resizeVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeVolume without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResizeVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResizeVolumeRequest',
        ['volume']
      );
      request.volume = defaultValue1;
      const expectedHeaderRequestParams = `volume=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resizeVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resizeVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.IVolume,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.IVolume,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeVolume with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResizeVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResizeVolumeRequest',
        ['volume']
      );
      request.volume = defaultValue1;
      const expectedHeaderRequestParams = `volume=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resizeVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resizeVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resizeVolume with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ResizeVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ResizeVolumeRequest',
        ['volume']
      );
      request.volume = defaultValue1;
      const expectedHeaderRequestParams = `volume=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resizeVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resizeVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resizeVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResizeVolumeProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResizeVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResizeVolumeProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkResizeVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateNetwork', () => {
    it('invokes updateNetwork without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNetworkRequest()
      );
      request.network ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNetworkRequest',
        ['network', 'name']
      );
      request.network.name = defaultValue1;
      const expectedHeaderRequestParams = `network.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNetwork =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateNetwork(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetwork without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNetworkRequest()
      );
      request.network ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNetworkRequest',
        ['network', 'name']
      );
      request.network.name = defaultValue1;
      const expectedHeaderRequestParams = `network.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNetwork =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateNetwork(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.INetwork,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.INetwork,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetwork with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNetworkRequest()
      );
      request.network ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNetworkRequest',
        ['network', 'name']
      );
      request.network.name = defaultValue1;
      const expectedHeaderRequestParams = `network.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNetwork = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateNetwork(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNetwork with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNetworkRequest()
      );
      request.network ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNetworkRequest',
        ['network', 'name']
      );
      request.network.name = defaultValue1;
      const expectedHeaderRequestParams = `network.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNetwork = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateNetwork(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateNetworkProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateNetworkProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateNetworkProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateNetworkProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateNfsShare', () => {
    it('invokes updateNfsShare without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest()
      );
      request.nfsShare ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest',
        ['nfsShare', 'name']
      );
      request.nfsShare.name = defaultValue1;
      const expectedHeaderRequestParams = `nfs_share.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNfsShare =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateNfsShare(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNfsShare without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest()
      );
      request.nfsShare ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest',
        ['nfsShare', 'name']
      );
      request.nfsShare.name = defaultValue1;
      const expectedHeaderRequestParams = `nfs_share.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateNfsShare =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateNfsShare(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.baremetalsolution.v2.INfsShare,
              protos.google.cloud.baremetalsolution.v2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.baremetalsolution.v2.INfsShare,
        protos.google.cloud.baremetalsolution.v2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNfsShare with call error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest()
      );
      request.nfsShare ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest',
        ['nfsShare', 'name']
      );
      request.nfsShare.name = defaultValue1;
      const expectedHeaderRequestParams = `nfs_share.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNfsShare = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateNfsShare(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateNfsShare with LRO error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest()
      );
      request.nfsShare ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.UpdateNfsShareRequest',
        ['nfsShare', 'name']
      );
      request.nfsShare.name = defaultValue1;
      const expectedHeaderRequestParams = `nfs_share.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateNfsShare = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateNfsShare(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateNfsShare as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateNfsShareProgress without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateNfsShareProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateNfsShareProgress with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateNfsShareProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listInstances', () => {
    it('invokes listInstances without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
      ];
      client.innerApiCalls.listInstances = stubSimpleCall(expectedResponse);
      const [response] = await client.listInstances(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstances without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
      ];
      client.innerApiCalls.listInstances =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listInstances(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.IInstance[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstances with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listInstances = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listInstances(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listInstances as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listInstancesStream without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
      ];
      client.descriptors.page.listInstances.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listInstancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Instance[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Instance) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInstances, request)
      );
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listInstancesStream with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInstances.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listInstancesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Instance[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Instance) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInstances, request)
      );
      assert(
        (client.descriptors.page.listInstances.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInstances without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Instance()
        ),
      ];
      client.descriptors.page.listInstances.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.baremetalsolution.v2.IInstance[] =
        [];
      const iterable = client.listInstancesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInstances.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listInstances.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listInstances with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListInstancesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListInstancesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listInstances.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listInstancesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.baremetalsolution.v2.IInstance[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInstances.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listInstances.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVolumes', () => {
    it('invokes listVolumes without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
      ];
      client.innerApiCalls.listVolumes = stubSimpleCall(expectedResponse);
      const [response] = await client.listVolumes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumes without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
      ];
      client.innerApiCalls.listVolumes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVolumes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.IVolume[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumes with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVolumes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listVolumes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumesStream without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
      ];
      client.descriptors.page.listVolumes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVolumesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Volume[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Volume) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumes, request)
      );
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVolumesStream with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumes.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listVolumesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Volume[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Volume) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumes, request)
      );
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumes without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Volume()
        ),
      ];
      client.descriptors.page.listVolumes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.baremetalsolution.v2.IVolume[] = [];
      const iterable = client.listVolumesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumes with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumes.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listVolumesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.baremetalsolution.v2.IVolume[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listNetworks', () => {
    it('invokes listNetworks without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
      ];
      client.innerApiCalls.listNetworks = stubSimpleCall(expectedResponse);
      const [response] = await client.listNetworks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworks without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
      ];
      client.innerApiCalls.listNetworks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNetworks(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.INetwork[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworks with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNetworks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNetworks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNetworks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNetworksStream without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
      ];
      client.descriptors.page.listNetworks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listNetworksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Network[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Network) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listNetworks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNetworks, request)
      );
      assert(
        (client.descriptors.page.listNetworks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listNetworksStream with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNetworks.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listNetworksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Network[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Network) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listNetworks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNetworks, request)
      );
      assert(
        (client.descriptors.page.listNetworks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNetworks without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Network()
        ),
      ];
      client.descriptors.page.listNetworks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.baremetalsolution.v2.INetwork[] = [];
      const iterable = client.listNetworksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNetworks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNetworks with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNetworksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNetworksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNetworks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listNetworksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.baremetalsolution.v2.INetwork[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNetworks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNetworks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listLuns', () => {
    it('invokes listLuns without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
      ];
      client.innerApiCalls.listLuns = stubSimpleCall(expectedResponse);
      const [response] = await client.listLuns(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listLuns without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
      ];
      client.innerApiCalls.listLuns =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listLuns(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.ILun[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listLuns with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listLuns = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listLuns(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listLuns as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listLunsStream without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
      ];
      client.descriptors.page.listLuns.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listLunsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Lun[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Lun) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listLuns.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listLuns, request)
      );
      assert(
        (client.descriptors.page.listLuns.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listLunsStream with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listLuns.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listLunsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.Lun[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.Lun) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listLuns.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listLuns, request)
      );
      assert(
        (client.descriptors.page.listLuns.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listLuns without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.Lun()
        ),
      ];
      client.descriptors.page.listLuns.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.baremetalsolution.v2.ILun[] = [];
      const iterable = client.listLunsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listLuns.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listLuns.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listLuns with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListLunsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListLunsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listLuns.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listLunsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.baremetalsolution.v2.ILun[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listLuns.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listLuns.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listNfsShares', () => {
    it('invokes listNfsShares without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
      ];
      client.innerApiCalls.listNfsShares = stubSimpleCall(expectedResponse);
      const [response] = await client.listNfsShares(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNfsShares without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
      ];
      client.innerApiCalls.listNfsShares =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNfsShares(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.baremetalsolution.v2.INfsShare[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNfsShares with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listNfsShares = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNfsShares(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listNfsShares as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listNfsSharesStream without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
      ];
      client.descriptors.page.listNfsShares.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listNfsSharesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.NfsShare[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.NfsShare) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listNfsShares.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNfsShares, request)
      );
      assert(
        (client.descriptors.page.listNfsShares.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listNfsSharesStream with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNfsShares.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listNfsSharesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.baremetalsolution.v2.NfsShare[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.baremetalsolution.v2.NfsShare) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listNfsShares.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listNfsShares, request)
      );
      assert(
        (client.descriptors.page.listNfsShares.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNfsShares without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
        generateSampleMessage(
          new protos.google.cloud.baremetalsolution.v2.NfsShare()
        ),
      ];
      client.descriptors.page.listNfsShares.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.baremetalsolution.v2.INfsShare[] =
        [];
      const iterable = client.listNfsSharesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNfsShares.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNfsShares.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listNfsShares with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.baremetalsolution.v2.ListNfsSharesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.baremetalsolution.v2.ListNfsSharesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listNfsShares.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listNfsSharesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.baremetalsolution.v2.INfsShare[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listNfsShares.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listNfsShares.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('instance', () => {
      const fakePath = '/rendered/path/instance';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        instance: 'instanceValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.instancePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.instancePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('instancePath', () => {
        const result = client.instancePath(
          'projectValue',
          'locationValue',
          'instanceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.instancePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromInstanceName', () => {
        const result = client.matchProjectFromInstanceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromInstanceName', () => {
        const result = client.matchLocationFromInstanceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInstanceFromInstanceName', () => {
        const result = client.matchInstanceFromInstanceName(fakePath);
        assert.strictEqual(result, 'instanceValue');
        assert(
          (client.pathTemplates.instancePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('lun', () => {
      const fakePath = '/rendered/path/lun';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        volume: 'volumeValue',
        lun: 'lunValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.lunPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.lunPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('lunPath', () => {
        const result = client.lunPath(
          'projectValue',
          'locationValue',
          'volumeValue',
          'lunValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.lunPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLunName', () => {
        const result = client.matchProjectFromLunName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.lunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLunName', () => {
        const result = client.matchLocationFromLunName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.lunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeFromLunName', () => {
        const result = client.matchVolumeFromLunName(fakePath);
        assert.strictEqual(result, 'volumeValue');
        assert(
          (client.pathTemplates.lunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLunFromLunName', () => {
        const result = client.matchLunFromLunName(fakePath);
        assert.strictEqual(result, 'lunValue');
        assert(
          (client.pathTemplates.lunPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('nFSShare', () => {
      const fakePath = '/rendered/path/nFSShare';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        nfs_share: 'nfsShareValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.nFSSharePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.nFSSharePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('nFSSharePath', () => {
        const result = client.nFSSharePath(
          'projectValue',
          'locationValue',
          'nfsShareValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.nFSSharePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNFSShareName', () => {
        const result = client.matchProjectFromNFSShareName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.nFSSharePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromNFSShareName', () => {
        const result = client.matchLocationFromNFSShareName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.nFSSharePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNfsShareFromNFSShareName', () => {
        const result = client.matchNfsShareFromNFSShareName(fakePath);
        assert.strictEqual(result, 'nfsShareValue');
        assert(
          (client.pathTemplates.nFSSharePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('network', () => {
      const fakePath = '/rendered/path/network';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        network: 'networkValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.networkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPath', () => {
        const result = client.networkPath(
          'projectValue',
          'locationValue',
          'networkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNetworkName', () => {
        const result = client.matchProjectFromNetworkName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromNetworkName', () => {
        const result = client.matchLocationFromNetworkName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNetworkFromNetworkName', () => {
        const result = client.matchNetworkFromNetworkName(fakePath);
        assert.strictEqual(result, 'networkValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serverNetworkTemplate', () => {
      const fakePath = '/rendered/path/serverNetworkTemplate';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        server_network_template: 'serverNetworkTemplateValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.serverNetworkTemplatePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serverNetworkTemplatePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serverNetworkTemplatePath', () => {
        const result = client.serverNetworkTemplatePath(
          'projectValue',
          'locationValue',
          'serverNetworkTemplateValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.serverNetworkTemplatePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServerNetworkTemplateName', () => {
        const result =
          client.matchProjectFromServerNetworkTemplateName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.serverNetworkTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServerNetworkTemplateName', () => {
        const result =
          client.matchLocationFromServerNetworkTemplateName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.serverNetworkTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServerNetworkTemplateFromServerNetworkTemplateName', () => {
        const result =
          client.matchServerNetworkTemplateFromServerNetworkTemplateName(
            fakePath
          );
        assert.strictEqual(result, 'serverNetworkTemplateValue');
        assert(
          (
            client.pathTemplates.serverNetworkTemplatePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('volume', () => {
      const fakePath = '/rendered/path/volume';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        volume: 'volumeValue',
      };
      const client = new baremetalsolutionModule.v2.BareMetalSolutionClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.volumePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.volumePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('volumePath', () => {
        const result = client.volumePath(
          'projectValue',
          'locationValue',
          'volumeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.volumePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVolumeName', () => {
        const result = client.matchProjectFromVolumeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVolumeName', () => {
        const result = client.matchLocationFromVolumeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeFromVolumeName', () => {
        const result = client.matchVolumeFromVolumeName(fakePath);
        assert.strictEqual(result, 'volumeValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
