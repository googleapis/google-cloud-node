// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2beta3/cloud_tasks_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cloud_tasks_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Cloud Tasks allows developers to manage the execution of background
 *  work in their applications.
 * @class
 * @memberof v2beta3
 */
export class CloudTasksClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  cloudTasksStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CloudTasksClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new CloudTasksClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CloudTasksClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      queuePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/queues/{queue}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/queues/{queue}/tasks/{task}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listQueues: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'queues'
      ),
      listTasks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tasks'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.tasks.v2beta3.CloudTasks',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.cloudTasksStub) {
      return this.cloudTasksStub;
    }

    // Put together the "service stub" for
    // google.cloud.tasks.v2beta3.CloudTasks.
    this.cloudTasksStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.tasks.v2beta3.CloudTasks'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.tasks.v2beta3.CloudTasks,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudTasksStubMethods = [
      'listQueues',
      'getQueue',
      'createQueue',
      'updateQueue',
      'deleteQueue',
      'purgeQueue',
      'pauseQueue',
      'resumeQueue',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
      'listTasks',
      'getTask',
      'createTask',
      'deleteTask',
      'runTask',
    ];
    for (const methodName of cloudTasksStubMethods) {
      const callPromise = this.cloudTasksStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.cloudTasksStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudtasks.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudtasks.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a queue.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the queue. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. Read mask is used for a more granular control over what the API returns.
   *   If the mask is not present all fields will be returned except
   *   [Queue.stats]. [Queue.stats] will be returned only if it was  explicitly
   *   specified in the mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.get_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_GetQueue_async
   */
  getQueue(
    request?: protos.google.cloud.tasks.v2beta3.IGetQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IGetQueueRequest | undefined,
      {} | undefined
    ]
  >;
  getQueue(
    request: protos.google.cloud.tasks.v2beta3.IGetQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IGetQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getQueue(
    request: protos.google.cloud.tasks.v2beta3.IGetQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IGetQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getQueue(
    request?: protos.google.cloud.tasks.v2beta3.IGetQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          protos.google.cloud.tasks.v2beta3.IGetQueueRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IGetQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IGetQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getQueue(request, options, callback);
  }
  /**
   * Creates a queue.
   *
   * Queues created with this method allow tasks to live for a maximum of 31
   * days. After a task is 31 days old, the task will be deleted regardless of whether
   * it was dispatched or not.
   *
   * WARNING: Using this method may have unintended side effects if you are
   * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
   * Read
   * [Overview of Queue Management and
   * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
   * this method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location name in which the queue will be created.
   *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
   *
   *   The list of allowed locations can be obtained by calling Cloud
   *   Tasks' implementation of
   *   {@link google.cloud.location.Locations.ListLocations|ListLocations}.
   * @param {google.cloud.tasks.v2beta3.Queue} request.queue
   *   Required. The queue to create.
   *
   *   {@link google.cloud.tasks.v2beta3.Queue.name|Queue's name} cannot be the same as an existing queue.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.create_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_CreateQueue_async
   */
  createQueue(
    request?: protos.google.cloud.tasks.v2beta3.ICreateQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.ICreateQueueRequest | undefined,
      {} | undefined
    ]
  >;
  createQueue(
    request: protos.google.cloud.tasks.v2beta3.ICreateQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.ICreateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createQueue(
    request: protos.google.cloud.tasks.v2beta3.ICreateQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.ICreateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createQueue(
    request?: protos.google.cloud.tasks.v2beta3.ICreateQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          | protos.google.cloud.tasks.v2beta3.ICreateQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.ICreateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.ICreateQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createQueue(request, options, callback);
  }
  /**
   * Updates a queue.
   *
   * This method creates the queue if it does not exist and updates
   * the queue if it does exist.
   *
   * Queues created with this method allow tasks to live for a maximum of 31
   * days. After a task is 31 days old, the task will be deleted regardless of whether
   * it was dispatched or not.
   *
   * WARNING: Using this method may have unintended side effects if you are
   * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
   * Read
   * [Overview of Queue Management and
   * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
   * this method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.tasks.v2beta3.Queue} request.queue
   *   Required. The queue to create or update.
   *
   *   The queue's {@link google.cloud.tasks.v2beta3.Queue.name|name} must be specified.
   *
   *   Output only fields cannot be modified using UpdateQueue.
   *   Any value specified for an output only field will be ignored.
   *   The queue's {@link google.cloud.tasks.v2beta3.Queue.name|name} cannot be changed.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   A mask used to specify which fields of the queue are being updated.
   *
   *   If empty, then all fields will be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.update_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_UpdateQueue_async
   */
  updateQueue(
    request?: protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest | undefined,
      {} | undefined
    ]
  >;
  updateQueue(
    request: protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateQueue(
    request: protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateQueue(
    request?: protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          | protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IUpdateQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'queue.name': request.queue!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateQueue(request, options, callback);
  }
  /**
   * Deletes a queue.
   *
   * This command will delete the queue even if it has tasks in it.
   *
   * Note: If you delete a queue, a queue with the same name can't be created
   * for 7 days.
   *
   * WARNING: Using this method may have unintended side effects if you are
   * using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
   * Read
   * [Overview of Queue Management and
   * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
   * this method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.delete_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_DeleteQueue_async
   */
  deleteQueue(
    request?: protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest | undefined,
      {} | undefined
    ]
  >;
  deleteQueue(
    request: protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteQueue(
    request: protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteQueue(
    request?: protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteQueue(request, options, callback);
  }
  /**
   * Purges a queue by deleting all of its tasks.
   *
   * All tasks created before this method is called are permanently deleted.
   *
   * Purge operations can take up to one minute to take effect. Tasks
   * might be dispatched before the purge takes effect. A purge is irreversible.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.purge_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_PurgeQueue_async
   */
  purgeQueue(
    request?: protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest | undefined,
      {} | undefined
    ]
  >;
  purgeQueue(
    request: protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeQueue(
    request: protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  purgeQueue(
    request?: protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          | protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPurgeQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.purgeQueue(request, options, callback);
  }
  /**
   * Pauses the queue.
   *
   * If a queue is paused then the system will stop dispatching tasks
   * until the queue is resumed via
   * {@link google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue|ResumeQueue}. Tasks can still be added
   * when the queue is paused. A queue is paused if its
   * {@link google.cloud.tasks.v2beta3.Queue.state|state} is {@link google.cloud.tasks.v2beta3.Queue.State.PAUSED|PAUSED}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.pause_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_PauseQueue_async
   */
  pauseQueue(
    request?: protos.google.cloud.tasks.v2beta3.IPauseQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPauseQueueRequest | undefined,
      {} | undefined
    ]
  >;
  pauseQueue(
    request: protos.google.cloud.tasks.v2beta3.IPauseQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPauseQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  pauseQueue(
    request: protos.google.cloud.tasks.v2beta3.IPauseQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPauseQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  pauseQueue(
    request?: protos.google.cloud.tasks.v2beta3.IPauseQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          | protos.google.cloud.tasks.v2beta3.IPauseQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPauseQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IPauseQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.pauseQueue(request, options, callback);
  }
  /**
   * Resume a queue.
   *
   * This method resumes a queue after it has been
   * {@link google.cloud.tasks.v2beta3.Queue.State.PAUSED|PAUSED} or
   * {@link google.cloud.tasks.v2beta3.Queue.State.DISABLED|DISABLED}. The state of a queue is stored
   * in the queue's {@link google.cloud.tasks.v2beta3.Queue.state|state}; after calling this method it
   * will be set to {@link google.cloud.tasks.v2beta3.Queue.State.RUNNING|RUNNING}.
   *
   * WARNING: Resuming many high-QPS queues at the same time can
   * lead to target overloading. If you are resuming high-QPS
   * queues, follow the 500/50/5 pattern described in
   * [Managing Cloud Tasks Scaling
   * Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/location/LOCATION_ID/queues/QUEUE_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.resume_queue.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_ResumeQueue_async
   */
  resumeQueue(
    request?: protos.google.cloud.tasks.v2beta3.IResumeQueueRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IResumeQueueRequest | undefined,
      {} | undefined
    ]
  >;
  resumeQueue(
    request: protos.google.cloud.tasks.v2beta3.IResumeQueueRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IResumeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  resumeQueue(
    request: protos.google.cloud.tasks.v2beta3.IResumeQueueRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IResumeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  resumeQueue(
    request?: protos.google.cloud.tasks.v2beta3.IResumeQueueRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.IQueue,
          | protos.google.cloud.tasks.v2beta3.IResumeQueueRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IResumeQueueRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue,
      protos.google.cloud.tasks.v2beta3.IResumeQueueRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resumeQueue(request, options, callback);
  }
  /**
   * Gets the access control policy for a {@link google.cloud.tasks.v2beta3.Queue|Queue}.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   *
   * Authorization requires the following
   * [Google IAM](https://cloud.google.com/iam) permission on the specified
   * resource parent:
   *
   * * `cloudtasks.queues.getIamPolicy`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.get_iam_policy.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Sets the access control policy for a {@link google.cloud.tasks.v2beta3.Queue|Queue}. Replaces any existing
   * policy.
   *
   * Note: The Cloud Console does not check queue-level IAM permissions yet.
   * Project-level permissions are required to use the Cloud Console.
   *
   * Authorization requires the following
   * [Google IAM](https://cloud.google.com/iam) permission on the specified
   * resource parent:
   *
   * * `cloudtasks.queues.setIamPolicy`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.set_iam_policy.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Returns permissions that a caller has on a {@link google.cloud.tasks.v2beta3.Queue|Queue}.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a {@link google.rpc.Code.NOT_FOUND|NOT_FOUND} error.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.test_iam_permissions.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
  /**
   * Gets a task.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The task name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2beta3.Task}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.get_task.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_GetTask_async
   */
  getTask(
    request?: protos.google.cloud.tasks.v2beta3.IGetTaskRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IGetTaskRequest | undefined,
      {} | undefined
    ]
  >;
  getTask(
    request: protos.google.cloud.tasks.v2beta3.IGetTaskRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IGetTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTask(
    request: protos.google.cloud.tasks.v2beta3.IGetTaskRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IGetTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTask(
    request?: protos.google.cloud.tasks.v2beta3.IGetTaskRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.ITask,
          protos.google.cloud.tasks.v2beta3.IGetTaskRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IGetTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IGetTaskRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTask(request, options, callback);
  }
  /**
   * Creates a task and adds it to a queue.
   *
   * Tasks cannot be updated after creation; there is no UpdateTask command.
   *
   * * The maximum task size is 100KB.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   *
   *   The queue must already exist.
   * @param {google.cloud.tasks.v2beta3.Task} request.task
   *   Required. The task to add.
   *
   *   Task names have the following format:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`.
   *   The user can optionally specify a task {@link google.cloud.tasks.v2beta3.Task.name|name}. If a
   *   name is not specified then the system will generate a random
   *   unique task id, which will be set in the task returned in the
   *   {@link google.cloud.tasks.v2beta3.Task.name|response}.
   *
   *   If {@link google.cloud.tasks.v2beta3.Task.schedule_time|schedule_time} is not set or is in the
   *   past then Cloud Tasks will set it to the current time.
   *
   *   Task De-duplication:
   *
   *   Explicitly specifying a task ID enables task de-duplication.  If
   *   a task's ID is identical to that of an existing task or a task
   *   that was deleted or executed recently then the call will fail
   *   with {@link google.rpc.Code.ALREADY_EXISTS|ALREADY_EXISTS}.
   *   If the task's queue was created using Cloud Tasks, then another task with
   *   the same name can't be created for ~1hour after the original task was
   *   deleted or executed. If the task's queue was created using queue.yaml or
   *   queue.xml, then another task with the same name can't be created
   *   for ~9days after the original task was deleted or executed.
   *
   *   Because there is an extra lookup cost to identify duplicate task
   *   names, these {@link google.cloud.tasks.v2beta3.CloudTasks.CreateTask|CreateTask} calls have significantly
   *   increased latency. Using hashed strings for the task id or for
   *   the prefix of the task id is recommended. Choosing task ids that
   *   are sequential or have sequential prefixes, for example using a
   *   timestamp, causes an increase in latency and error rates in all
   *   task commands. The infrastructure relies on an approximately
   *   uniform distribution of task ids to store and serve tasks
   *   efficiently.
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2beta3.Task}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.create_task.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_CreateTask_async
   */
  createTask(
    request?: protos.google.cloud.tasks.v2beta3.ICreateTaskRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.ICreateTaskRequest | undefined,
      {} | undefined
    ]
  >;
  createTask(
    request: protos.google.cloud.tasks.v2beta3.ICreateTaskRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.ICreateTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTask(
    request: protos.google.cloud.tasks.v2beta3.ICreateTaskRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.ICreateTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTask(
    request?: protos.google.cloud.tasks.v2beta3.ICreateTaskRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.ITask,
          | protos.google.cloud.tasks.v2beta3.ICreateTaskRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.ICreateTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.ICreateTaskRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTask(request, options, callback);
  }
  /**
   * Deletes a task.
   *
   * A task can be deleted if it is scheduled or dispatched. A task
   * cannot be deleted if it has executed successfully or permanently
   * failed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The task name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.delete_task.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_DeleteTask_async
   */
  deleteTask(
    request?: protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTask(
    request: protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTask(
    request: protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTask(
    request?: protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.tasks.v2beta3.IDeleteTaskRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTask(request, options, callback);
  }
  /**
   * Forces a task to run now.
   *
   * When this method is called, Cloud Tasks will dispatch the task, even if
   * the task is already running, the queue has reached its {@link google.cloud.tasks.v2beta3.RateLimits|RateLimits} or
   * is {@link google.cloud.tasks.v2beta3.Queue.State.PAUSED|PAUSED}.
   *
   * This command is meant to be used for manual debugging. For
   * example, {@link google.cloud.tasks.v2beta3.CloudTasks.RunTask|RunTask} can be used to retry a failed
   * task after a fix has been made or to manually force a task to be
   * dispatched now.
   *
   * The dispatched task is returned. That is, the task that is returned
   * contains the {@link Task.status|status} after the task is dispatched but
   * before the task is received by its target.
   *
   * If Cloud Tasks receives a successful response from the task's
   * target, then the task will be deleted; otherwise the task's
   * {@link google.cloud.tasks.v2beta3.Task.schedule_time|schedule_time} will be reset to the time that
   * {@link google.cloud.tasks.v2beta3.CloudTasks.RunTask|RunTask} was called plus the retry delay specified
   * in the queue's {@link google.cloud.tasks.v2beta3.RetryConfig|RetryConfig}.
   *
   * {@link google.cloud.tasks.v2beta3.CloudTasks.RunTask|RunTask} returns
   * {@link google.rpc.Code.NOT_FOUND|NOT_FOUND} when it is called on a
   * task that has already succeeded or permanently failed.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The task name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Task]{@link google.cloud.tasks.v2beta3.Task}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.run_task.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_RunTask_async
   */
  runTask(
    request?: protos.google.cloud.tasks.v2beta3.IRunTaskRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IRunTaskRequest | undefined,
      {} | undefined
    ]
  >;
  runTask(
    request: protos.google.cloud.tasks.v2beta3.IRunTaskRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IRunTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  runTask(
    request: protos.google.cloud.tasks.v2beta3.IRunTaskRequest,
    callback: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IRunTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  runTask(
    request?: protos.google.cloud.tasks.v2beta3.IRunTaskRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.tasks.v2beta3.ITask,
          protos.google.cloud.tasks.v2beta3.IRunTaskRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IRunTaskRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask,
      protos.google.cloud.tasks.v2beta3.IRunTaskRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.runTask(request, options, callback);
  }

  /**
   * Lists queues.
   *
   * Queues are returned in lexicographical order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location name.
   *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
   * @param {string} request.filter
   *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2beta3.Queue|Queue}
   *   field can be used as a filter and several operators as supported.
   *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
   *   described in
   *   [Stackdriver's Advanced Logs
   *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
   *
   *   Sample filter "state: PAUSED".
   *
   *   Note that using filters might cause fewer queues than the
   *   requested page_size to be returned.
   * @param {number} request.pageSize
   *   Requested page size.
   *
   *   The maximum page size is 9800. If unspecified, the page size will
   *   be the maximum. Fewer queues than requested might be returned,
   *   even if more queues exist; use the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} in the
   *   response to determine if more queues exist.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListQueues|ListQueues}
   *   method. It is an error to switch the value of the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesRequest.filter|filter} while iterating through pages.
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. Read mask is used for a more granular control over what the API returns.
   *   If the mask is not present all fields will be returned except
   *   [Queue.stats]. [Queue.stats] will be returned only if it was  explicitly
   *   specified in the mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Queue]{@link google.cloud.tasks.v2beta3.Queue}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listQueuesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listQueues(
    request?: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue[],
      protos.google.cloud.tasks.v2beta3.IListQueuesRequest | null,
      protos.google.cloud.tasks.v2beta3.IListQueuesResponse
    ]
  >;
  listQueues(
    request: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
      protos.google.cloud.tasks.v2beta3.IListQueuesResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.IQueue
    >
  ): void;
  listQueues(
    request: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    callback: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
      protos.google.cloud.tasks.v2beta3.IListQueuesResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.IQueue
    >
  ): void;
  listQueues(
    request?: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
          | protos.google.cloud.tasks.v2beta3.IListQueuesResponse
          | null
          | undefined,
          protos.google.cloud.tasks.v2beta3.IQueue
        >,
    callback?: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
      protos.google.cloud.tasks.v2beta3.IListQueuesResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.IQueue
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.IQueue[],
      protos.google.cloud.tasks.v2beta3.IListQueuesRequest | null,
      protos.google.cloud.tasks.v2beta3.IListQueuesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listQueues(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location name.
   *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
   * @param {string} request.filter
   *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2beta3.Queue|Queue}
   *   field can be used as a filter and several operators as supported.
   *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
   *   described in
   *   [Stackdriver's Advanced Logs
   *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
   *
   *   Sample filter "state: PAUSED".
   *
   *   Note that using filters might cause fewer queues than the
   *   requested page_size to be returned.
   * @param {number} request.pageSize
   *   Requested page size.
   *
   *   The maximum page size is 9800. If unspecified, the page size will
   *   be the maximum. Fewer queues than requested might be returned,
   *   even if more queues exist; use the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} in the
   *   response to determine if more queues exist.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListQueues|ListQueues}
   *   method. It is an error to switch the value of the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesRequest.filter|filter} while iterating through pages.
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. Read mask is used for a more granular control over what the API returns.
   *   If the mask is not present all fields will be returned except
   *   [Queue.stats]. [Queue.stats] will be returned only if it was  explicitly
   *   specified in the mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Queue]{@link google.cloud.tasks.v2beta3.Queue} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listQueuesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listQueuesStream(
    request?: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listQueues'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listQueues.createStream(
      this.innerApiCalls.listQueues as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listQueues`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location name.
   *   For example: `projects/PROJECT_ID/locations/LOCATION_ID`
   * @param {string} request.filter
   *   `filter` can be used to specify a subset of queues. Any {@link google.cloud.tasks.v2beta3.Queue|Queue}
   *   field can be used as a filter and several operators as supported.
   *   For example: `<=, <, >=, >, !=, =, :`. The filter syntax is the same as
   *   described in
   *   [Stackdriver's Advanced Logs
   *   Filters](https://cloud.google.com/logging/docs/view/advanced_filters).
   *
   *   Sample filter "state: PAUSED".
   *
   *   Note that using filters might cause fewer queues than the
   *   requested page_size to be returned.
   * @param {number} request.pageSize
   *   Requested page size.
   *
   *   The maximum page size is 9800. If unspecified, the page size will
   *   be the maximum. Fewer queues than requested might be returned,
   *   even if more queues exist; use the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} in the
   *   response to determine if more queues exist.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListQueuesResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListQueues|ListQueues}
   *   method. It is an error to switch the value of the
   *   {@link google.cloud.tasks.v2beta3.ListQueuesRequest.filter|filter} while iterating through pages.
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. Read mask is used for a more granular control over what the API returns.
   *   If the mask is not present all fields will be returned except
   *   [Queue.stats]. [Queue.stats] will be returned only if it was  explicitly
   *   specified in the mask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Queue]{@link google.cloud.tasks.v2beta3.Queue}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.list_queues.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_ListQueues_async
   */
  listQueuesAsync(
    request?: protos.google.cloud.tasks.v2beta3.IListQueuesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.tasks.v2beta3.IQueue> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listQueues'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listQueues.asyncIterate(
      this.innerApiCalls['listQueues'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.tasks.v2beta3.IQueue>;
  }
  /**
   * Lists the tasks in a queue.
   *
   * By default, only the {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC} view is retrieved
   * due to performance considerations;
   * {@link google.cloud.tasks.v2beta3.ListTasksRequest.response_view|response_view} controls the
   * subset of information which is returned.
   *
   * The tasks may be returned in any order. The ordering may change at any
   * time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {number} request.pageSize
   *   Maximum page size.
   *
   *   Fewer tasks than requested might be returned, even if more tasks exist; use
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} in the response to
   *   determine if more tasks exist.
   *
   *   The maximum page size is 1000. If unspecified, the page size will be the
   *   maximum.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListTasks|ListTasks}
   *   method.
   *
   *   The page token is valid for only 2 hours.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Task]{@link google.cloud.tasks.v2beta3.Task}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTasksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTasks(
    request?: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask[],
      protos.google.cloud.tasks.v2beta3.IListTasksRequest | null,
      protos.google.cloud.tasks.v2beta3.IListTasksResponse
    ]
  >;
  listTasks(
    request: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListTasksRequest,
      protos.google.cloud.tasks.v2beta3.IListTasksResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.ITask
    >
  ): void;
  listTasks(
    request: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    callback: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListTasksRequest,
      protos.google.cloud.tasks.v2beta3.IListTasksResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.ITask
    >
  ): void;
  listTasks(
    request?: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.tasks.v2beta3.IListTasksRequest,
          | protos.google.cloud.tasks.v2beta3.IListTasksResponse
          | null
          | undefined,
          protos.google.cloud.tasks.v2beta3.ITask
        >,
    callback?: PaginationCallback<
      protos.google.cloud.tasks.v2beta3.IListTasksRequest,
      protos.google.cloud.tasks.v2beta3.IListTasksResponse | null | undefined,
      protos.google.cloud.tasks.v2beta3.ITask
    >
  ): Promise<
    [
      protos.google.cloud.tasks.v2beta3.ITask[],
      protos.google.cloud.tasks.v2beta3.IListTasksRequest | null,
      protos.google.cloud.tasks.v2beta3.IListTasksResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTasks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {number} request.pageSize
   *   Maximum page size.
   *
   *   Fewer tasks than requested might be returned, even if more tasks exist; use
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} in the response to
   *   determine if more tasks exist.
   *
   *   The maximum page size is 1000. If unspecified, the page size will be the
   *   maximum.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListTasks|ListTasks}
   *   method.
   *
   *   The page token is valid for only 2 hours.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Task]{@link google.cloud.tasks.v2beta3.Task} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTasksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTasksStream(
    request?: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTasks.createStream(
      this.innerApiCalls.listTasks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTasks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The queue name. For example:
   *   `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   * @param {google.cloud.tasks.v2beta3.Task.View} request.responseView
   *   The response_view specifies which subset of the {@link google.cloud.tasks.v2beta3.Task|Task} will be
   *   returned.
   *
   *   By default response_view is {@link google.cloud.tasks.v2beta3.Task.View.BASIC|BASIC}; not all
   *   information is retrieved by default because some data, such as
   *   payloads, might be desirable to return only when needed because
   *   of its large size or because of the sensitivity of data that it
   *   contains.
   *
   *   Authorization for {@link google.cloud.tasks.v2beta3.Task.View.FULL|FULL} requires
   *   `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
   *   permission on the {@link google.cloud.tasks.v2beta3.Task|Task} resource.
   * @param {number} request.pageSize
   *   Maximum page size.
   *
   *   Fewer tasks than requested might be returned, even if more tasks exist; use
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} in the response to
   *   determine if more tasks exist.
   *
   *   The maximum page size is 1000. If unspecified, the page size will be the
   *   maximum.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   *
   *   To request the first page results, page_token must be empty. To
   *   request the next page of results, page_token must be the value of
   *   {@link google.cloud.tasks.v2beta3.ListTasksResponse.next_page_token|next_page_token} returned
   *   from the previous call to {@link google.cloud.tasks.v2beta3.CloudTasks.ListTasks|ListTasks}
   *   method.
   *
   *   The page token is valid for only 2 hours.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Task]{@link google.cloud.tasks.v2beta3.Task}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2beta3/cloud_tasks.list_tasks.js</caption>
   * region_tag:cloudtasks_v2beta3_generated_CloudTasks_ListTasks_async
   */
  listTasksAsync(
    request?: protos.google.cloud.tasks.v2beta3.IListTasksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.tasks.v2beta3.ITask> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTasks.asyncIterate(
      this.innerApiCalls['listTasks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.tasks.v2beta3.ITask>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified queue resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} queue
   * @returns {string} Resource name string.
   */
  queuePath(project: string, location: string, queue: string) {
    return this.pathTemplates.queuePathTemplate.render({
      project: project,
      location: location,
      queue: queue,
    });
  }

  /**
   * Parse the project from Queue resource.
   *
   * @param {string} queueName
   *   A fully-qualified path representing Queue resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromQueueName(queueName: string) {
    return this.pathTemplates.queuePathTemplate.match(queueName).project;
  }

  /**
   * Parse the location from Queue resource.
   *
   * @param {string} queueName
   *   A fully-qualified path representing Queue resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromQueueName(queueName: string) {
    return this.pathTemplates.queuePathTemplate.match(queueName).location;
  }

  /**
   * Parse the queue from Queue resource.
   *
   * @param {string} queueName
   *   A fully-qualified path representing Queue resource.
   * @returns {string} A string representing the queue.
   */
  matchQueueFromQueueName(queueName: string) {
    return this.pathTemplates.queuePathTemplate.match(queueName).queue;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} queue
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(project: string, location: string, queue: string, task: string) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      queue: queue,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the queue from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the queue.
   */
  matchQueueFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).queue;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.cloudTasksStub && !this._terminated) {
      return this.cloudTasksStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
