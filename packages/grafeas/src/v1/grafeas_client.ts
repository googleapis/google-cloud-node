// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/grafeas_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './grafeas_client_config.json';
const version = require('../../../package.json').version;

/**
 *  [Grafeas](https://grafeas.io) API.
 *
 *  Retrieves analysis results of Cloud components such as Docker container
 *  images.
 *
 *  Analysis results are stored as a series of occurrences. An `Occurrence`
 *  contains information about a specific analysis instance on a resource. An
 *  occurrence refers to a `Note`. A note contains details describing the
 *  analysis and is generally stored in a separate project, called a `Provider`.
 *  Multiple occurrences can refer to the same note.
 *
 *  For example, an SSL vulnerability could affect multiple images. In this case,
 *  there would be one note for the vulnerability and an occurrence for each
 *  image with the vulnerability referring to that note.
 * @class
 * @memberof v1
 */
export class GrafeasClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  grafeasStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GrafeasClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new GrafeasClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof GrafeasClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      notePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/notes/{note}'
      ),
      occurrencePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/occurrences/{occurrence}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listOccurrences: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'occurrences'
      ),
      listNotes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'notes'
      ),
      listNoteOccurrences: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'occurrences'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'grafeas.v1.Grafeas',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.grafeasStub) {
      return this.grafeasStub;
    }

    // Put together the "service stub" for
    // grafeas.v1.Grafeas.
    this.grafeasStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService('grafeas.v1.Grafeas')
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).grafeas.v1.Grafeas,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const grafeasStubMethods = [
      'getOccurrence',
      'listOccurrences',
      'deleteOccurrence',
      'createOccurrence',
      'batchCreateOccurrences',
      'updateOccurrence',
      'getOccurrenceNote',
      'getNote',
      'listNotes',
      'deleteNote',
      'createNote',
      'batchCreateNotes',
      'updateNote',
      'listNoteOccurrences',
    ];
    for (const methodName of grafeasStubMethods) {
      const callPromise = this.grafeasStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.grafeasStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'containeranalysis.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'containeranalysis.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the specified occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1.Occurrence}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.get_occurrence.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_GetOccurrence_async
   */
  getOccurrence(
    request?: protos.grafeas.v1.IGetOccurrenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IGetOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  getOccurrence(
    request: protos.grafeas.v1.IGetOccurrenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IGetOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getOccurrence(
    request: protos.grafeas.v1.IGetOccurrenceRequest,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IGetOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getOccurrence(
    request?: protos.grafeas.v1.IGetOccurrenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.IOccurrence,
          protos.grafeas.v1.IGetOccurrenceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IGetOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IGetOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOccurrence(request, options, callback);
  }
  /**
   * Deletes the specified occurrence. For example, use this method to delete an
   * occurrence when the occurrence is no longer applicable for the given
   * resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.delete_occurrence.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_DeleteOccurrence_async
   */
  deleteOccurrence(
    request?: protos.grafeas.v1.IDeleteOccurrenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  deleteOccurrence(
    request: protos.grafeas.v1.IDeleteOccurrenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOccurrence(
    request: protos.grafeas.v1.IDeleteOccurrenceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOccurrence(
    request?: protos.grafeas.v1.IDeleteOccurrenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.grafeas.v1.IDeleteOccurrenceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteOccurrence(request, options, callback);
  }
  /**
   * Creates a new occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the occurrence is to be created.
   * @param {grafeas.v1.Occurrence} request.occurrence
   *   The occurrence to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1.Occurrence}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.create_occurrence.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_CreateOccurrence_async
   */
  createOccurrence(
    request?: protos.grafeas.v1.ICreateOccurrenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  createOccurrence(
    request: protos.grafeas.v1.ICreateOccurrenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.ICreateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOccurrence(
    request: protos.grafeas.v1.ICreateOccurrenceRequest,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.ICreateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOccurrence(
    request?: protos.grafeas.v1.ICreateOccurrenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.IOccurrence,
          protos.grafeas.v1.ICreateOccurrenceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.ICreateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.ICreateOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createOccurrence(request, options, callback);
  }
  /**
   * Creates new occurrences in batch.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the occurrences are to be created.
   * @param {number[]} request.occurrences
   *   The occurrences to create. Max allowed length is 1000.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateOccurrencesResponse]{@link grafeas.v1.BatchCreateOccurrencesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.batch_create_occurrences.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_BatchCreateOccurrences_async
   */
  batchCreateOccurrences(
    request?: protos.grafeas.v1.IBatchCreateOccurrencesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IBatchCreateOccurrencesResponse,
      protos.grafeas.v1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    ]
  >;
  batchCreateOccurrences(
    request: protos.grafeas.v1.IBatchCreateOccurrencesRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.IBatchCreateOccurrencesResponse,
      protos.grafeas.v1.IBatchCreateOccurrencesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateOccurrences(
    request: protos.grafeas.v1.IBatchCreateOccurrencesRequest,
    callback: Callback<
      protos.grafeas.v1.IBatchCreateOccurrencesResponse,
      protos.grafeas.v1.IBatchCreateOccurrencesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateOccurrences(
    request?: protos.grafeas.v1.IBatchCreateOccurrencesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.IBatchCreateOccurrencesResponse,
          protos.grafeas.v1.IBatchCreateOccurrencesRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.IBatchCreateOccurrencesResponse,
      protos.grafeas.v1.IBatchCreateOccurrencesRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.IBatchCreateOccurrencesResponse,
      protos.grafeas.v1.IBatchCreateOccurrencesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateOccurrences(
      request,
      options,
      callback
    );
  }
  /**
   * Updates the specified occurrence.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {grafeas.v1.Occurrence} request.occurrence
   *   The updated occurrence.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Occurrence]{@link grafeas.v1.Occurrence}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.update_occurrence.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_UpdateOccurrence_async
   */
  updateOccurrence(
    request?: protos.grafeas.v1.IUpdateOccurrenceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    ]
  >;
  updateOccurrence(
    request: protos.grafeas.v1.IUpdateOccurrenceRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IUpdateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateOccurrence(
    request: protos.grafeas.v1.IUpdateOccurrenceRequest,
    callback: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IUpdateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateOccurrence(
    request?: protos.grafeas.v1.IUpdateOccurrenceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.IOccurrence,
          protos.grafeas.v1.IUpdateOccurrenceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IUpdateOccurrenceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence,
      protos.grafeas.v1.IUpdateOccurrenceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateOccurrence(request, options, callback);
  }
  /**
   * Gets the note attached to the specified occurrence. Consumer projects can
   * use this method to get a note that belongs to a provider project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the occurrence in the form of
   *   `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1.Note}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.get_occurrence_note.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_GetOccurrenceNote_async
   */
  getOccurrenceNote(
    request?: protos.grafeas.v1.IGetOccurrenceNoteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    ]
  >;
  getOccurrenceNote(
    request: protos.grafeas.v1.IGetOccurrenceNoteRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetOccurrenceNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getOccurrenceNote(
    request: protos.grafeas.v1.IGetOccurrenceNoteRequest,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetOccurrenceNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getOccurrenceNote(
    request?: protos.grafeas.v1.IGetOccurrenceNoteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.INote,
          protos.grafeas.v1.IGetOccurrenceNoteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetOccurrenceNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetOccurrenceNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOccurrenceNote(request, options, callback);
  }
  /**
   * Gets the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1.Note}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.get_note.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_GetNote_async
   */
  getNote(
    request?: protos.grafeas.v1.IGetNoteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetNoteRequest | undefined,
      {} | undefined
    ]
  >;
  getNote(
    request: protos.grafeas.v1.IGetNoteRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getNote(
    request: protos.grafeas.v1.IGetNoteRequest,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getNote(
    request?: protos.grafeas.v1.IGetNoteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.INote,
          protos.grafeas.v1.IGetNoteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IGetNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getNote(request, options, callback);
  }
  /**
   * Deletes the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.delete_note.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_DeleteNote_async
   */
  deleteNote(
    request?: protos.grafeas.v1.IDeleteNoteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteNoteRequest | undefined,
      {} | undefined
    ]
  >;
  deleteNote(
    request: protos.grafeas.v1.IDeleteNoteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNote(
    request: protos.grafeas.v1.IDeleteNoteRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNote(
    request?: protos.grafeas.v1.IDeleteNoteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.grafeas.v1.IDeleteNoteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.grafeas.v1.IDeleteNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteNote(request, options, callback);
  }
  /**
   * Creates a new note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the note is to be created.
   * @param {string} request.noteId
   *   The ID to use for this note.
   * @param {grafeas.v1.Note} request.note
   *   The note to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1.Note}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.create_note.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_CreateNote_async
   */
  createNote(
    request?: protos.grafeas.v1.ICreateNoteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.ICreateNoteRequest | undefined,
      {} | undefined
    ]
  >;
  createNote(
    request: protos.grafeas.v1.ICreateNoteRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.ICreateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNote(
    request: protos.grafeas.v1.ICreateNoteRequest,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.ICreateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createNote(
    request?: protos.grafeas.v1.ICreateNoteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.INote,
          protos.grafeas.v1.ICreateNoteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.ICreateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.ICreateNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createNote(request, options, callback);
  }
  /**
   * Creates new notes in batch.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project in the form of `projects/[PROJECT_ID]`, under which
   *   the notes are to be created.
   * @param {number[]} request.notes
   *   The notes to create. Max allowed length is 1000.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateNotesResponse]{@link grafeas.v1.BatchCreateNotesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.batch_create_notes.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_BatchCreateNotes_async
   */
  batchCreateNotes(
    request?: protos.grafeas.v1.IBatchCreateNotesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IBatchCreateNotesResponse,
      protos.grafeas.v1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    ]
  >;
  batchCreateNotes(
    request: protos.grafeas.v1.IBatchCreateNotesRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.IBatchCreateNotesResponse,
      protos.grafeas.v1.IBatchCreateNotesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateNotes(
    request: protos.grafeas.v1.IBatchCreateNotesRequest,
    callback: Callback<
      protos.grafeas.v1.IBatchCreateNotesResponse,
      protos.grafeas.v1.IBatchCreateNotesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateNotes(
    request?: protos.grafeas.v1.IBatchCreateNotesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.IBatchCreateNotesResponse,
          protos.grafeas.v1.IBatchCreateNotesRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.IBatchCreateNotesResponse,
      protos.grafeas.v1.IBatchCreateNotesRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.IBatchCreateNotesResponse,
      protos.grafeas.v1.IBatchCreateNotesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateNotes(request, options, callback);
  }
  /**
   * Updates the specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {grafeas.v1.Note} request.note
   *   The updated note.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Note]{@link grafeas.v1.Note}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.update_note.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_UpdateNote_async
   */
  updateNote(
    request?: protos.grafeas.v1.IUpdateNoteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IUpdateNoteRequest | undefined,
      {} | undefined
    ]
  >;
  updateNote(
    request: protos.grafeas.v1.IUpdateNoteRequest,
    options: CallOptions,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IUpdateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNote(
    request: protos.grafeas.v1.IUpdateNoteRequest,
    callback: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IUpdateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateNote(
    request?: protos.grafeas.v1.IUpdateNoteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.grafeas.v1.INote,
          protos.grafeas.v1.IUpdateNoteRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IUpdateNoteRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.grafeas.v1.INote,
      protos.grafeas.v1.IUpdateNoteRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateNote(request, options, callback);
  }

  /**
   * Lists occurrences for the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list occurrences for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list. Must be positive. Max allowed
   *   page size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Occurrence]{@link grafeas.v1.Occurrence}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOccurrencesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listOccurrences(
    request?: protos.grafeas.v1.IListOccurrencesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence[],
      protos.grafeas.v1.IListOccurrencesRequest | null,
      protos.grafeas.v1.IListOccurrencesResponse
    ]
  >;
  listOccurrences(
    request: protos.grafeas.v1.IListOccurrencesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.grafeas.v1.IListOccurrencesRequest,
      protos.grafeas.v1.IListOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): void;
  listOccurrences(
    request: protos.grafeas.v1.IListOccurrencesRequest,
    callback: PaginationCallback<
      protos.grafeas.v1.IListOccurrencesRequest,
      protos.grafeas.v1.IListOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): void;
  listOccurrences(
    request?: protos.grafeas.v1.IListOccurrencesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.grafeas.v1.IListOccurrencesRequest,
          protos.grafeas.v1.IListOccurrencesResponse | null | undefined,
          protos.grafeas.v1.IOccurrence
        >,
    callback?: PaginationCallback<
      protos.grafeas.v1.IListOccurrencesRequest,
      protos.grafeas.v1.IListOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence[],
      protos.grafeas.v1.IListOccurrencesRequest | null,
      protos.grafeas.v1.IListOccurrencesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOccurrences(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list occurrences for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list. Must be positive. Max allowed
   *   page size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Occurrence]{@link grafeas.v1.Occurrence} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOccurrencesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listOccurrencesStream(
    request?: protos.grafeas.v1.IListOccurrencesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOccurrences'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOccurrences.createStream(
      this.innerApiCalls.listOccurrences as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOccurrences`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list occurrences for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list. Must be positive. Max allowed
   *   page size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Occurrence]{@link grafeas.v1.Occurrence}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.list_occurrences.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_ListOccurrences_async
   */
  listOccurrencesAsync(
    request?: protos.grafeas.v1.IListOccurrencesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.grafeas.v1.IOccurrence> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOccurrences'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOccurrences.asyncIterate(
      this.innerApiCalls['listOccurrences'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.grafeas.v1.IOccurrence>;
  }
  /**
   * Lists notes for the specified project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list notes for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of notes to return in the list. Must be positive. Max allowed page
   *   size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Note]{@link grafeas.v1.Note}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNotesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotes(
    request?: protos.grafeas.v1.IListNotesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.INote[],
      protos.grafeas.v1.IListNotesRequest | null,
      protos.grafeas.v1.IListNotesResponse
    ]
  >;
  listNotes(
    request: protos.grafeas.v1.IListNotesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.grafeas.v1.IListNotesRequest,
      protos.grafeas.v1.IListNotesResponse | null | undefined,
      protos.grafeas.v1.INote
    >
  ): void;
  listNotes(
    request: protos.grafeas.v1.IListNotesRequest,
    callback: PaginationCallback<
      protos.grafeas.v1.IListNotesRequest,
      protos.grafeas.v1.IListNotesResponse | null | undefined,
      protos.grafeas.v1.INote
    >
  ): void;
  listNotes(
    request?: protos.grafeas.v1.IListNotesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.grafeas.v1.IListNotesRequest,
          protos.grafeas.v1.IListNotesResponse | null | undefined,
          protos.grafeas.v1.INote
        >,
    callback?: PaginationCallback<
      protos.grafeas.v1.IListNotesRequest,
      protos.grafeas.v1.IListNotesResponse | null | undefined,
      protos.grafeas.v1.INote
    >
  ): Promise<
    [
      protos.grafeas.v1.INote[],
      protos.grafeas.v1.IListNotesRequest | null,
      protos.grafeas.v1.IListNotesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNotes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list notes for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of notes to return in the list. Must be positive. Max allowed page
   *   size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Note]{@link grafeas.v1.Note} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNotesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotesStream(
    request?: protos.grafeas.v1.IListNotesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNotes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNotes.createStream(
      this.innerApiCalls.listNotes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNotes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the project to list notes for in the form of
   *   `projects/[PROJECT_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of notes to return in the list. Must be positive. Max allowed page
   *   size is 1000. If not specified, page size defaults to 20.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Note]{@link grafeas.v1.Note}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.list_notes.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_ListNotes_async
   */
  listNotesAsync(
    request?: protos.grafeas.v1.IListNotesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.grafeas.v1.INote> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNotes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNotes.asyncIterate(
      this.innerApiCalls['listNotes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.grafeas.v1.INote>;
  }
  /**
   * Lists occurrences referencing the specified note. Provider projects can use
   * this method to get all occurrences across consumer projects referencing the
   * specified note.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note to list occurrences for in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Occurrence]{@link grafeas.v1.Occurrence}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNoteOccurrencesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNoteOccurrences(
    request?: protos.grafeas.v1.IListNoteOccurrencesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence[],
      protos.grafeas.v1.IListNoteOccurrencesRequest | null,
      protos.grafeas.v1.IListNoteOccurrencesResponse
    ]
  >;
  listNoteOccurrences(
    request: protos.grafeas.v1.IListNoteOccurrencesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.grafeas.v1.IListNoteOccurrencesRequest,
      protos.grafeas.v1.IListNoteOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): void;
  listNoteOccurrences(
    request: protos.grafeas.v1.IListNoteOccurrencesRequest,
    callback: PaginationCallback<
      protos.grafeas.v1.IListNoteOccurrencesRequest,
      protos.grafeas.v1.IListNoteOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): void;
  listNoteOccurrences(
    request?: protos.grafeas.v1.IListNoteOccurrencesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.grafeas.v1.IListNoteOccurrencesRequest,
          protos.grafeas.v1.IListNoteOccurrencesResponse | null | undefined,
          protos.grafeas.v1.IOccurrence
        >,
    callback?: PaginationCallback<
      protos.grafeas.v1.IListNoteOccurrencesRequest,
      protos.grafeas.v1.IListNoteOccurrencesResponse | null | undefined,
      protos.grafeas.v1.IOccurrence
    >
  ): Promise<
    [
      protos.grafeas.v1.IOccurrence[],
      protos.grafeas.v1.IListNoteOccurrencesRequest | null,
      protos.grafeas.v1.IListNoteOccurrencesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNoteOccurrences(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note to list occurrences for in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Occurrence]{@link grafeas.v1.Occurrence} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNoteOccurrencesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNoteOccurrencesStream(
    request?: protos.grafeas.v1.IListNoteOccurrencesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listNoteOccurrences'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNoteOccurrences.createStream(
      this.innerApiCalls.listNoteOccurrences as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNoteOccurrences`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the note to list occurrences for in the form of
   *   `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   * @param {string} request.filter
   *   The filter expression.
   * @param {number} request.pageSize
   *   Number of occurrences to return in the list.
   * @param {string} request.pageToken
   *   Token to provide to skip to a particular spot in the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Occurrence]{@link grafeas.v1.Occurrence}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/grafeas.list_note_occurrences.js</caption>
   * region_tag:containeranalysis_v1_generated_Grafeas_ListNoteOccurrences_async
   */
  listNoteOccurrencesAsync(
    request?: protos.grafeas.v1.IListNoteOccurrencesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.grafeas.v1.IOccurrence> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listNoteOccurrences'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNoteOccurrences.asyncIterate(
      this.innerApiCalls['listNoteOccurrences'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.grafeas.v1.IOccurrence>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified note resource name string.
   *
   * @param {string} project
   * @param {string} note
   * @returns {string} Resource name string.
   */
  notePath(project: string, note: string) {
    return this.pathTemplates.notePathTemplate.render({
      project: project,
      note: note,
    });
  }

  /**
   * Parse the project from Note resource.
   *
   * @param {string} noteName
   *   A fully-qualified path representing Note resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNoteName(noteName: string) {
    return this.pathTemplates.notePathTemplate.match(noteName).project;
  }

  /**
   * Parse the note from Note resource.
   *
   * @param {string} noteName
   *   A fully-qualified path representing Note resource.
   * @returns {string} A string representing the note.
   */
  matchNoteFromNoteName(noteName: string) {
    return this.pathTemplates.notePathTemplate.match(noteName).note;
  }

  /**
   * Return a fully-qualified occurrence resource name string.
   *
   * @param {string} project
   * @param {string} occurrence
   * @returns {string} Resource name string.
   */
  occurrencePath(project: string, occurrence: string) {
    return this.pathTemplates.occurrencePathTemplate.render({
      project: project,
      occurrence: occurrence,
    });
  }

  /**
   * Parse the project from Occurrence resource.
   *
   * @param {string} occurrenceName
   *   A fully-qualified path representing Occurrence resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOccurrenceName(occurrenceName: string) {
    return this.pathTemplates.occurrencePathTemplate.match(occurrenceName)
      .project;
  }

  /**
   * Parse the occurrence from Occurrence resource.
   *
   * @param {string} occurrenceName
   *   A fully-qualified path representing Occurrence resource.
   * @returns {string} A string representing the occurrence.
   */
  matchOccurrenceFromOccurrenceName(occurrenceName: string) {
    return this.pathTemplates.occurrencePathTemplate.match(occurrenceName)
      .occurrence;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.grafeasStub && !this._terminated) {
      return this.grafeasStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
