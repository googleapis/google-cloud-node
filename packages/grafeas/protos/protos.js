// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_grafeas_protos || ($protobuf.roots._google_cloud_grafeas_protos = {});
    
    $root.grafeas = (function() {
    
        /**
         * Namespace grafeas.
         * @exports grafeas
         * @namespace
         */
        var grafeas = {};
    
        grafeas.v1 = (function() {
    
            /**
             * Namespace v1.
             * @memberof grafeas
             * @namespace
             */
            var v1 = {};
    
            v1.AttestationNote = (function() {
    
                /**
                 * Properties of an AttestationNote.
                 * @memberof grafeas.v1
                 * @interface IAttestationNote
                 * @property {grafeas.v1.AttestationNote.IHint|null} [hint] AttestationNote hint
                 */
    
                /**
                 * Constructs a new AttestationNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents an AttestationNote.
                 * @implements IAttestationNote
                 * @constructor
                 * @param {grafeas.v1.IAttestationNote=} [properties] Properties to set
                 */
                function AttestationNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AttestationNote hint.
                 * @member {grafeas.v1.AttestationNote.IHint|null|undefined} hint
                 * @memberof grafeas.v1.AttestationNote
                 * @instance
                 */
                AttestationNote.prototype.hint = null;
    
                /**
                 * Creates a new AttestationNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {grafeas.v1.IAttestationNote=} [properties] Properties to set
                 * @returns {grafeas.v1.AttestationNote} AttestationNote instance
                 */
                AttestationNote.create = function create(properties) {
                    return new AttestationNote(properties);
                };
    
                /**
                 * Encodes the specified AttestationNote message. Does not implicitly {@link grafeas.v1.AttestationNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {grafeas.v1.IAttestationNote} message AttestationNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttestationNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hint != null && Object.hasOwnProperty.call(message, "hint"))
                        $root.grafeas.v1.AttestationNote.Hint.encode(message.hint, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified AttestationNote message, length delimited. Does not implicitly {@link grafeas.v1.AttestationNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {grafeas.v1.IAttestationNote} message AttestationNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttestationNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AttestationNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.AttestationNote} AttestationNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttestationNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.AttestationNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.hint = $root.grafeas.v1.AttestationNote.Hint.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an AttestationNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.AttestationNote} AttestationNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttestationNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AttestationNote message.
                 * @function verify
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AttestationNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hint != null && message.hasOwnProperty("hint")) {
                        var error = $root.grafeas.v1.AttestationNote.Hint.verify(message.hint);
                        if (error)
                            return "hint." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an AttestationNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.AttestationNote} AttestationNote
                 */
                AttestationNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.AttestationNote)
                        return object;
                    var message = new $root.grafeas.v1.AttestationNote();
                    if (object.hint != null) {
                        if (typeof object.hint !== "object")
                            throw TypeError(".grafeas.v1.AttestationNote.hint: object expected");
                        message.hint = $root.grafeas.v1.AttestationNote.Hint.fromObject(object.hint);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an AttestationNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {grafeas.v1.AttestationNote} message AttestationNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AttestationNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.hint = null;
                    if (message.hint != null && message.hasOwnProperty("hint"))
                        object.hint = $root.grafeas.v1.AttestationNote.Hint.toObject(message.hint, options);
                    return object;
                };
    
                /**
                 * Converts this AttestationNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.AttestationNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AttestationNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for AttestationNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.AttestationNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AttestationNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.AttestationNote";
                };
    
                AttestationNote.Hint = (function() {
    
                    /**
                     * Properties of a Hint.
                     * @memberof grafeas.v1.AttestationNote
                     * @interface IHint
                     * @property {string|null} [humanReadableName] Hint humanReadableName
                     */
    
                    /**
                     * Constructs a new Hint.
                     * @memberof grafeas.v1.AttestationNote
                     * @classdesc Represents a Hint.
                     * @implements IHint
                     * @constructor
                     * @param {grafeas.v1.AttestationNote.IHint=} [properties] Properties to set
                     */
                    function Hint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hint humanReadableName.
                     * @member {string} humanReadableName
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @instance
                     */
                    Hint.prototype.humanReadableName = "";
    
                    /**
                     * Creates a new Hint instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {grafeas.v1.AttestationNote.IHint=} [properties] Properties to set
                     * @returns {grafeas.v1.AttestationNote.Hint} Hint instance
                     */
                    Hint.create = function create(properties) {
                        return new Hint(properties);
                    };
    
                    /**
                     * Encodes the specified Hint message. Does not implicitly {@link grafeas.v1.AttestationNote.Hint.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {grafeas.v1.AttestationNote.IHint} message Hint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.humanReadableName != null && Object.hasOwnProperty.call(message, "humanReadableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.humanReadableName);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hint message, length delimited. Does not implicitly {@link grafeas.v1.AttestationNote.Hint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {grafeas.v1.AttestationNote.IHint} message Hint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hint message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.AttestationNote.Hint} Hint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.AttestationNote.Hint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.humanReadableName = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Hint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.AttestationNote.Hint} Hint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hint message.
                     * @function verify
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                            if (!$util.isString(message.humanReadableName))
                                return "humanReadableName: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.AttestationNote.Hint} Hint
                     */
                    Hint.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.AttestationNote.Hint)
                            return object;
                        var message = new $root.grafeas.v1.AttestationNote.Hint();
                        if (object.humanReadableName != null)
                            message.humanReadableName = String(object.humanReadableName);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {grafeas.v1.AttestationNote.Hint} message Hint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.humanReadableName = "";
                        if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                            object.humanReadableName = message.humanReadableName;
                        return object;
                    };
    
                    /**
                     * Converts this Hint to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Hint
                     * @function getTypeUrl
                     * @memberof grafeas.v1.AttestationNote.Hint
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Hint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.AttestationNote.Hint";
                    };
    
                    return Hint;
                })();
    
                return AttestationNote;
            })();
    
            v1.Jwt = (function() {
    
                /**
                 * Properties of a Jwt.
                 * @memberof grafeas.v1
                 * @interface IJwt
                 * @property {string|null} [compactJwt] Jwt compactJwt
                 */
    
                /**
                 * Constructs a new Jwt.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Jwt.
                 * @implements IJwt
                 * @constructor
                 * @param {grafeas.v1.IJwt=} [properties] Properties to set
                 */
                function Jwt(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Jwt compactJwt.
                 * @member {string} compactJwt
                 * @memberof grafeas.v1.Jwt
                 * @instance
                 */
                Jwt.prototype.compactJwt = "";
    
                /**
                 * Creates a new Jwt instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {grafeas.v1.IJwt=} [properties] Properties to set
                 * @returns {grafeas.v1.Jwt} Jwt instance
                 */
                Jwt.create = function create(properties) {
                    return new Jwt(properties);
                };
    
                /**
                 * Encodes the specified Jwt message. Does not implicitly {@link grafeas.v1.Jwt.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {grafeas.v1.IJwt} message Jwt message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Jwt.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.compactJwt != null && Object.hasOwnProperty.call(message, "compactJwt"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.compactJwt);
                    return writer;
                };
    
                /**
                 * Encodes the specified Jwt message, length delimited. Does not implicitly {@link grafeas.v1.Jwt.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {grafeas.v1.IJwt} message Jwt message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Jwt.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Jwt message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Jwt} Jwt
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Jwt.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Jwt();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.compactJwt = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Jwt message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Jwt} Jwt
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Jwt.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Jwt message.
                 * @function verify
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Jwt.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.compactJwt != null && message.hasOwnProperty("compactJwt"))
                        if (!$util.isString(message.compactJwt))
                            return "compactJwt: string expected";
                    return null;
                };
    
                /**
                 * Creates a Jwt message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Jwt} Jwt
                 */
                Jwt.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Jwt)
                        return object;
                    var message = new $root.grafeas.v1.Jwt();
                    if (object.compactJwt != null)
                        message.compactJwt = String(object.compactJwt);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Jwt message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {grafeas.v1.Jwt} message Jwt
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Jwt.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.compactJwt = "";
                    if (message.compactJwt != null && message.hasOwnProperty("compactJwt"))
                        object.compactJwt = message.compactJwt;
                    return object;
                };
    
                /**
                 * Converts this Jwt to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Jwt
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Jwt.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Jwt
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Jwt
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Jwt.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Jwt";
                };
    
                return Jwt;
            })();
    
            v1.AttestationOccurrence = (function() {
    
                /**
                 * Properties of an AttestationOccurrence.
                 * @memberof grafeas.v1
                 * @interface IAttestationOccurrence
                 * @property {Uint8Array|null} [serializedPayload] AttestationOccurrence serializedPayload
                 * @property {Array.<grafeas.v1.ISignature>|null} [signatures] AttestationOccurrence signatures
                 * @property {Array.<grafeas.v1.IJwt>|null} [jwts] AttestationOccurrence jwts
                 */
    
                /**
                 * Constructs a new AttestationOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents an AttestationOccurrence.
                 * @implements IAttestationOccurrence
                 * @constructor
                 * @param {grafeas.v1.IAttestationOccurrence=} [properties] Properties to set
                 */
                function AttestationOccurrence(properties) {
                    this.signatures = [];
                    this.jwts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AttestationOccurrence serializedPayload.
                 * @member {Uint8Array} serializedPayload
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @instance
                 */
                AttestationOccurrence.prototype.serializedPayload = $util.newBuffer([]);
    
                /**
                 * AttestationOccurrence signatures.
                 * @member {Array.<grafeas.v1.ISignature>} signatures
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @instance
                 */
                AttestationOccurrence.prototype.signatures = $util.emptyArray;
    
                /**
                 * AttestationOccurrence jwts.
                 * @member {Array.<grafeas.v1.IJwt>} jwts
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @instance
                 */
                AttestationOccurrence.prototype.jwts = $util.emptyArray;
    
                /**
                 * Creates a new AttestationOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IAttestationOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.AttestationOccurrence} AttestationOccurrence instance
                 */
                AttestationOccurrence.create = function create(properties) {
                    return new AttestationOccurrence(properties);
                };
    
                /**
                 * Encodes the specified AttestationOccurrence message. Does not implicitly {@link grafeas.v1.AttestationOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IAttestationOccurrence} message AttestationOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttestationOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.serializedPayload != null && Object.hasOwnProperty.call(message, "serializedPayload"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.serializedPayload);
                    if (message.signatures != null && message.signatures.length)
                        for (var i = 0; i < message.signatures.length; ++i)
                            $root.grafeas.v1.Signature.encode(message.signatures[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.jwts != null && message.jwts.length)
                        for (var i = 0; i < message.jwts.length; ++i)
                            $root.grafeas.v1.Jwt.encode(message.jwts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified AttestationOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.AttestationOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IAttestationOccurrence} message AttestationOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AttestationOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AttestationOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.AttestationOccurrence} AttestationOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttestationOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.AttestationOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.serializedPayload = reader.bytes();
                                break;
                            }
                        case 2: {
                                if (!(message.signatures && message.signatures.length))
                                    message.signatures = [];
                                message.signatures.push($root.grafeas.v1.Signature.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.jwts && message.jwts.length))
                                    message.jwts = [];
                                message.jwts.push($root.grafeas.v1.Jwt.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an AttestationOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.AttestationOccurrence} AttestationOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AttestationOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AttestationOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AttestationOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.serializedPayload != null && message.hasOwnProperty("serializedPayload"))
                        if (!(message.serializedPayload && typeof message.serializedPayload.length === "number" || $util.isString(message.serializedPayload)))
                            return "serializedPayload: buffer expected";
                    if (message.signatures != null && message.hasOwnProperty("signatures")) {
                        if (!Array.isArray(message.signatures))
                            return "signatures: array expected";
                        for (var i = 0; i < message.signatures.length; ++i) {
                            var error = $root.grafeas.v1.Signature.verify(message.signatures[i]);
                            if (error)
                                return "signatures." + error;
                        }
                    }
                    if (message.jwts != null && message.hasOwnProperty("jwts")) {
                        if (!Array.isArray(message.jwts))
                            return "jwts: array expected";
                        for (var i = 0; i < message.jwts.length; ++i) {
                            var error = $root.grafeas.v1.Jwt.verify(message.jwts[i]);
                            if (error)
                                return "jwts." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an AttestationOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.AttestationOccurrence} AttestationOccurrence
                 */
                AttestationOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.AttestationOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.AttestationOccurrence();
                    if (object.serializedPayload != null)
                        if (typeof object.serializedPayload === "string")
                            $util.base64.decode(object.serializedPayload, message.serializedPayload = $util.newBuffer($util.base64.length(object.serializedPayload)), 0);
                        else if (object.serializedPayload.length >= 0)
                            message.serializedPayload = object.serializedPayload;
                    if (object.signatures) {
                        if (!Array.isArray(object.signatures))
                            throw TypeError(".grafeas.v1.AttestationOccurrence.signatures: array expected");
                        message.signatures = [];
                        for (var i = 0; i < object.signatures.length; ++i) {
                            if (typeof object.signatures[i] !== "object")
                                throw TypeError(".grafeas.v1.AttestationOccurrence.signatures: object expected");
                            message.signatures[i] = $root.grafeas.v1.Signature.fromObject(object.signatures[i]);
                        }
                    }
                    if (object.jwts) {
                        if (!Array.isArray(object.jwts))
                            throw TypeError(".grafeas.v1.AttestationOccurrence.jwts: array expected");
                        message.jwts = [];
                        for (var i = 0; i < object.jwts.length; ++i) {
                            if (typeof object.jwts[i] !== "object")
                                throw TypeError(".grafeas.v1.AttestationOccurrence.jwts: object expected");
                            message.jwts[i] = $root.grafeas.v1.Jwt.fromObject(object.jwts[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an AttestationOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {grafeas.v1.AttestationOccurrence} message AttestationOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AttestationOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.signatures = [];
                        object.jwts = [];
                    }
                    if (options.defaults)
                        if (options.bytes === String)
                            object.serializedPayload = "";
                        else {
                            object.serializedPayload = [];
                            if (options.bytes !== Array)
                                object.serializedPayload = $util.newBuffer(object.serializedPayload);
                        }
                    if (message.serializedPayload != null && message.hasOwnProperty("serializedPayload"))
                        object.serializedPayload = options.bytes === String ? $util.base64.encode(message.serializedPayload, 0, message.serializedPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.serializedPayload) : message.serializedPayload;
                    if (message.signatures && message.signatures.length) {
                        object.signatures = [];
                        for (var j = 0; j < message.signatures.length; ++j)
                            object.signatures[j] = $root.grafeas.v1.Signature.toObject(message.signatures[j], options);
                    }
                    if (message.jwts && message.jwts.length) {
                        object.jwts = [];
                        for (var j = 0; j < message.jwts.length; ++j)
                            object.jwts[j] = $root.grafeas.v1.Jwt.toObject(message.jwts[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this AttestationOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AttestationOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for AttestationOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.AttestationOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AttestationOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.AttestationOccurrence";
                };
    
                return AttestationOccurrence;
            })();
    
            /**
             * NoteKind enum.
             * @name grafeas.v1.NoteKind
             * @enum {number}
             * @property {number} NOTE_KIND_UNSPECIFIED=0 NOTE_KIND_UNSPECIFIED value
             * @property {number} VULNERABILITY=1 VULNERABILITY value
             * @property {number} BUILD=2 BUILD value
             * @property {number} IMAGE=3 IMAGE value
             * @property {number} PACKAGE=4 PACKAGE value
             * @property {number} DEPLOYMENT=5 DEPLOYMENT value
             * @property {number} DISCOVERY=6 DISCOVERY value
             * @property {number} ATTESTATION=7 ATTESTATION value
             * @property {number} UPGRADE=8 UPGRADE value
             * @property {number} COMPLIANCE=9 COMPLIANCE value
             * @property {number} DSSE_ATTESTATION=10 DSSE_ATTESTATION value
             * @property {number} VULNERABILITY_ASSESSMENT=11 VULNERABILITY_ASSESSMENT value
             */
            v1.NoteKind = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NOTE_KIND_UNSPECIFIED"] = 0;
                values[valuesById[1] = "VULNERABILITY"] = 1;
                values[valuesById[2] = "BUILD"] = 2;
                values[valuesById[3] = "IMAGE"] = 3;
                values[valuesById[4] = "PACKAGE"] = 4;
                values[valuesById[5] = "DEPLOYMENT"] = 5;
                values[valuesById[6] = "DISCOVERY"] = 6;
                values[valuesById[7] = "ATTESTATION"] = 7;
                values[valuesById[8] = "UPGRADE"] = 8;
                values[valuesById[9] = "COMPLIANCE"] = 9;
                values[valuesById[10] = "DSSE_ATTESTATION"] = 10;
                values[valuesById[11] = "VULNERABILITY_ASSESSMENT"] = 11;
                return values;
            })();
    
            v1.RelatedUrl = (function() {
    
                /**
                 * Properties of a RelatedUrl.
                 * @memberof grafeas.v1
                 * @interface IRelatedUrl
                 * @property {string|null} [url] RelatedUrl url
                 * @property {string|null} [label] RelatedUrl label
                 */
    
                /**
                 * Constructs a new RelatedUrl.
                 * @memberof grafeas.v1
                 * @classdesc Represents a RelatedUrl.
                 * @implements IRelatedUrl
                 * @constructor
                 * @param {grafeas.v1.IRelatedUrl=} [properties] Properties to set
                 */
                function RelatedUrl(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RelatedUrl url.
                 * @member {string} url
                 * @memberof grafeas.v1.RelatedUrl
                 * @instance
                 */
                RelatedUrl.prototype.url = "";
    
                /**
                 * RelatedUrl label.
                 * @member {string} label
                 * @memberof grafeas.v1.RelatedUrl
                 * @instance
                 */
                RelatedUrl.prototype.label = "";
    
                /**
                 * Creates a new RelatedUrl instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {grafeas.v1.IRelatedUrl=} [properties] Properties to set
                 * @returns {grafeas.v1.RelatedUrl} RelatedUrl instance
                 */
                RelatedUrl.create = function create(properties) {
                    return new RelatedUrl(properties);
                };
    
                /**
                 * Encodes the specified RelatedUrl message. Does not implicitly {@link grafeas.v1.RelatedUrl.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {grafeas.v1.IRelatedUrl} message RelatedUrl message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RelatedUrl.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);
                    return writer;
                };
    
                /**
                 * Encodes the specified RelatedUrl message, length delimited. Does not implicitly {@link grafeas.v1.RelatedUrl.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {grafeas.v1.IRelatedUrl} message RelatedUrl message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RelatedUrl.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RelatedUrl message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.RelatedUrl} RelatedUrl
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RelatedUrl.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.RelatedUrl();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.url = reader.string();
                                break;
                            }
                        case 2: {
                                message.label = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RelatedUrl message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.RelatedUrl} RelatedUrl
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RelatedUrl.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RelatedUrl message.
                 * @function verify
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RelatedUrl.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    return null;
                };
    
                /**
                 * Creates a RelatedUrl message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.RelatedUrl} RelatedUrl
                 */
                RelatedUrl.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.RelatedUrl)
                        return object;
                    var message = new $root.grafeas.v1.RelatedUrl();
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.label != null)
                        message.label = String(object.label);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RelatedUrl message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {grafeas.v1.RelatedUrl} message RelatedUrl
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RelatedUrl.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.url = "";
                        object.label = "";
                    }
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    return object;
                };
    
                /**
                 * Converts this RelatedUrl to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.RelatedUrl
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RelatedUrl.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RelatedUrl
                 * @function getTypeUrl
                 * @memberof grafeas.v1.RelatedUrl
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RelatedUrl.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.RelatedUrl";
                };
    
                return RelatedUrl;
            })();
    
            v1.Signature = (function() {
    
                /**
                 * Properties of a Signature.
                 * @memberof grafeas.v1
                 * @interface ISignature
                 * @property {Uint8Array|null} [signature] Signature signature
                 * @property {string|null} [publicKeyId] Signature publicKeyId
                 */
    
                /**
                 * Constructs a new Signature.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Signature.
                 * @implements ISignature
                 * @constructor
                 * @param {grafeas.v1.ISignature=} [properties] Properties to set
                 */
                function Signature(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Signature signature.
                 * @member {Uint8Array} signature
                 * @memberof grafeas.v1.Signature
                 * @instance
                 */
                Signature.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Signature publicKeyId.
                 * @member {string} publicKeyId
                 * @memberof grafeas.v1.Signature
                 * @instance
                 */
                Signature.prototype.publicKeyId = "";
    
                /**
                 * Creates a new Signature instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {grafeas.v1.ISignature=} [properties] Properties to set
                 * @returns {grafeas.v1.Signature} Signature instance
                 */
                Signature.create = function create(properties) {
                    return new Signature(properties);
                };
    
                /**
                 * Encodes the specified Signature message. Does not implicitly {@link grafeas.v1.Signature.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {grafeas.v1.ISignature} message Signature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Signature.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                    if (message.publicKeyId != null && Object.hasOwnProperty.call(message, "publicKeyId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.publicKeyId);
                    return writer;
                };
    
                /**
                 * Encodes the specified Signature message, length delimited. Does not implicitly {@link grafeas.v1.Signature.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {grafeas.v1.ISignature} message Signature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Signature.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Signature message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Signature} Signature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Signature.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Signature();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.signature = reader.bytes();
                                break;
                            }
                        case 2: {
                                message.publicKeyId = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Signature message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Signature} Signature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Signature.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Signature message.
                 * @function verify
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Signature.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    if (message.publicKeyId != null && message.hasOwnProperty("publicKeyId"))
                        if (!$util.isString(message.publicKeyId))
                            return "publicKeyId: string expected";
                    return null;
                };
    
                /**
                 * Creates a Signature message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Signature} Signature
                 */
                Signature.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Signature)
                        return object;
                    var message = new $root.grafeas.v1.Signature();
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length >= 0)
                            message.signature = object.signature;
                    if (object.publicKeyId != null)
                        message.publicKeyId = String(object.publicKeyId);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Signature message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {grafeas.v1.Signature} message Signature
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Signature.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                        object.publicKeyId = "";
                    }
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    if (message.publicKeyId != null && message.hasOwnProperty("publicKeyId"))
                        object.publicKeyId = message.publicKeyId;
                    return object;
                };
    
                /**
                 * Converts this Signature to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Signature
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Signature.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Signature
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Signature
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Signature.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Signature";
                };
    
                return Signature;
            })();
    
            v1.Envelope = (function() {
    
                /**
                 * Properties of an Envelope.
                 * @memberof grafeas.v1
                 * @interface IEnvelope
                 * @property {Uint8Array|null} [payload] Envelope payload
                 * @property {string|null} [payloadType] Envelope payloadType
                 * @property {Array.<grafeas.v1.IEnvelopeSignature>|null} [signatures] Envelope signatures
                 */
    
                /**
                 * Constructs a new Envelope.
                 * @memberof grafeas.v1
                 * @classdesc Represents an Envelope.
                 * @implements IEnvelope
                 * @constructor
                 * @param {grafeas.v1.IEnvelope=} [properties] Properties to set
                 */
                function Envelope(properties) {
                    this.signatures = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Envelope payload.
                 * @member {Uint8Array} payload
                 * @memberof grafeas.v1.Envelope
                 * @instance
                 */
                Envelope.prototype.payload = $util.newBuffer([]);
    
                /**
                 * Envelope payloadType.
                 * @member {string} payloadType
                 * @memberof grafeas.v1.Envelope
                 * @instance
                 */
                Envelope.prototype.payloadType = "";
    
                /**
                 * Envelope signatures.
                 * @member {Array.<grafeas.v1.IEnvelopeSignature>} signatures
                 * @memberof grafeas.v1.Envelope
                 * @instance
                 */
                Envelope.prototype.signatures = $util.emptyArray;
    
                /**
                 * Creates a new Envelope instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {grafeas.v1.IEnvelope=} [properties] Properties to set
                 * @returns {grafeas.v1.Envelope} Envelope instance
                 */
                Envelope.create = function create(properties) {
                    return new Envelope(properties);
                };
    
                /**
                 * Encodes the specified Envelope message. Does not implicitly {@link grafeas.v1.Envelope.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {grafeas.v1.IEnvelope} message Envelope message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Envelope.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.payload != null && Object.hasOwnProperty.call(message, "payload"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.payload);
                    if (message.payloadType != null && Object.hasOwnProperty.call(message, "payloadType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.payloadType);
                    if (message.signatures != null && message.signatures.length)
                        for (var i = 0; i < message.signatures.length; ++i)
                            $root.grafeas.v1.EnvelopeSignature.encode(message.signatures[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Envelope message, length delimited. Does not implicitly {@link grafeas.v1.Envelope.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {grafeas.v1.IEnvelope} message Envelope message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Envelope.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Envelope message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Envelope} Envelope
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Envelope.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Envelope();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.payload = reader.bytes();
                                break;
                            }
                        case 2: {
                                message.payloadType = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.signatures && message.signatures.length))
                                    message.signatures = [];
                                message.signatures.push($root.grafeas.v1.EnvelopeSignature.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Envelope message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Envelope} Envelope
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Envelope.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Envelope message.
                 * @function verify
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Envelope.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        if (!(message.payload && typeof message.payload.length === "number" || $util.isString(message.payload)))
                            return "payload: buffer expected";
                    if (message.payloadType != null && message.hasOwnProperty("payloadType"))
                        if (!$util.isString(message.payloadType))
                            return "payloadType: string expected";
                    if (message.signatures != null && message.hasOwnProperty("signatures")) {
                        if (!Array.isArray(message.signatures))
                            return "signatures: array expected";
                        for (var i = 0; i < message.signatures.length; ++i) {
                            var error = $root.grafeas.v1.EnvelopeSignature.verify(message.signatures[i]);
                            if (error)
                                return "signatures." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Envelope message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Envelope} Envelope
                 */
                Envelope.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Envelope)
                        return object;
                    var message = new $root.grafeas.v1.Envelope();
                    if (object.payload != null)
                        if (typeof object.payload === "string")
                            $util.base64.decode(object.payload, message.payload = $util.newBuffer($util.base64.length(object.payload)), 0);
                        else if (object.payload.length >= 0)
                            message.payload = object.payload;
                    if (object.payloadType != null)
                        message.payloadType = String(object.payloadType);
                    if (object.signatures) {
                        if (!Array.isArray(object.signatures))
                            throw TypeError(".grafeas.v1.Envelope.signatures: array expected");
                        message.signatures = [];
                        for (var i = 0; i < object.signatures.length; ++i) {
                            if (typeof object.signatures[i] !== "object")
                                throw TypeError(".grafeas.v1.Envelope.signatures: object expected");
                            message.signatures[i] = $root.grafeas.v1.EnvelopeSignature.fromObject(object.signatures[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Envelope message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {grafeas.v1.Envelope} message Envelope
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Envelope.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.signatures = [];
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.payload = "";
                        else {
                            object.payload = [];
                            if (options.bytes !== Array)
                                object.payload = $util.newBuffer(object.payload);
                        }
                        object.payloadType = "";
                    }
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        object.payload = options.bytes === String ? $util.base64.encode(message.payload, 0, message.payload.length) : options.bytes === Array ? Array.prototype.slice.call(message.payload) : message.payload;
                    if (message.payloadType != null && message.hasOwnProperty("payloadType"))
                        object.payloadType = message.payloadType;
                    if (message.signatures && message.signatures.length) {
                        object.signatures = [];
                        for (var j = 0; j < message.signatures.length; ++j)
                            object.signatures[j] = $root.grafeas.v1.EnvelopeSignature.toObject(message.signatures[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Envelope to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Envelope
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Envelope.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Envelope
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Envelope
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Envelope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Envelope";
                };
    
                return Envelope;
            })();
    
            v1.EnvelopeSignature = (function() {
    
                /**
                 * Properties of an EnvelopeSignature.
                 * @memberof grafeas.v1
                 * @interface IEnvelopeSignature
                 * @property {Uint8Array|null} [sig] EnvelopeSignature sig
                 * @property {string|null} [keyid] EnvelopeSignature keyid
                 */
    
                /**
                 * Constructs a new EnvelopeSignature.
                 * @memberof grafeas.v1
                 * @classdesc Represents an EnvelopeSignature.
                 * @implements IEnvelopeSignature
                 * @constructor
                 * @param {grafeas.v1.IEnvelopeSignature=} [properties] Properties to set
                 */
                function EnvelopeSignature(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnvelopeSignature sig.
                 * @member {Uint8Array} sig
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @instance
                 */
                EnvelopeSignature.prototype.sig = $util.newBuffer([]);
    
                /**
                 * EnvelopeSignature keyid.
                 * @member {string} keyid
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @instance
                 */
                EnvelopeSignature.prototype.keyid = "";
    
                /**
                 * Creates a new EnvelopeSignature instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {grafeas.v1.IEnvelopeSignature=} [properties] Properties to set
                 * @returns {grafeas.v1.EnvelopeSignature} EnvelopeSignature instance
                 */
                EnvelopeSignature.create = function create(properties) {
                    return new EnvelopeSignature(properties);
                };
    
                /**
                 * Encodes the specified EnvelopeSignature message. Does not implicitly {@link grafeas.v1.EnvelopeSignature.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {grafeas.v1.IEnvelopeSignature} message EnvelopeSignature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnvelopeSignature.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sig != null && Object.hasOwnProperty.call(message, "sig"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);
                    if (message.keyid != null && Object.hasOwnProperty.call(message, "keyid"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyid);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnvelopeSignature message, length delimited. Does not implicitly {@link grafeas.v1.EnvelopeSignature.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {grafeas.v1.IEnvelopeSignature} message EnvelopeSignature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnvelopeSignature.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnvelopeSignature message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.EnvelopeSignature} EnvelopeSignature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnvelopeSignature.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.EnvelopeSignature();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.sig = reader.bytes();
                                break;
                            }
                        case 2: {
                                message.keyid = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnvelopeSignature message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.EnvelopeSignature} EnvelopeSignature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnvelopeSignature.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnvelopeSignature message.
                 * @function verify
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnvelopeSignature.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sig != null && message.hasOwnProperty("sig"))
                        if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                            return "sig: buffer expected";
                    if (message.keyid != null && message.hasOwnProperty("keyid"))
                        if (!$util.isString(message.keyid))
                            return "keyid: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnvelopeSignature message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.EnvelopeSignature} EnvelopeSignature
                 */
                EnvelopeSignature.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.EnvelopeSignature)
                        return object;
                    var message = new $root.grafeas.v1.EnvelopeSignature();
                    if (object.sig != null)
                        if (typeof object.sig === "string")
                            $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                        else if (object.sig.length >= 0)
                            message.sig = object.sig;
                    if (object.keyid != null)
                        message.keyid = String(object.keyid);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnvelopeSignature message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {grafeas.v1.EnvelopeSignature} message EnvelopeSignature
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnvelopeSignature.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.sig = "";
                        else {
                            object.sig = [];
                            if (options.bytes !== Array)
                                object.sig = $util.newBuffer(object.sig);
                        }
                        object.keyid = "";
                    }
                    if (message.sig != null && message.hasOwnProperty("sig"))
                        object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
                    if (message.keyid != null && message.hasOwnProperty("keyid"))
                        object.keyid = message.keyid;
                    return object;
                };
    
                /**
                 * Converts this EnvelopeSignature to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnvelopeSignature.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnvelopeSignature
                 * @function getTypeUrl
                 * @memberof grafeas.v1.EnvelopeSignature
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnvelopeSignature.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.EnvelopeSignature";
                };
    
                return EnvelopeSignature;
            })();
    
            v1.FileLocation = (function() {
    
                /**
                 * Properties of a FileLocation.
                 * @memberof grafeas.v1
                 * @interface IFileLocation
                 * @property {string|null} [filePath] FileLocation filePath
                 */
    
                /**
                 * Constructs a new FileLocation.
                 * @memberof grafeas.v1
                 * @classdesc Represents a FileLocation.
                 * @implements IFileLocation
                 * @constructor
                 * @param {grafeas.v1.IFileLocation=} [properties] Properties to set
                 */
                function FileLocation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileLocation filePath.
                 * @member {string} filePath
                 * @memberof grafeas.v1.FileLocation
                 * @instance
                 */
                FileLocation.prototype.filePath = "";
    
                /**
                 * Creates a new FileLocation instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {grafeas.v1.IFileLocation=} [properties] Properties to set
                 * @returns {grafeas.v1.FileLocation} FileLocation instance
                 */
                FileLocation.create = function create(properties) {
                    return new FileLocation(properties);
                };
    
                /**
                 * Encodes the specified FileLocation message. Does not implicitly {@link grafeas.v1.FileLocation.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {grafeas.v1.IFileLocation} message FileLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filePath != null && Object.hasOwnProperty.call(message, "filePath"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filePath);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileLocation message, length delimited. Does not implicitly {@link grafeas.v1.FileLocation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {grafeas.v1.IFileLocation} message FileLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileLocation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.FileLocation} FileLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.FileLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.filePath = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileLocation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.FileLocation} FileLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileLocation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileLocation message.
                 * @function verify
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileLocation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.filePath != null && message.hasOwnProperty("filePath"))
                        if (!$util.isString(message.filePath))
                            return "filePath: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileLocation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.FileLocation} FileLocation
                 */
                FileLocation.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.FileLocation)
                        return object;
                    var message = new $root.grafeas.v1.FileLocation();
                    if (object.filePath != null)
                        message.filePath = String(object.filePath);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileLocation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {grafeas.v1.FileLocation} message FileLocation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileLocation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.filePath = "";
                    if (message.filePath != null && message.hasOwnProperty("filePath"))
                        object.filePath = message.filePath;
                    return object;
                };
    
                /**
                 * Converts this FileLocation to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.FileLocation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileLocation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileLocation
                 * @function getTypeUrl
                 * @memberof grafeas.v1.FileLocation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileLocation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.FileLocation";
                };
    
                return FileLocation;
            })();
    
            v1.License = (function() {
    
                /**
                 * Properties of a License.
                 * @memberof grafeas.v1
                 * @interface ILicense
                 * @property {string|null} [expression] License expression
                 * @property {string|null} [comments] License comments
                 */
    
                /**
                 * Constructs a new License.
                 * @memberof grafeas.v1
                 * @classdesc Represents a License.
                 * @implements ILicense
                 * @constructor
                 * @param {grafeas.v1.ILicense=} [properties] Properties to set
                 */
                function License(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * License expression.
                 * @member {string} expression
                 * @memberof grafeas.v1.License
                 * @instance
                 */
                License.prototype.expression = "";
    
                /**
                 * License comments.
                 * @member {string} comments
                 * @memberof grafeas.v1.License
                 * @instance
                 */
                License.prototype.comments = "";
    
                /**
                 * Creates a new License instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {grafeas.v1.ILicense=} [properties] Properties to set
                 * @returns {grafeas.v1.License} License instance
                 */
                License.create = function create(properties) {
                    return new License(properties);
                };
    
                /**
                 * Encodes the specified License message. Does not implicitly {@link grafeas.v1.License.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {grafeas.v1.ILicense} message License message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                License.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.expression);
                    if (message.comments != null && Object.hasOwnProperty.call(message, "comments"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.comments);
                    return writer;
                };
    
                /**
                 * Encodes the specified License message, length delimited. Does not implicitly {@link grafeas.v1.License.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {grafeas.v1.ILicense} message License message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                License.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a License message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.License} License
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                License.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.License();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.expression = reader.string();
                                break;
                            }
                        case 2: {
                                message.comments = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a License message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.License} License
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                License.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a License message.
                 * @function verify
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                License.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    if (message.comments != null && message.hasOwnProperty("comments"))
                        if (!$util.isString(message.comments))
                            return "comments: string expected";
                    return null;
                };
    
                /**
                 * Creates a License message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.License} License
                 */
                License.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.License)
                        return object;
                    var message = new $root.grafeas.v1.License();
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    if (object.comments != null)
                        message.comments = String(object.comments);
                    return message;
                };
    
                /**
                 * Creates a plain object from a License message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {grafeas.v1.License} message License
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                License.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.expression = "";
                        object.comments = "";
                    }
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    if (message.comments != null && message.hasOwnProperty("comments"))
                        object.comments = message.comments;
                    return object;
                };
    
                /**
                 * Converts this License to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.License
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                License.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for License
                 * @function getTypeUrl
                 * @memberof grafeas.v1.License
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                License.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.License";
                };
    
                return License;
            })();
    
            v1.Digest = (function() {
    
                /**
                 * Properties of a Digest.
                 * @memberof grafeas.v1
                 * @interface IDigest
                 * @property {string|null} [algo] Digest algo
                 * @property {Uint8Array|null} [digestBytes] Digest digestBytes
                 */
    
                /**
                 * Constructs a new Digest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Digest.
                 * @implements IDigest
                 * @constructor
                 * @param {grafeas.v1.IDigest=} [properties] Properties to set
                 */
                function Digest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Digest algo.
                 * @member {string} algo
                 * @memberof grafeas.v1.Digest
                 * @instance
                 */
                Digest.prototype.algo = "";
    
                /**
                 * Digest digestBytes.
                 * @member {Uint8Array} digestBytes
                 * @memberof grafeas.v1.Digest
                 * @instance
                 */
                Digest.prototype.digestBytes = $util.newBuffer([]);
    
                /**
                 * Creates a new Digest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {grafeas.v1.IDigest=} [properties] Properties to set
                 * @returns {grafeas.v1.Digest} Digest instance
                 */
                Digest.create = function create(properties) {
                    return new Digest(properties);
                };
    
                /**
                 * Encodes the specified Digest message. Does not implicitly {@link grafeas.v1.Digest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {grafeas.v1.IDigest} message Digest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Digest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.algo != null && Object.hasOwnProperty.call(message, "algo"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.algo);
                    if (message.digestBytes != null && Object.hasOwnProperty.call(message, "digestBytes"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.digestBytes);
                    return writer;
                };
    
                /**
                 * Encodes the specified Digest message, length delimited. Does not implicitly {@link grafeas.v1.Digest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {grafeas.v1.IDigest} message Digest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Digest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Digest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Digest} Digest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Digest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Digest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.algo = reader.string();
                                break;
                            }
                        case 2: {
                                message.digestBytes = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Digest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Digest} Digest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Digest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Digest message.
                 * @function verify
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Digest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.algo != null && message.hasOwnProperty("algo"))
                        if (!$util.isString(message.algo))
                            return "algo: string expected";
                    if (message.digestBytes != null && message.hasOwnProperty("digestBytes"))
                        if (!(message.digestBytes && typeof message.digestBytes.length === "number" || $util.isString(message.digestBytes)))
                            return "digestBytes: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Digest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Digest} Digest
                 */
                Digest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Digest)
                        return object;
                    var message = new $root.grafeas.v1.Digest();
                    if (object.algo != null)
                        message.algo = String(object.algo);
                    if (object.digestBytes != null)
                        if (typeof object.digestBytes === "string")
                            $util.base64.decode(object.digestBytes, message.digestBytes = $util.newBuffer($util.base64.length(object.digestBytes)), 0);
                        else if (object.digestBytes.length >= 0)
                            message.digestBytes = object.digestBytes;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Digest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {grafeas.v1.Digest} message Digest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Digest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.algo = "";
                        if (options.bytes === String)
                            object.digestBytes = "";
                        else {
                            object.digestBytes = [];
                            if (options.bytes !== Array)
                                object.digestBytes = $util.newBuffer(object.digestBytes);
                        }
                    }
                    if (message.algo != null && message.hasOwnProperty("algo"))
                        object.algo = message.algo;
                    if (message.digestBytes != null && message.hasOwnProperty("digestBytes"))
                        object.digestBytes = options.bytes === String ? $util.base64.encode(message.digestBytes, 0, message.digestBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.digestBytes) : message.digestBytes;
                    return object;
                };
    
                /**
                 * Converts this Digest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Digest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Digest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Digest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Digest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Digest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Digest";
                };
    
                return Digest;
            })();
    
            v1.BuildNote = (function() {
    
                /**
                 * Properties of a BuildNote.
                 * @memberof grafeas.v1
                 * @interface IBuildNote
                 * @property {string|null} [builderVersion] BuildNote builderVersion
                 */
    
                /**
                 * Constructs a new BuildNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BuildNote.
                 * @implements IBuildNote
                 * @constructor
                 * @param {grafeas.v1.IBuildNote=} [properties] Properties to set
                 */
                function BuildNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BuildNote builderVersion.
                 * @member {string} builderVersion
                 * @memberof grafeas.v1.BuildNote
                 * @instance
                 */
                BuildNote.prototype.builderVersion = "";
    
                /**
                 * Creates a new BuildNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {grafeas.v1.IBuildNote=} [properties] Properties to set
                 * @returns {grafeas.v1.BuildNote} BuildNote instance
                 */
                BuildNote.create = function create(properties) {
                    return new BuildNote(properties);
                };
    
                /**
                 * Encodes the specified BuildNote message. Does not implicitly {@link grafeas.v1.BuildNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {grafeas.v1.IBuildNote} message BuildNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.builderVersion != null && Object.hasOwnProperty.call(message, "builderVersion"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.builderVersion);
                    return writer;
                };
    
                /**
                 * Encodes the specified BuildNote message, length delimited. Does not implicitly {@link grafeas.v1.BuildNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {grafeas.v1.IBuildNote} message BuildNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BuildNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BuildNote} BuildNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BuildNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.builderVersion = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BuildNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BuildNote} BuildNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BuildNote message.
                 * @function verify
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BuildNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                        if (!$util.isString(message.builderVersion))
                            return "builderVersion: string expected";
                    return null;
                };
    
                /**
                 * Creates a BuildNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BuildNote} BuildNote
                 */
                BuildNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BuildNote)
                        return object;
                    var message = new $root.grafeas.v1.BuildNote();
                    if (object.builderVersion != null)
                        message.builderVersion = String(object.builderVersion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a BuildNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {grafeas.v1.BuildNote} message BuildNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BuildNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.builderVersion = "";
                    if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                        object.builderVersion = message.builderVersion;
                    return object;
                };
    
                /**
                 * Converts this BuildNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BuildNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BuildNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BuildNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BuildNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BuildNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BuildNote";
                };
    
                return BuildNote;
            })();
    
            v1.BuildOccurrence = (function() {
    
                /**
                 * Properties of a BuildOccurrence.
                 * @memberof grafeas.v1
                 * @interface IBuildOccurrence
                 * @property {grafeas.v1.IBuildProvenance|null} [provenance] BuildOccurrence provenance
                 * @property {string|null} [provenanceBytes] BuildOccurrence provenanceBytes
                 * @property {grafeas.v1.IInTotoProvenance|null} [intotoProvenance] BuildOccurrence intotoProvenance
                 * @property {grafeas.v1.IInTotoStatement|null} [intotoStatement] BuildOccurrence intotoStatement
                 */
    
                /**
                 * Constructs a new BuildOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BuildOccurrence.
                 * @implements IBuildOccurrence
                 * @constructor
                 * @param {grafeas.v1.IBuildOccurrence=} [properties] Properties to set
                 */
                function BuildOccurrence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BuildOccurrence provenance.
                 * @member {grafeas.v1.IBuildProvenance|null|undefined} provenance
                 * @memberof grafeas.v1.BuildOccurrence
                 * @instance
                 */
                BuildOccurrence.prototype.provenance = null;
    
                /**
                 * BuildOccurrence provenanceBytes.
                 * @member {string} provenanceBytes
                 * @memberof grafeas.v1.BuildOccurrence
                 * @instance
                 */
                BuildOccurrence.prototype.provenanceBytes = "";
    
                /**
                 * BuildOccurrence intotoProvenance.
                 * @member {grafeas.v1.IInTotoProvenance|null|undefined} intotoProvenance
                 * @memberof grafeas.v1.BuildOccurrence
                 * @instance
                 */
                BuildOccurrence.prototype.intotoProvenance = null;
    
                /**
                 * BuildOccurrence intotoStatement.
                 * @member {grafeas.v1.IInTotoStatement|null|undefined} intotoStatement
                 * @memberof grafeas.v1.BuildOccurrence
                 * @instance
                 */
                BuildOccurrence.prototype.intotoStatement = null;
    
                /**
                 * Creates a new BuildOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {grafeas.v1.IBuildOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.BuildOccurrence} BuildOccurrence instance
                 */
                BuildOccurrence.create = function create(properties) {
                    return new BuildOccurrence(properties);
                };
    
                /**
                 * Encodes the specified BuildOccurrence message. Does not implicitly {@link grafeas.v1.BuildOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {grafeas.v1.IBuildOccurrence} message BuildOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.provenance != null && Object.hasOwnProperty.call(message, "provenance"))
                        $root.grafeas.v1.BuildProvenance.encode(message.provenance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.provenanceBytes != null && Object.hasOwnProperty.call(message, "provenanceBytes"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.provenanceBytes);
                    if (message.intotoProvenance != null && Object.hasOwnProperty.call(message, "intotoProvenance"))
                        $root.grafeas.v1.InTotoProvenance.encode(message.intotoProvenance, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.intotoStatement != null && Object.hasOwnProperty.call(message, "intotoStatement"))
                        $root.grafeas.v1.InTotoStatement.encode(message.intotoStatement, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BuildOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.BuildOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {grafeas.v1.IBuildOccurrence} message BuildOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BuildOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BuildOccurrence} BuildOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BuildOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.provenance = $root.grafeas.v1.BuildProvenance.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.provenanceBytes = reader.string();
                                break;
                            }
                        case 3: {
                                message.intotoProvenance = $root.grafeas.v1.InTotoProvenance.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.intotoStatement = $root.grafeas.v1.InTotoStatement.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BuildOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BuildOccurrence} BuildOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BuildOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BuildOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.provenance != null && message.hasOwnProperty("provenance")) {
                        var error = $root.grafeas.v1.BuildProvenance.verify(message.provenance);
                        if (error)
                            return "provenance." + error;
                    }
                    if (message.provenanceBytes != null && message.hasOwnProperty("provenanceBytes"))
                        if (!$util.isString(message.provenanceBytes))
                            return "provenanceBytes: string expected";
                    if (message.intotoProvenance != null && message.hasOwnProperty("intotoProvenance")) {
                        var error = $root.grafeas.v1.InTotoProvenance.verify(message.intotoProvenance);
                        if (error)
                            return "intotoProvenance." + error;
                    }
                    if (message.intotoStatement != null && message.hasOwnProperty("intotoStatement")) {
                        var error = $root.grafeas.v1.InTotoStatement.verify(message.intotoStatement);
                        if (error)
                            return "intotoStatement." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a BuildOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BuildOccurrence} BuildOccurrence
                 */
                BuildOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BuildOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.BuildOccurrence();
                    if (object.provenance != null) {
                        if (typeof object.provenance !== "object")
                            throw TypeError(".grafeas.v1.BuildOccurrence.provenance: object expected");
                        message.provenance = $root.grafeas.v1.BuildProvenance.fromObject(object.provenance);
                    }
                    if (object.provenanceBytes != null)
                        message.provenanceBytes = String(object.provenanceBytes);
                    if (object.intotoProvenance != null) {
                        if (typeof object.intotoProvenance !== "object")
                            throw TypeError(".grafeas.v1.BuildOccurrence.intotoProvenance: object expected");
                        message.intotoProvenance = $root.grafeas.v1.InTotoProvenance.fromObject(object.intotoProvenance);
                    }
                    if (object.intotoStatement != null) {
                        if (typeof object.intotoStatement !== "object")
                            throw TypeError(".grafeas.v1.BuildOccurrence.intotoStatement: object expected");
                        message.intotoStatement = $root.grafeas.v1.InTotoStatement.fromObject(object.intotoStatement);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BuildOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {grafeas.v1.BuildOccurrence} message BuildOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BuildOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.provenance = null;
                        object.provenanceBytes = "";
                        object.intotoProvenance = null;
                        object.intotoStatement = null;
                    }
                    if (message.provenance != null && message.hasOwnProperty("provenance"))
                        object.provenance = $root.grafeas.v1.BuildProvenance.toObject(message.provenance, options);
                    if (message.provenanceBytes != null && message.hasOwnProperty("provenanceBytes"))
                        object.provenanceBytes = message.provenanceBytes;
                    if (message.intotoProvenance != null && message.hasOwnProperty("intotoProvenance"))
                        object.intotoProvenance = $root.grafeas.v1.InTotoProvenance.toObject(message.intotoProvenance, options);
                    if (message.intotoStatement != null && message.hasOwnProperty("intotoStatement"))
                        object.intotoStatement = $root.grafeas.v1.InTotoStatement.toObject(message.intotoStatement, options);
                    return object;
                };
    
                /**
                 * Converts this BuildOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BuildOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BuildOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BuildOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BuildOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BuildOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BuildOccurrence";
                };
    
                return BuildOccurrence;
            })();
    
            v1.Recipe = (function() {
    
                /**
                 * Properties of a Recipe.
                 * @memberof grafeas.v1
                 * @interface IRecipe
                 * @property {string|null} [type] Recipe type
                 * @property {number|Long|null} [definedInMaterial] Recipe definedInMaterial
                 * @property {string|null} [entryPoint] Recipe entryPoint
                 * @property {Array.<google.protobuf.IAny>|null} ["arguments"] Recipe arguments
                 * @property {Array.<google.protobuf.IAny>|null} [environment] Recipe environment
                 */
    
                /**
                 * Constructs a new Recipe.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Recipe.
                 * @implements IRecipe
                 * @constructor
                 * @param {grafeas.v1.IRecipe=} [properties] Properties to set
                 */
                function Recipe(properties) {
                    this["arguments"] = [];
                    this.environment = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Recipe type.
                 * @member {string} type
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 */
                Recipe.prototype.type = "";
    
                /**
                 * Recipe definedInMaterial.
                 * @member {number|Long} definedInMaterial
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 */
                Recipe.prototype.definedInMaterial = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Recipe entryPoint.
                 * @member {string} entryPoint
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 */
                Recipe.prototype.entryPoint = "";
    
                /**
                 * Recipe arguments.
                 * @member {Array.<google.protobuf.IAny>} arguments
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 */
                Recipe.prototype["arguments"] = $util.emptyArray;
    
                /**
                 * Recipe environment.
                 * @member {Array.<google.protobuf.IAny>} environment
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 */
                Recipe.prototype.environment = $util.emptyArray;
    
                /**
                 * Creates a new Recipe instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {grafeas.v1.IRecipe=} [properties] Properties to set
                 * @returns {grafeas.v1.Recipe} Recipe instance
                 */
                Recipe.create = function create(properties) {
                    return new Recipe(properties);
                };
    
                /**
                 * Encodes the specified Recipe message. Does not implicitly {@link grafeas.v1.Recipe.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {grafeas.v1.IRecipe} message Recipe message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Recipe.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.definedInMaterial != null && Object.hasOwnProperty.call(message, "definedInMaterial"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.definedInMaterial);
                    if (message.entryPoint != null && Object.hasOwnProperty.call(message, "entryPoint"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.entryPoint);
                    if (message["arguments"] != null && message["arguments"].length)
                        for (var i = 0; i < message["arguments"].length; ++i)
                            $root.google.protobuf.Any.encode(message["arguments"][i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.environment != null && message.environment.length)
                        for (var i = 0; i < message.environment.length; ++i)
                            $root.google.protobuf.Any.encode(message.environment[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Recipe message, length delimited. Does not implicitly {@link grafeas.v1.Recipe.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {grafeas.v1.IRecipe} message Recipe message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Recipe.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Recipe message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Recipe} Recipe
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Recipe.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Recipe();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.definedInMaterial = reader.int64();
                                break;
                            }
                        case 3: {
                                message.entryPoint = reader.string();
                                break;
                            }
                        case 4: {
                                if (!(message["arguments"] && message["arguments"].length))
                                    message["arguments"] = [];
                                message["arguments"].push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.environment && message.environment.length))
                                    message.environment = [];
                                message.environment.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Recipe message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Recipe} Recipe
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Recipe.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Recipe message.
                 * @function verify
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Recipe.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.definedInMaterial != null && message.hasOwnProperty("definedInMaterial"))
                        if (!$util.isInteger(message.definedInMaterial) && !(message.definedInMaterial && $util.isInteger(message.definedInMaterial.low) && $util.isInteger(message.definedInMaterial.high)))
                            return "definedInMaterial: integer|Long expected";
                    if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                        if (!$util.isString(message.entryPoint))
                            return "entryPoint: string expected";
                    if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                        if (!Array.isArray(message["arguments"]))
                            return "arguments: array expected";
                        for (var i = 0; i < message["arguments"].length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message["arguments"][i]);
                            if (error)
                                return "arguments." + error;
                        }
                    }
                    if (message.environment != null && message.hasOwnProperty("environment")) {
                        if (!Array.isArray(message.environment))
                            return "environment: array expected";
                        for (var i = 0; i < message.environment.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.environment[i]);
                            if (error)
                                return "environment." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Recipe message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Recipe} Recipe
                 */
                Recipe.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Recipe)
                        return object;
                    var message = new $root.grafeas.v1.Recipe();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.definedInMaterial != null)
                        if ($util.Long)
                            (message.definedInMaterial = $util.Long.fromValue(object.definedInMaterial)).unsigned = false;
                        else if (typeof object.definedInMaterial === "string")
                            message.definedInMaterial = parseInt(object.definedInMaterial, 10);
                        else if (typeof object.definedInMaterial === "number")
                            message.definedInMaterial = object.definedInMaterial;
                        else if (typeof object.definedInMaterial === "object")
                            message.definedInMaterial = new $util.LongBits(object.definedInMaterial.low >>> 0, object.definedInMaterial.high >>> 0).toNumber();
                    if (object.entryPoint != null)
                        message.entryPoint = String(object.entryPoint);
                    if (object["arguments"]) {
                        if (!Array.isArray(object["arguments"]))
                            throw TypeError(".grafeas.v1.Recipe.arguments: array expected");
                        message["arguments"] = [];
                        for (var i = 0; i < object["arguments"].length; ++i) {
                            if (typeof object["arguments"][i] !== "object")
                                throw TypeError(".grafeas.v1.Recipe.arguments: object expected");
                            message["arguments"][i] = $root.google.protobuf.Any.fromObject(object["arguments"][i]);
                        }
                    }
                    if (object.environment) {
                        if (!Array.isArray(object.environment))
                            throw TypeError(".grafeas.v1.Recipe.environment: array expected");
                        message.environment = [];
                        for (var i = 0; i < object.environment.length; ++i) {
                            if (typeof object.environment[i] !== "object")
                                throw TypeError(".grafeas.v1.Recipe.environment: object expected");
                            message.environment[i] = $root.google.protobuf.Any.fromObject(object.environment[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Recipe message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {grafeas.v1.Recipe} message Recipe
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Recipe.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object["arguments"] = [];
                        object.environment = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.definedInMaterial = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.definedInMaterial = options.longs === String ? "0" : 0;
                        object.entryPoint = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.definedInMaterial != null && message.hasOwnProperty("definedInMaterial"))
                        if (typeof message.definedInMaterial === "number")
                            object.definedInMaterial = options.longs === String ? String(message.definedInMaterial) : message.definedInMaterial;
                        else
                            object.definedInMaterial = options.longs === String ? $util.Long.prototype.toString.call(message.definedInMaterial) : options.longs === Number ? new $util.LongBits(message.definedInMaterial.low >>> 0, message.definedInMaterial.high >>> 0).toNumber() : message.definedInMaterial;
                    if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                        object.entryPoint = message.entryPoint;
                    if (message["arguments"] && message["arguments"].length) {
                        object["arguments"] = [];
                        for (var j = 0; j < message["arguments"].length; ++j)
                            object["arguments"][j] = $root.google.protobuf.Any.toObject(message["arguments"][j], options);
                    }
                    if (message.environment && message.environment.length) {
                        object.environment = [];
                        for (var j = 0; j < message.environment.length; ++j)
                            object.environment[j] = $root.google.protobuf.Any.toObject(message.environment[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Recipe to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Recipe
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Recipe.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Recipe
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Recipe
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Recipe.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Recipe";
                };
    
                return Recipe;
            })();
    
            v1.Completeness = (function() {
    
                /**
                 * Properties of a Completeness.
                 * @memberof grafeas.v1
                 * @interface ICompleteness
                 * @property {boolean|null} ["arguments"] Completeness arguments
                 * @property {boolean|null} [environment] Completeness environment
                 * @property {boolean|null} [materials] Completeness materials
                 */
    
                /**
                 * Constructs a new Completeness.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Completeness.
                 * @implements ICompleteness
                 * @constructor
                 * @param {grafeas.v1.ICompleteness=} [properties] Properties to set
                 */
                function Completeness(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Completeness arguments.
                 * @member {boolean} arguments
                 * @memberof grafeas.v1.Completeness
                 * @instance
                 */
                Completeness.prototype["arguments"] = false;
    
                /**
                 * Completeness environment.
                 * @member {boolean} environment
                 * @memberof grafeas.v1.Completeness
                 * @instance
                 */
                Completeness.prototype.environment = false;
    
                /**
                 * Completeness materials.
                 * @member {boolean} materials
                 * @memberof grafeas.v1.Completeness
                 * @instance
                 */
                Completeness.prototype.materials = false;
    
                /**
                 * Creates a new Completeness instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {grafeas.v1.ICompleteness=} [properties] Properties to set
                 * @returns {grafeas.v1.Completeness} Completeness instance
                 */
                Completeness.create = function create(properties) {
                    return new Completeness(properties);
                };
    
                /**
                 * Encodes the specified Completeness message. Does not implicitly {@link grafeas.v1.Completeness.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {grafeas.v1.ICompleteness} message Completeness message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Completeness.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message["arguments"] != null && Object.hasOwnProperty.call(message, "arguments"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message["arguments"]);
                    if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.environment);
                    if (message.materials != null && Object.hasOwnProperty.call(message, "materials"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.materials);
                    return writer;
                };
    
                /**
                 * Encodes the specified Completeness message, length delimited. Does not implicitly {@link grafeas.v1.Completeness.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {grafeas.v1.ICompleteness} message Completeness message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Completeness.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Completeness message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Completeness} Completeness
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Completeness.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Completeness();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message["arguments"] = reader.bool();
                                break;
                            }
                        case 2: {
                                message.environment = reader.bool();
                                break;
                            }
                        case 3: {
                                message.materials = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Completeness message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Completeness} Completeness
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Completeness.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Completeness message.
                 * @function verify
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Completeness.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                        if (typeof message["arguments"] !== "boolean")
                            return "arguments: boolean expected";
                    if (message.environment != null && message.hasOwnProperty("environment"))
                        if (typeof message.environment !== "boolean")
                            return "environment: boolean expected";
                    if (message.materials != null && message.hasOwnProperty("materials"))
                        if (typeof message.materials !== "boolean")
                            return "materials: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Completeness message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Completeness} Completeness
                 */
                Completeness.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Completeness)
                        return object;
                    var message = new $root.grafeas.v1.Completeness();
                    if (object["arguments"] != null)
                        message["arguments"] = Boolean(object["arguments"]);
                    if (object.environment != null)
                        message.environment = Boolean(object.environment);
                    if (object.materials != null)
                        message.materials = Boolean(object.materials);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Completeness message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {grafeas.v1.Completeness} message Completeness
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Completeness.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object["arguments"] = false;
                        object.environment = false;
                        object.materials = false;
                    }
                    if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                        object["arguments"] = message["arguments"];
                    if (message.environment != null && message.hasOwnProperty("environment"))
                        object.environment = message.environment;
                    if (message.materials != null && message.hasOwnProperty("materials"))
                        object.materials = message.materials;
                    return object;
                };
    
                /**
                 * Converts this Completeness to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Completeness
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Completeness.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Completeness
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Completeness
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Completeness.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Completeness";
                };
    
                return Completeness;
            })();
    
            v1.Metadata = (function() {
    
                /**
                 * Properties of a Metadata.
                 * @memberof grafeas.v1
                 * @interface IMetadata
                 * @property {string|null} [buildInvocationId] Metadata buildInvocationId
                 * @property {google.protobuf.ITimestamp|null} [buildStartedOn] Metadata buildStartedOn
                 * @property {google.protobuf.ITimestamp|null} [buildFinishedOn] Metadata buildFinishedOn
                 * @property {grafeas.v1.ICompleteness|null} [completeness] Metadata completeness
                 * @property {boolean|null} [reproducible] Metadata reproducible
                 */
    
                /**
                 * Constructs a new Metadata.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Metadata.
                 * @implements IMetadata
                 * @constructor
                 * @param {grafeas.v1.IMetadata=} [properties] Properties to set
                 */
                function Metadata(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Metadata buildInvocationId.
                 * @member {string} buildInvocationId
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 */
                Metadata.prototype.buildInvocationId = "";
    
                /**
                 * Metadata buildStartedOn.
                 * @member {google.protobuf.ITimestamp|null|undefined} buildStartedOn
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 */
                Metadata.prototype.buildStartedOn = null;
    
                /**
                 * Metadata buildFinishedOn.
                 * @member {google.protobuf.ITimestamp|null|undefined} buildFinishedOn
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 */
                Metadata.prototype.buildFinishedOn = null;
    
                /**
                 * Metadata completeness.
                 * @member {grafeas.v1.ICompleteness|null|undefined} completeness
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 */
                Metadata.prototype.completeness = null;
    
                /**
                 * Metadata reproducible.
                 * @member {boolean} reproducible
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 */
                Metadata.prototype.reproducible = false;
    
                /**
                 * Creates a new Metadata instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {grafeas.v1.IMetadata=} [properties] Properties to set
                 * @returns {grafeas.v1.Metadata} Metadata instance
                 */
                Metadata.create = function create(properties) {
                    return new Metadata(properties);
                };
    
                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link grafeas.v1.Metadata.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {grafeas.v1.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.buildInvocationId != null && Object.hasOwnProperty.call(message, "buildInvocationId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.buildInvocationId);
                    if (message.buildStartedOn != null && Object.hasOwnProperty.call(message, "buildStartedOn"))
                        $root.google.protobuf.Timestamp.encode(message.buildStartedOn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.buildFinishedOn != null && Object.hasOwnProperty.call(message, "buildFinishedOn"))
                        $root.google.protobuf.Timestamp.encode(message.buildFinishedOn, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.completeness != null && Object.hasOwnProperty.call(message, "completeness"))
                        $root.grafeas.v1.Completeness.encode(message.completeness, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reproducible != null && Object.hasOwnProperty.call(message, "reproducible"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reproducible);
                    return writer;
                };
    
                /**
                 * Encodes the specified Metadata message, length delimited. Does not implicitly {@link grafeas.v1.Metadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {grafeas.v1.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Metadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.buildInvocationId = reader.string();
                                break;
                            }
                        case 2: {
                                message.buildStartedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.buildFinishedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.completeness = $root.grafeas.v1.Completeness.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.reproducible = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Metadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Metadata message.
                 * @function verify
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Metadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                        if (!$util.isString(message.buildInvocationId))
                            return "buildInvocationId: string expected";
                    if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.buildStartedOn);
                        if (error)
                            return "buildStartedOn." + error;
                    }
                    if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.buildFinishedOn);
                        if (error)
                            return "buildFinishedOn." + error;
                    }
                    if (message.completeness != null && message.hasOwnProperty("completeness")) {
                        var error = $root.grafeas.v1.Completeness.verify(message.completeness);
                        if (error)
                            return "completeness." + error;
                    }
                    if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                        if (typeof message.reproducible !== "boolean")
                            return "reproducible: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Metadata} Metadata
                 */
                Metadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Metadata)
                        return object;
                    var message = new $root.grafeas.v1.Metadata();
                    if (object.buildInvocationId != null)
                        message.buildInvocationId = String(object.buildInvocationId);
                    if (object.buildStartedOn != null) {
                        if (typeof object.buildStartedOn !== "object")
                            throw TypeError(".grafeas.v1.Metadata.buildStartedOn: object expected");
                        message.buildStartedOn = $root.google.protobuf.Timestamp.fromObject(object.buildStartedOn);
                    }
                    if (object.buildFinishedOn != null) {
                        if (typeof object.buildFinishedOn !== "object")
                            throw TypeError(".grafeas.v1.Metadata.buildFinishedOn: object expected");
                        message.buildFinishedOn = $root.google.protobuf.Timestamp.fromObject(object.buildFinishedOn);
                    }
                    if (object.completeness != null) {
                        if (typeof object.completeness !== "object")
                            throw TypeError(".grafeas.v1.Metadata.completeness: object expected");
                        message.completeness = $root.grafeas.v1.Completeness.fromObject(object.completeness);
                    }
                    if (object.reproducible != null)
                        message.reproducible = Boolean(object.reproducible);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {grafeas.v1.Metadata} message Metadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Metadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.buildInvocationId = "";
                        object.buildStartedOn = null;
                        object.buildFinishedOn = null;
                        object.completeness = null;
                        object.reproducible = false;
                    }
                    if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                        object.buildInvocationId = message.buildInvocationId;
                    if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn"))
                        object.buildStartedOn = $root.google.protobuf.Timestamp.toObject(message.buildStartedOn, options);
                    if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn"))
                        object.buildFinishedOn = $root.google.protobuf.Timestamp.toObject(message.buildFinishedOn, options);
                    if (message.completeness != null && message.hasOwnProperty("completeness"))
                        object.completeness = $root.grafeas.v1.Completeness.toObject(message.completeness, options);
                    if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                        object.reproducible = message.reproducible;
                    return object;
                };
    
                /**
                 * Converts this Metadata to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Metadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Metadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Metadata
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Metadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Metadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Metadata";
                };
    
                return Metadata;
            })();
    
            v1.BuilderConfig = (function() {
    
                /**
                 * Properties of a BuilderConfig.
                 * @memberof grafeas.v1
                 * @interface IBuilderConfig
                 * @property {string|null} [id] BuilderConfig id
                 */
    
                /**
                 * Constructs a new BuilderConfig.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BuilderConfig.
                 * @implements IBuilderConfig
                 * @constructor
                 * @param {grafeas.v1.IBuilderConfig=} [properties] Properties to set
                 */
                function BuilderConfig(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BuilderConfig id.
                 * @member {string} id
                 * @memberof grafeas.v1.BuilderConfig
                 * @instance
                 */
                BuilderConfig.prototype.id = "";
    
                /**
                 * Creates a new BuilderConfig instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {grafeas.v1.IBuilderConfig=} [properties] Properties to set
                 * @returns {grafeas.v1.BuilderConfig} BuilderConfig instance
                 */
                BuilderConfig.create = function create(properties) {
                    return new BuilderConfig(properties);
                };
    
                /**
                 * Encodes the specified BuilderConfig message. Does not implicitly {@link grafeas.v1.BuilderConfig.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {grafeas.v1.IBuilderConfig} message BuilderConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuilderConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    return writer;
                };
    
                /**
                 * Encodes the specified BuilderConfig message, length delimited. Does not implicitly {@link grafeas.v1.BuilderConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {grafeas.v1.IBuilderConfig} message BuilderConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuilderConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BuilderConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BuilderConfig} BuilderConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuilderConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BuilderConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.id = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BuilderConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BuilderConfig} BuilderConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuilderConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BuilderConfig message.
                 * @function verify
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BuilderConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    return null;
                };
    
                /**
                 * Creates a BuilderConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BuilderConfig} BuilderConfig
                 */
                BuilderConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BuilderConfig)
                        return object;
                    var message = new $root.grafeas.v1.BuilderConfig();
                    if (object.id != null)
                        message.id = String(object.id);
                    return message;
                };
    
                /**
                 * Creates a plain object from a BuilderConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {grafeas.v1.BuilderConfig} message BuilderConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BuilderConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.id = "";
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    return object;
                };
    
                /**
                 * Converts this BuilderConfig to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BuilderConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BuilderConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BuilderConfig
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BuilderConfig
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BuilderConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BuilderConfig";
                };
    
                return BuilderConfig;
            })();
    
            v1.InTotoProvenance = (function() {
    
                /**
                 * Properties of an InTotoProvenance.
                 * @memberof grafeas.v1
                 * @interface IInTotoProvenance
                 * @property {grafeas.v1.IBuilderConfig|null} [builderConfig] InTotoProvenance builderConfig
                 * @property {grafeas.v1.IRecipe|null} [recipe] InTotoProvenance recipe
                 * @property {grafeas.v1.IMetadata|null} [metadata] InTotoProvenance metadata
                 * @property {Array.<string>|null} [materials] InTotoProvenance materials
                 */
    
                /**
                 * Constructs a new InTotoProvenance.
                 * @memberof grafeas.v1
                 * @classdesc Represents an InTotoProvenance.
                 * @implements IInTotoProvenance
                 * @constructor
                 * @param {grafeas.v1.IInTotoProvenance=} [properties] Properties to set
                 */
                function InTotoProvenance(properties) {
                    this.materials = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * InTotoProvenance builderConfig.
                 * @member {grafeas.v1.IBuilderConfig|null|undefined} builderConfig
                 * @memberof grafeas.v1.InTotoProvenance
                 * @instance
                 */
                InTotoProvenance.prototype.builderConfig = null;
    
                /**
                 * InTotoProvenance recipe.
                 * @member {grafeas.v1.IRecipe|null|undefined} recipe
                 * @memberof grafeas.v1.InTotoProvenance
                 * @instance
                 */
                InTotoProvenance.prototype.recipe = null;
    
                /**
                 * InTotoProvenance metadata.
                 * @member {grafeas.v1.IMetadata|null|undefined} metadata
                 * @memberof grafeas.v1.InTotoProvenance
                 * @instance
                 */
                InTotoProvenance.prototype.metadata = null;
    
                /**
                 * InTotoProvenance materials.
                 * @member {Array.<string>} materials
                 * @memberof grafeas.v1.InTotoProvenance
                 * @instance
                 */
                InTotoProvenance.prototype.materials = $util.emptyArray;
    
                /**
                 * Creates a new InTotoProvenance instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {grafeas.v1.IInTotoProvenance=} [properties] Properties to set
                 * @returns {grafeas.v1.InTotoProvenance} InTotoProvenance instance
                 */
                InTotoProvenance.create = function create(properties) {
                    return new InTotoProvenance(properties);
                };
    
                /**
                 * Encodes the specified InTotoProvenance message. Does not implicitly {@link grafeas.v1.InTotoProvenance.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {grafeas.v1.IInTotoProvenance} message InTotoProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InTotoProvenance.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.builderConfig != null && Object.hasOwnProperty.call(message, "builderConfig"))
                        $root.grafeas.v1.BuilderConfig.encode(message.builderConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.recipe != null && Object.hasOwnProperty.call(message, "recipe"))
                        $root.grafeas.v1.Recipe.encode(message.recipe, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.grafeas.v1.Metadata.encode(message.metadata, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.materials != null && message.materials.length)
                        for (var i = 0; i < message.materials.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.materials[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified InTotoProvenance message, length delimited. Does not implicitly {@link grafeas.v1.InTotoProvenance.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {grafeas.v1.IInTotoProvenance} message InTotoProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InTotoProvenance.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an InTotoProvenance message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.InTotoProvenance} InTotoProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InTotoProvenance.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.InTotoProvenance();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.builderConfig = $root.grafeas.v1.BuilderConfig.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.recipe = $root.grafeas.v1.Recipe.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.metadata = $root.grafeas.v1.Metadata.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.materials && message.materials.length))
                                    message.materials = [];
                                message.materials.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an InTotoProvenance message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.InTotoProvenance} InTotoProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InTotoProvenance.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an InTotoProvenance message.
                 * @function verify
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                InTotoProvenance.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.builderConfig != null && message.hasOwnProperty("builderConfig")) {
                        var error = $root.grafeas.v1.BuilderConfig.verify(message.builderConfig);
                        if (error)
                            return "builderConfig." + error;
                    }
                    if (message.recipe != null && message.hasOwnProperty("recipe")) {
                        var error = $root.grafeas.v1.Recipe.verify(message.recipe);
                        if (error)
                            return "recipe." + error;
                    }
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.grafeas.v1.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.materials != null && message.hasOwnProperty("materials")) {
                        if (!Array.isArray(message.materials))
                            return "materials: array expected";
                        for (var i = 0; i < message.materials.length; ++i)
                            if (!$util.isString(message.materials[i]))
                                return "materials: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an InTotoProvenance message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.InTotoProvenance} InTotoProvenance
                 */
                InTotoProvenance.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.InTotoProvenance)
                        return object;
                    var message = new $root.grafeas.v1.InTotoProvenance();
                    if (object.builderConfig != null) {
                        if (typeof object.builderConfig !== "object")
                            throw TypeError(".grafeas.v1.InTotoProvenance.builderConfig: object expected");
                        message.builderConfig = $root.grafeas.v1.BuilderConfig.fromObject(object.builderConfig);
                    }
                    if (object.recipe != null) {
                        if (typeof object.recipe !== "object")
                            throw TypeError(".grafeas.v1.InTotoProvenance.recipe: object expected");
                        message.recipe = $root.grafeas.v1.Recipe.fromObject(object.recipe);
                    }
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".grafeas.v1.InTotoProvenance.metadata: object expected");
                        message.metadata = $root.grafeas.v1.Metadata.fromObject(object.metadata);
                    }
                    if (object.materials) {
                        if (!Array.isArray(object.materials))
                            throw TypeError(".grafeas.v1.InTotoProvenance.materials: array expected");
                        message.materials = [];
                        for (var i = 0; i < object.materials.length; ++i)
                            message.materials[i] = String(object.materials[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an InTotoProvenance message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {grafeas.v1.InTotoProvenance} message InTotoProvenance
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                InTotoProvenance.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.materials = [];
                    if (options.defaults) {
                        object.builderConfig = null;
                        object.recipe = null;
                        object.metadata = null;
                    }
                    if (message.builderConfig != null && message.hasOwnProperty("builderConfig"))
                        object.builderConfig = $root.grafeas.v1.BuilderConfig.toObject(message.builderConfig, options);
                    if (message.recipe != null && message.hasOwnProperty("recipe"))
                        object.recipe = $root.grafeas.v1.Recipe.toObject(message.recipe, options);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.grafeas.v1.Metadata.toObject(message.metadata, options);
                    if (message.materials && message.materials.length) {
                        object.materials = [];
                        for (var j = 0; j < message.materials.length; ++j)
                            object.materials[j] = message.materials[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this InTotoProvenance to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.InTotoProvenance
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                InTotoProvenance.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for InTotoProvenance
                 * @function getTypeUrl
                 * @memberof grafeas.v1.InTotoProvenance
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                InTotoProvenance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.InTotoProvenance";
                };
    
                return InTotoProvenance;
            })();
    
            v1.InTotoStatement = (function() {
    
                /**
                 * Properties of an InTotoStatement.
                 * @memberof grafeas.v1
                 * @interface IInTotoStatement
                 * @property {string|null} [type] InTotoStatement type
                 * @property {Array.<grafeas.v1.ISubject>|null} [subject] InTotoStatement subject
                 * @property {string|null} [predicateType] InTotoStatement predicateType
                 * @property {grafeas.v1.IInTotoProvenance|null} [provenance] InTotoStatement provenance
                 * @property {grafeas.v1.ISlsaProvenance|null} [slsaProvenance] InTotoStatement slsaProvenance
                 * @property {grafeas.v1.ISlsaProvenanceZeroTwo|null} [slsaProvenanceZeroTwo] InTotoStatement slsaProvenanceZeroTwo
                 */
    
                /**
                 * Constructs a new InTotoStatement.
                 * @memberof grafeas.v1
                 * @classdesc Represents an InTotoStatement.
                 * @implements IInTotoStatement
                 * @constructor
                 * @param {grafeas.v1.IInTotoStatement=} [properties] Properties to set
                 */
                function InTotoStatement(properties) {
                    this.subject = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * InTotoStatement type.
                 * @member {string} type
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.type = "";
    
                /**
                 * InTotoStatement subject.
                 * @member {Array.<grafeas.v1.ISubject>} subject
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.subject = $util.emptyArray;
    
                /**
                 * InTotoStatement predicateType.
                 * @member {string} predicateType
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.predicateType = "";
    
                /**
                 * InTotoStatement provenance.
                 * @member {grafeas.v1.IInTotoProvenance|null|undefined} provenance
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.provenance = null;
    
                /**
                 * InTotoStatement slsaProvenance.
                 * @member {grafeas.v1.ISlsaProvenance|null|undefined} slsaProvenance
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.slsaProvenance = null;
    
                /**
                 * InTotoStatement slsaProvenanceZeroTwo.
                 * @member {grafeas.v1.ISlsaProvenanceZeroTwo|null|undefined} slsaProvenanceZeroTwo
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                InTotoStatement.prototype.slsaProvenanceZeroTwo = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * InTotoStatement predicate.
                 * @member {"provenance"|"slsaProvenance"|"slsaProvenanceZeroTwo"|undefined} predicate
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 */
                Object.defineProperty(InTotoStatement.prototype, "predicate", {
                    get: $util.oneOfGetter($oneOfFields = ["provenance", "slsaProvenance", "slsaProvenanceZeroTwo"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new InTotoStatement instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {grafeas.v1.IInTotoStatement=} [properties] Properties to set
                 * @returns {grafeas.v1.InTotoStatement} InTotoStatement instance
                 */
                InTotoStatement.create = function create(properties) {
                    return new InTotoStatement(properties);
                };
    
                /**
                 * Encodes the specified InTotoStatement message. Does not implicitly {@link grafeas.v1.InTotoStatement.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {grafeas.v1.IInTotoStatement} message InTotoStatement message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InTotoStatement.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.subject != null && message.subject.length)
                        for (var i = 0; i < message.subject.length; ++i)
                            $root.grafeas.v1.Subject.encode(message.subject[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.predicateType != null && Object.hasOwnProperty.call(message, "predicateType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.predicateType);
                    if (message.provenance != null && Object.hasOwnProperty.call(message, "provenance"))
                        $root.grafeas.v1.InTotoProvenance.encode(message.provenance, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.slsaProvenance != null && Object.hasOwnProperty.call(message, "slsaProvenance"))
                        $root.grafeas.v1.SlsaProvenance.encode(message.slsaProvenance, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.slsaProvenanceZeroTwo != null && Object.hasOwnProperty.call(message, "slsaProvenanceZeroTwo"))
                        $root.grafeas.v1.SlsaProvenanceZeroTwo.encode(message.slsaProvenanceZeroTwo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified InTotoStatement message, length delimited. Does not implicitly {@link grafeas.v1.InTotoStatement.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {grafeas.v1.IInTotoStatement} message InTotoStatement message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                InTotoStatement.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an InTotoStatement message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.InTotoStatement} InTotoStatement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InTotoStatement.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.InTotoStatement();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.subject && message.subject.length))
                                    message.subject = [];
                                message.subject.push($root.grafeas.v1.Subject.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.predicateType = reader.string();
                                break;
                            }
                        case 4: {
                                message.provenance = $root.grafeas.v1.InTotoProvenance.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.slsaProvenance = $root.grafeas.v1.SlsaProvenance.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.slsaProvenanceZeroTwo = $root.grafeas.v1.SlsaProvenanceZeroTwo.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an InTotoStatement message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.InTotoStatement} InTotoStatement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                InTotoStatement.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an InTotoStatement message.
                 * @function verify
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                InTotoStatement.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.subject != null && message.hasOwnProperty("subject")) {
                        if (!Array.isArray(message.subject))
                            return "subject: array expected";
                        for (var i = 0; i < message.subject.length; ++i) {
                            var error = $root.grafeas.v1.Subject.verify(message.subject[i]);
                            if (error)
                                return "subject." + error;
                        }
                    }
                    if (message.predicateType != null && message.hasOwnProperty("predicateType"))
                        if (!$util.isString(message.predicateType))
                            return "predicateType: string expected";
                    if (message.provenance != null && message.hasOwnProperty("provenance")) {
                        properties.predicate = 1;
                        {
                            var error = $root.grafeas.v1.InTotoProvenance.verify(message.provenance);
                            if (error)
                                return "provenance." + error;
                        }
                    }
                    if (message.slsaProvenance != null && message.hasOwnProperty("slsaProvenance")) {
                        if (properties.predicate === 1)
                            return "predicate: multiple values";
                        properties.predicate = 1;
                        {
                            var error = $root.grafeas.v1.SlsaProvenance.verify(message.slsaProvenance);
                            if (error)
                                return "slsaProvenance." + error;
                        }
                    }
                    if (message.slsaProvenanceZeroTwo != null && message.hasOwnProperty("slsaProvenanceZeroTwo")) {
                        if (properties.predicate === 1)
                            return "predicate: multiple values";
                        properties.predicate = 1;
                        {
                            var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.verify(message.slsaProvenanceZeroTwo);
                            if (error)
                                return "slsaProvenanceZeroTwo." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an InTotoStatement message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.InTotoStatement} InTotoStatement
                 */
                InTotoStatement.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.InTotoStatement)
                        return object;
                    var message = new $root.grafeas.v1.InTotoStatement();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.subject) {
                        if (!Array.isArray(object.subject))
                            throw TypeError(".grafeas.v1.InTotoStatement.subject: array expected");
                        message.subject = [];
                        for (var i = 0; i < object.subject.length; ++i) {
                            if (typeof object.subject[i] !== "object")
                                throw TypeError(".grafeas.v1.InTotoStatement.subject: object expected");
                            message.subject[i] = $root.grafeas.v1.Subject.fromObject(object.subject[i]);
                        }
                    }
                    if (object.predicateType != null)
                        message.predicateType = String(object.predicateType);
                    if (object.provenance != null) {
                        if (typeof object.provenance !== "object")
                            throw TypeError(".grafeas.v1.InTotoStatement.provenance: object expected");
                        message.provenance = $root.grafeas.v1.InTotoProvenance.fromObject(object.provenance);
                    }
                    if (object.slsaProvenance != null) {
                        if (typeof object.slsaProvenance !== "object")
                            throw TypeError(".grafeas.v1.InTotoStatement.slsaProvenance: object expected");
                        message.slsaProvenance = $root.grafeas.v1.SlsaProvenance.fromObject(object.slsaProvenance);
                    }
                    if (object.slsaProvenanceZeroTwo != null) {
                        if (typeof object.slsaProvenanceZeroTwo !== "object")
                            throw TypeError(".grafeas.v1.InTotoStatement.slsaProvenanceZeroTwo: object expected");
                        message.slsaProvenanceZeroTwo = $root.grafeas.v1.SlsaProvenanceZeroTwo.fromObject(object.slsaProvenanceZeroTwo);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an InTotoStatement message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {grafeas.v1.InTotoStatement} message InTotoStatement
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                InTotoStatement.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.subject = [];
                    if (options.defaults) {
                        object.type = "";
                        object.predicateType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.subject && message.subject.length) {
                        object.subject = [];
                        for (var j = 0; j < message.subject.length; ++j)
                            object.subject[j] = $root.grafeas.v1.Subject.toObject(message.subject[j], options);
                    }
                    if (message.predicateType != null && message.hasOwnProperty("predicateType"))
                        object.predicateType = message.predicateType;
                    if (message.provenance != null && message.hasOwnProperty("provenance")) {
                        object.provenance = $root.grafeas.v1.InTotoProvenance.toObject(message.provenance, options);
                        if (options.oneofs)
                            object.predicate = "provenance";
                    }
                    if (message.slsaProvenance != null && message.hasOwnProperty("slsaProvenance")) {
                        object.slsaProvenance = $root.grafeas.v1.SlsaProvenance.toObject(message.slsaProvenance, options);
                        if (options.oneofs)
                            object.predicate = "slsaProvenance";
                    }
                    if (message.slsaProvenanceZeroTwo != null && message.hasOwnProperty("slsaProvenanceZeroTwo")) {
                        object.slsaProvenanceZeroTwo = $root.grafeas.v1.SlsaProvenanceZeroTwo.toObject(message.slsaProvenanceZeroTwo, options);
                        if (options.oneofs)
                            object.predicate = "slsaProvenanceZeroTwo";
                    }
                    return object;
                };
    
                /**
                 * Converts this InTotoStatement to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.InTotoStatement
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                InTotoStatement.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for InTotoStatement
                 * @function getTypeUrl
                 * @memberof grafeas.v1.InTotoStatement
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                InTotoStatement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.InTotoStatement";
                };
    
                return InTotoStatement;
            })();
    
            v1.Subject = (function() {
    
                /**
                 * Properties of a Subject.
                 * @memberof grafeas.v1
                 * @interface ISubject
                 * @property {string|null} [name] Subject name
                 * @property {Object.<string,string>|null} [digest] Subject digest
                 */
    
                /**
                 * Constructs a new Subject.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Subject.
                 * @implements ISubject
                 * @constructor
                 * @param {grafeas.v1.ISubject=} [properties] Properties to set
                 */
                function Subject(properties) {
                    this.digest = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Subject name.
                 * @member {string} name
                 * @memberof grafeas.v1.Subject
                 * @instance
                 */
                Subject.prototype.name = "";
    
                /**
                 * Subject digest.
                 * @member {Object.<string,string>} digest
                 * @memberof grafeas.v1.Subject
                 * @instance
                 */
                Subject.prototype.digest = $util.emptyObject;
    
                /**
                 * Creates a new Subject instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {grafeas.v1.ISubject=} [properties] Properties to set
                 * @returns {grafeas.v1.Subject} Subject instance
                 */
                Subject.create = function create(properties) {
                    return new Subject(properties);
                };
    
                /**
                 * Encodes the specified Subject message. Does not implicitly {@link grafeas.v1.Subject.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {grafeas.v1.ISubject} message Subject message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Subject.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.digest != null && Object.hasOwnProperty.call(message, "digest"))
                        for (var keys = Object.keys(message.digest), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.digest[keys[i]]).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Subject message, length delimited. Does not implicitly {@link grafeas.v1.Subject.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {grafeas.v1.ISubject} message Subject message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Subject.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Subject message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Subject} Subject
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Subject.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Subject(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.digest === $util.emptyObject)
                                    message.digest = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.digest[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Subject message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Subject} Subject
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Subject.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Subject message.
                 * @function verify
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Subject.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.digest != null && message.hasOwnProperty("digest")) {
                        if (!$util.isObject(message.digest))
                            return "digest: object expected";
                        var key = Object.keys(message.digest);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.digest[key[i]]))
                                return "digest: string{k:string} expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a Subject message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Subject} Subject
                 */
                Subject.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Subject)
                        return object;
                    var message = new $root.grafeas.v1.Subject();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.digest) {
                        if (typeof object.digest !== "object")
                            throw TypeError(".grafeas.v1.Subject.digest: object expected");
                        message.digest = {};
                        for (var keys = Object.keys(object.digest), i = 0; i < keys.length; ++i)
                            message.digest[keys[i]] = String(object.digest[keys[i]]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Subject message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {grafeas.v1.Subject} message Subject
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Subject.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.digest = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    var keys2;
                    if (message.digest && (keys2 = Object.keys(message.digest)).length) {
                        object.digest = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.digest[keys2[j]] = message.digest[keys2[j]];
                    }
                    return object;
                };
    
                /**
                 * Converts this Subject to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Subject
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Subject.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Subject
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Subject
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Subject.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Subject";
                };
    
                return Subject;
            })();
    
            v1.SlsaProvenance = (function() {
    
                /**
                 * Properties of a SlsaProvenance.
                 * @memberof grafeas.v1
                 * @interface ISlsaProvenance
                 * @property {grafeas.v1.SlsaProvenance.ISlsaBuilder|null} [builder] SlsaProvenance builder
                 * @property {grafeas.v1.SlsaProvenance.ISlsaRecipe|null} [recipe] SlsaProvenance recipe
                 * @property {grafeas.v1.SlsaProvenance.ISlsaMetadata|null} [metadata] SlsaProvenance metadata
                 * @property {Array.<grafeas.v1.SlsaProvenance.IMaterial>|null} [materials] SlsaProvenance materials
                 */
    
                /**
                 * Constructs a new SlsaProvenance.
                 * @memberof grafeas.v1
                 * @classdesc Represents a SlsaProvenance.
                 * @implements ISlsaProvenance
                 * @constructor
                 * @param {grafeas.v1.ISlsaProvenance=} [properties] Properties to set
                 */
                function SlsaProvenance(properties) {
                    this.materials = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SlsaProvenance builder.
                 * @member {grafeas.v1.SlsaProvenance.ISlsaBuilder|null|undefined} builder
                 * @memberof grafeas.v1.SlsaProvenance
                 * @instance
                 */
                SlsaProvenance.prototype.builder = null;
    
                /**
                 * SlsaProvenance recipe.
                 * @member {grafeas.v1.SlsaProvenance.ISlsaRecipe|null|undefined} recipe
                 * @memberof grafeas.v1.SlsaProvenance
                 * @instance
                 */
                SlsaProvenance.prototype.recipe = null;
    
                /**
                 * SlsaProvenance metadata.
                 * @member {grafeas.v1.SlsaProvenance.ISlsaMetadata|null|undefined} metadata
                 * @memberof grafeas.v1.SlsaProvenance
                 * @instance
                 */
                SlsaProvenance.prototype.metadata = null;
    
                /**
                 * SlsaProvenance materials.
                 * @member {Array.<grafeas.v1.SlsaProvenance.IMaterial>} materials
                 * @memberof grafeas.v1.SlsaProvenance
                 * @instance
                 */
                SlsaProvenance.prototype.materials = $util.emptyArray;
    
                /**
                 * Creates a new SlsaProvenance instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {grafeas.v1.ISlsaProvenance=} [properties] Properties to set
                 * @returns {grafeas.v1.SlsaProvenance} SlsaProvenance instance
                 */
                SlsaProvenance.create = function create(properties) {
                    return new SlsaProvenance(properties);
                };
    
                /**
                 * Encodes the specified SlsaProvenance message. Does not implicitly {@link grafeas.v1.SlsaProvenance.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {grafeas.v1.ISlsaProvenance} message SlsaProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SlsaProvenance.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.builder != null && Object.hasOwnProperty.call(message, "builder"))
                        $root.grafeas.v1.SlsaProvenance.SlsaBuilder.encode(message.builder, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.recipe != null && Object.hasOwnProperty.call(message, "recipe"))
                        $root.grafeas.v1.SlsaProvenance.SlsaRecipe.encode(message.recipe, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.grafeas.v1.SlsaProvenance.SlsaMetadata.encode(message.metadata, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.materials != null && message.materials.length)
                        for (var i = 0; i < message.materials.length; ++i)
                            $root.grafeas.v1.SlsaProvenance.Material.encode(message.materials[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SlsaProvenance message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {grafeas.v1.ISlsaProvenance} message SlsaProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SlsaProvenance.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SlsaProvenance message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.SlsaProvenance} SlsaProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SlsaProvenance.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.builder = $root.grafeas.v1.SlsaProvenance.SlsaBuilder.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.recipe = $root.grafeas.v1.SlsaProvenance.SlsaRecipe.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.metadata = $root.grafeas.v1.SlsaProvenance.SlsaMetadata.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.materials && message.materials.length))
                                    message.materials = [];
                                message.materials.push($root.grafeas.v1.SlsaProvenance.Material.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SlsaProvenance message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.SlsaProvenance} SlsaProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SlsaProvenance.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SlsaProvenance message.
                 * @function verify
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SlsaProvenance.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.builder != null && message.hasOwnProperty("builder")) {
                        var error = $root.grafeas.v1.SlsaProvenance.SlsaBuilder.verify(message.builder);
                        if (error)
                            return "builder." + error;
                    }
                    if (message.recipe != null && message.hasOwnProperty("recipe")) {
                        var error = $root.grafeas.v1.SlsaProvenance.SlsaRecipe.verify(message.recipe);
                        if (error)
                            return "recipe." + error;
                    }
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.grafeas.v1.SlsaProvenance.SlsaMetadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.materials != null && message.hasOwnProperty("materials")) {
                        if (!Array.isArray(message.materials))
                            return "materials: array expected";
                        for (var i = 0; i < message.materials.length; ++i) {
                            var error = $root.grafeas.v1.SlsaProvenance.Material.verify(message.materials[i]);
                            if (error)
                                return "materials." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SlsaProvenance message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.SlsaProvenance} SlsaProvenance
                 */
                SlsaProvenance.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.SlsaProvenance)
                        return object;
                    var message = new $root.grafeas.v1.SlsaProvenance();
                    if (object.builder != null) {
                        if (typeof object.builder !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenance.builder: object expected");
                        message.builder = $root.grafeas.v1.SlsaProvenance.SlsaBuilder.fromObject(object.builder);
                    }
                    if (object.recipe != null) {
                        if (typeof object.recipe !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenance.recipe: object expected");
                        message.recipe = $root.grafeas.v1.SlsaProvenance.SlsaRecipe.fromObject(object.recipe);
                    }
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenance.metadata: object expected");
                        message.metadata = $root.grafeas.v1.SlsaProvenance.SlsaMetadata.fromObject(object.metadata);
                    }
                    if (object.materials) {
                        if (!Array.isArray(object.materials))
                            throw TypeError(".grafeas.v1.SlsaProvenance.materials: array expected");
                        message.materials = [];
                        for (var i = 0; i < object.materials.length; ++i) {
                            if (typeof object.materials[i] !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.materials: object expected");
                            message.materials[i] = $root.grafeas.v1.SlsaProvenance.Material.fromObject(object.materials[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SlsaProvenance message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {grafeas.v1.SlsaProvenance} message SlsaProvenance
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SlsaProvenance.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.materials = [];
                    if (options.defaults) {
                        object.builder = null;
                        object.recipe = null;
                        object.metadata = null;
                    }
                    if (message.builder != null && message.hasOwnProperty("builder"))
                        object.builder = $root.grafeas.v1.SlsaProvenance.SlsaBuilder.toObject(message.builder, options);
                    if (message.recipe != null && message.hasOwnProperty("recipe"))
                        object.recipe = $root.grafeas.v1.SlsaProvenance.SlsaRecipe.toObject(message.recipe, options);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.grafeas.v1.SlsaProvenance.SlsaMetadata.toObject(message.metadata, options);
                    if (message.materials && message.materials.length) {
                        object.materials = [];
                        for (var j = 0; j < message.materials.length; ++j)
                            object.materials[j] = $root.grafeas.v1.SlsaProvenance.Material.toObject(message.materials[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SlsaProvenance to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.SlsaProvenance
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SlsaProvenance.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SlsaProvenance
                 * @function getTypeUrl
                 * @memberof grafeas.v1.SlsaProvenance
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SlsaProvenance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.SlsaProvenance";
                };
    
                SlsaProvenance.SlsaRecipe = (function() {
    
                    /**
                     * Properties of a SlsaRecipe.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @interface ISlsaRecipe
                     * @property {string|null} [type] SlsaRecipe type
                     * @property {number|Long|null} [definedInMaterial] SlsaRecipe definedInMaterial
                     * @property {string|null} [entryPoint] SlsaRecipe entryPoint
                     * @property {google.protobuf.IAny|null} ["arguments"] SlsaRecipe arguments
                     * @property {google.protobuf.IAny|null} [environment] SlsaRecipe environment
                     */
    
                    /**
                     * Constructs a new SlsaRecipe.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @classdesc Represents a SlsaRecipe.
                     * @implements ISlsaRecipe
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenance.ISlsaRecipe=} [properties] Properties to set
                     */
                    function SlsaRecipe(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaRecipe type.
                     * @member {string} type
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     */
                    SlsaRecipe.prototype.type = "";
    
                    /**
                     * SlsaRecipe definedInMaterial.
                     * @member {number|Long} definedInMaterial
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     */
                    SlsaRecipe.prototype.definedInMaterial = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * SlsaRecipe entryPoint.
                     * @member {string} entryPoint
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     */
                    SlsaRecipe.prototype.entryPoint = "";
    
                    /**
                     * SlsaRecipe arguments.
                     * @member {google.protobuf.IAny|null|undefined} arguments
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     */
                    SlsaRecipe.prototype["arguments"] = null;
    
                    /**
                     * SlsaRecipe environment.
                     * @member {google.protobuf.IAny|null|undefined} environment
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     */
                    SlsaRecipe.prototype.environment = null;
    
                    /**
                     * Creates a new SlsaRecipe instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaRecipe=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenance.SlsaRecipe} SlsaRecipe instance
                     */
                    SlsaRecipe.create = function create(properties) {
                        return new SlsaRecipe(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaRecipe message. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaRecipe.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaRecipe} message SlsaRecipe message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaRecipe.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                        if (message.definedInMaterial != null && Object.hasOwnProperty.call(message, "definedInMaterial"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.definedInMaterial);
                        if (message.entryPoint != null && Object.hasOwnProperty.call(message, "entryPoint"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.entryPoint);
                        if (message["arguments"] != null && Object.hasOwnProperty.call(message, "arguments"))
                            $root.google.protobuf.Any.encode(message["arguments"], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                            $root.google.protobuf.Any.encode(message.environment, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaRecipe message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaRecipe.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaRecipe} message SlsaRecipe message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaRecipe.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaRecipe message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenance.SlsaRecipe} SlsaRecipe
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaRecipe.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance.SlsaRecipe();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.type = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.definedInMaterial = reader.int64();
                                    break;
                                }
                            case 3: {
                                    message.entryPoint = reader.string();
                                    break;
                                }
                            case 4: {
                                    message["arguments"] = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.environment = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaRecipe message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenance.SlsaRecipe} SlsaRecipe
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaRecipe.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaRecipe message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaRecipe.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.definedInMaterial != null && message.hasOwnProperty("definedInMaterial"))
                            if (!$util.isInteger(message.definedInMaterial) && !(message.definedInMaterial && $util.isInteger(message.definedInMaterial.low) && $util.isInteger(message.definedInMaterial.high)))
                                return "definedInMaterial: integer|Long expected";
                        if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                            if (!$util.isString(message.entryPoint))
                                return "entryPoint: string expected";
                        if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                            var error = $root.google.protobuf.Any.verify(message["arguments"]);
                            if (error)
                                return "arguments." + error;
                        }
                        if (message.environment != null && message.hasOwnProperty("environment")) {
                            var error = $root.google.protobuf.Any.verify(message.environment);
                            if (error)
                                return "environment." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SlsaRecipe message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenance.SlsaRecipe} SlsaRecipe
                     */
                    SlsaRecipe.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenance.SlsaRecipe)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenance.SlsaRecipe();
                        if (object.type != null)
                            message.type = String(object.type);
                        if (object.definedInMaterial != null)
                            if ($util.Long)
                                (message.definedInMaterial = $util.Long.fromValue(object.definedInMaterial)).unsigned = false;
                            else if (typeof object.definedInMaterial === "string")
                                message.definedInMaterial = parseInt(object.definedInMaterial, 10);
                            else if (typeof object.definedInMaterial === "number")
                                message.definedInMaterial = object.definedInMaterial;
                            else if (typeof object.definedInMaterial === "object")
                                message.definedInMaterial = new $util.LongBits(object.definedInMaterial.low >>> 0, object.definedInMaterial.high >>> 0).toNumber();
                        if (object.entryPoint != null)
                            message.entryPoint = String(object.entryPoint);
                        if (object["arguments"] != null) {
                            if (typeof object["arguments"] !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.SlsaRecipe.arguments: object expected");
                            message["arguments"] = $root.google.protobuf.Any.fromObject(object["arguments"]);
                        }
                        if (object.environment != null) {
                            if (typeof object.environment !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.SlsaRecipe.environment: object expected");
                            message.environment = $root.google.protobuf.Any.fromObject(object.environment);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaRecipe message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.SlsaRecipe} message SlsaRecipe
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaRecipe.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.definedInMaterial = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.definedInMaterial = options.longs === String ? "0" : 0;
                            object.entryPoint = "";
                            object["arguments"] = null;
                            object.environment = null;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.definedInMaterial != null && message.hasOwnProperty("definedInMaterial"))
                            if (typeof message.definedInMaterial === "number")
                                object.definedInMaterial = options.longs === String ? String(message.definedInMaterial) : message.definedInMaterial;
                            else
                                object.definedInMaterial = options.longs === String ? $util.Long.prototype.toString.call(message.definedInMaterial) : options.longs === Number ? new $util.LongBits(message.definedInMaterial.low >>> 0, message.definedInMaterial.high >>> 0).toNumber() : message.definedInMaterial;
                        if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                            object.entryPoint = message.entryPoint;
                        if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                            object["arguments"] = $root.google.protobuf.Any.toObject(message["arguments"], options);
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            object.environment = $root.google.protobuf.Any.toObject(message.environment, options);
                        return object;
                    };
    
                    /**
                     * Converts this SlsaRecipe to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaRecipe.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaRecipe
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenance.SlsaRecipe
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaRecipe.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenance.SlsaRecipe";
                    };
    
                    return SlsaRecipe;
                })();
    
                SlsaProvenance.SlsaCompleteness = (function() {
    
                    /**
                     * Properties of a SlsaCompleteness.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @interface ISlsaCompleteness
                     * @property {boolean|null} ["arguments"] SlsaCompleteness arguments
                     * @property {boolean|null} [environment] SlsaCompleteness environment
                     * @property {boolean|null} [materials] SlsaCompleteness materials
                     */
    
                    /**
                     * Constructs a new SlsaCompleteness.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @classdesc Represents a SlsaCompleteness.
                     * @implements ISlsaCompleteness
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenance.ISlsaCompleteness=} [properties] Properties to set
                     */
                    function SlsaCompleteness(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaCompleteness arguments.
                     * @member {boolean} arguments
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype["arguments"] = false;
    
                    /**
                     * SlsaCompleteness environment.
                     * @member {boolean} environment
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype.environment = false;
    
                    /**
                     * SlsaCompleteness materials.
                     * @member {boolean} materials
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype.materials = false;
    
                    /**
                     * Creates a new SlsaCompleteness instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaCompleteness=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenance.SlsaCompleteness} SlsaCompleteness instance
                     */
                    SlsaCompleteness.create = function create(properties) {
                        return new SlsaCompleteness(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaCompleteness message. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaCompleteness.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaCompleteness} message SlsaCompleteness message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaCompleteness.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message["arguments"] != null && Object.hasOwnProperty.call(message, "arguments"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message["arguments"]);
                        if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.environment);
                        if (message.materials != null && Object.hasOwnProperty.call(message, "materials"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.materials);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaCompleteness message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaCompleteness.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaCompleteness} message SlsaCompleteness message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaCompleteness.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaCompleteness message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenance.SlsaCompleteness} SlsaCompleteness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaCompleteness.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance.SlsaCompleteness();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message["arguments"] = reader.bool();
                                    break;
                                }
                            case 2: {
                                    message.environment = reader.bool();
                                    break;
                                }
                            case 3: {
                                    message.materials = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaCompleteness message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenance.SlsaCompleteness} SlsaCompleteness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaCompleteness.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaCompleteness message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaCompleteness.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                            if (typeof message["arguments"] !== "boolean")
                                return "arguments: boolean expected";
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            if (typeof message.environment !== "boolean")
                                return "environment: boolean expected";
                        if (message.materials != null && message.hasOwnProperty("materials"))
                            if (typeof message.materials !== "boolean")
                                return "materials: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaCompleteness message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenance.SlsaCompleteness} SlsaCompleteness
                     */
                    SlsaCompleteness.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenance.SlsaCompleteness)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenance.SlsaCompleteness();
                        if (object["arguments"] != null)
                            message["arguments"] = Boolean(object["arguments"]);
                        if (object.environment != null)
                            message.environment = Boolean(object.environment);
                        if (object.materials != null)
                            message.materials = Boolean(object.materials);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaCompleteness message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.SlsaCompleteness} message SlsaCompleteness
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaCompleteness.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object["arguments"] = false;
                            object.environment = false;
                            object.materials = false;
                        }
                        if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                            object["arguments"] = message["arguments"];
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            object.environment = message.environment;
                        if (message.materials != null && message.hasOwnProperty("materials"))
                            object.materials = message.materials;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaCompleteness to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaCompleteness.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaCompleteness
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenance.SlsaCompleteness
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaCompleteness.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenance.SlsaCompleteness";
                    };
    
                    return SlsaCompleteness;
                })();
    
                SlsaProvenance.SlsaMetadata = (function() {
    
                    /**
                     * Properties of a SlsaMetadata.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @interface ISlsaMetadata
                     * @property {string|null} [buildInvocationId] SlsaMetadata buildInvocationId
                     * @property {google.protobuf.ITimestamp|null} [buildStartedOn] SlsaMetadata buildStartedOn
                     * @property {google.protobuf.ITimestamp|null} [buildFinishedOn] SlsaMetadata buildFinishedOn
                     * @property {grafeas.v1.SlsaProvenance.ISlsaCompleteness|null} [completeness] SlsaMetadata completeness
                     * @property {boolean|null} [reproducible] SlsaMetadata reproducible
                     */
    
                    /**
                     * Constructs a new SlsaMetadata.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @classdesc Represents a SlsaMetadata.
                     * @implements ISlsaMetadata
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenance.ISlsaMetadata=} [properties] Properties to set
                     */
                    function SlsaMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaMetadata buildInvocationId.
                     * @member {string} buildInvocationId
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildInvocationId = "";
    
                    /**
                     * SlsaMetadata buildStartedOn.
                     * @member {google.protobuf.ITimestamp|null|undefined} buildStartedOn
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildStartedOn = null;
    
                    /**
                     * SlsaMetadata buildFinishedOn.
                     * @member {google.protobuf.ITimestamp|null|undefined} buildFinishedOn
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildFinishedOn = null;
    
                    /**
                     * SlsaMetadata completeness.
                     * @member {grafeas.v1.SlsaProvenance.ISlsaCompleteness|null|undefined} completeness
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.completeness = null;
    
                    /**
                     * SlsaMetadata reproducible.
                     * @member {boolean} reproducible
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.reproducible = false;
    
                    /**
                     * Creates a new SlsaMetadata instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaMetadata=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenance.SlsaMetadata} SlsaMetadata instance
                     */
                    SlsaMetadata.create = function create(properties) {
                        return new SlsaMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaMetadata message. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaMetadata} message SlsaMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.buildInvocationId != null && Object.hasOwnProperty.call(message, "buildInvocationId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.buildInvocationId);
                        if (message.buildStartedOn != null && Object.hasOwnProperty.call(message, "buildStartedOn"))
                            $root.google.protobuf.Timestamp.encode(message.buildStartedOn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.buildFinishedOn != null && Object.hasOwnProperty.call(message, "buildFinishedOn"))
                            $root.google.protobuf.Timestamp.encode(message.buildFinishedOn, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.completeness != null && Object.hasOwnProperty.call(message, "completeness"))
                            $root.grafeas.v1.SlsaProvenance.SlsaCompleteness.encode(message.completeness, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.reproducible != null && Object.hasOwnProperty.call(message, "reproducible"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reproducible);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaMetadata message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaMetadata} message SlsaMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenance.SlsaMetadata} SlsaMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance.SlsaMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.buildInvocationId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.buildStartedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.buildFinishedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.completeness = $root.grafeas.v1.SlsaProvenance.SlsaCompleteness.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.reproducible = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenance.SlsaMetadata} SlsaMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaMetadata message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                            if (!$util.isString(message.buildInvocationId))
                                return "buildInvocationId: string expected";
                        if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.buildStartedOn);
                            if (error)
                                return "buildStartedOn." + error;
                        }
                        if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.buildFinishedOn);
                            if (error)
                                return "buildFinishedOn." + error;
                        }
                        if (message.completeness != null && message.hasOwnProperty("completeness")) {
                            var error = $root.grafeas.v1.SlsaProvenance.SlsaCompleteness.verify(message.completeness);
                            if (error)
                                return "completeness." + error;
                        }
                        if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                            if (typeof message.reproducible !== "boolean")
                                return "reproducible: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenance.SlsaMetadata} SlsaMetadata
                     */
                    SlsaMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenance.SlsaMetadata)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenance.SlsaMetadata();
                        if (object.buildInvocationId != null)
                            message.buildInvocationId = String(object.buildInvocationId);
                        if (object.buildStartedOn != null) {
                            if (typeof object.buildStartedOn !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.SlsaMetadata.buildStartedOn: object expected");
                            message.buildStartedOn = $root.google.protobuf.Timestamp.fromObject(object.buildStartedOn);
                        }
                        if (object.buildFinishedOn != null) {
                            if (typeof object.buildFinishedOn !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.SlsaMetadata.buildFinishedOn: object expected");
                            message.buildFinishedOn = $root.google.protobuf.Timestamp.fromObject(object.buildFinishedOn);
                        }
                        if (object.completeness != null) {
                            if (typeof object.completeness !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.SlsaMetadata.completeness: object expected");
                            message.completeness = $root.grafeas.v1.SlsaProvenance.SlsaCompleteness.fromObject(object.completeness);
                        }
                        if (object.reproducible != null)
                            message.reproducible = Boolean(object.reproducible);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.SlsaMetadata} message SlsaMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.buildInvocationId = "";
                            object.buildStartedOn = null;
                            object.buildFinishedOn = null;
                            object.completeness = null;
                            object.reproducible = false;
                        }
                        if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                            object.buildInvocationId = message.buildInvocationId;
                        if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn"))
                            object.buildStartedOn = $root.google.protobuf.Timestamp.toObject(message.buildStartedOn, options);
                        if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn"))
                            object.buildFinishedOn = $root.google.protobuf.Timestamp.toObject(message.buildFinishedOn, options);
                        if (message.completeness != null && message.hasOwnProperty("completeness"))
                            object.completeness = $root.grafeas.v1.SlsaProvenance.SlsaCompleteness.toObject(message.completeness, options);
                        if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                            object.reproducible = message.reproducible;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaMetadata to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaMetadata
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenance.SlsaMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenance.SlsaMetadata";
                    };
    
                    return SlsaMetadata;
                })();
    
                SlsaProvenance.SlsaBuilder = (function() {
    
                    /**
                     * Properties of a SlsaBuilder.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @interface ISlsaBuilder
                     * @property {string|null} [id] SlsaBuilder id
                     */
    
                    /**
                     * Constructs a new SlsaBuilder.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @classdesc Represents a SlsaBuilder.
                     * @implements ISlsaBuilder
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenance.ISlsaBuilder=} [properties] Properties to set
                     */
                    function SlsaBuilder(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaBuilder id.
                     * @member {string} id
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @instance
                     */
                    SlsaBuilder.prototype.id = "";
    
                    /**
                     * Creates a new SlsaBuilder instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaBuilder=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenance.SlsaBuilder} SlsaBuilder instance
                     */
                    SlsaBuilder.create = function create(properties) {
                        return new SlsaBuilder(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaBuilder message. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaBuilder.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaBuilder} message SlsaBuilder message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaBuilder.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaBuilder message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.SlsaBuilder.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.ISlsaBuilder} message SlsaBuilder message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaBuilder.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaBuilder message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenance.SlsaBuilder} SlsaBuilder
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaBuilder.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance.SlsaBuilder();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaBuilder message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenance.SlsaBuilder} SlsaBuilder
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaBuilder.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaBuilder message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaBuilder.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaBuilder message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenance.SlsaBuilder} SlsaBuilder
                     */
                    SlsaBuilder.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenance.SlsaBuilder)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenance.SlsaBuilder();
                        if (object.id != null)
                            message.id = String(object.id);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaBuilder message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.SlsaBuilder} message SlsaBuilder
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaBuilder.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.id = "";
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaBuilder to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaBuilder.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaBuilder
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenance.SlsaBuilder
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaBuilder.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenance.SlsaBuilder";
                    };
    
                    return SlsaBuilder;
                })();
    
                SlsaProvenance.Material = (function() {
    
                    /**
                     * Properties of a Material.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @interface IMaterial
                     * @property {string|null} [uri] Material uri
                     * @property {Object.<string,string>|null} [digest] Material digest
                     */
    
                    /**
                     * Constructs a new Material.
                     * @memberof grafeas.v1.SlsaProvenance
                     * @classdesc Represents a Material.
                     * @implements IMaterial
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenance.IMaterial=} [properties] Properties to set
                     */
                    function Material(properties) {
                        this.digest = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Material uri.
                     * @member {string} uri
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @instance
                     */
                    Material.prototype.uri = "";
    
                    /**
                     * Material digest.
                     * @member {Object.<string,string>} digest
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @instance
                     */
                    Material.prototype.digest = $util.emptyObject;
    
                    /**
                     * Creates a new Material instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.IMaterial=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenance.Material} Material instance
                     */
                    Material.create = function create(properties) {
                        return new Material(properties);
                    };
    
                    /**
                     * Encodes the specified Material message. Does not implicitly {@link grafeas.v1.SlsaProvenance.Material.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.IMaterial} message Material message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Material.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        if (message.digest != null && Object.hasOwnProperty.call(message, "digest"))
                            for (var keys = Object.keys(message.digest), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.digest[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Material message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenance.Material.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.IMaterial} message Material message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Material.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Material message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenance.Material} Material
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Material.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenance.Material(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uri = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (message.digest === $util.emptyObject)
                                        message.digest = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.digest[key] = value;
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Material message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenance.Material} Material
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Material.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Material message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Material.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        if (message.digest != null && message.hasOwnProperty("digest")) {
                            if (!$util.isObject(message.digest))
                                return "digest: object expected";
                            var key = Object.keys(message.digest);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.digest[key[i]]))
                                    return "digest: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Material message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenance.Material} Material
                     */
                    Material.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenance.Material)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenance.Material();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        if (object.digest) {
                            if (typeof object.digest !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenance.Material.digest: object expected");
                            message.digest = {};
                            for (var keys = Object.keys(object.digest), i = 0; i < keys.length; ++i)
                                message.digest[keys[i]] = String(object.digest[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Material message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {grafeas.v1.SlsaProvenance.Material} message Material
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Material.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.digest = {};
                        if (options.defaults)
                            object.uri = "";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        var keys2;
                        if (message.digest && (keys2 = Object.keys(message.digest)).length) {
                            object.digest = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.digest[keys2[j]] = message.digest[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Material to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Material.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Material
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenance.Material
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Material.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenance.Material";
                    };
    
                    return Material;
                })();
    
                return SlsaProvenance;
            })();
    
            v1.SlsaProvenanceZeroTwo = (function() {
    
                /**
                 * Properties of a SlsaProvenanceZeroTwo.
                 * @memberof grafeas.v1
                 * @interface ISlsaProvenanceZeroTwo
                 * @property {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder|null} [builder] SlsaProvenanceZeroTwo builder
                 * @property {string|null} [buildType] SlsaProvenanceZeroTwo buildType
                 * @property {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation|null} [invocation] SlsaProvenanceZeroTwo invocation
                 * @property {google.protobuf.IStruct|null} [buildConfig] SlsaProvenanceZeroTwo buildConfig
                 * @property {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata|null} [metadata] SlsaProvenanceZeroTwo metadata
                 * @property {Array.<grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial>|null} [materials] SlsaProvenanceZeroTwo materials
                 */
    
                /**
                 * Constructs a new SlsaProvenanceZeroTwo.
                 * @memberof grafeas.v1
                 * @classdesc Represents a SlsaProvenanceZeroTwo.
                 * @implements ISlsaProvenanceZeroTwo
                 * @constructor
                 * @param {grafeas.v1.ISlsaProvenanceZeroTwo=} [properties] Properties to set
                 */
                function SlsaProvenanceZeroTwo(properties) {
                    this.materials = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SlsaProvenanceZeroTwo builder.
                 * @member {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder|null|undefined} builder
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.builder = null;
    
                /**
                 * SlsaProvenanceZeroTwo buildType.
                 * @member {string} buildType
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.buildType = "";
    
                /**
                 * SlsaProvenanceZeroTwo invocation.
                 * @member {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation|null|undefined} invocation
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.invocation = null;
    
                /**
                 * SlsaProvenanceZeroTwo buildConfig.
                 * @member {google.protobuf.IStruct|null|undefined} buildConfig
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.buildConfig = null;
    
                /**
                 * SlsaProvenanceZeroTwo metadata.
                 * @member {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata|null|undefined} metadata
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.metadata = null;
    
                /**
                 * SlsaProvenanceZeroTwo materials.
                 * @member {Array.<grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial>} materials
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 */
                SlsaProvenanceZeroTwo.prototype.materials = $util.emptyArray;
    
                /**
                 * Creates a new SlsaProvenanceZeroTwo instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {grafeas.v1.ISlsaProvenanceZeroTwo=} [properties] Properties to set
                 * @returns {grafeas.v1.SlsaProvenanceZeroTwo} SlsaProvenanceZeroTwo instance
                 */
                SlsaProvenanceZeroTwo.create = function create(properties) {
                    return new SlsaProvenanceZeroTwo(properties);
                };
    
                /**
                 * Encodes the specified SlsaProvenanceZeroTwo message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {grafeas.v1.ISlsaProvenanceZeroTwo} message SlsaProvenanceZeroTwo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SlsaProvenanceZeroTwo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.builder != null && Object.hasOwnProperty.call(message, "builder"))
                        $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.encode(message.builder, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.buildType != null && Object.hasOwnProperty.call(message, "buildType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.buildType);
                    if (message.invocation != null && Object.hasOwnProperty.call(message, "invocation"))
                        $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.encode(message.invocation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.buildConfig != null && Object.hasOwnProperty.call(message, "buildConfig"))
                        $root.google.protobuf.Struct.encode(message.buildConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.encode(message.metadata, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.materials != null && message.materials.length)
                        for (var i = 0; i < message.materials.length; ++i)
                            $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.encode(message.materials[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SlsaProvenanceZeroTwo message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {grafeas.v1.ISlsaProvenanceZeroTwo} message SlsaProvenanceZeroTwo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SlsaProvenanceZeroTwo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SlsaProvenanceZeroTwo message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.SlsaProvenanceZeroTwo} SlsaProvenanceZeroTwo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SlsaProvenanceZeroTwo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.builder = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.buildType = reader.string();
                                break;
                            }
                        case 3: {
                                message.invocation = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.buildConfig = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.metadata = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                if (!(message.materials && message.materials.length))
                                    message.materials = [];
                                message.materials.push($root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SlsaProvenanceZeroTwo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.SlsaProvenanceZeroTwo} SlsaProvenanceZeroTwo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SlsaProvenanceZeroTwo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SlsaProvenanceZeroTwo message.
                 * @function verify
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SlsaProvenanceZeroTwo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.builder != null && message.hasOwnProperty("builder")) {
                        var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.verify(message.builder);
                        if (error)
                            return "builder." + error;
                    }
                    if (message.buildType != null && message.hasOwnProperty("buildType"))
                        if (!$util.isString(message.buildType))
                            return "buildType: string expected";
                    if (message.invocation != null && message.hasOwnProperty("invocation")) {
                        var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.verify(message.invocation);
                        if (error)
                            return "invocation." + error;
                    }
                    if (message.buildConfig != null && message.hasOwnProperty("buildConfig")) {
                        var error = $root.google.protobuf.Struct.verify(message.buildConfig);
                        if (error)
                            return "buildConfig." + error;
                    }
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.materials != null && message.hasOwnProperty("materials")) {
                        if (!Array.isArray(message.materials))
                            return "materials: array expected";
                        for (var i = 0; i < message.materials.length; ++i) {
                            var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.verify(message.materials[i]);
                            if (error)
                                return "materials." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SlsaProvenanceZeroTwo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.SlsaProvenanceZeroTwo} SlsaProvenanceZeroTwo
                 */
                SlsaProvenanceZeroTwo.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo)
                        return object;
                    var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo();
                    if (object.builder != null) {
                        if (typeof object.builder !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.builder: object expected");
                        message.builder = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.fromObject(object.builder);
                    }
                    if (object.buildType != null)
                        message.buildType = String(object.buildType);
                    if (object.invocation != null) {
                        if (typeof object.invocation !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.invocation: object expected");
                        message.invocation = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.fromObject(object.invocation);
                    }
                    if (object.buildConfig != null) {
                        if (typeof object.buildConfig !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.buildConfig: object expected");
                        message.buildConfig = $root.google.protobuf.Struct.fromObject(object.buildConfig);
                    }
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.metadata: object expected");
                        message.metadata = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.fromObject(object.metadata);
                    }
                    if (object.materials) {
                        if (!Array.isArray(object.materials))
                            throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.materials: array expected");
                        message.materials = [];
                        for (var i = 0; i < object.materials.length; ++i) {
                            if (typeof object.materials[i] !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.materials: object expected");
                            message.materials[i] = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.fromObject(object.materials[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SlsaProvenanceZeroTwo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {grafeas.v1.SlsaProvenanceZeroTwo} message SlsaProvenanceZeroTwo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SlsaProvenanceZeroTwo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.materials = [];
                    if (options.defaults) {
                        object.builder = null;
                        object.buildType = "";
                        object.invocation = null;
                        object.buildConfig = null;
                        object.metadata = null;
                    }
                    if (message.builder != null && message.hasOwnProperty("builder"))
                        object.builder = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.toObject(message.builder, options);
                    if (message.buildType != null && message.hasOwnProperty("buildType"))
                        object.buildType = message.buildType;
                    if (message.invocation != null && message.hasOwnProperty("invocation"))
                        object.invocation = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.toObject(message.invocation, options);
                    if (message.buildConfig != null && message.hasOwnProperty("buildConfig"))
                        object.buildConfig = $root.google.protobuf.Struct.toObject(message.buildConfig, options);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.toObject(message.metadata, options);
                    if (message.materials && message.materials.length) {
                        object.materials = [];
                        for (var j = 0; j < message.materials.length; ++j)
                            object.materials[j] = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.toObject(message.materials[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SlsaProvenanceZeroTwo to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SlsaProvenanceZeroTwo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SlsaProvenanceZeroTwo
                 * @function getTypeUrl
                 * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SlsaProvenanceZeroTwo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo";
                };
    
                SlsaProvenanceZeroTwo.SlsaBuilder = (function() {
    
                    /**
                     * Properties of a SlsaBuilder.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaBuilder
                     * @property {string|null} [id] SlsaBuilder id
                     */
    
                    /**
                     * Constructs a new SlsaBuilder.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaBuilder.
                     * @implements ISlsaBuilder
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder=} [properties] Properties to set
                     */
                    function SlsaBuilder(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaBuilder id.
                     * @member {string} id
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @instance
                     */
                    SlsaBuilder.prototype.id = "";
    
                    /**
                     * Creates a new SlsaBuilder instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder} SlsaBuilder instance
                     */
                    SlsaBuilder.create = function create(properties) {
                        return new SlsaBuilder(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaBuilder message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder} message SlsaBuilder message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaBuilder.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaBuilder message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaBuilder} message SlsaBuilder message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaBuilder.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaBuilder message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder} SlsaBuilder
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaBuilder.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaBuilder message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder} SlsaBuilder
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaBuilder.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaBuilder message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaBuilder.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaBuilder message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder} SlsaBuilder
                     */
                    SlsaBuilder.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder();
                        if (object.id != null)
                            message.id = String(object.id);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaBuilder message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder} message SlsaBuilder
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaBuilder.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.id = "";
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaBuilder to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaBuilder.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaBuilder
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaBuilder.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaBuilder";
                    };
    
                    return SlsaBuilder;
                })();
    
                SlsaProvenanceZeroTwo.SlsaMaterial = (function() {
    
                    /**
                     * Properties of a SlsaMaterial.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaMaterial
                     * @property {string|null} [uri] SlsaMaterial uri
                     * @property {Object.<string,string>|null} [digest] SlsaMaterial digest
                     */
    
                    /**
                     * Constructs a new SlsaMaterial.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaMaterial.
                     * @implements ISlsaMaterial
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial=} [properties] Properties to set
                     */
                    function SlsaMaterial(properties) {
                        this.digest = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaMaterial uri.
                     * @member {string} uri
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @instance
                     */
                    SlsaMaterial.prototype.uri = "";
    
                    /**
                     * SlsaMaterial digest.
                     * @member {Object.<string,string>} digest
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @instance
                     */
                    SlsaMaterial.prototype.digest = $util.emptyObject;
    
                    /**
                     * Creates a new SlsaMaterial instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial} SlsaMaterial instance
                     */
                    SlsaMaterial.create = function create(properties) {
                        return new SlsaMaterial(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaMaterial message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial} message SlsaMaterial message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMaterial.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        if (message.digest != null && Object.hasOwnProperty.call(message, "digest"))
                            for (var keys = Object.keys(message.digest), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.digest[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaMaterial message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMaterial} message SlsaMaterial message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMaterial.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaMaterial message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial} SlsaMaterial
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMaterial.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uri = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (message.digest === $util.emptyObject)
                                        message.digest = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.digest[key] = value;
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaMaterial message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial} SlsaMaterial
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMaterial.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaMaterial message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaMaterial.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        if (message.digest != null && message.hasOwnProperty("digest")) {
                            if (!$util.isObject(message.digest))
                                return "digest: object expected";
                            var key = Object.keys(message.digest);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.digest[key[i]]))
                                    return "digest: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SlsaMaterial message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial} SlsaMaterial
                     */
                    SlsaMaterial.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        if (object.digest) {
                            if (typeof object.digest !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial.digest: object expected");
                            message.digest = {};
                            for (var keys = Object.keys(object.digest), i = 0; i < keys.length; ++i)
                                message.digest[keys[i]] = String(object.digest[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaMaterial message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial} message SlsaMaterial
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaMaterial.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.digest = {};
                        if (options.defaults)
                            object.uri = "";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        var keys2;
                        if (message.digest && (keys2 = Object.keys(message.digest)).length) {
                            object.digest = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.digest[keys2[j]] = message.digest[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SlsaMaterial to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaMaterial.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaMaterial
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaMaterial.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaMaterial";
                    };
    
                    return SlsaMaterial;
                })();
    
                SlsaProvenanceZeroTwo.SlsaInvocation = (function() {
    
                    /**
                     * Properties of a SlsaInvocation.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaInvocation
                     * @property {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource|null} [configSource] SlsaInvocation configSource
                     * @property {google.protobuf.IStruct|null} [parameters] SlsaInvocation parameters
                     * @property {google.protobuf.IStruct|null} [environment] SlsaInvocation environment
                     */
    
                    /**
                     * Constructs a new SlsaInvocation.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaInvocation.
                     * @implements ISlsaInvocation
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation=} [properties] Properties to set
                     */
                    function SlsaInvocation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaInvocation configSource.
                     * @member {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource|null|undefined} configSource
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @instance
                     */
                    SlsaInvocation.prototype.configSource = null;
    
                    /**
                     * SlsaInvocation parameters.
                     * @member {google.protobuf.IStruct|null|undefined} parameters
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @instance
                     */
                    SlsaInvocation.prototype.parameters = null;
    
                    /**
                     * SlsaInvocation environment.
                     * @member {google.protobuf.IStruct|null|undefined} environment
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @instance
                     */
                    SlsaInvocation.prototype.environment = null;
    
                    /**
                     * Creates a new SlsaInvocation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation} SlsaInvocation instance
                     */
                    SlsaInvocation.create = function create(properties) {
                        return new SlsaInvocation(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaInvocation message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation} message SlsaInvocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaInvocation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.configSource != null && Object.hasOwnProperty.call(message, "configSource"))
                            $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.encode(message.configSource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.parameters != null && Object.hasOwnProperty.call(message, "parameters"))
                            $root.google.protobuf.Struct.encode(message.parameters, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                            $root.google.protobuf.Struct.encode(message.environment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaInvocation message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaInvocation} message SlsaInvocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaInvocation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaInvocation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation} SlsaInvocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaInvocation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.configSource = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.parameters = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.environment = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaInvocation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation} SlsaInvocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaInvocation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaInvocation message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaInvocation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.configSource != null && message.hasOwnProperty("configSource")) {
                            var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.verify(message.configSource);
                            if (error)
                                return "configSource." + error;
                        }
                        if (message.parameters != null && message.hasOwnProperty("parameters")) {
                            var error = $root.google.protobuf.Struct.verify(message.parameters);
                            if (error)
                                return "parameters." + error;
                        }
                        if (message.environment != null && message.hasOwnProperty("environment")) {
                            var error = $root.google.protobuf.Struct.verify(message.environment);
                            if (error)
                                return "environment." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SlsaInvocation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation} SlsaInvocation
                     */
                    SlsaInvocation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation();
                        if (object.configSource != null) {
                            if (typeof object.configSource !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.configSource: object expected");
                            message.configSource = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.fromObject(object.configSource);
                        }
                        if (object.parameters != null) {
                            if (typeof object.parameters !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.parameters: object expected");
                            message.parameters = $root.google.protobuf.Struct.fromObject(object.parameters);
                        }
                        if (object.environment != null) {
                            if (typeof object.environment !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation.environment: object expected");
                            message.environment = $root.google.protobuf.Struct.fromObject(object.environment);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaInvocation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation} message SlsaInvocation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaInvocation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.configSource = null;
                            object.parameters = null;
                            object.environment = null;
                        }
                        if (message.configSource != null && message.hasOwnProperty("configSource"))
                            object.configSource = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.toObject(message.configSource, options);
                        if (message.parameters != null && message.hasOwnProperty("parameters"))
                            object.parameters = $root.google.protobuf.Struct.toObject(message.parameters, options);
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            object.environment = $root.google.protobuf.Struct.toObject(message.environment, options);
                        return object;
                    };
    
                    /**
                     * Converts this SlsaInvocation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaInvocation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaInvocation
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaInvocation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaInvocation";
                    };
    
                    return SlsaInvocation;
                })();
    
                SlsaProvenanceZeroTwo.SlsaConfigSource = (function() {
    
                    /**
                     * Properties of a SlsaConfigSource.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaConfigSource
                     * @property {string|null} [uri] SlsaConfigSource uri
                     * @property {Object.<string,string>|null} [digest] SlsaConfigSource digest
                     * @property {string|null} [entryPoint] SlsaConfigSource entryPoint
                     */
    
                    /**
                     * Constructs a new SlsaConfigSource.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaConfigSource.
                     * @implements ISlsaConfigSource
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource=} [properties] Properties to set
                     */
                    function SlsaConfigSource(properties) {
                        this.digest = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaConfigSource uri.
                     * @member {string} uri
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @instance
                     */
                    SlsaConfigSource.prototype.uri = "";
    
                    /**
                     * SlsaConfigSource digest.
                     * @member {Object.<string,string>} digest
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @instance
                     */
                    SlsaConfigSource.prototype.digest = $util.emptyObject;
    
                    /**
                     * SlsaConfigSource entryPoint.
                     * @member {string} entryPoint
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @instance
                     */
                    SlsaConfigSource.prototype.entryPoint = "";
    
                    /**
                     * Creates a new SlsaConfigSource instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource} SlsaConfigSource instance
                     */
                    SlsaConfigSource.create = function create(properties) {
                        return new SlsaConfigSource(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaConfigSource message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource} message SlsaConfigSource message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaConfigSource.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        if (message.digest != null && Object.hasOwnProperty.call(message, "digest"))
                            for (var keys = Object.keys(message.digest), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.digest[keys[i]]).ldelim();
                        if (message.entryPoint != null && Object.hasOwnProperty.call(message, "entryPoint"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.entryPoint);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaConfigSource message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaConfigSource} message SlsaConfigSource message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaConfigSource.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaConfigSource message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource} SlsaConfigSource
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaConfigSource.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uri = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (message.digest === $util.emptyObject)
                                        message.digest = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.digest[key] = value;
                                    break;
                                }
                            case 3: {
                                    message.entryPoint = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaConfigSource message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource} SlsaConfigSource
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaConfigSource.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaConfigSource message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaConfigSource.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        if (message.digest != null && message.hasOwnProperty("digest")) {
                            if (!$util.isObject(message.digest))
                                return "digest: object expected";
                            var key = Object.keys(message.digest);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.digest[key[i]]))
                                    return "digest: string{k:string} expected";
                        }
                        if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                            if (!$util.isString(message.entryPoint))
                                return "entryPoint: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaConfigSource message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource} SlsaConfigSource
                     */
                    SlsaConfigSource.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        if (object.digest) {
                            if (typeof object.digest !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource.digest: object expected");
                            message.digest = {};
                            for (var keys = Object.keys(object.digest), i = 0; i < keys.length; ++i)
                                message.digest[keys[i]] = String(object.digest[keys[i]]);
                        }
                        if (object.entryPoint != null)
                            message.entryPoint = String(object.entryPoint);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaConfigSource message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource} message SlsaConfigSource
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaConfigSource.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.digest = {};
                        if (options.defaults) {
                            object.uri = "";
                            object.entryPoint = "";
                        }
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        var keys2;
                        if (message.digest && (keys2 = Object.keys(message.digest)).length) {
                            object.digest = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.digest[keys2[j]] = message.digest[keys2[j]];
                        }
                        if (message.entryPoint != null && message.hasOwnProperty("entryPoint"))
                            object.entryPoint = message.entryPoint;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaConfigSource to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaConfigSource.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaConfigSource
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaConfigSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaConfigSource";
                    };
    
                    return SlsaConfigSource;
                })();
    
                SlsaProvenanceZeroTwo.SlsaMetadata = (function() {
    
                    /**
                     * Properties of a SlsaMetadata.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaMetadata
                     * @property {string|null} [buildInvocationId] SlsaMetadata buildInvocationId
                     * @property {google.protobuf.ITimestamp|null} [buildStartedOn] SlsaMetadata buildStartedOn
                     * @property {google.protobuf.ITimestamp|null} [buildFinishedOn] SlsaMetadata buildFinishedOn
                     * @property {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness|null} [completeness] SlsaMetadata completeness
                     * @property {boolean|null} [reproducible] SlsaMetadata reproducible
                     */
    
                    /**
                     * Constructs a new SlsaMetadata.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaMetadata.
                     * @implements ISlsaMetadata
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata=} [properties] Properties to set
                     */
                    function SlsaMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaMetadata buildInvocationId.
                     * @member {string} buildInvocationId
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildInvocationId = "";
    
                    /**
                     * SlsaMetadata buildStartedOn.
                     * @member {google.protobuf.ITimestamp|null|undefined} buildStartedOn
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildStartedOn = null;
    
                    /**
                     * SlsaMetadata buildFinishedOn.
                     * @member {google.protobuf.ITimestamp|null|undefined} buildFinishedOn
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.buildFinishedOn = null;
    
                    /**
                     * SlsaMetadata completeness.
                     * @member {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness|null|undefined} completeness
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.completeness = null;
    
                    /**
                     * SlsaMetadata reproducible.
                     * @member {boolean} reproducible
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     */
                    SlsaMetadata.prototype.reproducible = false;
    
                    /**
                     * Creates a new SlsaMetadata instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata} SlsaMetadata instance
                     */
                    SlsaMetadata.create = function create(properties) {
                        return new SlsaMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaMetadata message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata} message SlsaMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.buildInvocationId != null && Object.hasOwnProperty.call(message, "buildInvocationId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.buildInvocationId);
                        if (message.buildStartedOn != null && Object.hasOwnProperty.call(message, "buildStartedOn"))
                            $root.google.protobuf.Timestamp.encode(message.buildStartedOn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.buildFinishedOn != null && Object.hasOwnProperty.call(message, "buildFinishedOn"))
                            $root.google.protobuf.Timestamp.encode(message.buildFinishedOn, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.completeness != null && Object.hasOwnProperty.call(message, "completeness"))
                            $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.encode(message.completeness, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.reproducible != null && Object.hasOwnProperty.call(message, "reproducible"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reproducible);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaMetadata message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaMetadata} message SlsaMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata} SlsaMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.buildInvocationId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.buildStartedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.buildFinishedOn = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.completeness = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.reproducible = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata} SlsaMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaMetadata message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                            if (!$util.isString(message.buildInvocationId))
                                return "buildInvocationId: string expected";
                        if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.buildStartedOn);
                            if (error)
                                return "buildStartedOn." + error;
                        }
                        if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.buildFinishedOn);
                            if (error)
                                return "buildFinishedOn." + error;
                        }
                        if (message.completeness != null && message.hasOwnProperty("completeness")) {
                            var error = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.verify(message.completeness);
                            if (error)
                                return "completeness." + error;
                        }
                        if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                            if (typeof message.reproducible !== "boolean")
                                return "reproducible: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata} SlsaMetadata
                     */
                    SlsaMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata();
                        if (object.buildInvocationId != null)
                            message.buildInvocationId = String(object.buildInvocationId);
                        if (object.buildStartedOn != null) {
                            if (typeof object.buildStartedOn !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.buildStartedOn: object expected");
                            message.buildStartedOn = $root.google.protobuf.Timestamp.fromObject(object.buildStartedOn);
                        }
                        if (object.buildFinishedOn != null) {
                            if (typeof object.buildFinishedOn !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.buildFinishedOn: object expected");
                            message.buildFinishedOn = $root.google.protobuf.Timestamp.fromObject(object.buildFinishedOn);
                        }
                        if (object.completeness != null) {
                            if (typeof object.completeness !== "object")
                                throw TypeError(".grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata.completeness: object expected");
                            message.completeness = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.fromObject(object.completeness);
                        }
                        if (object.reproducible != null)
                            message.reproducible = Boolean(object.reproducible);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata} message SlsaMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.buildInvocationId = "";
                            object.buildStartedOn = null;
                            object.buildFinishedOn = null;
                            object.completeness = null;
                            object.reproducible = false;
                        }
                        if (message.buildInvocationId != null && message.hasOwnProperty("buildInvocationId"))
                            object.buildInvocationId = message.buildInvocationId;
                        if (message.buildStartedOn != null && message.hasOwnProperty("buildStartedOn"))
                            object.buildStartedOn = $root.google.protobuf.Timestamp.toObject(message.buildStartedOn, options);
                        if (message.buildFinishedOn != null && message.hasOwnProperty("buildFinishedOn"))
                            object.buildFinishedOn = $root.google.protobuf.Timestamp.toObject(message.buildFinishedOn, options);
                        if (message.completeness != null && message.hasOwnProperty("completeness"))
                            object.completeness = $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.toObject(message.completeness, options);
                        if (message.reproducible != null && message.hasOwnProperty("reproducible"))
                            object.reproducible = message.reproducible;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaMetadata to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaMetadata
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaMetadata";
                    };
    
                    return SlsaMetadata;
                })();
    
                SlsaProvenanceZeroTwo.SlsaCompleteness = (function() {
    
                    /**
                     * Properties of a SlsaCompleteness.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @interface ISlsaCompleteness
                     * @property {boolean|null} [parameters] SlsaCompleteness parameters
                     * @property {boolean|null} [environment] SlsaCompleteness environment
                     * @property {boolean|null} [materials] SlsaCompleteness materials
                     */
    
                    /**
                     * Constructs a new SlsaCompleteness.
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo
                     * @classdesc Represents a SlsaCompleteness.
                     * @implements ISlsaCompleteness
                     * @constructor
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness=} [properties] Properties to set
                     */
                    function SlsaCompleteness(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlsaCompleteness parameters.
                     * @member {boolean} parameters
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype.parameters = false;
    
                    /**
                     * SlsaCompleteness environment.
                     * @member {boolean} environment
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype.environment = false;
    
                    /**
                     * SlsaCompleteness materials.
                     * @member {boolean} materials
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @instance
                     */
                    SlsaCompleteness.prototype.materials = false;
    
                    /**
                     * Creates a new SlsaCompleteness instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness=} [properties] Properties to set
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness} SlsaCompleteness instance
                     */
                    SlsaCompleteness.create = function create(properties) {
                        return new SlsaCompleteness(properties);
                    };
    
                    /**
                     * Encodes the specified SlsaCompleteness message. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness} message SlsaCompleteness message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaCompleteness.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parameters != null && Object.hasOwnProperty.call(message, "parameters"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.parameters);
                        if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.environment);
                        if (message.materials != null && Object.hasOwnProperty.call(message, "materials"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.materials);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlsaCompleteness message, length delimited. Does not implicitly {@link grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.ISlsaCompleteness} message SlsaCompleteness message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlsaCompleteness.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlsaCompleteness message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness} SlsaCompleteness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaCompleteness.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parameters = reader.bool();
                                    break;
                                }
                            case 2: {
                                    message.environment = reader.bool();
                                    break;
                                }
                            case 3: {
                                    message.materials = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlsaCompleteness message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness} SlsaCompleteness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlsaCompleteness.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlsaCompleteness message.
                     * @function verify
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlsaCompleteness.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parameters != null && message.hasOwnProperty("parameters"))
                            if (typeof message.parameters !== "boolean")
                                return "parameters: boolean expected";
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            if (typeof message.environment !== "boolean")
                                return "environment: boolean expected";
                        if (message.materials != null && message.hasOwnProperty("materials"))
                            if (typeof message.materials !== "boolean")
                                return "materials: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlsaCompleteness message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness} SlsaCompleteness
                     */
                    SlsaCompleteness.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness)
                            return object;
                        var message = new $root.grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness();
                        if (object.parameters != null)
                            message.parameters = Boolean(object.parameters);
                        if (object.environment != null)
                            message.environment = Boolean(object.environment);
                        if (object.materials != null)
                            message.materials = Boolean(object.materials);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlsaCompleteness message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness} message SlsaCompleteness
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlsaCompleteness.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parameters = false;
                            object.environment = false;
                            object.materials = false;
                        }
                        if (message.parameters != null && message.hasOwnProperty("parameters"))
                            object.parameters = message.parameters;
                        if (message.environment != null && message.hasOwnProperty("environment"))
                            object.environment = message.environment;
                        if (message.materials != null && message.hasOwnProperty("materials"))
                            object.materials = message.materials;
                        return object;
                    };
    
                    /**
                     * Converts this SlsaCompleteness to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlsaCompleteness.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlsaCompleteness
                     * @function getTypeUrl
                     * @memberof grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlsaCompleteness.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.SlsaProvenanceZeroTwo.SlsaCompleteness";
                    };
    
                    return SlsaCompleteness;
                })();
    
                return SlsaProvenanceZeroTwo;
            })();
    
            v1.BuildProvenance = (function() {
    
                /**
                 * Properties of a BuildProvenance.
                 * @memberof grafeas.v1
                 * @interface IBuildProvenance
                 * @property {string|null} [id] BuildProvenance id
                 * @property {string|null} [projectId] BuildProvenance projectId
                 * @property {Array.<grafeas.v1.ICommand>|null} [commands] BuildProvenance commands
                 * @property {Array.<grafeas.v1.IArtifact>|null} [builtArtifacts] BuildProvenance builtArtifacts
                 * @property {google.protobuf.ITimestamp|null} [createTime] BuildProvenance createTime
                 * @property {google.protobuf.ITimestamp|null} [startTime] BuildProvenance startTime
                 * @property {google.protobuf.ITimestamp|null} [endTime] BuildProvenance endTime
                 * @property {string|null} [creator] BuildProvenance creator
                 * @property {string|null} [logsUri] BuildProvenance logsUri
                 * @property {grafeas.v1.ISource|null} [sourceProvenance] BuildProvenance sourceProvenance
                 * @property {string|null} [triggerId] BuildProvenance triggerId
                 * @property {Object.<string,string>|null} [buildOptions] BuildProvenance buildOptions
                 * @property {string|null} [builderVersion] BuildProvenance builderVersion
                 */
    
                /**
                 * Constructs a new BuildProvenance.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BuildProvenance.
                 * @implements IBuildProvenance
                 * @constructor
                 * @param {grafeas.v1.IBuildProvenance=} [properties] Properties to set
                 */
                function BuildProvenance(properties) {
                    this.commands = [];
                    this.builtArtifacts = [];
                    this.buildOptions = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BuildProvenance id.
                 * @member {string} id
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.id = "";
    
                /**
                 * BuildProvenance projectId.
                 * @member {string} projectId
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.projectId = "";
    
                /**
                 * BuildProvenance commands.
                 * @member {Array.<grafeas.v1.ICommand>} commands
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.commands = $util.emptyArray;
    
                /**
                 * BuildProvenance builtArtifacts.
                 * @member {Array.<grafeas.v1.IArtifact>} builtArtifacts
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.builtArtifacts = $util.emptyArray;
    
                /**
                 * BuildProvenance createTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} createTime
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.createTime = null;
    
                /**
                 * BuildProvenance startTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} startTime
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.startTime = null;
    
                /**
                 * BuildProvenance endTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} endTime
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.endTime = null;
    
                /**
                 * BuildProvenance creator.
                 * @member {string} creator
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.creator = "";
    
                /**
                 * BuildProvenance logsUri.
                 * @member {string} logsUri
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.logsUri = "";
    
                /**
                 * BuildProvenance sourceProvenance.
                 * @member {grafeas.v1.ISource|null|undefined} sourceProvenance
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.sourceProvenance = null;
    
                /**
                 * BuildProvenance triggerId.
                 * @member {string} triggerId
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.triggerId = "";
    
                /**
                 * BuildProvenance buildOptions.
                 * @member {Object.<string,string>} buildOptions
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.buildOptions = $util.emptyObject;
    
                /**
                 * BuildProvenance builderVersion.
                 * @member {string} builderVersion
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 */
                BuildProvenance.prototype.builderVersion = "";
    
                /**
                 * Creates a new BuildProvenance instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {grafeas.v1.IBuildProvenance=} [properties] Properties to set
                 * @returns {grafeas.v1.BuildProvenance} BuildProvenance instance
                 */
                BuildProvenance.create = function create(properties) {
                    return new BuildProvenance(properties);
                };
    
                /**
                 * Encodes the specified BuildProvenance message. Does not implicitly {@link grafeas.v1.BuildProvenance.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {grafeas.v1.IBuildProvenance} message BuildProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildProvenance.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.projectId);
                    if (message.commands != null && message.commands.length)
                        for (var i = 0; i < message.commands.length; ++i)
                            $root.grafeas.v1.Command.encode(message.commands[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.builtArtifacts != null && message.builtArtifacts.length)
                        for (var i = 0; i < message.builtArtifacts.length; ++i)
                            $root.grafeas.v1.Artifact.encode(message.builtArtifacts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                        $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                        $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                        $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.creator);
                    if (message.logsUri != null && Object.hasOwnProperty.call(message, "logsUri"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.logsUri);
                    if (message.sourceProvenance != null && Object.hasOwnProperty.call(message, "sourceProvenance"))
                        $root.grafeas.v1.Source.encode(message.sourceProvenance, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.triggerId != null && Object.hasOwnProperty.call(message, "triggerId"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.triggerId);
                    if (message.buildOptions != null && Object.hasOwnProperty.call(message, "buildOptions"))
                        for (var keys = Object.keys(message.buildOptions), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.buildOptions[keys[i]]).ldelim();
                    if (message.builderVersion != null && Object.hasOwnProperty.call(message, "builderVersion"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.builderVersion);
                    return writer;
                };
    
                /**
                 * Encodes the specified BuildProvenance message, length delimited. Does not implicitly {@link grafeas.v1.BuildProvenance.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {grafeas.v1.IBuildProvenance} message BuildProvenance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BuildProvenance.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BuildProvenance message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BuildProvenance} BuildProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildProvenance.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BuildProvenance(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.id = reader.string();
                                break;
                            }
                        case 2: {
                                message.projectId = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.commands && message.commands.length))
                                    message.commands = [];
                                message.commands.push($root.grafeas.v1.Command.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.builtArtifacts && message.builtArtifacts.length))
                                    message.builtArtifacts = [];
                                message.builtArtifacts.push($root.grafeas.v1.Artifact.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.creator = reader.string();
                                break;
                            }
                        case 9: {
                                message.logsUri = reader.string();
                                break;
                            }
                        case 10: {
                                message.sourceProvenance = $root.grafeas.v1.Source.decode(reader, reader.uint32());
                                break;
                            }
                        case 11: {
                                message.triggerId = reader.string();
                                break;
                            }
                        case 12: {
                                if (message.buildOptions === $util.emptyObject)
                                    message.buildOptions = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.buildOptions[key] = value;
                                break;
                            }
                        case 13: {
                                message.builderVersion = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BuildProvenance message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BuildProvenance} BuildProvenance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BuildProvenance.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BuildProvenance message.
                 * @function verify
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BuildProvenance.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.commands != null && message.hasOwnProperty("commands")) {
                        if (!Array.isArray(message.commands))
                            return "commands: array expected";
                        for (var i = 0; i < message.commands.length; ++i) {
                            var error = $root.grafeas.v1.Command.verify(message.commands[i]);
                            if (error)
                                return "commands." + error;
                        }
                    }
                    if (message.builtArtifacts != null && message.hasOwnProperty("builtArtifacts")) {
                        if (!Array.isArray(message.builtArtifacts))
                            return "builtArtifacts: array expected";
                        for (var i = 0; i < message.builtArtifacts.length; ++i) {
                            var error = $root.grafeas.v1.Artifact.verify(message.builtArtifacts[i]);
                            if (error)
                                return "builtArtifacts." + error;
                        }
                    }
                    if (message.createTime != null && message.hasOwnProperty("createTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                        if (error)
                            return "createTime." + error;
                    }
                    if (message.startTime != null && message.hasOwnProperty("startTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                        if (error)
                            return "startTime." + error;
                    }
                    if (message.endTime != null && message.hasOwnProperty("endTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                        if (error)
                            return "endTime." + error;
                    }
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        if (!$util.isString(message.creator))
                            return "creator: string expected";
                    if (message.logsUri != null && message.hasOwnProperty("logsUri"))
                        if (!$util.isString(message.logsUri))
                            return "logsUri: string expected";
                    if (message.sourceProvenance != null && message.hasOwnProperty("sourceProvenance")) {
                        var error = $root.grafeas.v1.Source.verify(message.sourceProvenance);
                        if (error)
                            return "sourceProvenance." + error;
                    }
                    if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                        if (!$util.isString(message.triggerId))
                            return "triggerId: string expected";
                    if (message.buildOptions != null && message.hasOwnProperty("buildOptions")) {
                        if (!$util.isObject(message.buildOptions))
                            return "buildOptions: object expected";
                        var key = Object.keys(message.buildOptions);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.buildOptions[key[i]]))
                                return "buildOptions: string{k:string} expected";
                    }
                    if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                        if (!$util.isString(message.builderVersion))
                            return "builderVersion: string expected";
                    return null;
                };
    
                /**
                 * Creates a BuildProvenance message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BuildProvenance} BuildProvenance
                 */
                BuildProvenance.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BuildProvenance)
                        return object;
                    var message = new $root.grafeas.v1.BuildProvenance();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.commands) {
                        if (!Array.isArray(object.commands))
                            throw TypeError(".grafeas.v1.BuildProvenance.commands: array expected");
                        message.commands = [];
                        for (var i = 0; i < object.commands.length; ++i) {
                            if (typeof object.commands[i] !== "object")
                                throw TypeError(".grafeas.v1.BuildProvenance.commands: object expected");
                            message.commands[i] = $root.grafeas.v1.Command.fromObject(object.commands[i]);
                        }
                    }
                    if (object.builtArtifacts) {
                        if (!Array.isArray(object.builtArtifacts))
                            throw TypeError(".grafeas.v1.BuildProvenance.builtArtifacts: array expected");
                        message.builtArtifacts = [];
                        for (var i = 0; i < object.builtArtifacts.length; ++i) {
                            if (typeof object.builtArtifacts[i] !== "object")
                                throw TypeError(".grafeas.v1.BuildProvenance.builtArtifacts: object expected");
                            message.builtArtifacts[i] = $root.grafeas.v1.Artifact.fromObject(object.builtArtifacts[i]);
                        }
                    }
                    if (object.createTime != null) {
                        if (typeof object.createTime !== "object")
                            throw TypeError(".grafeas.v1.BuildProvenance.createTime: object expected");
                        message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                    }
                    if (object.startTime != null) {
                        if (typeof object.startTime !== "object")
                            throw TypeError(".grafeas.v1.BuildProvenance.startTime: object expected");
                        message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                    }
                    if (object.endTime != null) {
                        if (typeof object.endTime !== "object")
                            throw TypeError(".grafeas.v1.BuildProvenance.endTime: object expected");
                        message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                    }
                    if (object.creator != null)
                        message.creator = String(object.creator);
                    if (object.logsUri != null)
                        message.logsUri = String(object.logsUri);
                    if (object.sourceProvenance != null) {
                        if (typeof object.sourceProvenance !== "object")
                            throw TypeError(".grafeas.v1.BuildProvenance.sourceProvenance: object expected");
                        message.sourceProvenance = $root.grafeas.v1.Source.fromObject(object.sourceProvenance);
                    }
                    if (object.triggerId != null)
                        message.triggerId = String(object.triggerId);
                    if (object.buildOptions) {
                        if (typeof object.buildOptions !== "object")
                            throw TypeError(".grafeas.v1.BuildProvenance.buildOptions: object expected");
                        message.buildOptions = {};
                        for (var keys = Object.keys(object.buildOptions), i = 0; i < keys.length; ++i)
                            message.buildOptions[keys[i]] = String(object.buildOptions[keys[i]]);
                    }
                    if (object.builderVersion != null)
                        message.builderVersion = String(object.builderVersion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a BuildProvenance message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {grafeas.v1.BuildProvenance} message BuildProvenance
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BuildProvenance.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.commands = [];
                        object.builtArtifacts = [];
                    }
                    if (options.objects || options.defaults)
                        object.buildOptions = {};
                    if (options.defaults) {
                        object.id = "";
                        object.projectId = "";
                        object.createTime = null;
                        object.startTime = null;
                        object.endTime = null;
                        object.creator = "";
                        object.logsUri = "";
                        object.sourceProvenance = null;
                        object.triggerId = "";
                        object.builderVersion = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.commands && message.commands.length) {
                        object.commands = [];
                        for (var j = 0; j < message.commands.length; ++j)
                            object.commands[j] = $root.grafeas.v1.Command.toObject(message.commands[j], options);
                    }
                    if (message.builtArtifacts && message.builtArtifacts.length) {
                        object.builtArtifacts = [];
                        for (var j = 0; j < message.builtArtifacts.length; ++j)
                            object.builtArtifacts[j] = $root.grafeas.v1.Artifact.toObject(message.builtArtifacts[j], options);
                    }
                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                        object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                    if (message.startTime != null && message.hasOwnProperty("startTime"))
                        object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                    if (message.endTime != null && message.hasOwnProperty("endTime"))
                        object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                    if (message.creator != null && message.hasOwnProperty("creator"))
                        object.creator = message.creator;
                    if (message.logsUri != null && message.hasOwnProperty("logsUri"))
                        object.logsUri = message.logsUri;
                    if (message.sourceProvenance != null && message.hasOwnProperty("sourceProvenance"))
                        object.sourceProvenance = $root.grafeas.v1.Source.toObject(message.sourceProvenance, options);
                    if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                        object.triggerId = message.triggerId;
                    var keys2;
                    if (message.buildOptions && (keys2 = Object.keys(message.buildOptions)).length) {
                        object.buildOptions = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.buildOptions[keys2[j]] = message.buildOptions[keys2[j]];
                    }
                    if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                        object.builderVersion = message.builderVersion;
                    return object;
                };
    
                /**
                 * Converts this BuildProvenance to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BuildProvenance
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BuildProvenance.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BuildProvenance
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BuildProvenance
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BuildProvenance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BuildProvenance";
                };
    
                return BuildProvenance;
            })();
    
            v1.Source = (function() {
    
                /**
                 * Properties of a Source.
                 * @memberof grafeas.v1
                 * @interface ISource
                 * @property {string|null} [artifactStorageSourceUri] Source artifactStorageSourceUri
                 * @property {Object.<string,grafeas.v1.IFileHashes>|null} [fileHashes] Source fileHashes
                 * @property {grafeas.v1.ISourceContext|null} [context] Source context
                 * @property {Array.<grafeas.v1.ISourceContext>|null} [additionalContexts] Source additionalContexts
                 */
    
                /**
                 * Constructs a new Source.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Source.
                 * @implements ISource
                 * @constructor
                 * @param {grafeas.v1.ISource=} [properties] Properties to set
                 */
                function Source(properties) {
                    this.fileHashes = {};
                    this.additionalContexts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Source artifactStorageSourceUri.
                 * @member {string} artifactStorageSourceUri
                 * @memberof grafeas.v1.Source
                 * @instance
                 */
                Source.prototype.artifactStorageSourceUri = "";
    
                /**
                 * Source fileHashes.
                 * @member {Object.<string,grafeas.v1.IFileHashes>} fileHashes
                 * @memberof grafeas.v1.Source
                 * @instance
                 */
                Source.prototype.fileHashes = $util.emptyObject;
    
                /**
                 * Source context.
                 * @member {grafeas.v1.ISourceContext|null|undefined} context
                 * @memberof grafeas.v1.Source
                 * @instance
                 */
                Source.prototype.context = null;
    
                /**
                 * Source additionalContexts.
                 * @member {Array.<grafeas.v1.ISourceContext>} additionalContexts
                 * @memberof grafeas.v1.Source
                 * @instance
                 */
                Source.prototype.additionalContexts = $util.emptyArray;
    
                /**
                 * Creates a new Source instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {grafeas.v1.ISource=} [properties] Properties to set
                 * @returns {grafeas.v1.Source} Source instance
                 */
                Source.create = function create(properties) {
                    return new Source(properties);
                };
    
                /**
                 * Encodes the specified Source message. Does not implicitly {@link grafeas.v1.Source.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {grafeas.v1.ISource} message Source message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Source.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.artifactStorageSourceUri != null && Object.hasOwnProperty.call(message, "artifactStorageSourceUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.artifactStorageSourceUri);
                    if (message.fileHashes != null && Object.hasOwnProperty.call(message, "fileHashes"))
                        for (var keys = Object.keys(message.fileHashes), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.grafeas.v1.FileHashes.encode(message.fileHashes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    if (message.context != null && Object.hasOwnProperty.call(message, "context"))
                        $root.grafeas.v1.SourceContext.encode(message.context, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.additionalContexts != null && message.additionalContexts.length)
                        for (var i = 0; i < message.additionalContexts.length; ++i)
                            $root.grafeas.v1.SourceContext.encode(message.additionalContexts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Source message, length delimited. Does not implicitly {@link grafeas.v1.Source.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {grafeas.v1.ISource} message Source message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Source.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Source message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Source} Source
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Source.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Source(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.artifactStorageSourceUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.fileHashes === $util.emptyObject)
                                    message.fileHashes = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.grafeas.v1.FileHashes.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.fileHashes[key] = value;
                                break;
                            }
                        case 3: {
                                message.context = $root.grafeas.v1.SourceContext.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.additionalContexts && message.additionalContexts.length))
                                    message.additionalContexts = [];
                                message.additionalContexts.push($root.grafeas.v1.SourceContext.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Source message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Source} Source
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Source.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Source message.
                 * @function verify
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Source.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.artifactStorageSourceUri != null && message.hasOwnProperty("artifactStorageSourceUri"))
                        if (!$util.isString(message.artifactStorageSourceUri))
                            return "artifactStorageSourceUri: string expected";
                    if (message.fileHashes != null && message.hasOwnProperty("fileHashes")) {
                        if (!$util.isObject(message.fileHashes))
                            return "fileHashes: object expected";
                        var key = Object.keys(message.fileHashes);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.grafeas.v1.FileHashes.verify(message.fileHashes[key[i]]);
                            if (error)
                                return "fileHashes." + error;
                        }
                    }
                    if (message.context != null && message.hasOwnProperty("context")) {
                        var error = $root.grafeas.v1.SourceContext.verify(message.context);
                        if (error)
                            return "context." + error;
                    }
                    if (message.additionalContexts != null && message.hasOwnProperty("additionalContexts")) {
                        if (!Array.isArray(message.additionalContexts))
                            return "additionalContexts: array expected";
                        for (var i = 0; i < message.additionalContexts.length; ++i) {
                            var error = $root.grafeas.v1.SourceContext.verify(message.additionalContexts[i]);
                            if (error)
                                return "additionalContexts." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Source message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Source} Source
                 */
                Source.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Source)
                        return object;
                    var message = new $root.grafeas.v1.Source();
                    if (object.artifactStorageSourceUri != null)
                        message.artifactStorageSourceUri = String(object.artifactStorageSourceUri);
                    if (object.fileHashes) {
                        if (typeof object.fileHashes !== "object")
                            throw TypeError(".grafeas.v1.Source.fileHashes: object expected");
                        message.fileHashes = {};
                        for (var keys = Object.keys(object.fileHashes), i = 0; i < keys.length; ++i) {
                            if (typeof object.fileHashes[keys[i]] !== "object")
                                throw TypeError(".grafeas.v1.Source.fileHashes: object expected");
                            message.fileHashes[keys[i]] = $root.grafeas.v1.FileHashes.fromObject(object.fileHashes[keys[i]]);
                        }
                    }
                    if (object.context != null) {
                        if (typeof object.context !== "object")
                            throw TypeError(".grafeas.v1.Source.context: object expected");
                        message.context = $root.grafeas.v1.SourceContext.fromObject(object.context);
                    }
                    if (object.additionalContexts) {
                        if (!Array.isArray(object.additionalContexts))
                            throw TypeError(".grafeas.v1.Source.additionalContexts: array expected");
                        message.additionalContexts = [];
                        for (var i = 0; i < object.additionalContexts.length; ++i) {
                            if (typeof object.additionalContexts[i] !== "object")
                                throw TypeError(".grafeas.v1.Source.additionalContexts: object expected");
                            message.additionalContexts[i] = $root.grafeas.v1.SourceContext.fromObject(object.additionalContexts[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Source message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {grafeas.v1.Source} message Source
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Source.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalContexts = [];
                    if (options.objects || options.defaults)
                        object.fileHashes = {};
                    if (options.defaults) {
                        object.artifactStorageSourceUri = "";
                        object.context = null;
                    }
                    if (message.artifactStorageSourceUri != null && message.hasOwnProperty("artifactStorageSourceUri"))
                        object.artifactStorageSourceUri = message.artifactStorageSourceUri;
                    var keys2;
                    if (message.fileHashes && (keys2 = Object.keys(message.fileHashes)).length) {
                        object.fileHashes = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fileHashes[keys2[j]] = $root.grafeas.v1.FileHashes.toObject(message.fileHashes[keys2[j]], options);
                    }
                    if (message.context != null && message.hasOwnProperty("context"))
                        object.context = $root.grafeas.v1.SourceContext.toObject(message.context, options);
                    if (message.additionalContexts && message.additionalContexts.length) {
                        object.additionalContexts = [];
                        for (var j = 0; j < message.additionalContexts.length; ++j)
                            object.additionalContexts[j] = $root.grafeas.v1.SourceContext.toObject(message.additionalContexts[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Source to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Source
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Source.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Source
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Source
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Source.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Source";
                };
    
                return Source;
            })();
    
            v1.FileHashes = (function() {
    
                /**
                 * Properties of a FileHashes.
                 * @memberof grafeas.v1
                 * @interface IFileHashes
                 * @property {Array.<grafeas.v1.IHash>|null} [fileHash] FileHashes fileHash
                 */
    
                /**
                 * Constructs a new FileHashes.
                 * @memberof grafeas.v1
                 * @classdesc Represents a FileHashes.
                 * @implements IFileHashes
                 * @constructor
                 * @param {grafeas.v1.IFileHashes=} [properties] Properties to set
                 */
                function FileHashes(properties) {
                    this.fileHash = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileHashes fileHash.
                 * @member {Array.<grafeas.v1.IHash>} fileHash
                 * @memberof grafeas.v1.FileHashes
                 * @instance
                 */
                FileHashes.prototype.fileHash = $util.emptyArray;
    
                /**
                 * Creates a new FileHashes instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {grafeas.v1.IFileHashes=} [properties] Properties to set
                 * @returns {grafeas.v1.FileHashes} FileHashes instance
                 */
                FileHashes.create = function create(properties) {
                    return new FileHashes(properties);
                };
    
                /**
                 * Encodes the specified FileHashes message. Does not implicitly {@link grafeas.v1.FileHashes.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {grafeas.v1.IFileHashes} message FileHashes message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileHashes.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fileHash != null && message.fileHash.length)
                        for (var i = 0; i < message.fileHash.length; ++i)
                            $root.grafeas.v1.Hash.encode(message.fileHash[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileHashes message, length delimited. Does not implicitly {@link grafeas.v1.FileHashes.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {grafeas.v1.IFileHashes} message FileHashes message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileHashes.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileHashes message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.FileHashes} FileHashes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileHashes.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.FileHashes();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.fileHash && message.fileHash.length))
                                    message.fileHash = [];
                                message.fileHash.push($root.grafeas.v1.Hash.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileHashes message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.FileHashes} FileHashes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileHashes.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileHashes message.
                 * @function verify
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileHashes.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fileHash != null && message.hasOwnProperty("fileHash")) {
                        if (!Array.isArray(message.fileHash))
                            return "fileHash: array expected";
                        for (var i = 0; i < message.fileHash.length; ++i) {
                            var error = $root.grafeas.v1.Hash.verify(message.fileHash[i]);
                            if (error)
                                return "fileHash." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileHashes message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.FileHashes} FileHashes
                 */
                FileHashes.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.FileHashes)
                        return object;
                    var message = new $root.grafeas.v1.FileHashes();
                    if (object.fileHash) {
                        if (!Array.isArray(object.fileHash))
                            throw TypeError(".grafeas.v1.FileHashes.fileHash: array expected");
                        message.fileHash = [];
                        for (var i = 0; i < object.fileHash.length; ++i) {
                            if (typeof object.fileHash[i] !== "object")
                                throw TypeError(".grafeas.v1.FileHashes.fileHash: object expected");
                            message.fileHash[i] = $root.grafeas.v1.Hash.fromObject(object.fileHash[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileHashes message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {grafeas.v1.FileHashes} message FileHashes
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileHashes.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fileHash = [];
                    if (message.fileHash && message.fileHash.length) {
                        object.fileHash = [];
                        for (var j = 0; j < message.fileHash.length; ++j)
                            object.fileHash[j] = $root.grafeas.v1.Hash.toObject(message.fileHash[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileHashes to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.FileHashes
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileHashes.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileHashes
                 * @function getTypeUrl
                 * @memberof grafeas.v1.FileHashes
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileHashes.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.FileHashes";
                };
    
                return FileHashes;
            })();
    
            v1.Hash = (function() {
    
                /**
                 * Properties of a Hash.
                 * @memberof grafeas.v1
                 * @interface IHash
                 * @property {string|null} [type] Hash type
                 * @property {Uint8Array|null} [value] Hash value
                 */
    
                /**
                 * Constructs a new Hash.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Hash.
                 * @implements IHash
                 * @constructor
                 * @param {grafeas.v1.IHash=} [properties] Properties to set
                 */
                function Hash(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Hash type.
                 * @member {string} type
                 * @memberof grafeas.v1.Hash
                 * @instance
                 */
                Hash.prototype.type = "";
    
                /**
                 * Hash value.
                 * @member {Uint8Array} value
                 * @memberof grafeas.v1.Hash
                 * @instance
                 */
                Hash.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Hash instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {grafeas.v1.IHash=} [properties] Properties to set
                 * @returns {grafeas.v1.Hash} Hash instance
                 */
                Hash.create = function create(properties) {
                    return new Hash(properties);
                };
    
                /**
                 * Encodes the specified Hash message. Does not implicitly {@link grafeas.v1.Hash.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {grafeas.v1.IHash} message Hash message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Hash.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Hash message, length delimited. Does not implicitly {@link grafeas.v1.Hash.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {grafeas.v1.IHash} message Hash message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Hash.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Hash message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Hash} Hash
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Hash.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Hash();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Hash message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Hash} Hash
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Hash.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Hash message.
                 * @function verify
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Hash.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Hash message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Hash} Hash
                 */
                Hash.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Hash)
                        return object;
                    var message = new $root.grafeas.v1.Hash();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Hash message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {grafeas.v1.Hash} message Hash
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Hash.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Hash to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Hash
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Hash.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Hash
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Hash
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Hash.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Hash";
                };
    
                return Hash;
            })();
    
            v1.Command = (function() {
    
                /**
                 * Properties of a Command.
                 * @memberof grafeas.v1
                 * @interface ICommand
                 * @property {string|null} [name] Command name
                 * @property {Array.<string>|null} [env] Command env
                 * @property {Array.<string>|null} [args] Command args
                 * @property {string|null} [dir] Command dir
                 * @property {string|null} [id] Command id
                 * @property {Array.<string>|null} [waitFor] Command waitFor
                 */
    
                /**
                 * Constructs a new Command.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Command.
                 * @implements ICommand
                 * @constructor
                 * @param {grafeas.v1.ICommand=} [properties] Properties to set
                 */
                function Command(properties) {
                    this.env = [];
                    this.args = [];
                    this.waitFor = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Command name.
                 * @member {string} name
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.name = "";
    
                /**
                 * Command env.
                 * @member {Array.<string>} env
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.env = $util.emptyArray;
    
                /**
                 * Command args.
                 * @member {Array.<string>} args
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.args = $util.emptyArray;
    
                /**
                 * Command dir.
                 * @member {string} dir
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.dir = "";
    
                /**
                 * Command id.
                 * @member {string} id
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.id = "";
    
                /**
                 * Command waitFor.
                 * @member {Array.<string>} waitFor
                 * @memberof grafeas.v1.Command
                 * @instance
                 */
                Command.prototype.waitFor = $util.emptyArray;
    
                /**
                 * Creates a new Command instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {grafeas.v1.ICommand=} [properties] Properties to set
                 * @returns {grafeas.v1.Command} Command instance
                 */
                Command.create = function create(properties) {
                    return new Command(properties);
                };
    
                /**
                 * Encodes the specified Command message. Does not implicitly {@link grafeas.v1.Command.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {grafeas.v1.ICommand} message Command message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Command.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.env != null && message.env.length)
                        for (var i = 0; i < message.env.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.env[i]);
                    if (message.args != null && message.args.length)
                        for (var i = 0; i < message.args.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.args[i]);
                    if (message.dir != null && Object.hasOwnProperty.call(message, "dir"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.dir);
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);
                    if (message.waitFor != null && message.waitFor.length)
                        for (var i = 0; i < message.waitFor.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.waitFor[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Command message, length delimited. Does not implicitly {@link grafeas.v1.Command.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {grafeas.v1.ICommand} message Command message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Command.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Command message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Command} Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Command.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Command();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.env && message.env.length))
                                    message.env = [];
                                message.env.push(reader.string());
                                break;
                            }
                        case 3: {
                                if (!(message.args && message.args.length))
                                    message.args = [];
                                message.args.push(reader.string());
                                break;
                            }
                        case 4: {
                                message.dir = reader.string();
                                break;
                            }
                        case 5: {
                                message.id = reader.string();
                                break;
                            }
                        case 6: {
                                if (!(message.waitFor && message.waitFor.length))
                                    message.waitFor = [];
                                message.waitFor.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Command message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Command} Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Command.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Command message.
                 * @function verify
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Command.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.env != null && message.hasOwnProperty("env")) {
                        if (!Array.isArray(message.env))
                            return "env: array expected";
                        for (var i = 0; i < message.env.length; ++i)
                            if (!$util.isString(message.env[i]))
                                return "env: string[] expected";
                    }
                    if (message.args != null && message.hasOwnProperty("args")) {
                        if (!Array.isArray(message.args))
                            return "args: array expected";
                        for (var i = 0; i < message.args.length; ++i)
                            if (!$util.isString(message.args[i]))
                                return "args: string[] expected";
                    }
                    if (message.dir != null && message.hasOwnProperty("dir"))
                        if (!$util.isString(message.dir))
                            return "dir: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.waitFor != null && message.hasOwnProperty("waitFor")) {
                        if (!Array.isArray(message.waitFor))
                            return "waitFor: array expected";
                        for (var i = 0; i < message.waitFor.length; ++i)
                            if (!$util.isString(message.waitFor[i]))
                                return "waitFor: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a Command message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Command} Command
                 */
                Command.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Command)
                        return object;
                    var message = new $root.grafeas.v1.Command();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.env) {
                        if (!Array.isArray(object.env))
                            throw TypeError(".grafeas.v1.Command.env: array expected");
                        message.env = [];
                        for (var i = 0; i < object.env.length; ++i)
                            message.env[i] = String(object.env[i]);
                    }
                    if (object.args) {
                        if (!Array.isArray(object.args))
                            throw TypeError(".grafeas.v1.Command.args: array expected");
                        message.args = [];
                        for (var i = 0; i < object.args.length; ++i)
                            message.args[i] = String(object.args[i]);
                    }
                    if (object.dir != null)
                        message.dir = String(object.dir);
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.waitFor) {
                        if (!Array.isArray(object.waitFor))
                            throw TypeError(".grafeas.v1.Command.waitFor: array expected");
                        message.waitFor = [];
                        for (var i = 0; i < object.waitFor.length; ++i)
                            message.waitFor[i] = String(object.waitFor[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Command message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {grafeas.v1.Command} message Command
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Command.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.env = [];
                        object.args = [];
                        object.waitFor = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.dir = "";
                        object.id = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.env && message.env.length) {
                        object.env = [];
                        for (var j = 0; j < message.env.length; ++j)
                            object.env[j] = message.env[j];
                    }
                    if (message.args && message.args.length) {
                        object.args = [];
                        for (var j = 0; j < message.args.length; ++j)
                            object.args[j] = message.args[j];
                    }
                    if (message.dir != null && message.hasOwnProperty("dir"))
                        object.dir = message.dir;
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.waitFor && message.waitFor.length) {
                        object.waitFor = [];
                        for (var j = 0; j < message.waitFor.length; ++j)
                            object.waitFor[j] = message.waitFor[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this Command to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Command
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Command.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Command
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Command
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Command.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Command";
                };
    
                return Command;
            })();
    
            v1.Artifact = (function() {
    
                /**
                 * Properties of an Artifact.
                 * @memberof grafeas.v1
                 * @interface IArtifact
                 * @property {string|null} [checksum] Artifact checksum
                 * @property {string|null} [id] Artifact id
                 * @property {Array.<string>|null} [names] Artifact names
                 */
    
                /**
                 * Constructs a new Artifact.
                 * @memberof grafeas.v1
                 * @classdesc Represents an Artifact.
                 * @implements IArtifact
                 * @constructor
                 * @param {grafeas.v1.IArtifact=} [properties] Properties to set
                 */
                function Artifact(properties) {
                    this.names = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Artifact checksum.
                 * @member {string} checksum
                 * @memberof grafeas.v1.Artifact
                 * @instance
                 */
                Artifact.prototype.checksum = "";
    
                /**
                 * Artifact id.
                 * @member {string} id
                 * @memberof grafeas.v1.Artifact
                 * @instance
                 */
                Artifact.prototype.id = "";
    
                /**
                 * Artifact names.
                 * @member {Array.<string>} names
                 * @memberof grafeas.v1.Artifact
                 * @instance
                 */
                Artifact.prototype.names = $util.emptyArray;
    
                /**
                 * Creates a new Artifact instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {grafeas.v1.IArtifact=} [properties] Properties to set
                 * @returns {grafeas.v1.Artifact} Artifact instance
                 */
                Artifact.create = function create(properties) {
                    return new Artifact(properties);
                };
    
                /**
                 * Encodes the specified Artifact message. Does not implicitly {@link grafeas.v1.Artifact.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {grafeas.v1.IArtifact} message Artifact message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Artifact.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.checksum != null && Object.hasOwnProperty.call(message, "checksum"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.checksum);
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
                    if (message.names != null && message.names.length)
                        for (var i = 0; i < message.names.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.names[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Artifact message, length delimited. Does not implicitly {@link grafeas.v1.Artifact.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {grafeas.v1.IArtifact} message Artifact message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Artifact.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Artifact message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Artifact} Artifact
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Artifact.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Artifact();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.checksum = reader.string();
                                break;
                            }
                        case 2: {
                                message.id = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.names && message.names.length))
                                    message.names = [];
                                message.names.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Artifact message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Artifact} Artifact
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Artifact.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Artifact message.
                 * @function verify
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Artifact.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.checksum != null && message.hasOwnProperty("checksum"))
                        if (!$util.isString(message.checksum))
                            return "checksum: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.names != null && message.hasOwnProperty("names")) {
                        if (!Array.isArray(message.names))
                            return "names: array expected";
                        for (var i = 0; i < message.names.length; ++i)
                            if (!$util.isString(message.names[i]))
                                return "names: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an Artifact message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Artifact} Artifact
                 */
                Artifact.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Artifact)
                        return object;
                    var message = new $root.grafeas.v1.Artifact();
                    if (object.checksum != null)
                        message.checksum = String(object.checksum);
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.names) {
                        if (!Array.isArray(object.names))
                            throw TypeError(".grafeas.v1.Artifact.names: array expected");
                        message.names = [];
                        for (var i = 0; i < object.names.length; ++i)
                            message.names[i] = String(object.names[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Artifact message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {grafeas.v1.Artifact} message Artifact
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Artifact.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.names = [];
                    if (options.defaults) {
                        object.checksum = "";
                        object.id = "";
                    }
                    if (message.checksum != null && message.hasOwnProperty("checksum"))
                        object.checksum = message.checksum;
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.names && message.names.length) {
                        object.names = [];
                        for (var j = 0; j < message.names.length; ++j)
                            object.names[j] = message.names[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this Artifact to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Artifact
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Artifact.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Artifact
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Artifact
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Artifact.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Artifact";
                };
    
                return Artifact;
            })();
    
            v1.SourceContext = (function() {
    
                /**
                 * Properties of a SourceContext.
                 * @memberof grafeas.v1
                 * @interface ISourceContext
                 * @property {grafeas.v1.ICloudRepoSourceContext|null} [cloudRepo] SourceContext cloudRepo
                 * @property {grafeas.v1.IGerritSourceContext|null} [gerrit] SourceContext gerrit
                 * @property {grafeas.v1.IGitSourceContext|null} [git] SourceContext git
                 * @property {Object.<string,string>|null} [labels] SourceContext labels
                 */
    
                /**
                 * Constructs a new SourceContext.
                 * @memberof grafeas.v1
                 * @classdesc Represents a SourceContext.
                 * @implements ISourceContext
                 * @constructor
                 * @param {grafeas.v1.ISourceContext=} [properties] Properties to set
                 */
                function SourceContext(properties) {
                    this.labels = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceContext cloudRepo.
                 * @member {grafeas.v1.ICloudRepoSourceContext|null|undefined} cloudRepo
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 */
                SourceContext.prototype.cloudRepo = null;
    
                /**
                 * SourceContext gerrit.
                 * @member {grafeas.v1.IGerritSourceContext|null|undefined} gerrit
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 */
                SourceContext.prototype.gerrit = null;
    
                /**
                 * SourceContext git.
                 * @member {grafeas.v1.IGitSourceContext|null|undefined} git
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 */
                SourceContext.prototype.git = null;
    
                /**
                 * SourceContext labels.
                 * @member {Object.<string,string>} labels
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 */
                SourceContext.prototype.labels = $util.emptyObject;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * SourceContext context.
                 * @member {"cloudRepo"|"gerrit"|"git"|undefined} context
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 */
                Object.defineProperty(SourceContext.prototype, "context", {
                    get: $util.oneOfGetter($oneOfFields = ["cloudRepo", "gerrit", "git"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new SourceContext instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {grafeas.v1.ISourceContext=} [properties] Properties to set
                 * @returns {grafeas.v1.SourceContext} SourceContext instance
                 */
                SourceContext.create = function create(properties) {
                    return new SourceContext(properties);
                };
    
                /**
                 * Encodes the specified SourceContext message. Does not implicitly {@link grafeas.v1.SourceContext.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {grafeas.v1.ISourceContext} message SourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cloudRepo != null && Object.hasOwnProperty.call(message, "cloudRepo"))
                        $root.grafeas.v1.CloudRepoSourceContext.encode(message.cloudRepo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.gerrit != null && Object.hasOwnProperty.call(message, "gerrit"))
                        $root.grafeas.v1.GerritSourceContext.encode(message.gerrit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.git != null && Object.hasOwnProperty.call(message, "git"))
                        $root.grafeas.v1.GitSourceContext.encode(message.git, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                        for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceContext message, length delimited. Does not implicitly {@link grafeas.v1.SourceContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {grafeas.v1.ISourceContext} message SourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.SourceContext} SourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.SourceContext(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cloudRepo = $root.grafeas.v1.CloudRepoSourceContext.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.gerrit = $root.grafeas.v1.GerritSourceContext.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.git = $root.grafeas.v1.GitSourceContext.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (message.labels === $util.emptyObject)
                                    message.labels = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.labels[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.SourceContext} SourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceContext message.
                 * @function verify
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.cloudRepo != null && message.hasOwnProperty("cloudRepo")) {
                        properties.context = 1;
                        {
                            var error = $root.grafeas.v1.CloudRepoSourceContext.verify(message.cloudRepo);
                            if (error)
                                return "cloudRepo." + error;
                        }
                    }
                    if (message.gerrit != null && message.hasOwnProperty("gerrit")) {
                        if (properties.context === 1)
                            return "context: multiple values";
                        properties.context = 1;
                        {
                            var error = $root.grafeas.v1.GerritSourceContext.verify(message.gerrit);
                            if (error)
                                return "gerrit." + error;
                        }
                    }
                    if (message.git != null && message.hasOwnProperty("git")) {
                        if (properties.context === 1)
                            return "context: multiple values";
                        properties.context = 1;
                        {
                            var error = $root.grafeas.v1.GitSourceContext.verify(message.git);
                            if (error)
                                return "git." + error;
                        }
                    }
                    if (message.labels != null && message.hasOwnProperty("labels")) {
                        if (!$util.isObject(message.labels))
                            return "labels: object expected";
                        var key = Object.keys(message.labels);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.labels[key[i]]))
                                return "labels: string{k:string} expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.SourceContext} SourceContext
                 */
                SourceContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.SourceContext)
                        return object;
                    var message = new $root.grafeas.v1.SourceContext();
                    if (object.cloudRepo != null) {
                        if (typeof object.cloudRepo !== "object")
                            throw TypeError(".grafeas.v1.SourceContext.cloudRepo: object expected");
                        message.cloudRepo = $root.grafeas.v1.CloudRepoSourceContext.fromObject(object.cloudRepo);
                    }
                    if (object.gerrit != null) {
                        if (typeof object.gerrit !== "object")
                            throw TypeError(".grafeas.v1.SourceContext.gerrit: object expected");
                        message.gerrit = $root.grafeas.v1.GerritSourceContext.fromObject(object.gerrit);
                    }
                    if (object.git != null) {
                        if (typeof object.git !== "object")
                            throw TypeError(".grafeas.v1.SourceContext.git: object expected");
                        message.git = $root.grafeas.v1.GitSourceContext.fromObject(object.git);
                    }
                    if (object.labels) {
                        if (typeof object.labels !== "object")
                            throw TypeError(".grafeas.v1.SourceContext.labels: object expected");
                        message.labels = {};
                        for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                            message.labels[keys[i]] = String(object.labels[keys[i]]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {grafeas.v1.SourceContext} message SourceContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.labels = {};
                    if (message.cloudRepo != null && message.hasOwnProperty("cloudRepo")) {
                        object.cloudRepo = $root.grafeas.v1.CloudRepoSourceContext.toObject(message.cloudRepo, options);
                        if (options.oneofs)
                            object.context = "cloudRepo";
                    }
                    if (message.gerrit != null && message.hasOwnProperty("gerrit")) {
                        object.gerrit = $root.grafeas.v1.GerritSourceContext.toObject(message.gerrit, options);
                        if (options.oneofs)
                            object.context = "gerrit";
                    }
                    if (message.git != null && message.hasOwnProperty("git")) {
                        object.git = $root.grafeas.v1.GitSourceContext.toObject(message.git, options);
                        if (options.oneofs)
                            object.context = "git";
                    }
                    var keys2;
                    if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                        object.labels = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.labels[keys2[j]] = message.labels[keys2[j]];
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceContext to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.SourceContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceContext
                 * @function getTypeUrl
                 * @memberof grafeas.v1.SourceContext
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.SourceContext";
                };
    
                return SourceContext;
            })();
    
            v1.AliasContext = (function() {
    
                /**
                 * Properties of an AliasContext.
                 * @memberof grafeas.v1
                 * @interface IAliasContext
                 * @property {grafeas.v1.AliasContext.Kind|null} [kind] AliasContext kind
                 * @property {string|null} [name] AliasContext name
                 */
    
                /**
                 * Constructs a new AliasContext.
                 * @memberof grafeas.v1
                 * @classdesc Represents an AliasContext.
                 * @implements IAliasContext
                 * @constructor
                 * @param {grafeas.v1.IAliasContext=} [properties] Properties to set
                 */
                function AliasContext(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AliasContext kind.
                 * @member {grafeas.v1.AliasContext.Kind} kind
                 * @memberof grafeas.v1.AliasContext
                 * @instance
                 */
                AliasContext.prototype.kind = 0;
    
                /**
                 * AliasContext name.
                 * @member {string} name
                 * @memberof grafeas.v1.AliasContext
                 * @instance
                 */
                AliasContext.prototype.name = "";
    
                /**
                 * Creates a new AliasContext instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {grafeas.v1.IAliasContext=} [properties] Properties to set
                 * @returns {grafeas.v1.AliasContext} AliasContext instance
                 */
                AliasContext.create = function create(properties) {
                    return new AliasContext(properties);
                };
    
                /**
                 * Encodes the specified AliasContext message. Does not implicitly {@link grafeas.v1.AliasContext.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {grafeas.v1.IAliasContext} message AliasContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AliasContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.kind);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified AliasContext message, length delimited. Does not implicitly {@link grafeas.v1.AliasContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {grafeas.v1.IAliasContext} message AliasContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AliasContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AliasContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.AliasContext} AliasContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AliasContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.AliasContext();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 2: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an AliasContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.AliasContext} AliasContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AliasContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AliasContext message.
                 * @function verify
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AliasContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 4:
                            break;
                        }
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates an AliasContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.AliasContext} AliasContext
                 */
                AliasContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.AliasContext)
                        return object;
                    var message = new $root.grafeas.v1.AliasContext();
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "FIXED":
                    case 1:
                        message.kind = 1;
                        break;
                    case "MOVABLE":
                    case 2:
                        message.kind = 2;
                        break;
                    case "OTHER":
                    case 4:
                        message.kind = 4;
                        break;
                    }
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from an AliasContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {grafeas.v1.AliasContext} message AliasContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AliasContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = options.enums === String ? "KIND_UNSPECIFIED" : 0;
                        object.name = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1.AliasContext.Kind[message.kind] === undefined ? message.kind : $root.grafeas.v1.AliasContext.Kind[message.kind] : message.kind;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this AliasContext to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.AliasContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AliasContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for AliasContext
                 * @function getTypeUrl
                 * @memberof grafeas.v1.AliasContext
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AliasContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.AliasContext";
                };
    
                /**
                 * Kind enum.
                 * @name grafeas.v1.AliasContext.Kind
                 * @enum {number}
                 * @property {number} KIND_UNSPECIFIED=0 KIND_UNSPECIFIED value
                 * @property {number} FIXED=1 FIXED value
                 * @property {number} MOVABLE=2 MOVABLE value
                 * @property {number} OTHER=4 OTHER value
                 */
                AliasContext.Kind = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "KIND_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "FIXED"] = 1;
                    values[valuesById[2] = "MOVABLE"] = 2;
                    values[valuesById[4] = "OTHER"] = 4;
                    return values;
                })();
    
                return AliasContext;
            })();
    
            v1.CloudRepoSourceContext = (function() {
    
                /**
                 * Properties of a CloudRepoSourceContext.
                 * @memberof grafeas.v1
                 * @interface ICloudRepoSourceContext
                 * @property {grafeas.v1.IRepoId|null} [repoId] CloudRepoSourceContext repoId
                 * @property {string|null} [revisionId] CloudRepoSourceContext revisionId
                 * @property {grafeas.v1.IAliasContext|null} [aliasContext] CloudRepoSourceContext aliasContext
                 */
    
                /**
                 * Constructs a new CloudRepoSourceContext.
                 * @memberof grafeas.v1
                 * @classdesc Represents a CloudRepoSourceContext.
                 * @implements ICloudRepoSourceContext
                 * @constructor
                 * @param {grafeas.v1.ICloudRepoSourceContext=} [properties] Properties to set
                 */
                function CloudRepoSourceContext(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CloudRepoSourceContext repoId.
                 * @member {grafeas.v1.IRepoId|null|undefined} repoId
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @instance
                 */
                CloudRepoSourceContext.prototype.repoId = null;
    
                /**
                 * CloudRepoSourceContext revisionId.
                 * @member {string|null|undefined} revisionId
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @instance
                 */
                CloudRepoSourceContext.prototype.revisionId = null;
    
                /**
                 * CloudRepoSourceContext aliasContext.
                 * @member {grafeas.v1.IAliasContext|null|undefined} aliasContext
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @instance
                 */
                CloudRepoSourceContext.prototype.aliasContext = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * CloudRepoSourceContext revision.
                 * @member {"revisionId"|"aliasContext"|undefined} revision
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @instance
                 */
                Object.defineProperty(CloudRepoSourceContext.prototype, "revision", {
                    get: $util.oneOfGetter($oneOfFields = ["revisionId", "aliasContext"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new CloudRepoSourceContext instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {grafeas.v1.ICloudRepoSourceContext=} [properties] Properties to set
                 * @returns {grafeas.v1.CloudRepoSourceContext} CloudRepoSourceContext instance
                 */
                CloudRepoSourceContext.create = function create(properties) {
                    return new CloudRepoSourceContext(properties);
                };
    
                /**
                 * Encodes the specified CloudRepoSourceContext message. Does not implicitly {@link grafeas.v1.CloudRepoSourceContext.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {grafeas.v1.ICloudRepoSourceContext} message CloudRepoSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CloudRepoSourceContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.repoId != null && Object.hasOwnProperty.call(message, "repoId"))
                        $root.grafeas.v1.RepoId.encode(message.repoId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.revisionId);
                    if (message.aliasContext != null && Object.hasOwnProperty.call(message, "aliasContext"))
                        $root.grafeas.v1.AliasContext.encode(message.aliasContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CloudRepoSourceContext message, length delimited. Does not implicitly {@link grafeas.v1.CloudRepoSourceContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {grafeas.v1.ICloudRepoSourceContext} message CloudRepoSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CloudRepoSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CloudRepoSourceContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.CloudRepoSourceContext} CloudRepoSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CloudRepoSourceContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.CloudRepoSourceContext();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.repoId = $root.grafeas.v1.RepoId.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.revisionId = reader.string();
                                break;
                            }
                        case 3: {
                                message.aliasContext = $root.grafeas.v1.AliasContext.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CloudRepoSourceContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.CloudRepoSourceContext} CloudRepoSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CloudRepoSourceContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CloudRepoSourceContext message.
                 * @function verify
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CloudRepoSourceContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.repoId != null && message.hasOwnProperty("repoId")) {
                        var error = $root.grafeas.v1.RepoId.verify(message.repoId);
                        if (error)
                            return "repoId." + error;
                    }
                    if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                        properties.revision = 1;
                        if (!$util.isString(message.revisionId))
                            return "revisionId: string expected";
                    }
                    if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                        if (properties.revision === 1)
                            return "revision: multiple values";
                        properties.revision = 1;
                        {
                            var error = $root.grafeas.v1.AliasContext.verify(message.aliasContext);
                            if (error)
                                return "aliasContext." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a CloudRepoSourceContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.CloudRepoSourceContext} CloudRepoSourceContext
                 */
                CloudRepoSourceContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.CloudRepoSourceContext)
                        return object;
                    var message = new $root.grafeas.v1.CloudRepoSourceContext();
                    if (object.repoId != null) {
                        if (typeof object.repoId !== "object")
                            throw TypeError(".grafeas.v1.CloudRepoSourceContext.repoId: object expected");
                        message.repoId = $root.grafeas.v1.RepoId.fromObject(object.repoId);
                    }
                    if (object.revisionId != null)
                        message.revisionId = String(object.revisionId);
                    if (object.aliasContext != null) {
                        if (typeof object.aliasContext !== "object")
                            throw TypeError(".grafeas.v1.CloudRepoSourceContext.aliasContext: object expected");
                        message.aliasContext = $root.grafeas.v1.AliasContext.fromObject(object.aliasContext);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CloudRepoSourceContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {grafeas.v1.CloudRepoSourceContext} message CloudRepoSourceContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CloudRepoSourceContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.repoId = null;
                    if (message.repoId != null && message.hasOwnProperty("repoId"))
                        object.repoId = $root.grafeas.v1.RepoId.toObject(message.repoId, options);
                    if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                        object.revisionId = message.revisionId;
                        if (options.oneofs)
                            object.revision = "revisionId";
                    }
                    if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                        object.aliasContext = $root.grafeas.v1.AliasContext.toObject(message.aliasContext, options);
                        if (options.oneofs)
                            object.revision = "aliasContext";
                    }
                    return object;
                };
    
                /**
                 * Converts this CloudRepoSourceContext to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CloudRepoSourceContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CloudRepoSourceContext
                 * @function getTypeUrl
                 * @memberof grafeas.v1.CloudRepoSourceContext
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CloudRepoSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.CloudRepoSourceContext";
                };
    
                return CloudRepoSourceContext;
            })();
    
            v1.GerritSourceContext = (function() {
    
                /**
                 * Properties of a GerritSourceContext.
                 * @memberof grafeas.v1
                 * @interface IGerritSourceContext
                 * @property {string|null} [hostUri] GerritSourceContext hostUri
                 * @property {string|null} [gerritProject] GerritSourceContext gerritProject
                 * @property {string|null} [revisionId] GerritSourceContext revisionId
                 * @property {grafeas.v1.IAliasContext|null} [aliasContext] GerritSourceContext aliasContext
                 */
    
                /**
                 * Constructs a new GerritSourceContext.
                 * @memberof grafeas.v1
                 * @classdesc Represents a GerritSourceContext.
                 * @implements IGerritSourceContext
                 * @constructor
                 * @param {grafeas.v1.IGerritSourceContext=} [properties] Properties to set
                 */
                function GerritSourceContext(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GerritSourceContext hostUri.
                 * @member {string} hostUri
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 */
                GerritSourceContext.prototype.hostUri = "";
    
                /**
                 * GerritSourceContext gerritProject.
                 * @member {string} gerritProject
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 */
                GerritSourceContext.prototype.gerritProject = "";
    
                /**
                 * GerritSourceContext revisionId.
                 * @member {string|null|undefined} revisionId
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 */
                GerritSourceContext.prototype.revisionId = null;
    
                /**
                 * GerritSourceContext aliasContext.
                 * @member {grafeas.v1.IAliasContext|null|undefined} aliasContext
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 */
                GerritSourceContext.prototype.aliasContext = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * GerritSourceContext revision.
                 * @member {"revisionId"|"aliasContext"|undefined} revision
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 */
                Object.defineProperty(GerritSourceContext.prototype, "revision", {
                    get: $util.oneOfGetter($oneOfFields = ["revisionId", "aliasContext"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new GerritSourceContext instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {grafeas.v1.IGerritSourceContext=} [properties] Properties to set
                 * @returns {grafeas.v1.GerritSourceContext} GerritSourceContext instance
                 */
                GerritSourceContext.create = function create(properties) {
                    return new GerritSourceContext(properties);
                };
    
                /**
                 * Encodes the specified GerritSourceContext message. Does not implicitly {@link grafeas.v1.GerritSourceContext.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {grafeas.v1.IGerritSourceContext} message GerritSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GerritSourceContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hostUri != null && Object.hasOwnProperty.call(message, "hostUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.hostUri);
                    if (message.gerritProject != null && Object.hasOwnProperty.call(message, "gerritProject"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.gerritProject);
                    if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.revisionId);
                    if (message.aliasContext != null && Object.hasOwnProperty.call(message, "aliasContext"))
                        $root.grafeas.v1.AliasContext.encode(message.aliasContext, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GerritSourceContext message, length delimited. Does not implicitly {@link grafeas.v1.GerritSourceContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {grafeas.v1.IGerritSourceContext} message GerritSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GerritSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GerritSourceContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.GerritSourceContext} GerritSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GerritSourceContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.GerritSourceContext();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.hostUri = reader.string();
                                break;
                            }
                        case 2: {
                                message.gerritProject = reader.string();
                                break;
                            }
                        case 3: {
                                message.revisionId = reader.string();
                                break;
                            }
                        case 4: {
                                message.aliasContext = $root.grafeas.v1.AliasContext.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GerritSourceContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.GerritSourceContext} GerritSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GerritSourceContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GerritSourceContext message.
                 * @function verify
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GerritSourceContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.hostUri != null && message.hasOwnProperty("hostUri"))
                        if (!$util.isString(message.hostUri))
                            return "hostUri: string expected";
                    if (message.gerritProject != null && message.hasOwnProperty("gerritProject"))
                        if (!$util.isString(message.gerritProject))
                            return "gerritProject: string expected";
                    if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                        properties.revision = 1;
                        if (!$util.isString(message.revisionId))
                            return "revisionId: string expected";
                    }
                    if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                        if (properties.revision === 1)
                            return "revision: multiple values";
                        properties.revision = 1;
                        {
                            var error = $root.grafeas.v1.AliasContext.verify(message.aliasContext);
                            if (error)
                                return "aliasContext." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GerritSourceContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.GerritSourceContext} GerritSourceContext
                 */
                GerritSourceContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.GerritSourceContext)
                        return object;
                    var message = new $root.grafeas.v1.GerritSourceContext();
                    if (object.hostUri != null)
                        message.hostUri = String(object.hostUri);
                    if (object.gerritProject != null)
                        message.gerritProject = String(object.gerritProject);
                    if (object.revisionId != null)
                        message.revisionId = String(object.revisionId);
                    if (object.aliasContext != null) {
                        if (typeof object.aliasContext !== "object")
                            throw TypeError(".grafeas.v1.GerritSourceContext.aliasContext: object expected");
                        message.aliasContext = $root.grafeas.v1.AliasContext.fromObject(object.aliasContext);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GerritSourceContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {grafeas.v1.GerritSourceContext} message GerritSourceContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GerritSourceContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.hostUri = "";
                        object.gerritProject = "";
                    }
                    if (message.hostUri != null && message.hasOwnProperty("hostUri"))
                        object.hostUri = message.hostUri;
                    if (message.gerritProject != null && message.hasOwnProperty("gerritProject"))
                        object.gerritProject = message.gerritProject;
                    if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                        object.revisionId = message.revisionId;
                        if (options.oneofs)
                            object.revision = "revisionId";
                    }
                    if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                        object.aliasContext = $root.grafeas.v1.AliasContext.toObject(message.aliasContext, options);
                        if (options.oneofs)
                            object.revision = "aliasContext";
                    }
                    return object;
                };
    
                /**
                 * Converts this GerritSourceContext to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.GerritSourceContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GerritSourceContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GerritSourceContext
                 * @function getTypeUrl
                 * @memberof grafeas.v1.GerritSourceContext
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GerritSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.GerritSourceContext";
                };
    
                return GerritSourceContext;
            })();
    
            v1.GitSourceContext = (function() {
    
                /**
                 * Properties of a GitSourceContext.
                 * @memberof grafeas.v1
                 * @interface IGitSourceContext
                 * @property {string|null} [url] GitSourceContext url
                 * @property {string|null} [revisionId] GitSourceContext revisionId
                 */
    
                /**
                 * Constructs a new GitSourceContext.
                 * @memberof grafeas.v1
                 * @classdesc Represents a GitSourceContext.
                 * @implements IGitSourceContext
                 * @constructor
                 * @param {grafeas.v1.IGitSourceContext=} [properties] Properties to set
                 */
                function GitSourceContext(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GitSourceContext url.
                 * @member {string} url
                 * @memberof grafeas.v1.GitSourceContext
                 * @instance
                 */
                GitSourceContext.prototype.url = "";
    
                /**
                 * GitSourceContext revisionId.
                 * @member {string} revisionId
                 * @memberof grafeas.v1.GitSourceContext
                 * @instance
                 */
                GitSourceContext.prototype.revisionId = "";
    
                /**
                 * Creates a new GitSourceContext instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {grafeas.v1.IGitSourceContext=} [properties] Properties to set
                 * @returns {grafeas.v1.GitSourceContext} GitSourceContext instance
                 */
                GitSourceContext.create = function create(properties) {
                    return new GitSourceContext(properties);
                };
    
                /**
                 * Encodes the specified GitSourceContext message. Does not implicitly {@link grafeas.v1.GitSourceContext.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {grafeas.v1.IGitSourceContext} message GitSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GitSourceContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                    if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.revisionId);
                    return writer;
                };
    
                /**
                 * Encodes the specified GitSourceContext message, length delimited. Does not implicitly {@link grafeas.v1.GitSourceContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {grafeas.v1.IGitSourceContext} message GitSourceContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GitSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GitSourceContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.GitSourceContext} GitSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GitSourceContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.GitSourceContext();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.url = reader.string();
                                break;
                            }
                        case 2: {
                                message.revisionId = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GitSourceContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.GitSourceContext} GitSourceContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GitSourceContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GitSourceContext message.
                 * @function verify
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GitSourceContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.revisionId != null && message.hasOwnProperty("revisionId"))
                        if (!$util.isString(message.revisionId))
                            return "revisionId: string expected";
                    return null;
                };
    
                /**
                 * Creates a GitSourceContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.GitSourceContext} GitSourceContext
                 */
                GitSourceContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.GitSourceContext)
                        return object;
                    var message = new $root.grafeas.v1.GitSourceContext();
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.revisionId != null)
                        message.revisionId = String(object.revisionId);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GitSourceContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {grafeas.v1.GitSourceContext} message GitSourceContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GitSourceContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.url = "";
                        object.revisionId = "";
                    }
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.revisionId != null && message.hasOwnProperty("revisionId"))
                        object.revisionId = message.revisionId;
                    return object;
                };
    
                /**
                 * Converts this GitSourceContext to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.GitSourceContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GitSourceContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GitSourceContext
                 * @function getTypeUrl
                 * @memberof grafeas.v1.GitSourceContext
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GitSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.GitSourceContext";
                };
    
                return GitSourceContext;
            })();
    
            v1.RepoId = (function() {
    
                /**
                 * Properties of a RepoId.
                 * @memberof grafeas.v1
                 * @interface IRepoId
                 * @property {grafeas.v1.IProjectRepoId|null} [projectRepoId] RepoId projectRepoId
                 * @property {string|null} [uid] RepoId uid
                 */
    
                /**
                 * Constructs a new RepoId.
                 * @memberof grafeas.v1
                 * @classdesc Represents a RepoId.
                 * @implements IRepoId
                 * @constructor
                 * @param {grafeas.v1.IRepoId=} [properties] Properties to set
                 */
                function RepoId(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RepoId projectRepoId.
                 * @member {grafeas.v1.IProjectRepoId|null|undefined} projectRepoId
                 * @memberof grafeas.v1.RepoId
                 * @instance
                 */
                RepoId.prototype.projectRepoId = null;
    
                /**
                 * RepoId uid.
                 * @member {string|null|undefined} uid
                 * @memberof grafeas.v1.RepoId
                 * @instance
                 */
                RepoId.prototype.uid = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * RepoId id.
                 * @member {"projectRepoId"|"uid"|undefined} id
                 * @memberof grafeas.v1.RepoId
                 * @instance
                 */
                Object.defineProperty(RepoId.prototype, "id", {
                    get: $util.oneOfGetter($oneOfFields = ["projectRepoId", "uid"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new RepoId instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {grafeas.v1.IRepoId=} [properties] Properties to set
                 * @returns {grafeas.v1.RepoId} RepoId instance
                 */
                RepoId.create = function create(properties) {
                    return new RepoId(properties);
                };
    
                /**
                 * Encodes the specified RepoId message. Does not implicitly {@link grafeas.v1.RepoId.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {grafeas.v1.IRepoId} message RepoId message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RepoId.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.projectRepoId != null && Object.hasOwnProperty.call(message, "projectRepoId"))
                        $root.grafeas.v1.ProjectRepoId.encode(message.projectRepoId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
                    return writer;
                };
    
                /**
                 * Encodes the specified RepoId message, length delimited. Does not implicitly {@link grafeas.v1.RepoId.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {grafeas.v1.IRepoId} message RepoId message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RepoId.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RepoId message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.RepoId} RepoId
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RepoId.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.RepoId();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.projectRepoId = $root.grafeas.v1.ProjectRepoId.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.uid = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RepoId message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.RepoId} RepoId
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RepoId.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RepoId message.
                 * @function verify
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RepoId.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.projectRepoId != null && message.hasOwnProperty("projectRepoId")) {
                        properties.id = 1;
                        {
                            var error = $root.grafeas.v1.ProjectRepoId.verify(message.projectRepoId);
                            if (error)
                                return "projectRepoId." + error;
                        }
                    }
                    if (message.uid != null && message.hasOwnProperty("uid")) {
                        if (properties.id === 1)
                            return "id: multiple values";
                        properties.id = 1;
                        if (!$util.isString(message.uid))
                            return "uid: string expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a RepoId message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.RepoId} RepoId
                 */
                RepoId.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.RepoId)
                        return object;
                    var message = new $root.grafeas.v1.RepoId();
                    if (object.projectRepoId != null) {
                        if (typeof object.projectRepoId !== "object")
                            throw TypeError(".grafeas.v1.RepoId.projectRepoId: object expected");
                        message.projectRepoId = $root.grafeas.v1.ProjectRepoId.fromObject(object.projectRepoId);
                    }
                    if (object.uid != null)
                        message.uid = String(object.uid);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RepoId message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {grafeas.v1.RepoId} message RepoId
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RepoId.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.projectRepoId != null && message.hasOwnProperty("projectRepoId")) {
                        object.projectRepoId = $root.grafeas.v1.ProjectRepoId.toObject(message.projectRepoId, options);
                        if (options.oneofs)
                            object.id = "projectRepoId";
                    }
                    if (message.uid != null && message.hasOwnProperty("uid")) {
                        object.uid = message.uid;
                        if (options.oneofs)
                            object.id = "uid";
                    }
                    return object;
                };
    
                /**
                 * Converts this RepoId to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.RepoId
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RepoId.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RepoId
                 * @function getTypeUrl
                 * @memberof grafeas.v1.RepoId
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RepoId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.RepoId";
                };
    
                return RepoId;
            })();
    
            v1.ProjectRepoId = (function() {
    
                /**
                 * Properties of a ProjectRepoId.
                 * @memberof grafeas.v1
                 * @interface IProjectRepoId
                 * @property {string|null} [projectId] ProjectRepoId projectId
                 * @property {string|null} [repoName] ProjectRepoId repoName
                 */
    
                /**
                 * Constructs a new ProjectRepoId.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ProjectRepoId.
                 * @implements IProjectRepoId
                 * @constructor
                 * @param {grafeas.v1.IProjectRepoId=} [properties] Properties to set
                 */
                function ProjectRepoId(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ProjectRepoId projectId.
                 * @member {string} projectId
                 * @memberof grafeas.v1.ProjectRepoId
                 * @instance
                 */
                ProjectRepoId.prototype.projectId = "";
    
                /**
                 * ProjectRepoId repoName.
                 * @member {string} repoName
                 * @memberof grafeas.v1.ProjectRepoId
                 * @instance
                 */
                ProjectRepoId.prototype.repoName = "";
    
                /**
                 * Creates a new ProjectRepoId instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {grafeas.v1.IProjectRepoId=} [properties] Properties to set
                 * @returns {grafeas.v1.ProjectRepoId} ProjectRepoId instance
                 */
                ProjectRepoId.create = function create(properties) {
                    return new ProjectRepoId(properties);
                };
    
                /**
                 * Encodes the specified ProjectRepoId message. Does not implicitly {@link grafeas.v1.ProjectRepoId.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {grafeas.v1.IProjectRepoId} message ProjectRepoId message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProjectRepoId.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.projectId);
                    if (message.repoName != null && Object.hasOwnProperty.call(message, "repoName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.repoName);
                    return writer;
                };
    
                /**
                 * Encodes the specified ProjectRepoId message, length delimited. Does not implicitly {@link grafeas.v1.ProjectRepoId.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {grafeas.v1.IProjectRepoId} message ProjectRepoId message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProjectRepoId.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ProjectRepoId message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ProjectRepoId} ProjectRepoId
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProjectRepoId.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ProjectRepoId();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.projectId = reader.string();
                                break;
                            }
                        case 2: {
                                message.repoName = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ProjectRepoId message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ProjectRepoId} ProjectRepoId
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProjectRepoId.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ProjectRepoId message.
                 * @function verify
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProjectRepoId.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        if (!$util.isString(message.projectId))
                            return "projectId: string expected";
                    if (message.repoName != null && message.hasOwnProperty("repoName"))
                        if (!$util.isString(message.repoName))
                            return "repoName: string expected";
                    return null;
                };
    
                /**
                 * Creates a ProjectRepoId message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ProjectRepoId} ProjectRepoId
                 */
                ProjectRepoId.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ProjectRepoId)
                        return object;
                    var message = new $root.grafeas.v1.ProjectRepoId();
                    if (object.projectId != null)
                        message.projectId = String(object.projectId);
                    if (object.repoName != null)
                        message.repoName = String(object.repoName);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ProjectRepoId message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {grafeas.v1.ProjectRepoId} message ProjectRepoId
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProjectRepoId.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.projectId = "";
                        object.repoName = "";
                    }
                    if (message.projectId != null && message.hasOwnProperty("projectId"))
                        object.projectId = message.projectId;
                    if (message.repoName != null && message.hasOwnProperty("repoName"))
                        object.repoName = message.repoName;
                    return object;
                };
    
                /**
                 * Converts this ProjectRepoId to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ProjectRepoId
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProjectRepoId.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ProjectRepoId
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ProjectRepoId
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ProjectRepoId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ProjectRepoId";
                };
    
                return ProjectRepoId;
            })();
    
            v1.ComplianceNote = (function() {
    
                /**
                 * Properties of a ComplianceNote.
                 * @memberof grafeas.v1
                 * @interface IComplianceNote
                 * @property {string|null} [title] ComplianceNote title
                 * @property {string|null} [description] ComplianceNote description
                 * @property {Array.<grafeas.v1.IComplianceVersion>|null} [version] ComplianceNote version
                 * @property {string|null} [rationale] ComplianceNote rationale
                 * @property {string|null} [remediation] ComplianceNote remediation
                 * @property {grafeas.v1.ComplianceNote.ICisBenchmark|null} [cisBenchmark] ComplianceNote cisBenchmark
                 * @property {Uint8Array|null} [scanInstructions] ComplianceNote scanInstructions
                 */
    
                /**
                 * Constructs a new ComplianceNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ComplianceNote.
                 * @implements IComplianceNote
                 * @constructor
                 * @param {grafeas.v1.IComplianceNote=} [properties] Properties to set
                 */
                function ComplianceNote(properties) {
                    this.version = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ComplianceNote title.
                 * @member {string} title
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.title = "";
    
                /**
                 * ComplianceNote description.
                 * @member {string} description
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.description = "";
    
                /**
                 * ComplianceNote version.
                 * @member {Array.<grafeas.v1.IComplianceVersion>} version
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.version = $util.emptyArray;
    
                /**
                 * ComplianceNote rationale.
                 * @member {string} rationale
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.rationale = "";
    
                /**
                 * ComplianceNote remediation.
                 * @member {string} remediation
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.remediation = "";
    
                /**
                 * ComplianceNote cisBenchmark.
                 * @member {grafeas.v1.ComplianceNote.ICisBenchmark|null|undefined} cisBenchmark
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.cisBenchmark = null;
    
                /**
                 * ComplianceNote scanInstructions.
                 * @member {Uint8Array} scanInstructions
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                ComplianceNote.prototype.scanInstructions = $util.newBuffer([]);
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * ComplianceNote complianceType.
                 * @member {"cisBenchmark"|undefined} complianceType
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 */
                Object.defineProperty(ComplianceNote.prototype, "complianceType", {
                    get: $util.oneOfGetter($oneOfFields = ["cisBenchmark"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new ComplianceNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {grafeas.v1.IComplianceNote=} [properties] Properties to set
                 * @returns {grafeas.v1.ComplianceNote} ComplianceNote instance
                 */
                ComplianceNote.create = function create(properties) {
                    return new ComplianceNote(properties);
                };
    
                /**
                 * Encodes the specified ComplianceNote message. Does not implicitly {@link grafeas.v1.ComplianceNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {grafeas.v1.IComplianceNote} message ComplianceNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.version != null && message.version.length)
                        for (var i = 0; i < message.version.length; ++i)
                            $root.grafeas.v1.ComplianceVersion.encode(message.version[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.rationale != null && Object.hasOwnProperty.call(message, "rationale"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.rationale);
                    if (message.remediation != null && Object.hasOwnProperty.call(message, "remediation"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.remediation);
                    if (message.cisBenchmark != null && Object.hasOwnProperty.call(message, "cisBenchmark"))
                        $root.grafeas.v1.ComplianceNote.CisBenchmark.encode(message.cisBenchmark, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.scanInstructions != null && Object.hasOwnProperty.call(message, "scanInstructions"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.scanInstructions);
                    return writer;
                };
    
                /**
                 * Encodes the specified ComplianceNote message, length delimited. Does not implicitly {@link grafeas.v1.ComplianceNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {grafeas.v1.IComplianceNote} message ComplianceNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ComplianceNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ComplianceNote} ComplianceNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ComplianceNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                message.description = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.version && message.version.length))
                                    message.version = [];
                                message.version.push($root.grafeas.v1.ComplianceVersion.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.rationale = reader.string();
                                break;
                            }
                        case 5: {
                                message.remediation = reader.string();
                                break;
                            }
                        case 6: {
                                message.cisBenchmark = $root.grafeas.v1.ComplianceNote.CisBenchmark.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.scanInstructions = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ComplianceNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ComplianceNote} ComplianceNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ComplianceNote message.
                 * @function verify
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComplianceNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.version != null && message.hasOwnProperty("version")) {
                        if (!Array.isArray(message.version))
                            return "version: array expected";
                        for (var i = 0; i < message.version.length; ++i) {
                            var error = $root.grafeas.v1.ComplianceVersion.verify(message.version[i]);
                            if (error)
                                return "version." + error;
                        }
                    }
                    if (message.rationale != null && message.hasOwnProperty("rationale"))
                        if (!$util.isString(message.rationale))
                            return "rationale: string expected";
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        if (!$util.isString(message.remediation))
                            return "remediation: string expected";
                    if (message.cisBenchmark != null && message.hasOwnProperty("cisBenchmark")) {
                        properties.complianceType = 1;
                        {
                            var error = $root.grafeas.v1.ComplianceNote.CisBenchmark.verify(message.cisBenchmark);
                            if (error)
                                return "cisBenchmark." + error;
                        }
                    }
                    if (message.scanInstructions != null && message.hasOwnProperty("scanInstructions"))
                        if (!(message.scanInstructions && typeof message.scanInstructions.length === "number" || $util.isString(message.scanInstructions)))
                            return "scanInstructions: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a ComplianceNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ComplianceNote} ComplianceNote
                 */
                ComplianceNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ComplianceNote)
                        return object;
                    var message = new $root.grafeas.v1.ComplianceNote();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.version) {
                        if (!Array.isArray(object.version))
                            throw TypeError(".grafeas.v1.ComplianceNote.version: array expected");
                        message.version = [];
                        for (var i = 0; i < object.version.length; ++i) {
                            if (typeof object.version[i] !== "object")
                                throw TypeError(".grafeas.v1.ComplianceNote.version: object expected");
                            message.version[i] = $root.grafeas.v1.ComplianceVersion.fromObject(object.version[i]);
                        }
                    }
                    if (object.rationale != null)
                        message.rationale = String(object.rationale);
                    if (object.remediation != null)
                        message.remediation = String(object.remediation);
                    if (object.cisBenchmark != null) {
                        if (typeof object.cisBenchmark !== "object")
                            throw TypeError(".grafeas.v1.ComplianceNote.cisBenchmark: object expected");
                        message.cisBenchmark = $root.grafeas.v1.ComplianceNote.CisBenchmark.fromObject(object.cisBenchmark);
                    }
                    if (object.scanInstructions != null)
                        if (typeof object.scanInstructions === "string")
                            $util.base64.decode(object.scanInstructions, message.scanInstructions = $util.newBuffer($util.base64.length(object.scanInstructions)), 0);
                        else if (object.scanInstructions.length >= 0)
                            message.scanInstructions = object.scanInstructions;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ComplianceNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {grafeas.v1.ComplianceNote} message ComplianceNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComplianceNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.version = [];
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.rationale = "";
                        object.remediation = "";
                        if (options.bytes === String)
                            object.scanInstructions = "";
                        else {
                            object.scanInstructions = [];
                            if (options.bytes !== Array)
                                object.scanInstructions = $util.newBuffer(object.scanInstructions);
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.version && message.version.length) {
                        object.version = [];
                        for (var j = 0; j < message.version.length; ++j)
                            object.version[j] = $root.grafeas.v1.ComplianceVersion.toObject(message.version[j], options);
                    }
                    if (message.rationale != null && message.hasOwnProperty("rationale"))
                        object.rationale = message.rationale;
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        object.remediation = message.remediation;
                    if (message.cisBenchmark != null && message.hasOwnProperty("cisBenchmark")) {
                        object.cisBenchmark = $root.grafeas.v1.ComplianceNote.CisBenchmark.toObject(message.cisBenchmark, options);
                        if (options.oneofs)
                            object.complianceType = "cisBenchmark";
                    }
                    if (message.scanInstructions != null && message.hasOwnProperty("scanInstructions"))
                        object.scanInstructions = options.bytes === String ? $util.base64.encode(message.scanInstructions, 0, message.scanInstructions.length) : options.bytes === Array ? Array.prototype.slice.call(message.scanInstructions) : message.scanInstructions;
                    return object;
                };
    
                /**
                 * Converts this ComplianceNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ComplianceNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComplianceNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ComplianceNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ComplianceNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ComplianceNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ComplianceNote";
                };
    
                ComplianceNote.CisBenchmark = (function() {
    
                    /**
                     * Properties of a CisBenchmark.
                     * @memberof grafeas.v1.ComplianceNote
                     * @interface ICisBenchmark
                     * @property {number|null} [profileLevel] CisBenchmark profileLevel
                     * @property {grafeas.v1.Severity|null} [severity] CisBenchmark severity
                     */
    
                    /**
                     * Constructs a new CisBenchmark.
                     * @memberof grafeas.v1.ComplianceNote
                     * @classdesc Represents a CisBenchmark.
                     * @implements ICisBenchmark
                     * @constructor
                     * @param {grafeas.v1.ComplianceNote.ICisBenchmark=} [properties] Properties to set
                     */
                    function CisBenchmark(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CisBenchmark profileLevel.
                     * @member {number} profileLevel
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @instance
                     */
                    CisBenchmark.prototype.profileLevel = 0;
    
                    /**
                     * CisBenchmark severity.
                     * @member {grafeas.v1.Severity} severity
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @instance
                     */
                    CisBenchmark.prototype.severity = 0;
    
                    /**
                     * Creates a new CisBenchmark instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {grafeas.v1.ComplianceNote.ICisBenchmark=} [properties] Properties to set
                     * @returns {grafeas.v1.ComplianceNote.CisBenchmark} CisBenchmark instance
                     */
                    CisBenchmark.create = function create(properties) {
                        return new CisBenchmark(properties);
                    };
    
                    /**
                     * Encodes the specified CisBenchmark message. Does not implicitly {@link grafeas.v1.ComplianceNote.CisBenchmark.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {grafeas.v1.ComplianceNote.ICisBenchmark} message CisBenchmark message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CisBenchmark.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.profileLevel != null && Object.hasOwnProperty.call(message, "profileLevel"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.profileLevel);
                        if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CisBenchmark message, length delimited. Does not implicitly {@link grafeas.v1.ComplianceNote.CisBenchmark.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {grafeas.v1.ComplianceNote.ICisBenchmark} message CisBenchmark message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CisBenchmark.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CisBenchmark message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.ComplianceNote.CisBenchmark} CisBenchmark
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CisBenchmark.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ComplianceNote.CisBenchmark();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.profileLevel = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.severity = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CisBenchmark message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.ComplianceNote.CisBenchmark} CisBenchmark
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CisBenchmark.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CisBenchmark message.
                     * @function verify
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CisBenchmark.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.profileLevel != null && message.hasOwnProperty("profileLevel"))
                            if (!$util.isInteger(message.profileLevel))
                                return "profileLevel: integer expected";
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            switch (message.severity) {
                            default:
                                return "severity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a CisBenchmark message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.ComplianceNote.CisBenchmark} CisBenchmark
                     */
                    CisBenchmark.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.ComplianceNote.CisBenchmark)
                            return object;
                        var message = new $root.grafeas.v1.ComplianceNote.CisBenchmark();
                        if (object.profileLevel != null)
                            message.profileLevel = object.profileLevel | 0;
                        switch (object.severity) {
                        default:
                            if (typeof object.severity === "number") {
                                message.severity = object.severity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.severity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.severity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.severity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.severity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.severity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.severity = 5;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CisBenchmark message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {grafeas.v1.ComplianceNote.CisBenchmark} message CisBenchmark
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CisBenchmark.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.profileLevel = 0;
                            object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        }
                        if (message.profileLevel != null && message.hasOwnProperty("profileLevel"))
                            object.profileLevel = message.profileLevel;
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            object.severity = options.enums === String ? $root.grafeas.v1.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1.Severity[message.severity] : message.severity;
                        return object;
                    };
    
                    /**
                     * Converts this CisBenchmark to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CisBenchmark.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CisBenchmark
                     * @function getTypeUrl
                     * @memberof grafeas.v1.ComplianceNote.CisBenchmark
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CisBenchmark.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.ComplianceNote.CisBenchmark";
                    };
    
                    return CisBenchmark;
                })();
    
                return ComplianceNote;
            })();
    
            v1.ComplianceVersion = (function() {
    
                /**
                 * Properties of a ComplianceVersion.
                 * @memberof grafeas.v1
                 * @interface IComplianceVersion
                 * @property {string|null} [cpeUri] ComplianceVersion cpeUri
                 * @property {string|null} [benchmarkDocument] ComplianceVersion benchmarkDocument
                 * @property {string|null} [version] ComplianceVersion version
                 */
    
                /**
                 * Constructs a new ComplianceVersion.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ComplianceVersion.
                 * @implements IComplianceVersion
                 * @constructor
                 * @param {grafeas.v1.IComplianceVersion=} [properties] Properties to set
                 */
                function ComplianceVersion(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ComplianceVersion cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.ComplianceVersion
                 * @instance
                 */
                ComplianceVersion.prototype.cpeUri = "";
    
                /**
                 * ComplianceVersion benchmarkDocument.
                 * @member {string} benchmarkDocument
                 * @memberof grafeas.v1.ComplianceVersion
                 * @instance
                 */
                ComplianceVersion.prototype.benchmarkDocument = "";
    
                /**
                 * ComplianceVersion version.
                 * @member {string} version
                 * @memberof grafeas.v1.ComplianceVersion
                 * @instance
                 */
                ComplianceVersion.prototype.version = "";
    
                /**
                 * Creates a new ComplianceVersion instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {grafeas.v1.IComplianceVersion=} [properties] Properties to set
                 * @returns {grafeas.v1.ComplianceVersion} ComplianceVersion instance
                 */
                ComplianceVersion.create = function create(properties) {
                    return new ComplianceVersion(properties);
                };
    
                /**
                 * Encodes the specified ComplianceVersion message. Does not implicitly {@link grafeas.v1.ComplianceVersion.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {grafeas.v1.IComplianceVersion} message ComplianceVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                    if (message.benchmarkDocument != null && Object.hasOwnProperty.call(message, "benchmarkDocument"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.benchmarkDocument);
                    return writer;
                };
    
                /**
                 * Encodes the specified ComplianceVersion message, length delimited. Does not implicitly {@link grafeas.v1.ComplianceVersion.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {grafeas.v1.IComplianceVersion} message ComplianceVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceVersion.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ComplianceVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ComplianceVersion} ComplianceVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ComplianceVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 3: {
                                message.benchmarkDocument = reader.string();
                                break;
                            }
                        case 2: {
                                message.version = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ComplianceVersion message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ComplianceVersion} ComplianceVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceVersion.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ComplianceVersion message.
                 * @function verify
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComplianceVersion.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.benchmarkDocument != null && message.hasOwnProperty("benchmarkDocument"))
                        if (!$util.isString(message.benchmarkDocument))
                            return "benchmarkDocument: string expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    return null;
                };
    
                /**
                 * Creates a ComplianceVersion message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ComplianceVersion} ComplianceVersion
                 */
                ComplianceVersion.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ComplianceVersion)
                        return object;
                    var message = new $root.grafeas.v1.ComplianceVersion();
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    if (object.benchmarkDocument != null)
                        message.benchmarkDocument = String(object.benchmarkDocument);
                    if (object.version != null)
                        message.version = String(object.version);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ComplianceVersion message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {grafeas.v1.ComplianceVersion} message ComplianceVersion
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComplianceVersion.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.cpeUri = "";
                        object.version = "";
                        object.benchmarkDocument = "";
                    }
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.benchmarkDocument != null && message.hasOwnProperty("benchmarkDocument"))
                        object.benchmarkDocument = message.benchmarkDocument;
                    return object;
                };
    
                /**
                 * Converts this ComplianceVersion to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ComplianceVersion
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComplianceVersion.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ComplianceVersion
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ComplianceVersion
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ComplianceVersion.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ComplianceVersion";
                };
    
                return ComplianceVersion;
            })();
    
            v1.ComplianceOccurrence = (function() {
    
                /**
                 * Properties of a ComplianceOccurrence.
                 * @memberof grafeas.v1
                 * @interface IComplianceOccurrence
                 * @property {Array.<grafeas.v1.INonCompliantFile>|null} [nonCompliantFiles] ComplianceOccurrence nonCompliantFiles
                 * @property {string|null} [nonComplianceReason] ComplianceOccurrence nonComplianceReason
                 */
    
                /**
                 * Constructs a new ComplianceOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ComplianceOccurrence.
                 * @implements IComplianceOccurrence
                 * @constructor
                 * @param {grafeas.v1.IComplianceOccurrence=} [properties] Properties to set
                 */
                function ComplianceOccurrence(properties) {
                    this.nonCompliantFiles = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ComplianceOccurrence nonCompliantFiles.
                 * @member {Array.<grafeas.v1.INonCompliantFile>} nonCompliantFiles
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @instance
                 */
                ComplianceOccurrence.prototype.nonCompliantFiles = $util.emptyArray;
    
                /**
                 * ComplianceOccurrence nonComplianceReason.
                 * @member {string} nonComplianceReason
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @instance
                 */
                ComplianceOccurrence.prototype.nonComplianceReason = "";
    
                /**
                 * Creates a new ComplianceOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {grafeas.v1.IComplianceOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.ComplianceOccurrence} ComplianceOccurrence instance
                 */
                ComplianceOccurrence.create = function create(properties) {
                    return new ComplianceOccurrence(properties);
                };
    
                /**
                 * Encodes the specified ComplianceOccurrence message. Does not implicitly {@link grafeas.v1.ComplianceOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {grafeas.v1.IComplianceOccurrence} message ComplianceOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nonCompliantFiles != null && message.nonCompliantFiles.length)
                        for (var i = 0; i < message.nonCompliantFiles.length; ++i)
                            $root.grafeas.v1.NonCompliantFile.encode(message.nonCompliantFiles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nonComplianceReason != null && Object.hasOwnProperty.call(message, "nonComplianceReason"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nonComplianceReason);
                    return writer;
                };
    
                /**
                 * Encodes the specified ComplianceOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.ComplianceOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {grafeas.v1.IComplianceOccurrence} message ComplianceOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ComplianceOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ComplianceOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ComplianceOccurrence} ComplianceOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ComplianceOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.nonCompliantFiles && message.nonCompliantFiles.length))
                                    message.nonCompliantFiles = [];
                                message.nonCompliantFiles.push($root.grafeas.v1.NonCompliantFile.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.nonComplianceReason = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ComplianceOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ComplianceOccurrence} ComplianceOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ComplianceOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ComplianceOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ComplianceOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.nonCompliantFiles != null && message.hasOwnProperty("nonCompliantFiles")) {
                        if (!Array.isArray(message.nonCompliantFiles))
                            return "nonCompliantFiles: array expected";
                        for (var i = 0; i < message.nonCompliantFiles.length; ++i) {
                            var error = $root.grafeas.v1.NonCompliantFile.verify(message.nonCompliantFiles[i]);
                            if (error)
                                return "nonCompliantFiles." + error;
                        }
                    }
                    if (message.nonComplianceReason != null && message.hasOwnProperty("nonComplianceReason"))
                        if (!$util.isString(message.nonComplianceReason))
                            return "nonComplianceReason: string expected";
                    return null;
                };
    
                /**
                 * Creates a ComplianceOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ComplianceOccurrence} ComplianceOccurrence
                 */
                ComplianceOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ComplianceOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.ComplianceOccurrence();
                    if (object.nonCompliantFiles) {
                        if (!Array.isArray(object.nonCompliantFiles))
                            throw TypeError(".grafeas.v1.ComplianceOccurrence.nonCompliantFiles: array expected");
                        message.nonCompliantFiles = [];
                        for (var i = 0; i < object.nonCompliantFiles.length; ++i) {
                            if (typeof object.nonCompliantFiles[i] !== "object")
                                throw TypeError(".grafeas.v1.ComplianceOccurrence.nonCompliantFiles: object expected");
                            message.nonCompliantFiles[i] = $root.grafeas.v1.NonCompliantFile.fromObject(object.nonCompliantFiles[i]);
                        }
                    }
                    if (object.nonComplianceReason != null)
                        message.nonComplianceReason = String(object.nonComplianceReason);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ComplianceOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {grafeas.v1.ComplianceOccurrence} message ComplianceOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ComplianceOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.nonCompliantFiles = [];
                    if (options.defaults)
                        object.nonComplianceReason = "";
                    if (message.nonCompliantFiles && message.nonCompliantFiles.length) {
                        object.nonCompliantFiles = [];
                        for (var j = 0; j < message.nonCompliantFiles.length; ++j)
                            object.nonCompliantFiles[j] = $root.grafeas.v1.NonCompliantFile.toObject(message.nonCompliantFiles[j], options);
                    }
                    if (message.nonComplianceReason != null && message.hasOwnProperty("nonComplianceReason"))
                        object.nonComplianceReason = message.nonComplianceReason;
                    return object;
                };
    
                /**
                 * Converts this ComplianceOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ComplianceOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ComplianceOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ComplianceOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ComplianceOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ComplianceOccurrence";
                };
    
                return ComplianceOccurrence;
            })();
    
            v1.NonCompliantFile = (function() {
    
                /**
                 * Properties of a NonCompliantFile.
                 * @memberof grafeas.v1
                 * @interface INonCompliantFile
                 * @property {string|null} [path] NonCompliantFile path
                 * @property {string|null} [displayCommand] NonCompliantFile displayCommand
                 * @property {string|null} [reason] NonCompliantFile reason
                 */
    
                /**
                 * Constructs a new NonCompliantFile.
                 * @memberof grafeas.v1
                 * @classdesc Represents a NonCompliantFile.
                 * @implements INonCompliantFile
                 * @constructor
                 * @param {grafeas.v1.INonCompliantFile=} [properties] Properties to set
                 */
                function NonCompliantFile(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NonCompliantFile path.
                 * @member {string} path
                 * @memberof grafeas.v1.NonCompliantFile
                 * @instance
                 */
                NonCompliantFile.prototype.path = "";
    
                /**
                 * NonCompliantFile displayCommand.
                 * @member {string} displayCommand
                 * @memberof grafeas.v1.NonCompliantFile
                 * @instance
                 */
                NonCompliantFile.prototype.displayCommand = "";
    
                /**
                 * NonCompliantFile reason.
                 * @member {string} reason
                 * @memberof grafeas.v1.NonCompliantFile
                 * @instance
                 */
                NonCompliantFile.prototype.reason = "";
    
                /**
                 * Creates a new NonCompliantFile instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {grafeas.v1.INonCompliantFile=} [properties] Properties to set
                 * @returns {grafeas.v1.NonCompliantFile} NonCompliantFile instance
                 */
                NonCompliantFile.create = function create(properties) {
                    return new NonCompliantFile(properties);
                };
    
                /**
                 * Encodes the specified NonCompliantFile message. Does not implicitly {@link grafeas.v1.NonCompliantFile.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {grafeas.v1.INonCompliantFile} message NonCompliantFile message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NonCompliantFile.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                    if (message.displayCommand != null && Object.hasOwnProperty.call(message, "displayCommand"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayCommand);
                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
                    return writer;
                };
    
                /**
                 * Encodes the specified NonCompliantFile message, length delimited. Does not implicitly {@link grafeas.v1.NonCompliantFile.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {grafeas.v1.INonCompliantFile} message NonCompliantFile message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NonCompliantFile.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NonCompliantFile message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.NonCompliantFile} NonCompliantFile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NonCompliantFile.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.NonCompliantFile();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.path = reader.string();
                                break;
                            }
                        case 2: {
                                message.displayCommand = reader.string();
                                break;
                            }
                        case 3: {
                                message.reason = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NonCompliantFile message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.NonCompliantFile} NonCompliantFile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NonCompliantFile.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NonCompliantFile message.
                 * @function verify
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NonCompliantFile.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    if (message.displayCommand != null && message.hasOwnProperty("displayCommand"))
                        if (!$util.isString(message.displayCommand))
                            return "displayCommand: string expected";
                    if (message.reason != null && message.hasOwnProperty("reason"))
                        if (!$util.isString(message.reason))
                            return "reason: string expected";
                    return null;
                };
    
                /**
                 * Creates a NonCompliantFile message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.NonCompliantFile} NonCompliantFile
                 */
                NonCompliantFile.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.NonCompliantFile)
                        return object;
                    var message = new $root.grafeas.v1.NonCompliantFile();
                    if (object.path != null)
                        message.path = String(object.path);
                    if (object.displayCommand != null)
                        message.displayCommand = String(object.displayCommand);
                    if (object.reason != null)
                        message.reason = String(object.reason);
                    return message;
                };
    
                /**
                 * Creates a plain object from a NonCompliantFile message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {grafeas.v1.NonCompliantFile} message NonCompliantFile
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NonCompliantFile.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.path = "";
                        object.displayCommand = "";
                        object.reason = "";
                    }
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.displayCommand != null && message.hasOwnProperty("displayCommand"))
                        object.displayCommand = message.displayCommand;
                    if (message.reason != null && message.hasOwnProperty("reason"))
                        object.reason = message.reason;
                    return object;
                };
    
                /**
                 * Converts this NonCompliantFile to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.NonCompliantFile
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NonCompliantFile.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NonCompliantFile
                 * @function getTypeUrl
                 * @memberof grafeas.v1.NonCompliantFile
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NonCompliantFile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.NonCompliantFile";
                };
    
                return NonCompliantFile;
            })();
    
            /**
             * Severity enum.
             * @name grafeas.v1.Severity
             * @enum {number}
             * @property {number} SEVERITY_UNSPECIFIED=0 SEVERITY_UNSPECIFIED value
             * @property {number} MINIMAL=1 MINIMAL value
             * @property {number} LOW=2 LOW value
             * @property {number} MEDIUM=3 MEDIUM value
             * @property {number} HIGH=4 HIGH value
             * @property {number} CRITICAL=5 CRITICAL value
             */
            v1.Severity = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SEVERITY_UNSPECIFIED"] = 0;
                values[valuesById[1] = "MINIMAL"] = 1;
                values[valuesById[2] = "LOW"] = 2;
                values[valuesById[3] = "MEDIUM"] = 3;
                values[valuesById[4] = "HIGH"] = 4;
                values[valuesById[5] = "CRITICAL"] = 5;
                return values;
            })();
    
            v1.CVSSv3 = (function() {
    
                /**
                 * Properties of a CVSSv3.
                 * @memberof grafeas.v1
                 * @interface ICVSSv3
                 * @property {number|null} [baseScore] CVSSv3 baseScore
                 * @property {number|null} [exploitabilityScore] CVSSv3 exploitabilityScore
                 * @property {number|null} [impactScore] CVSSv3 impactScore
                 * @property {grafeas.v1.CVSSv3.AttackVector|null} [attackVector] CVSSv3 attackVector
                 * @property {grafeas.v1.CVSSv3.AttackComplexity|null} [attackComplexity] CVSSv3 attackComplexity
                 * @property {grafeas.v1.CVSSv3.PrivilegesRequired|null} [privilegesRequired] CVSSv3 privilegesRequired
                 * @property {grafeas.v1.CVSSv3.UserInteraction|null} [userInteraction] CVSSv3 userInteraction
                 * @property {grafeas.v1.CVSSv3.Scope|null} [scope] CVSSv3 scope
                 * @property {grafeas.v1.CVSSv3.Impact|null} [confidentialityImpact] CVSSv3 confidentialityImpact
                 * @property {grafeas.v1.CVSSv3.Impact|null} [integrityImpact] CVSSv3 integrityImpact
                 * @property {grafeas.v1.CVSSv3.Impact|null} [availabilityImpact] CVSSv3 availabilityImpact
                 */
    
                /**
                 * Constructs a new CVSSv3.
                 * @memberof grafeas.v1
                 * @classdesc Represents a CVSSv3.
                 * @implements ICVSSv3
                 * @constructor
                 * @param {grafeas.v1.ICVSSv3=} [properties] Properties to set
                 */
                function CVSSv3(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CVSSv3 baseScore.
                 * @member {number} baseScore
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.baseScore = 0;
    
                /**
                 * CVSSv3 exploitabilityScore.
                 * @member {number} exploitabilityScore
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.exploitabilityScore = 0;
    
                /**
                 * CVSSv3 impactScore.
                 * @member {number} impactScore
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.impactScore = 0;
    
                /**
                 * CVSSv3 attackVector.
                 * @member {grafeas.v1.CVSSv3.AttackVector} attackVector
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.attackVector = 0;
    
                /**
                 * CVSSv3 attackComplexity.
                 * @member {grafeas.v1.CVSSv3.AttackComplexity} attackComplexity
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.attackComplexity = 0;
    
                /**
                 * CVSSv3 privilegesRequired.
                 * @member {grafeas.v1.CVSSv3.PrivilegesRequired} privilegesRequired
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.privilegesRequired = 0;
    
                /**
                 * CVSSv3 userInteraction.
                 * @member {grafeas.v1.CVSSv3.UserInteraction} userInteraction
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.userInteraction = 0;
    
                /**
                 * CVSSv3 scope.
                 * @member {grafeas.v1.CVSSv3.Scope} scope
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.scope = 0;
    
                /**
                 * CVSSv3 confidentialityImpact.
                 * @member {grafeas.v1.CVSSv3.Impact} confidentialityImpact
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.confidentialityImpact = 0;
    
                /**
                 * CVSSv3 integrityImpact.
                 * @member {grafeas.v1.CVSSv3.Impact} integrityImpact
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.integrityImpact = 0;
    
                /**
                 * CVSSv3 availabilityImpact.
                 * @member {grafeas.v1.CVSSv3.Impact} availabilityImpact
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 */
                CVSSv3.prototype.availabilityImpact = 0;
    
                /**
                 * Creates a new CVSSv3 instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {grafeas.v1.ICVSSv3=} [properties] Properties to set
                 * @returns {grafeas.v1.CVSSv3} CVSSv3 instance
                 */
                CVSSv3.create = function create(properties) {
                    return new CVSSv3(properties);
                };
    
                /**
                 * Encodes the specified CVSSv3 message. Does not implicitly {@link grafeas.v1.CVSSv3.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {grafeas.v1.ICVSSv3} message CVSSv3 message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CVSSv3.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.baseScore != null && Object.hasOwnProperty.call(message, "baseScore"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.baseScore);
                    if (message.exploitabilityScore != null && Object.hasOwnProperty.call(message, "exploitabilityScore"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.exploitabilityScore);
                    if (message.impactScore != null && Object.hasOwnProperty.call(message, "impactScore"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.impactScore);
                    if (message.attackVector != null && Object.hasOwnProperty.call(message, "attackVector"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.attackVector);
                    if (message.attackComplexity != null && Object.hasOwnProperty.call(message, "attackComplexity"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.attackComplexity);
                    if (message.privilegesRequired != null && Object.hasOwnProperty.call(message, "privilegesRequired"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.privilegesRequired);
                    if (message.userInteraction != null && Object.hasOwnProperty.call(message, "userInteraction"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.userInteraction);
                    if (message.scope != null && Object.hasOwnProperty.call(message, "scope"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.scope);
                    if (message.confidentialityImpact != null && Object.hasOwnProperty.call(message, "confidentialityImpact"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.confidentialityImpact);
                    if (message.integrityImpact != null && Object.hasOwnProperty.call(message, "integrityImpact"))
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.integrityImpact);
                    if (message.availabilityImpact != null && Object.hasOwnProperty.call(message, "availabilityImpact"))
                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.availabilityImpact);
                    return writer;
                };
    
                /**
                 * Encodes the specified CVSSv3 message, length delimited. Does not implicitly {@link grafeas.v1.CVSSv3.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {grafeas.v1.ICVSSv3} message CVSSv3 message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CVSSv3.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CVSSv3 message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.CVSSv3} CVSSv3
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CVSSv3.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.CVSSv3();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.baseScore = reader.float();
                                break;
                            }
                        case 2: {
                                message.exploitabilityScore = reader.float();
                                break;
                            }
                        case 3: {
                                message.impactScore = reader.float();
                                break;
                            }
                        case 5: {
                                message.attackVector = reader.int32();
                                break;
                            }
                        case 6: {
                                message.attackComplexity = reader.int32();
                                break;
                            }
                        case 7: {
                                message.privilegesRequired = reader.int32();
                                break;
                            }
                        case 8: {
                                message.userInteraction = reader.int32();
                                break;
                            }
                        case 9: {
                                message.scope = reader.int32();
                                break;
                            }
                        case 10: {
                                message.confidentialityImpact = reader.int32();
                                break;
                            }
                        case 11: {
                                message.integrityImpact = reader.int32();
                                break;
                            }
                        case 12: {
                                message.availabilityImpact = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CVSSv3 message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.CVSSv3} CVSSv3
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CVSSv3.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CVSSv3 message.
                 * @function verify
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CVSSv3.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                        if (typeof message.baseScore !== "number")
                            return "baseScore: number expected";
                    if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                        if (typeof message.exploitabilityScore !== "number")
                            return "exploitabilityScore: number expected";
                    if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                        if (typeof message.impactScore !== "number")
                            return "impactScore: number expected";
                    if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                        switch (message.attackVector) {
                        default:
                            return "attackVector: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                        switch (message.attackComplexity) {
                        default:
                            return "attackComplexity: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                        switch (message.privilegesRequired) {
                        default:
                            return "privilegesRequired: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                        switch (message.userInteraction) {
                        default:
                            return "userInteraction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.scope != null && message.hasOwnProperty("scope"))
                        switch (message.scope) {
                        default:
                            return "scope: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                        switch (message.confidentialityImpact) {
                        default:
                            return "confidentialityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                        switch (message.integrityImpact) {
                        default:
                            return "integrityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                        switch (message.availabilityImpact) {
                        default:
                            return "availabilityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a CVSSv3 message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.CVSSv3} CVSSv3
                 */
                CVSSv3.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.CVSSv3)
                        return object;
                    var message = new $root.grafeas.v1.CVSSv3();
                    if (object.baseScore != null)
                        message.baseScore = Number(object.baseScore);
                    if (object.exploitabilityScore != null)
                        message.exploitabilityScore = Number(object.exploitabilityScore);
                    if (object.impactScore != null)
                        message.impactScore = Number(object.impactScore);
                    switch (object.attackVector) {
                    default:
                        if (typeof object.attackVector === "number") {
                            message.attackVector = object.attackVector;
                            break;
                        }
                        break;
                    case "ATTACK_VECTOR_UNSPECIFIED":
                    case 0:
                        message.attackVector = 0;
                        break;
                    case "ATTACK_VECTOR_NETWORK":
                    case 1:
                        message.attackVector = 1;
                        break;
                    case "ATTACK_VECTOR_ADJACENT":
                    case 2:
                        message.attackVector = 2;
                        break;
                    case "ATTACK_VECTOR_LOCAL":
                    case 3:
                        message.attackVector = 3;
                        break;
                    case "ATTACK_VECTOR_PHYSICAL":
                    case 4:
                        message.attackVector = 4;
                        break;
                    }
                    switch (object.attackComplexity) {
                    default:
                        if (typeof object.attackComplexity === "number") {
                            message.attackComplexity = object.attackComplexity;
                            break;
                        }
                        break;
                    case "ATTACK_COMPLEXITY_UNSPECIFIED":
                    case 0:
                        message.attackComplexity = 0;
                        break;
                    case "ATTACK_COMPLEXITY_LOW":
                    case 1:
                        message.attackComplexity = 1;
                        break;
                    case "ATTACK_COMPLEXITY_HIGH":
                    case 2:
                        message.attackComplexity = 2;
                        break;
                    }
                    switch (object.privilegesRequired) {
                    default:
                        if (typeof object.privilegesRequired === "number") {
                            message.privilegesRequired = object.privilegesRequired;
                            break;
                        }
                        break;
                    case "PRIVILEGES_REQUIRED_UNSPECIFIED":
                    case 0:
                        message.privilegesRequired = 0;
                        break;
                    case "PRIVILEGES_REQUIRED_NONE":
                    case 1:
                        message.privilegesRequired = 1;
                        break;
                    case "PRIVILEGES_REQUIRED_LOW":
                    case 2:
                        message.privilegesRequired = 2;
                        break;
                    case "PRIVILEGES_REQUIRED_HIGH":
                    case 3:
                        message.privilegesRequired = 3;
                        break;
                    }
                    switch (object.userInteraction) {
                    default:
                        if (typeof object.userInteraction === "number") {
                            message.userInteraction = object.userInteraction;
                            break;
                        }
                        break;
                    case "USER_INTERACTION_UNSPECIFIED":
                    case 0:
                        message.userInteraction = 0;
                        break;
                    case "USER_INTERACTION_NONE":
                    case 1:
                        message.userInteraction = 1;
                        break;
                    case "USER_INTERACTION_REQUIRED":
                    case 2:
                        message.userInteraction = 2;
                        break;
                    }
                    switch (object.scope) {
                    default:
                        if (typeof object.scope === "number") {
                            message.scope = object.scope;
                            break;
                        }
                        break;
                    case "SCOPE_UNSPECIFIED":
                    case 0:
                        message.scope = 0;
                        break;
                    case "SCOPE_UNCHANGED":
                    case 1:
                        message.scope = 1;
                        break;
                    case "SCOPE_CHANGED":
                    case 2:
                        message.scope = 2;
                        break;
                    }
                    switch (object.confidentialityImpact) {
                    default:
                        if (typeof object.confidentialityImpact === "number") {
                            message.confidentialityImpact = object.confidentialityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.confidentialityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.confidentialityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.confidentialityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.confidentialityImpact = 3;
                        break;
                    }
                    switch (object.integrityImpact) {
                    default:
                        if (typeof object.integrityImpact === "number") {
                            message.integrityImpact = object.integrityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.integrityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.integrityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.integrityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.integrityImpact = 3;
                        break;
                    }
                    switch (object.availabilityImpact) {
                    default:
                        if (typeof object.availabilityImpact === "number") {
                            message.availabilityImpact = object.availabilityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.availabilityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.availabilityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.availabilityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.availabilityImpact = 3;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CVSSv3 message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {grafeas.v1.CVSSv3} message CVSSv3
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CVSSv3.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.baseScore = 0;
                        object.exploitabilityScore = 0;
                        object.impactScore = 0;
                        object.attackVector = options.enums === String ? "ATTACK_VECTOR_UNSPECIFIED" : 0;
                        object.attackComplexity = options.enums === String ? "ATTACK_COMPLEXITY_UNSPECIFIED" : 0;
                        object.privilegesRequired = options.enums === String ? "PRIVILEGES_REQUIRED_UNSPECIFIED" : 0;
                        object.userInteraction = options.enums === String ? "USER_INTERACTION_UNSPECIFIED" : 0;
                        object.scope = options.enums === String ? "SCOPE_UNSPECIFIED" : 0;
                        object.confidentialityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                        object.integrityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                        object.availabilityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                    }
                    if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                        object.baseScore = options.json && !isFinite(message.baseScore) ? String(message.baseScore) : message.baseScore;
                    if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                        object.exploitabilityScore = options.json && !isFinite(message.exploitabilityScore) ? String(message.exploitabilityScore) : message.exploitabilityScore;
                    if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                        object.impactScore = options.json && !isFinite(message.impactScore) ? String(message.impactScore) : message.impactScore;
                    if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                        object.attackVector = options.enums === String ? $root.grafeas.v1.CVSSv3.AttackVector[message.attackVector] === undefined ? message.attackVector : $root.grafeas.v1.CVSSv3.AttackVector[message.attackVector] : message.attackVector;
                    if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                        object.attackComplexity = options.enums === String ? $root.grafeas.v1.CVSSv3.AttackComplexity[message.attackComplexity] === undefined ? message.attackComplexity : $root.grafeas.v1.CVSSv3.AttackComplexity[message.attackComplexity] : message.attackComplexity;
                    if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                        object.privilegesRequired = options.enums === String ? $root.grafeas.v1.CVSSv3.PrivilegesRequired[message.privilegesRequired] === undefined ? message.privilegesRequired : $root.grafeas.v1.CVSSv3.PrivilegesRequired[message.privilegesRequired] : message.privilegesRequired;
                    if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                        object.userInteraction = options.enums === String ? $root.grafeas.v1.CVSSv3.UserInteraction[message.userInteraction] === undefined ? message.userInteraction : $root.grafeas.v1.CVSSv3.UserInteraction[message.userInteraction] : message.userInteraction;
                    if (message.scope != null && message.hasOwnProperty("scope"))
                        object.scope = options.enums === String ? $root.grafeas.v1.CVSSv3.Scope[message.scope] === undefined ? message.scope : $root.grafeas.v1.CVSSv3.Scope[message.scope] : message.scope;
                    if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                        object.confidentialityImpact = options.enums === String ? $root.grafeas.v1.CVSSv3.Impact[message.confidentialityImpact] === undefined ? message.confidentialityImpact : $root.grafeas.v1.CVSSv3.Impact[message.confidentialityImpact] : message.confidentialityImpact;
                    if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                        object.integrityImpact = options.enums === String ? $root.grafeas.v1.CVSSv3.Impact[message.integrityImpact] === undefined ? message.integrityImpact : $root.grafeas.v1.CVSSv3.Impact[message.integrityImpact] : message.integrityImpact;
                    if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                        object.availabilityImpact = options.enums === String ? $root.grafeas.v1.CVSSv3.Impact[message.availabilityImpact] === undefined ? message.availabilityImpact : $root.grafeas.v1.CVSSv3.Impact[message.availabilityImpact] : message.availabilityImpact;
                    return object;
                };
    
                /**
                 * Converts this CVSSv3 to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.CVSSv3
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CVSSv3.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CVSSv3
                 * @function getTypeUrl
                 * @memberof grafeas.v1.CVSSv3
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CVSSv3.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.CVSSv3";
                };
    
                /**
                 * AttackVector enum.
                 * @name grafeas.v1.CVSSv3.AttackVector
                 * @enum {number}
                 * @property {number} ATTACK_VECTOR_UNSPECIFIED=0 ATTACK_VECTOR_UNSPECIFIED value
                 * @property {number} ATTACK_VECTOR_NETWORK=1 ATTACK_VECTOR_NETWORK value
                 * @property {number} ATTACK_VECTOR_ADJACENT=2 ATTACK_VECTOR_ADJACENT value
                 * @property {number} ATTACK_VECTOR_LOCAL=3 ATTACK_VECTOR_LOCAL value
                 * @property {number} ATTACK_VECTOR_PHYSICAL=4 ATTACK_VECTOR_PHYSICAL value
                 */
                CVSSv3.AttackVector = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ATTACK_VECTOR_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ATTACK_VECTOR_NETWORK"] = 1;
                    values[valuesById[2] = "ATTACK_VECTOR_ADJACENT"] = 2;
                    values[valuesById[3] = "ATTACK_VECTOR_LOCAL"] = 3;
                    values[valuesById[4] = "ATTACK_VECTOR_PHYSICAL"] = 4;
                    return values;
                })();
    
                /**
                 * AttackComplexity enum.
                 * @name grafeas.v1.CVSSv3.AttackComplexity
                 * @enum {number}
                 * @property {number} ATTACK_COMPLEXITY_UNSPECIFIED=0 ATTACK_COMPLEXITY_UNSPECIFIED value
                 * @property {number} ATTACK_COMPLEXITY_LOW=1 ATTACK_COMPLEXITY_LOW value
                 * @property {number} ATTACK_COMPLEXITY_HIGH=2 ATTACK_COMPLEXITY_HIGH value
                 */
                CVSSv3.AttackComplexity = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ATTACK_COMPLEXITY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ATTACK_COMPLEXITY_LOW"] = 1;
                    values[valuesById[2] = "ATTACK_COMPLEXITY_HIGH"] = 2;
                    return values;
                })();
    
                /**
                 * PrivilegesRequired enum.
                 * @name grafeas.v1.CVSSv3.PrivilegesRequired
                 * @enum {number}
                 * @property {number} PRIVILEGES_REQUIRED_UNSPECIFIED=0 PRIVILEGES_REQUIRED_UNSPECIFIED value
                 * @property {number} PRIVILEGES_REQUIRED_NONE=1 PRIVILEGES_REQUIRED_NONE value
                 * @property {number} PRIVILEGES_REQUIRED_LOW=2 PRIVILEGES_REQUIRED_LOW value
                 * @property {number} PRIVILEGES_REQUIRED_HIGH=3 PRIVILEGES_REQUIRED_HIGH value
                 */
                CVSSv3.PrivilegesRequired = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PRIVILEGES_REQUIRED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "PRIVILEGES_REQUIRED_NONE"] = 1;
                    values[valuesById[2] = "PRIVILEGES_REQUIRED_LOW"] = 2;
                    values[valuesById[3] = "PRIVILEGES_REQUIRED_HIGH"] = 3;
                    return values;
                })();
    
                /**
                 * UserInteraction enum.
                 * @name grafeas.v1.CVSSv3.UserInteraction
                 * @enum {number}
                 * @property {number} USER_INTERACTION_UNSPECIFIED=0 USER_INTERACTION_UNSPECIFIED value
                 * @property {number} USER_INTERACTION_NONE=1 USER_INTERACTION_NONE value
                 * @property {number} USER_INTERACTION_REQUIRED=2 USER_INTERACTION_REQUIRED value
                 */
                CVSSv3.UserInteraction = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "USER_INTERACTION_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "USER_INTERACTION_NONE"] = 1;
                    values[valuesById[2] = "USER_INTERACTION_REQUIRED"] = 2;
                    return values;
                })();
    
                /**
                 * Scope enum.
                 * @name grafeas.v1.CVSSv3.Scope
                 * @enum {number}
                 * @property {number} SCOPE_UNSPECIFIED=0 SCOPE_UNSPECIFIED value
                 * @property {number} SCOPE_UNCHANGED=1 SCOPE_UNCHANGED value
                 * @property {number} SCOPE_CHANGED=2 SCOPE_CHANGED value
                 */
                CVSSv3.Scope = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SCOPE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "SCOPE_UNCHANGED"] = 1;
                    values[valuesById[2] = "SCOPE_CHANGED"] = 2;
                    return values;
                })();
    
                /**
                 * Impact enum.
                 * @name grafeas.v1.CVSSv3.Impact
                 * @enum {number}
                 * @property {number} IMPACT_UNSPECIFIED=0 IMPACT_UNSPECIFIED value
                 * @property {number} IMPACT_HIGH=1 IMPACT_HIGH value
                 * @property {number} IMPACT_LOW=2 IMPACT_LOW value
                 * @property {number} IMPACT_NONE=3 IMPACT_NONE value
                 */
                CVSSv3.Impact = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IMPACT_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "IMPACT_HIGH"] = 1;
                    values[valuesById[2] = "IMPACT_LOW"] = 2;
                    values[valuesById[3] = "IMPACT_NONE"] = 3;
                    return values;
                })();
    
                return CVSSv3;
            })();
    
            v1.CVSS = (function() {
    
                /**
                 * Properties of a CVSS.
                 * @memberof grafeas.v1
                 * @interface ICVSS
                 * @property {number|null} [baseScore] CVSS baseScore
                 * @property {number|null} [exploitabilityScore] CVSS exploitabilityScore
                 * @property {number|null} [impactScore] CVSS impactScore
                 * @property {grafeas.v1.CVSS.AttackVector|null} [attackVector] CVSS attackVector
                 * @property {grafeas.v1.CVSS.AttackComplexity|null} [attackComplexity] CVSS attackComplexity
                 * @property {grafeas.v1.CVSS.Authentication|null} [authentication] CVSS authentication
                 * @property {grafeas.v1.CVSS.PrivilegesRequired|null} [privilegesRequired] CVSS privilegesRequired
                 * @property {grafeas.v1.CVSS.UserInteraction|null} [userInteraction] CVSS userInteraction
                 * @property {grafeas.v1.CVSS.Scope|null} [scope] CVSS scope
                 * @property {grafeas.v1.CVSS.Impact|null} [confidentialityImpact] CVSS confidentialityImpact
                 * @property {grafeas.v1.CVSS.Impact|null} [integrityImpact] CVSS integrityImpact
                 * @property {grafeas.v1.CVSS.Impact|null} [availabilityImpact] CVSS availabilityImpact
                 */
    
                /**
                 * Constructs a new CVSS.
                 * @memberof grafeas.v1
                 * @classdesc Represents a CVSS.
                 * @implements ICVSS
                 * @constructor
                 * @param {grafeas.v1.ICVSS=} [properties] Properties to set
                 */
                function CVSS(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CVSS baseScore.
                 * @member {number} baseScore
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.baseScore = 0;
    
                /**
                 * CVSS exploitabilityScore.
                 * @member {number} exploitabilityScore
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.exploitabilityScore = 0;
    
                /**
                 * CVSS impactScore.
                 * @member {number} impactScore
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.impactScore = 0;
    
                /**
                 * CVSS attackVector.
                 * @member {grafeas.v1.CVSS.AttackVector} attackVector
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.attackVector = 0;
    
                /**
                 * CVSS attackComplexity.
                 * @member {grafeas.v1.CVSS.AttackComplexity} attackComplexity
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.attackComplexity = 0;
    
                /**
                 * CVSS authentication.
                 * @member {grafeas.v1.CVSS.Authentication} authentication
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.authentication = 0;
    
                /**
                 * CVSS privilegesRequired.
                 * @member {grafeas.v1.CVSS.PrivilegesRequired} privilegesRequired
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.privilegesRequired = 0;
    
                /**
                 * CVSS userInteraction.
                 * @member {grafeas.v1.CVSS.UserInteraction} userInteraction
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.userInteraction = 0;
    
                /**
                 * CVSS scope.
                 * @member {grafeas.v1.CVSS.Scope} scope
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.scope = 0;
    
                /**
                 * CVSS confidentialityImpact.
                 * @member {grafeas.v1.CVSS.Impact} confidentialityImpact
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.confidentialityImpact = 0;
    
                /**
                 * CVSS integrityImpact.
                 * @member {grafeas.v1.CVSS.Impact} integrityImpact
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.integrityImpact = 0;
    
                /**
                 * CVSS availabilityImpact.
                 * @member {grafeas.v1.CVSS.Impact} availabilityImpact
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 */
                CVSS.prototype.availabilityImpact = 0;
    
                /**
                 * Creates a new CVSS instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {grafeas.v1.ICVSS=} [properties] Properties to set
                 * @returns {grafeas.v1.CVSS} CVSS instance
                 */
                CVSS.create = function create(properties) {
                    return new CVSS(properties);
                };
    
                /**
                 * Encodes the specified CVSS message. Does not implicitly {@link grafeas.v1.CVSS.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {grafeas.v1.ICVSS} message CVSS message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CVSS.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.baseScore != null && Object.hasOwnProperty.call(message, "baseScore"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.baseScore);
                    if (message.exploitabilityScore != null && Object.hasOwnProperty.call(message, "exploitabilityScore"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.exploitabilityScore);
                    if (message.impactScore != null && Object.hasOwnProperty.call(message, "impactScore"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.impactScore);
                    if (message.attackVector != null && Object.hasOwnProperty.call(message, "attackVector"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.attackVector);
                    if (message.attackComplexity != null && Object.hasOwnProperty.call(message, "attackComplexity"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.attackComplexity);
                    if (message.authentication != null && Object.hasOwnProperty.call(message, "authentication"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.authentication);
                    if (message.privilegesRequired != null && Object.hasOwnProperty.call(message, "privilegesRequired"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.privilegesRequired);
                    if (message.userInteraction != null && Object.hasOwnProperty.call(message, "userInteraction"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.userInteraction);
                    if (message.scope != null && Object.hasOwnProperty.call(message, "scope"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.scope);
                    if (message.confidentialityImpact != null && Object.hasOwnProperty.call(message, "confidentialityImpact"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.confidentialityImpact);
                    if (message.integrityImpact != null && Object.hasOwnProperty.call(message, "integrityImpact"))
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.integrityImpact);
                    if (message.availabilityImpact != null && Object.hasOwnProperty.call(message, "availabilityImpact"))
                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.availabilityImpact);
                    return writer;
                };
    
                /**
                 * Encodes the specified CVSS message, length delimited. Does not implicitly {@link grafeas.v1.CVSS.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {grafeas.v1.ICVSS} message CVSS message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CVSS.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CVSS message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.CVSS} CVSS
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CVSS.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.CVSS();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.baseScore = reader.float();
                                break;
                            }
                        case 2: {
                                message.exploitabilityScore = reader.float();
                                break;
                            }
                        case 3: {
                                message.impactScore = reader.float();
                                break;
                            }
                        case 4: {
                                message.attackVector = reader.int32();
                                break;
                            }
                        case 5: {
                                message.attackComplexity = reader.int32();
                                break;
                            }
                        case 6: {
                                message.authentication = reader.int32();
                                break;
                            }
                        case 7: {
                                message.privilegesRequired = reader.int32();
                                break;
                            }
                        case 8: {
                                message.userInteraction = reader.int32();
                                break;
                            }
                        case 9: {
                                message.scope = reader.int32();
                                break;
                            }
                        case 10: {
                                message.confidentialityImpact = reader.int32();
                                break;
                            }
                        case 11: {
                                message.integrityImpact = reader.int32();
                                break;
                            }
                        case 12: {
                                message.availabilityImpact = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CVSS message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.CVSS} CVSS
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CVSS.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CVSS message.
                 * @function verify
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CVSS.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                        if (typeof message.baseScore !== "number")
                            return "baseScore: number expected";
                    if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                        if (typeof message.exploitabilityScore !== "number")
                            return "exploitabilityScore: number expected";
                    if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                        if (typeof message.impactScore !== "number")
                            return "impactScore: number expected";
                    if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                        switch (message.attackVector) {
                        default:
                            return "attackVector: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                        switch (message.attackComplexity) {
                        default:
                            return "attackComplexity: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.authentication != null && message.hasOwnProperty("authentication"))
                        switch (message.authentication) {
                        default:
                            return "authentication: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                        switch (message.privilegesRequired) {
                        default:
                            return "privilegesRequired: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                        switch (message.userInteraction) {
                        default:
                            return "userInteraction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.scope != null && message.hasOwnProperty("scope"))
                        switch (message.scope) {
                        default:
                            return "scope: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                        switch (message.confidentialityImpact) {
                        default:
                            return "confidentialityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                        switch (message.integrityImpact) {
                        default:
                            return "integrityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                        switch (message.availabilityImpact) {
                        default:
                            return "availabilityImpact: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a CVSS message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.CVSS} CVSS
                 */
                CVSS.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.CVSS)
                        return object;
                    var message = new $root.grafeas.v1.CVSS();
                    if (object.baseScore != null)
                        message.baseScore = Number(object.baseScore);
                    if (object.exploitabilityScore != null)
                        message.exploitabilityScore = Number(object.exploitabilityScore);
                    if (object.impactScore != null)
                        message.impactScore = Number(object.impactScore);
                    switch (object.attackVector) {
                    default:
                        if (typeof object.attackVector === "number") {
                            message.attackVector = object.attackVector;
                            break;
                        }
                        break;
                    case "ATTACK_VECTOR_UNSPECIFIED":
                    case 0:
                        message.attackVector = 0;
                        break;
                    case "ATTACK_VECTOR_NETWORK":
                    case 1:
                        message.attackVector = 1;
                        break;
                    case "ATTACK_VECTOR_ADJACENT":
                    case 2:
                        message.attackVector = 2;
                        break;
                    case "ATTACK_VECTOR_LOCAL":
                    case 3:
                        message.attackVector = 3;
                        break;
                    case "ATTACK_VECTOR_PHYSICAL":
                    case 4:
                        message.attackVector = 4;
                        break;
                    }
                    switch (object.attackComplexity) {
                    default:
                        if (typeof object.attackComplexity === "number") {
                            message.attackComplexity = object.attackComplexity;
                            break;
                        }
                        break;
                    case "ATTACK_COMPLEXITY_UNSPECIFIED":
                    case 0:
                        message.attackComplexity = 0;
                        break;
                    case "ATTACK_COMPLEXITY_LOW":
                    case 1:
                        message.attackComplexity = 1;
                        break;
                    case "ATTACK_COMPLEXITY_HIGH":
                    case 2:
                        message.attackComplexity = 2;
                        break;
                    case "ATTACK_COMPLEXITY_MEDIUM":
                    case 3:
                        message.attackComplexity = 3;
                        break;
                    }
                    switch (object.authentication) {
                    default:
                        if (typeof object.authentication === "number") {
                            message.authentication = object.authentication;
                            break;
                        }
                        break;
                    case "AUTHENTICATION_UNSPECIFIED":
                    case 0:
                        message.authentication = 0;
                        break;
                    case "AUTHENTICATION_MULTIPLE":
                    case 1:
                        message.authentication = 1;
                        break;
                    case "AUTHENTICATION_SINGLE":
                    case 2:
                        message.authentication = 2;
                        break;
                    case "AUTHENTICATION_NONE":
                    case 3:
                        message.authentication = 3;
                        break;
                    }
                    switch (object.privilegesRequired) {
                    default:
                        if (typeof object.privilegesRequired === "number") {
                            message.privilegesRequired = object.privilegesRequired;
                            break;
                        }
                        break;
                    case "PRIVILEGES_REQUIRED_UNSPECIFIED":
                    case 0:
                        message.privilegesRequired = 0;
                        break;
                    case "PRIVILEGES_REQUIRED_NONE":
                    case 1:
                        message.privilegesRequired = 1;
                        break;
                    case "PRIVILEGES_REQUIRED_LOW":
                    case 2:
                        message.privilegesRequired = 2;
                        break;
                    case "PRIVILEGES_REQUIRED_HIGH":
                    case 3:
                        message.privilegesRequired = 3;
                        break;
                    }
                    switch (object.userInteraction) {
                    default:
                        if (typeof object.userInteraction === "number") {
                            message.userInteraction = object.userInteraction;
                            break;
                        }
                        break;
                    case "USER_INTERACTION_UNSPECIFIED":
                    case 0:
                        message.userInteraction = 0;
                        break;
                    case "USER_INTERACTION_NONE":
                    case 1:
                        message.userInteraction = 1;
                        break;
                    case "USER_INTERACTION_REQUIRED":
                    case 2:
                        message.userInteraction = 2;
                        break;
                    }
                    switch (object.scope) {
                    default:
                        if (typeof object.scope === "number") {
                            message.scope = object.scope;
                            break;
                        }
                        break;
                    case "SCOPE_UNSPECIFIED":
                    case 0:
                        message.scope = 0;
                        break;
                    case "SCOPE_UNCHANGED":
                    case 1:
                        message.scope = 1;
                        break;
                    case "SCOPE_CHANGED":
                    case 2:
                        message.scope = 2;
                        break;
                    }
                    switch (object.confidentialityImpact) {
                    default:
                        if (typeof object.confidentialityImpact === "number") {
                            message.confidentialityImpact = object.confidentialityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.confidentialityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.confidentialityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.confidentialityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.confidentialityImpact = 3;
                        break;
                    case "IMPACT_PARTIAL":
                    case 4:
                        message.confidentialityImpact = 4;
                        break;
                    case "IMPACT_COMPLETE":
                    case 5:
                        message.confidentialityImpact = 5;
                        break;
                    }
                    switch (object.integrityImpact) {
                    default:
                        if (typeof object.integrityImpact === "number") {
                            message.integrityImpact = object.integrityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.integrityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.integrityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.integrityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.integrityImpact = 3;
                        break;
                    case "IMPACT_PARTIAL":
                    case 4:
                        message.integrityImpact = 4;
                        break;
                    case "IMPACT_COMPLETE":
                    case 5:
                        message.integrityImpact = 5;
                        break;
                    }
                    switch (object.availabilityImpact) {
                    default:
                        if (typeof object.availabilityImpact === "number") {
                            message.availabilityImpact = object.availabilityImpact;
                            break;
                        }
                        break;
                    case "IMPACT_UNSPECIFIED":
                    case 0:
                        message.availabilityImpact = 0;
                        break;
                    case "IMPACT_HIGH":
                    case 1:
                        message.availabilityImpact = 1;
                        break;
                    case "IMPACT_LOW":
                    case 2:
                        message.availabilityImpact = 2;
                        break;
                    case "IMPACT_NONE":
                    case 3:
                        message.availabilityImpact = 3;
                        break;
                    case "IMPACT_PARTIAL":
                    case 4:
                        message.availabilityImpact = 4;
                        break;
                    case "IMPACT_COMPLETE":
                    case 5:
                        message.availabilityImpact = 5;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CVSS message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {grafeas.v1.CVSS} message CVSS
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CVSS.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.baseScore = 0;
                        object.exploitabilityScore = 0;
                        object.impactScore = 0;
                        object.attackVector = options.enums === String ? "ATTACK_VECTOR_UNSPECIFIED" : 0;
                        object.attackComplexity = options.enums === String ? "ATTACK_COMPLEXITY_UNSPECIFIED" : 0;
                        object.authentication = options.enums === String ? "AUTHENTICATION_UNSPECIFIED" : 0;
                        object.privilegesRequired = options.enums === String ? "PRIVILEGES_REQUIRED_UNSPECIFIED" : 0;
                        object.userInteraction = options.enums === String ? "USER_INTERACTION_UNSPECIFIED" : 0;
                        object.scope = options.enums === String ? "SCOPE_UNSPECIFIED" : 0;
                        object.confidentialityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                        object.integrityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                        object.availabilityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                    }
                    if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                        object.baseScore = options.json && !isFinite(message.baseScore) ? String(message.baseScore) : message.baseScore;
                    if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                        object.exploitabilityScore = options.json && !isFinite(message.exploitabilityScore) ? String(message.exploitabilityScore) : message.exploitabilityScore;
                    if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                        object.impactScore = options.json && !isFinite(message.impactScore) ? String(message.impactScore) : message.impactScore;
                    if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                        object.attackVector = options.enums === String ? $root.grafeas.v1.CVSS.AttackVector[message.attackVector] === undefined ? message.attackVector : $root.grafeas.v1.CVSS.AttackVector[message.attackVector] : message.attackVector;
                    if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                        object.attackComplexity = options.enums === String ? $root.grafeas.v1.CVSS.AttackComplexity[message.attackComplexity] === undefined ? message.attackComplexity : $root.grafeas.v1.CVSS.AttackComplexity[message.attackComplexity] : message.attackComplexity;
                    if (message.authentication != null && message.hasOwnProperty("authentication"))
                        object.authentication = options.enums === String ? $root.grafeas.v1.CVSS.Authentication[message.authentication] === undefined ? message.authentication : $root.grafeas.v1.CVSS.Authentication[message.authentication] : message.authentication;
                    if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                        object.privilegesRequired = options.enums === String ? $root.grafeas.v1.CVSS.PrivilegesRequired[message.privilegesRequired] === undefined ? message.privilegesRequired : $root.grafeas.v1.CVSS.PrivilegesRequired[message.privilegesRequired] : message.privilegesRequired;
                    if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                        object.userInteraction = options.enums === String ? $root.grafeas.v1.CVSS.UserInteraction[message.userInteraction] === undefined ? message.userInteraction : $root.grafeas.v1.CVSS.UserInteraction[message.userInteraction] : message.userInteraction;
                    if (message.scope != null && message.hasOwnProperty("scope"))
                        object.scope = options.enums === String ? $root.grafeas.v1.CVSS.Scope[message.scope] === undefined ? message.scope : $root.grafeas.v1.CVSS.Scope[message.scope] : message.scope;
                    if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                        object.confidentialityImpact = options.enums === String ? $root.grafeas.v1.CVSS.Impact[message.confidentialityImpact] === undefined ? message.confidentialityImpact : $root.grafeas.v1.CVSS.Impact[message.confidentialityImpact] : message.confidentialityImpact;
                    if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                        object.integrityImpact = options.enums === String ? $root.grafeas.v1.CVSS.Impact[message.integrityImpact] === undefined ? message.integrityImpact : $root.grafeas.v1.CVSS.Impact[message.integrityImpact] : message.integrityImpact;
                    if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                        object.availabilityImpact = options.enums === String ? $root.grafeas.v1.CVSS.Impact[message.availabilityImpact] === undefined ? message.availabilityImpact : $root.grafeas.v1.CVSS.Impact[message.availabilityImpact] : message.availabilityImpact;
                    return object;
                };
    
                /**
                 * Converts this CVSS to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.CVSS
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CVSS.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CVSS
                 * @function getTypeUrl
                 * @memberof grafeas.v1.CVSS
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CVSS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.CVSS";
                };
    
                /**
                 * AttackVector enum.
                 * @name grafeas.v1.CVSS.AttackVector
                 * @enum {number}
                 * @property {number} ATTACK_VECTOR_UNSPECIFIED=0 ATTACK_VECTOR_UNSPECIFIED value
                 * @property {number} ATTACK_VECTOR_NETWORK=1 ATTACK_VECTOR_NETWORK value
                 * @property {number} ATTACK_VECTOR_ADJACENT=2 ATTACK_VECTOR_ADJACENT value
                 * @property {number} ATTACK_VECTOR_LOCAL=3 ATTACK_VECTOR_LOCAL value
                 * @property {number} ATTACK_VECTOR_PHYSICAL=4 ATTACK_VECTOR_PHYSICAL value
                 */
                CVSS.AttackVector = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ATTACK_VECTOR_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ATTACK_VECTOR_NETWORK"] = 1;
                    values[valuesById[2] = "ATTACK_VECTOR_ADJACENT"] = 2;
                    values[valuesById[3] = "ATTACK_VECTOR_LOCAL"] = 3;
                    values[valuesById[4] = "ATTACK_VECTOR_PHYSICAL"] = 4;
                    return values;
                })();
    
                /**
                 * AttackComplexity enum.
                 * @name grafeas.v1.CVSS.AttackComplexity
                 * @enum {number}
                 * @property {number} ATTACK_COMPLEXITY_UNSPECIFIED=0 ATTACK_COMPLEXITY_UNSPECIFIED value
                 * @property {number} ATTACK_COMPLEXITY_LOW=1 ATTACK_COMPLEXITY_LOW value
                 * @property {number} ATTACK_COMPLEXITY_HIGH=2 ATTACK_COMPLEXITY_HIGH value
                 * @property {number} ATTACK_COMPLEXITY_MEDIUM=3 ATTACK_COMPLEXITY_MEDIUM value
                 */
                CVSS.AttackComplexity = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ATTACK_COMPLEXITY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ATTACK_COMPLEXITY_LOW"] = 1;
                    values[valuesById[2] = "ATTACK_COMPLEXITY_HIGH"] = 2;
                    values[valuesById[3] = "ATTACK_COMPLEXITY_MEDIUM"] = 3;
                    return values;
                })();
    
                /**
                 * Authentication enum.
                 * @name grafeas.v1.CVSS.Authentication
                 * @enum {number}
                 * @property {number} AUTHENTICATION_UNSPECIFIED=0 AUTHENTICATION_UNSPECIFIED value
                 * @property {number} AUTHENTICATION_MULTIPLE=1 AUTHENTICATION_MULTIPLE value
                 * @property {number} AUTHENTICATION_SINGLE=2 AUTHENTICATION_SINGLE value
                 * @property {number} AUTHENTICATION_NONE=3 AUTHENTICATION_NONE value
                 */
                CVSS.Authentication = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "AUTHENTICATION_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "AUTHENTICATION_MULTIPLE"] = 1;
                    values[valuesById[2] = "AUTHENTICATION_SINGLE"] = 2;
                    values[valuesById[3] = "AUTHENTICATION_NONE"] = 3;
                    return values;
                })();
    
                /**
                 * PrivilegesRequired enum.
                 * @name grafeas.v1.CVSS.PrivilegesRequired
                 * @enum {number}
                 * @property {number} PRIVILEGES_REQUIRED_UNSPECIFIED=0 PRIVILEGES_REQUIRED_UNSPECIFIED value
                 * @property {number} PRIVILEGES_REQUIRED_NONE=1 PRIVILEGES_REQUIRED_NONE value
                 * @property {number} PRIVILEGES_REQUIRED_LOW=2 PRIVILEGES_REQUIRED_LOW value
                 * @property {number} PRIVILEGES_REQUIRED_HIGH=3 PRIVILEGES_REQUIRED_HIGH value
                 */
                CVSS.PrivilegesRequired = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PRIVILEGES_REQUIRED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "PRIVILEGES_REQUIRED_NONE"] = 1;
                    values[valuesById[2] = "PRIVILEGES_REQUIRED_LOW"] = 2;
                    values[valuesById[3] = "PRIVILEGES_REQUIRED_HIGH"] = 3;
                    return values;
                })();
    
                /**
                 * UserInteraction enum.
                 * @name grafeas.v1.CVSS.UserInteraction
                 * @enum {number}
                 * @property {number} USER_INTERACTION_UNSPECIFIED=0 USER_INTERACTION_UNSPECIFIED value
                 * @property {number} USER_INTERACTION_NONE=1 USER_INTERACTION_NONE value
                 * @property {number} USER_INTERACTION_REQUIRED=2 USER_INTERACTION_REQUIRED value
                 */
                CVSS.UserInteraction = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "USER_INTERACTION_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "USER_INTERACTION_NONE"] = 1;
                    values[valuesById[2] = "USER_INTERACTION_REQUIRED"] = 2;
                    return values;
                })();
    
                /**
                 * Scope enum.
                 * @name grafeas.v1.CVSS.Scope
                 * @enum {number}
                 * @property {number} SCOPE_UNSPECIFIED=0 SCOPE_UNSPECIFIED value
                 * @property {number} SCOPE_UNCHANGED=1 SCOPE_UNCHANGED value
                 * @property {number} SCOPE_CHANGED=2 SCOPE_CHANGED value
                 */
                CVSS.Scope = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SCOPE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "SCOPE_UNCHANGED"] = 1;
                    values[valuesById[2] = "SCOPE_CHANGED"] = 2;
                    return values;
                })();
    
                /**
                 * Impact enum.
                 * @name grafeas.v1.CVSS.Impact
                 * @enum {number}
                 * @property {number} IMPACT_UNSPECIFIED=0 IMPACT_UNSPECIFIED value
                 * @property {number} IMPACT_HIGH=1 IMPACT_HIGH value
                 * @property {number} IMPACT_LOW=2 IMPACT_LOW value
                 * @property {number} IMPACT_NONE=3 IMPACT_NONE value
                 * @property {number} IMPACT_PARTIAL=4 IMPACT_PARTIAL value
                 * @property {number} IMPACT_COMPLETE=5 IMPACT_COMPLETE value
                 */
                CVSS.Impact = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IMPACT_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "IMPACT_HIGH"] = 1;
                    values[valuesById[2] = "IMPACT_LOW"] = 2;
                    values[valuesById[3] = "IMPACT_NONE"] = 3;
                    values[valuesById[4] = "IMPACT_PARTIAL"] = 4;
                    values[valuesById[5] = "IMPACT_COMPLETE"] = 5;
                    return values;
                })();
    
                return CVSS;
            })();
    
            /**
             * CVSSVersion enum.
             * @name grafeas.v1.CVSSVersion
             * @enum {number}
             * @property {number} CVSS_VERSION_UNSPECIFIED=0 CVSS_VERSION_UNSPECIFIED value
             * @property {number} CVSS_VERSION_2=1 CVSS_VERSION_2 value
             * @property {number} CVSS_VERSION_3=2 CVSS_VERSION_3 value
             */
            v1.CVSSVersion = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CVSS_VERSION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CVSS_VERSION_2"] = 1;
                values[valuesById[2] = "CVSS_VERSION_3"] = 2;
                return values;
            })();
    
            v1.DeploymentNote = (function() {
    
                /**
                 * Properties of a DeploymentNote.
                 * @memberof grafeas.v1
                 * @interface IDeploymentNote
                 * @property {Array.<string>|null} [resourceUri] DeploymentNote resourceUri
                 */
    
                /**
                 * Constructs a new DeploymentNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DeploymentNote.
                 * @implements IDeploymentNote
                 * @constructor
                 * @param {grafeas.v1.IDeploymentNote=} [properties] Properties to set
                 */
                function DeploymentNote(properties) {
                    this.resourceUri = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeploymentNote resourceUri.
                 * @member {Array.<string>} resourceUri
                 * @memberof grafeas.v1.DeploymentNote
                 * @instance
                 */
                DeploymentNote.prototype.resourceUri = $util.emptyArray;
    
                /**
                 * Creates a new DeploymentNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {grafeas.v1.IDeploymentNote=} [properties] Properties to set
                 * @returns {grafeas.v1.DeploymentNote} DeploymentNote instance
                 */
                DeploymentNote.create = function create(properties) {
                    return new DeploymentNote(properties);
                };
    
                /**
                 * Encodes the specified DeploymentNote message. Does not implicitly {@link grafeas.v1.DeploymentNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {grafeas.v1.IDeploymentNote} message DeploymentNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeploymentNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.resourceUri != null && message.resourceUri.length)
                        for (var i = 0; i < message.resourceUri.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceUri[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeploymentNote message, length delimited. Does not implicitly {@link grafeas.v1.DeploymentNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {grafeas.v1.IDeploymentNote} message DeploymentNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeploymentNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeploymentNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DeploymentNote} DeploymentNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeploymentNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DeploymentNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.resourceUri && message.resourceUri.length))
                                    message.resourceUri = [];
                                message.resourceUri.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeploymentNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DeploymentNote} DeploymentNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeploymentNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeploymentNote message.
                 * @function verify
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.resourceUri != null && message.hasOwnProperty("resourceUri")) {
                        if (!Array.isArray(message.resourceUri))
                            return "resourceUri: array expected";
                        for (var i = 0; i < message.resourceUri.length; ++i)
                            if (!$util.isString(message.resourceUri[i]))
                                return "resourceUri: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DeploymentNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DeploymentNote} DeploymentNote
                 */
                DeploymentNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DeploymentNote)
                        return object;
                    var message = new $root.grafeas.v1.DeploymentNote();
                    if (object.resourceUri) {
                        if (!Array.isArray(object.resourceUri))
                            throw TypeError(".grafeas.v1.DeploymentNote.resourceUri: array expected");
                        message.resourceUri = [];
                        for (var i = 0; i < object.resourceUri.length; ++i)
                            message.resourceUri[i] = String(object.resourceUri[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeploymentNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {grafeas.v1.DeploymentNote} message DeploymentNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.resourceUri = [];
                    if (message.resourceUri && message.resourceUri.length) {
                        object.resourceUri = [];
                        for (var j = 0; j < message.resourceUri.length; ++j)
                            object.resourceUri[j] = message.resourceUri[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DeploymentNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DeploymentNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeploymentNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DeploymentNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeploymentNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DeploymentNote";
                };
    
                return DeploymentNote;
            })();
    
            v1.DeploymentOccurrence = (function() {
    
                /**
                 * Properties of a DeploymentOccurrence.
                 * @memberof grafeas.v1
                 * @interface IDeploymentOccurrence
                 * @property {string|null} [userEmail] DeploymentOccurrence userEmail
                 * @property {google.protobuf.ITimestamp|null} [deployTime] DeploymentOccurrence deployTime
                 * @property {google.protobuf.ITimestamp|null} [undeployTime] DeploymentOccurrence undeployTime
                 * @property {string|null} [config] DeploymentOccurrence config
                 * @property {string|null} [address] DeploymentOccurrence address
                 * @property {Array.<string>|null} [resourceUri] DeploymentOccurrence resourceUri
                 * @property {grafeas.v1.DeploymentOccurrence.Platform|null} [platform] DeploymentOccurrence platform
                 */
    
                /**
                 * Constructs a new DeploymentOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DeploymentOccurrence.
                 * @implements IDeploymentOccurrence
                 * @constructor
                 * @param {grafeas.v1.IDeploymentOccurrence=} [properties] Properties to set
                 */
                function DeploymentOccurrence(properties) {
                    this.resourceUri = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeploymentOccurrence userEmail.
                 * @member {string} userEmail
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.userEmail = "";
    
                /**
                 * DeploymentOccurrence deployTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} deployTime
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.deployTime = null;
    
                /**
                 * DeploymentOccurrence undeployTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} undeployTime
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.undeployTime = null;
    
                /**
                 * DeploymentOccurrence config.
                 * @member {string} config
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.config = "";
    
                /**
                 * DeploymentOccurrence address.
                 * @member {string} address
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.address = "";
    
                /**
                 * DeploymentOccurrence resourceUri.
                 * @member {Array.<string>} resourceUri
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.resourceUri = $util.emptyArray;
    
                /**
                 * DeploymentOccurrence platform.
                 * @member {grafeas.v1.DeploymentOccurrence.Platform} platform
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 */
                DeploymentOccurrence.prototype.platform = 0;
    
                /**
                 * Creates a new DeploymentOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {grafeas.v1.IDeploymentOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.DeploymentOccurrence} DeploymentOccurrence instance
                 */
                DeploymentOccurrence.create = function create(properties) {
                    return new DeploymentOccurrence(properties);
                };
    
                /**
                 * Encodes the specified DeploymentOccurrence message. Does not implicitly {@link grafeas.v1.DeploymentOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {grafeas.v1.IDeploymentOccurrence} message DeploymentOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeploymentOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userEmail != null && Object.hasOwnProperty.call(message, "userEmail"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.userEmail);
                    if (message.deployTime != null && Object.hasOwnProperty.call(message, "deployTime"))
                        $root.google.protobuf.Timestamp.encode(message.deployTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.undeployTime != null && Object.hasOwnProperty.call(message, "undeployTime"))
                        $root.google.protobuf.Timestamp.encode(message.undeployTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.config);
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.address);
                    if (message.resourceUri != null && message.resourceUri.length)
                        for (var i = 0; i < message.resourceUri.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.resourceUri[i]);
                    if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.platform);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeploymentOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.DeploymentOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {grafeas.v1.IDeploymentOccurrence} message DeploymentOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeploymentOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeploymentOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DeploymentOccurrence} DeploymentOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeploymentOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DeploymentOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.userEmail = reader.string();
                                break;
                            }
                        case 2: {
                                message.deployTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.undeployTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.config = reader.string();
                                break;
                            }
                        case 5: {
                                message.address = reader.string();
                                break;
                            }
                        case 6: {
                                if (!(message.resourceUri && message.resourceUri.length))
                                    message.resourceUri = [];
                                message.resourceUri.push(reader.string());
                                break;
                            }
                        case 7: {
                                message.platform = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeploymentOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DeploymentOccurrence} DeploymentOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeploymentOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeploymentOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeploymentOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userEmail != null && message.hasOwnProperty("userEmail"))
                        if (!$util.isString(message.userEmail))
                            return "userEmail: string expected";
                    if (message.deployTime != null && message.hasOwnProperty("deployTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.deployTime);
                        if (error)
                            return "deployTime." + error;
                    }
                    if (message.undeployTime != null && message.hasOwnProperty("undeployTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.undeployTime);
                        if (error)
                            return "undeployTime." + error;
                    }
                    if (message.config != null && message.hasOwnProperty("config"))
                        if (!$util.isString(message.config))
                            return "config: string expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.resourceUri != null && message.hasOwnProperty("resourceUri")) {
                        if (!Array.isArray(message.resourceUri))
                            return "resourceUri: array expected";
                        for (var i = 0; i < message.resourceUri.length; ++i)
                            if (!$util.isString(message.resourceUri[i]))
                                return "resourceUri: string[] expected";
                    }
                    if (message.platform != null && message.hasOwnProperty("platform"))
                        switch (message.platform) {
                        default:
                            return "platform: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a DeploymentOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DeploymentOccurrence} DeploymentOccurrence
                 */
                DeploymentOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DeploymentOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.DeploymentOccurrence();
                    if (object.userEmail != null)
                        message.userEmail = String(object.userEmail);
                    if (object.deployTime != null) {
                        if (typeof object.deployTime !== "object")
                            throw TypeError(".grafeas.v1.DeploymentOccurrence.deployTime: object expected");
                        message.deployTime = $root.google.protobuf.Timestamp.fromObject(object.deployTime);
                    }
                    if (object.undeployTime != null) {
                        if (typeof object.undeployTime !== "object")
                            throw TypeError(".grafeas.v1.DeploymentOccurrence.undeployTime: object expected");
                        message.undeployTime = $root.google.protobuf.Timestamp.fromObject(object.undeployTime);
                    }
                    if (object.config != null)
                        message.config = String(object.config);
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.resourceUri) {
                        if (!Array.isArray(object.resourceUri))
                            throw TypeError(".grafeas.v1.DeploymentOccurrence.resourceUri: array expected");
                        message.resourceUri = [];
                        for (var i = 0; i < object.resourceUri.length; ++i)
                            message.resourceUri[i] = String(object.resourceUri[i]);
                    }
                    switch (object.platform) {
                    default:
                        if (typeof object.platform === "number") {
                            message.platform = object.platform;
                            break;
                        }
                        break;
                    case "PLATFORM_UNSPECIFIED":
                    case 0:
                        message.platform = 0;
                        break;
                    case "GKE":
                    case 1:
                        message.platform = 1;
                        break;
                    case "FLEX":
                    case 2:
                        message.platform = 2;
                        break;
                    case "CUSTOM":
                    case 3:
                        message.platform = 3;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeploymentOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {grafeas.v1.DeploymentOccurrence} message DeploymentOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeploymentOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.resourceUri = [];
                    if (options.defaults) {
                        object.userEmail = "";
                        object.deployTime = null;
                        object.undeployTime = null;
                        object.config = "";
                        object.address = "";
                        object.platform = options.enums === String ? "PLATFORM_UNSPECIFIED" : 0;
                    }
                    if (message.userEmail != null && message.hasOwnProperty("userEmail"))
                        object.userEmail = message.userEmail;
                    if (message.deployTime != null && message.hasOwnProperty("deployTime"))
                        object.deployTime = $root.google.protobuf.Timestamp.toObject(message.deployTime, options);
                    if (message.undeployTime != null && message.hasOwnProperty("undeployTime"))
                        object.undeployTime = $root.google.protobuf.Timestamp.toObject(message.undeployTime, options);
                    if (message.config != null && message.hasOwnProperty("config"))
                        object.config = message.config;
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.resourceUri && message.resourceUri.length) {
                        object.resourceUri = [];
                        for (var j = 0; j < message.resourceUri.length; ++j)
                            object.resourceUri[j] = message.resourceUri[j];
                    }
                    if (message.platform != null && message.hasOwnProperty("platform"))
                        object.platform = options.enums === String ? $root.grafeas.v1.DeploymentOccurrence.Platform[message.platform] === undefined ? message.platform : $root.grafeas.v1.DeploymentOccurrence.Platform[message.platform] : message.platform;
                    return object;
                };
    
                /**
                 * Converts this DeploymentOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeploymentOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeploymentOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DeploymentOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeploymentOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DeploymentOccurrence";
                };
    
                /**
                 * Platform enum.
                 * @name grafeas.v1.DeploymentOccurrence.Platform
                 * @enum {number}
                 * @property {number} PLATFORM_UNSPECIFIED=0 PLATFORM_UNSPECIFIED value
                 * @property {number} GKE=1 GKE value
                 * @property {number} FLEX=2 FLEX value
                 * @property {number} CUSTOM=3 CUSTOM value
                 */
                DeploymentOccurrence.Platform = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "PLATFORM_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "GKE"] = 1;
                    values[valuesById[2] = "FLEX"] = 2;
                    values[valuesById[3] = "CUSTOM"] = 3;
                    return values;
                })();
    
                return DeploymentOccurrence;
            })();
    
            v1.DiscoveryNote = (function() {
    
                /**
                 * Properties of a DiscoveryNote.
                 * @memberof grafeas.v1
                 * @interface IDiscoveryNote
                 * @property {grafeas.v1.NoteKind|null} [analysisKind] DiscoveryNote analysisKind
                 */
    
                /**
                 * Constructs a new DiscoveryNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DiscoveryNote.
                 * @implements IDiscoveryNote
                 * @constructor
                 * @param {grafeas.v1.IDiscoveryNote=} [properties] Properties to set
                 */
                function DiscoveryNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DiscoveryNote analysisKind.
                 * @member {grafeas.v1.NoteKind} analysisKind
                 * @memberof grafeas.v1.DiscoveryNote
                 * @instance
                 */
                DiscoveryNote.prototype.analysisKind = 0;
    
                /**
                 * Creates a new DiscoveryNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {grafeas.v1.IDiscoveryNote=} [properties] Properties to set
                 * @returns {grafeas.v1.DiscoveryNote} DiscoveryNote instance
                 */
                DiscoveryNote.create = function create(properties) {
                    return new DiscoveryNote(properties);
                };
    
                /**
                 * Encodes the specified DiscoveryNote message. Does not implicitly {@link grafeas.v1.DiscoveryNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {grafeas.v1.IDiscoveryNote} message DiscoveryNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DiscoveryNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.analysisKind != null && Object.hasOwnProperty.call(message, "analysisKind"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.analysisKind);
                    return writer;
                };
    
                /**
                 * Encodes the specified DiscoveryNote message, length delimited. Does not implicitly {@link grafeas.v1.DiscoveryNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {grafeas.v1.IDiscoveryNote} message DiscoveryNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DiscoveryNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DiscoveryNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DiscoveryNote} DiscoveryNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DiscoveryNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DiscoveryNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.analysisKind = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DiscoveryNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DiscoveryNote} DiscoveryNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DiscoveryNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DiscoveryNote message.
                 * @function verify
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DiscoveryNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.analysisKind != null && message.hasOwnProperty("analysisKind"))
                        switch (message.analysisKind) {
                        default:
                            return "analysisKind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a DiscoveryNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DiscoveryNote} DiscoveryNote
                 */
                DiscoveryNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DiscoveryNote)
                        return object;
                    var message = new $root.grafeas.v1.DiscoveryNote();
                    switch (object.analysisKind) {
                    default:
                        if (typeof object.analysisKind === "number") {
                            message.analysisKind = object.analysisKind;
                            break;
                        }
                        break;
                    case "NOTE_KIND_UNSPECIFIED":
                    case 0:
                        message.analysisKind = 0;
                        break;
                    case "VULNERABILITY":
                    case 1:
                        message.analysisKind = 1;
                        break;
                    case "BUILD":
                    case 2:
                        message.analysisKind = 2;
                        break;
                    case "IMAGE":
                    case 3:
                        message.analysisKind = 3;
                        break;
                    case "PACKAGE":
                    case 4:
                        message.analysisKind = 4;
                        break;
                    case "DEPLOYMENT":
                    case 5:
                        message.analysisKind = 5;
                        break;
                    case "DISCOVERY":
                    case 6:
                        message.analysisKind = 6;
                        break;
                    case "ATTESTATION":
                    case 7:
                        message.analysisKind = 7;
                        break;
                    case "UPGRADE":
                    case 8:
                        message.analysisKind = 8;
                        break;
                    case "COMPLIANCE":
                    case 9:
                        message.analysisKind = 9;
                        break;
                    case "DSSE_ATTESTATION":
                    case 10:
                        message.analysisKind = 10;
                        break;
                    case "VULNERABILITY_ASSESSMENT":
                    case 11:
                        message.analysisKind = 11;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DiscoveryNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {grafeas.v1.DiscoveryNote} message DiscoveryNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DiscoveryNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.analysisKind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                    if (message.analysisKind != null && message.hasOwnProperty("analysisKind"))
                        object.analysisKind = options.enums === String ? $root.grafeas.v1.NoteKind[message.analysisKind] === undefined ? message.analysisKind : $root.grafeas.v1.NoteKind[message.analysisKind] : message.analysisKind;
                    return object;
                };
    
                /**
                 * Converts this DiscoveryNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DiscoveryNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DiscoveryNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DiscoveryNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DiscoveryNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DiscoveryNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DiscoveryNote";
                };
    
                return DiscoveryNote;
            })();
    
            v1.DiscoveryOccurrence = (function() {
    
                /**
                 * Properties of a DiscoveryOccurrence.
                 * @memberof grafeas.v1
                 * @interface IDiscoveryOccurrence
                 * @property {grafeas.v1.DiscoveryOccurrence.ContinuousAnalysis|null} [continuousAnalysis] DiscoveryOccurrence continuousAnalysis
                 * @property {grafeas.v1.DiscoveryOccurrence.AnalysisStatus|null} [analysisStatus] DiscoveryOccurrence analysisStatus
                 * @property {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted|null} [analysisCompleted] DiscoveryOccurrence analysisCompleted
                 * @property {Array.<google.rpc.IStatus>|null} [analysisError] DiscoveryOccurrence analysisError
                 * @property {google.rpc.IStatus|null} [analysisStatusError] DiscoveryOccurrence analysisStatusError
                 * @property {string|null} [cpe] DiscoveryOccurrence cpe
                 * @property {google.protobuf.ITimestamp|null} [lastScanTime] DiscoveryOccurrence lastScanTime
                 * @property {google.protobuf.ITimestamp|null} [archiveTime] DiscoveryOccurrence archiveTime
                 */
    
                /**
                 * Constructs a new DiscoveryOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DiscoveryOccurrence.
                 * @implements IDiscoveryOccurrence
                 * @constructor
                 * @param {grafeas.v1.IDiscoveryOccurrence=} [properties] Properties to set
                 */
                function DiscoveryOccurrence(properties) {
                    this.analysisError = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DiscoveryOccurrence continuousAnalysis.
                 * @member {grafeas.v1.DiscoveryOccurrence.ContinuousAnalysis} continuousAnalysis
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.continuousAnalysis = 0;
    
                /**
                 * DiscoveryOccurrence analysisStatus.
                 * @member {grafeas.v1.DiscoveryOccurrence.AnalysisStatus} analysisStatus
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.analysisStatus = 0;
    
                /**
                 * DiscoveryOccurrence analysisCompleted.
                 * @member {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted|null|undefined} analysisCompleted
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.analysisCompleted = null;
    
                /**
                 * DiscoveryOccurrence analysisError.
                 * @member {Array.<google.rpc.IStatus>} analysisError
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.analysisError = $util.emptyArray;
    
                /**
                 * DiscoveryOccurrence analysisStatusError.
                 * @member {google.rpc.IStatus|null|undefined} analysisStatusError
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.analysisStatusError = null;
    
                /**
                 * DiscoveryOccurrence cpe.
                 * @member {string} cpe
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.cpe = "";
    
                /**
                 * DiscoveryOccurrence lastScanTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} lastScanTime
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.lastScanTime = null;
    
                /**
                 * DiscoveryOccurrence archiveTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} archiveTime
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 */
                DiscoveryOccurrence.prototype.archiveTime = null;
    
                /**
                 * Creates a new DiscoveryOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {grafeas.v1.IDiscoveryOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.DiscoveryOccurrence} DiscoveryOccurrence instance
                 */
                DiscoveryOccurrence.create = function create(properties) {
                    return new DiscoveryOccurrence(properties);
                };
    
                /**
                 * Encodes the specified DiscoveryOccurrence message. Does not implicitly {@link grafeas.v1.DiscoveryOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {grafeas.v1.IDiscoveryOccurrence} message DiscoveryOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DiscoveryOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.continuousAnalysis != null && Object.hasOwnProperty.call(message, "continuousAnalysis"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.continuousAnalysis);
                    if (message.analysisStatus != null && Object.hasOwnProperty.call(message, "analysisStatus"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.analysisStatus);
                    if (message.analysisStatusError != null && Object.hasOwnProperty.call(message, "analysisStatusError"))
                        $root.google.rpc.Status.encode(message.analysisStatusError, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.cpe != null && Object.hasOwnProperty.call(message, "cpe"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.cpe);
                    if (message.lastScanTime != null && Object.hasOwnProperty.call(message, "lastScanTime"))
                        $root.google.protobuf.Timestamp.encode(message.lastScanTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.archiveTime != null && Object.hasOwnProperty.call(message, "archiveTime"))
                        $root.google.protobuf.Timestamp.encode(message.archiveTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.analysisCompleted != null && Object.hasOwnProperty.call(message, "analysisCompleted"))
                        $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.encode(message.analysisCompleted, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.analysisError != null && message.analysisError.length)
                        for (var i = 0; i < message.analysisError.length; ++i)
                            $root.google.rpc.Status.encode(message.analysisError[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DiscoveryOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.DiscoveryOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {grafeas.v1.IDiscoveryOccurrence} message DiscoveryOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DiscoveryOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DiscoveryOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DiscoveryOccurrence} DiscoveryOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DiscoveryOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DiscoveryOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.continuousAnalysis = reader.int32();
                                break;
                            }
                        case 2: {
                                message.analysisStatus = reader.int32();
                                break;
                            }
                        case 7: {
                                message.analysisCompleted = $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                if (!(message.analysisError && message.analysisError.length))
                                    message.analysisError = [];
                                message.analysisError.push($root.google.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.analysisStatusError = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.cpe = reader.string();
                                break;
                            }
                        case 5: {
                                message.lastScanTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.archiveTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DiscoveryOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DiscoveryOccurrence} DiscoveryOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DiscoveryOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DiscoveryOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DiscoveryOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.continuousAnalysis != null && message.hasOwnProperty("continuousAnalysis"))
                        switch (message.continuousAnalysis) {
                        default:
                            return "continuousAnalysis: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.analysisStatus != null && message.hasOwnProperty("analysisStatus"))
                        switch (message.analysisStatus) {
                        default:
                            return "analysisStatus: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.analysisCompleted != null && message.hasOwnProperty("analysisCompleted")) {
                        var error = $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.verify(message.analysisCompleted);
                        if (error)
                            return "analysisCompleted." + error;
                    }
                    if (message.analysisError != null && message.hasOwnProperty("analysisError")) {
                        if (!Array.isArray(message.analysisError))
                            return "analysisError: array expected";
                        for (var i = 0; i < message.analysisError.length; ++i) {
                            var error = $root.google.rpc.Status.verify(message.analysisError[i]);
                            if (error)
                                return "analysisError." + error;
                        }
                    }
                    if (message.analysisStatusError != null && message.hasOwnProperty("analysisStatusError")) {
                        var error = $root.google.rpc.Status.verify(message.analysisStatusError);
                        if (error)
                            return "analysisStatusError." + error;
                    }
                    if (message.cpe != null && message.hasOwnProperty("cpe"))
                        if (!$util.isString(message.cpe))
                            return "cpe: string expected";
                    if (message.lastScanTime != null && message.hasOwnProperty("lastScanTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.lastScanTime);
                        if (error)
                            return "lastScanTime." + error;
                    }
                    if (message.archiveTime != null && message.hasOwnProperty("archiveTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.archiveTime);
                        if (error)
                            return "archiveTime." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DiscoveryOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DiscoveryOccurrence} DiscoveryOccurrence
                 */
                DiscoveryOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DiscoveryOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.DiscoveryOccurrence();
                    switch (object.continuousAnalysis) {
                    default:
                        if (typeof object.continuousAnalysis === "number") {
                            message.continuousAnalysis = object.continuousAnalysis;
                            break;
                        }
                        break;
                    case "CONTINUOUS_ANALYSIS_UNSPECIFIED":
                    case 0:
                        message.continuousAnalysis = 0;
                        break;
                    case "ACTIVE":
                    case 1:
                        message.continuousAnalysis = 1;
                        break;
                    case "INACTIVE":
                    case 2:
                        message.continuousAnalysis = 2;
                        break;
                    }
                    switch (object.analysisStatus) {
                    default:
                        if (typeof object.analysisStatus === "number") {
                            message.analysisStatus = object.analysisStatus;
                            break;
                        }
                        break;
                    case "ANALYSIS_STATUS_UNSPECIFIED":
                    case 0:
                        message.analysisStatus = 0;
                        break;
                    case "PENDING":
                    case 1:
                        message.analysisStatus = 1;
                        break;
                    case "SCANNING":
                    case 2:
                        message.analysisStatus = 2;
                        break;
                    case "FINISHED_SUCCESS":
                    case 3:
                        message.analysisStatus = 3;
                        break;
                    case "COMPLETE":
                    case 3:
                        message.analysisStatus = 3;
                        break;
                    case "FINISHED_FAILED":
                    case 4:
                        message.analysisStatus = 4;
                        break;
                    case "FINISHED_UNSUPPORTED":
                    case 5:
                        message.analysisStatus = 5;
                        break;
                    }
                    if (object.analysisCompleted != null) {
                        if (typeof object.analysisCompleted !== "object")
                            throw TypeError(".grafeas.v1.DiscoveryOccurrence.analysisCompleted: object expected");
                        message.analysisCompleted = $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.fromObject(object.analysisCompleted);
                    }
                    if (object.analysisError) {
                        if (!Array.isArray(object.analysisError))
                            throw TypeError(".grafeas.v1.DiscoveryOccurrence.analysisError: array expected");
                        message.analysisError = [];
                        for (var i = 0; i < object.analysisError.length; ++i) {
                            if (typeof object.analysisError[i] !== "object")
                                throw TypeError(".grafeas.v1.DiscoveryOccurrence.analysisError: object expected");
                            message.analysisError[i] = $root.google.rpc.Status.fromObject(object.analysisError[i]);
                        }
                    }
                    if (object.analysisStatusError != null) {
                        if (typeof object.analysisStatusError !== "object")
                            throw TypeError(".grafeas.v1.DiscoveryOccurrence.analysisStatusError: object expected");
                        message.analysisStatusError = $root.google.rpc.Status.fromObject(object.analysisStatusError);
                    }
                    if (object.cpe != null)
                        message.cpe = String(object.cpe);
                    if (object.lastScanTime != null) {
                        if (typeof object.lastScanTime !== "object")
                            throw TypeError(".grafeas.v1.DiscoveryOccurrence.lastScanTime: object expected");
                        message.lastScanTime = $root.google.protobuf.Timestamp.fromObject(object.lastScanTime);
                    }
                    if (object.archiveTime != null) {
                        if (typeof object.archiveTime !== "object")
                            throw TypeError(".grafeas.v1.DiscoveryOccurrence.archiveTime: object expected");
                        message.archiveTime = $root.google.protobuf.Timestamp.fromObject(object.archiveTime);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DiscoveryOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {grafeas.v1.DiscoveryOccurrence} message DiscoveryOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DiscoveryOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.analysisError = [];
                    if (options.defaults) {
                        object.continuousAnalysis = options.enums === String ? "CONTINUOUS_ANALYSIS_UNSPECIFIED" : 0;
                        object.analysisStatus = options.enums === String ? "ANALYSIS_STATUS_UNSPECIFIED" : 0;
                        object.analysisStatusError = null;
                        object.cpe = "";
                        object.lastScanTime = null;
                        object.archiveTime = null;
                        object.analysisCompleted = null;
                    }
                    if (message.continuousAnalysis != null && message.hasOwnProperty("continuousAnalysis"))
                        object.continuousAnalysis = options.enums === String ? $root.grafeas.v1.DiscoveryOccurrence.ContinuousAnalysis[message.continuousAnalysis] === undefined ? message.continuousAnalysis : $root.grafeas.v1.DiscoveryOccurrence.ContinuousAnalysis[message.continuousAnalysis] : message.continuousAnalysis;
                    if (message.analysisStatus != null && message.hasOwnProperty("analysisStatus"))
                        object.analysisStatus = options.enums === String ? $root.grafeas.v1.DiscoveryOccurrence.AnalysisStatus[message.analysisStatus] === undefined ? message.analysisStatus : $root.grafeas.v1.DiscoveryOccurrence.AnalysisStatus[message.analysisStatus] : message.analysisStatus;
                    if (message.analysisStatusError != null && message.hasOwnProperty("analysisStatusError"))
                        object.analysisStatusError = $root.google.rpc.Status.toObject(message.analysisStatusError, options);
                    if (message.cpe != null && message.hasOwnProperty("cpe"))
                        object.cpe = message.cpe;
                    if (message.lastScanTime != null && message.hasOwnProperty("lastScanTime"))
                        object.lastScanTime = $root.google.protobuf.Timestamp.toObject(message.lastScanTime, options);
                    if (message.archiveTime != null && message.hasOwnProperty("archiveTime"))
                        object.archiveTime = $root.google.protobuf.Timestamp.toObject(message.archiveTime, options);
                    if (message.analysisCompleted != null && message.hasOwnProperty("analysisCompleted"))
                        object.analysisCompleted = $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.toObject(message.analysisCompleted, options);
                    if (message.analysisError && message.analysisError.length) {
                        object.analysisError = [];
                        for (var j = 0; j < message.analysisError.length; ++j)
                            object.analysisError[j] = $root.google.rpc.Status.toObject(message.analysisError[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this DiscoveryOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DiscoveryOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DiscoveryOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DiscoveryOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DiscoveryOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DiscoveryOccurrence";
                };
    
                /**
                 * ContinuousAnalysis enum.
                 * @name grafeas.v1.DiscoveryOccurrence.ContinuousAnalysis
                 * @enum {number}
                 * @property {number} CONTINUOUS_ANALYSIS_UNSPECIFIED=0 CONTINUOUS_ANALYSIS_UNSPECIFIED value
                 * @property {number} ACTIVE=1 ACTIVE value
                 * @property {number} INACTIVE=2 INACTIVE value
                 */
                DiscoveryOccurrence.ContinuousAnalysis = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "CONTINUOUS_ANALYSIS_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ACTIVE"] = 1;
                    values[valuesById[2] = "INACTIVE"] = 2;
                    return values;
                })();
    
                /**
                 * AnalysisStatus enum.
                 * @name grafeas.v1.DiscoveryOccurrence.AnalysisStatus
                 * @enum {number}
                 * @property {number} ANALYSIS_STATUS_UNSPECIFIED=0 ANALYSIS_STATUS_UNSPECIFIED value
                 * @property {number} PENDING=1 PENDING value
                 * @property {number} SCANNING=2 SCANNING value
                 * @property {number} FINISHED_SUCCESS=3 FINISHED_SUCCESS value
                 * @property {number} COMPLETE=3 COMPLETE value
                 * @property {number} FINISHED_FAILED=4 FINISHED_FAILED value
                 * @property {number} FINISHED_UNSUPPORTED=5 FINISHED_UNSUPPORTED value
                 */
                DiscoveryOccurrence.AnalysisStatus = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ANALYSIS_STATUS_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "PENDING"] = 1;
                    values[valuesById[2] = "SCANNING"] = 2;
                    values[valuesById[3] = "FINISHED_SUCCESS"] = 3;
                    values["COMPLETE"] = 3;
                    values[valuesById[4] = "FINISHED_FAILED"] = 4;
                    values[valuesById[5] = "FINISHED_UNSUPPORTED"] = 5;
                    return values;
                })();
    
                DiscoveryOccurrence.AnalysisCompleted = (function() {
    
                    /**
                     * Properties of an AnalysisCompleted.
                     * @memberof grafeas.v1.DiscoveryOccurrence
                     * @interface IAnalysisCompleted
                     * @property {Array.<string>|null} [analysisType] AnalysisCompleted analysisType
                     */
    
                    /**
                     * Constructs a new AnalysisCompleted.
                     * @memberof grafeas.v1.DiscoveryOccurrence
                     * @classdesc Represents an AnalysisCompleted.
                     * @implements IAnalysisCompleted
                     * @constructor
                     * @param {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted=} [properties] Properties to set
                     */
                    function AnalysisCompleted(properties) {
                        this.analysisType = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AnalysisCompleted analysisType.
                     * @member {Array.<string>} analysisType
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @instance
                     */
                    AnalysisCompleted.prototype.analysisType = $util.emptyArray;
    
                    /**
                     * Creates a new AnalysisCompleted instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted=} [properties] Properties to set
                     * @returns {grafeas.v1.DiscoveryOccurrence.AnalysisCompleted} AnalysisCompleted instance
                     */
                    AnalysisCompleted.create = function create(properties) {
                        return new AnalysisCompleted(properties);
                    };
    
                    /**
                     * Encodes the specified AnalysisCompleted message. Does not implicitly {@link grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted} message AnalysisCompleted message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalysisCompleted.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.analysisType != null && message.analysisType.length)
                            for (var i = 0; i < message.analysisType.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.analysisType[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AnalysisCompleted message, length delimited. Does not implicitly {@link grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {grafeas.v1.DiscoveryOccurrence.IAnalysisCompleted} message AnalysisCompleted message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalysisCompleted.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AnalysisCompleted message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.DiscoveryOccurrence.AnalysisCompleted} AnalysisCompleted
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalysisCompleted.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.analysisType && message.analysisType.length))
                                        message.analysisType = [];
                                    message.analysisType.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AnalysisCompleted message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.DiscoveryOccurrence.AnalysisCompleted} AnalysisCompleted
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalysisCompleted.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AnalysisCompleted message.
                     * @function verify
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AnalysisCompleted.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.analysisType != null && message.hasOwnProperty("analysisType")) {
                            if (!Array.isArray(message.analysisType))
                                return "analysisType: array expected";
                            for (var i = 0; i < message.analysisType.length; ++i)
                                if (!$util.isString(message.analysisType[i]))
                                    return "analysisType: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AnalysisCompleted message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.DiscoveryOccurrence.AnalysisCompleted} AnalysisCompleted
                     */
                    AnalysisCompleted.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted)
                            return object;
                        var message = new $root.grafeas.v1.DiscoveryOccurrence.AnalysisCompleted();
                        if (object.analysisType) {
                            if (!Array.isArray(object.analysisType))
                                throw TypeError(".grafeas.v1.DiscoveryOccurrence.AnalysisCompleted.analysisType: array expected");
                            message.analysisType = [];
                            for (var i = 0; i < object.analysisType.length; ++i)
                                message.analysisType[i] = String(object.analysisType[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AnalysisCompleted message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {grafeas.v1.DiscoveryOccurrence.AnalysisCompleted} message AnalysisCompleted
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AnalysisCompleted.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.analysisType = [];
                        if (message.analysisType && message.analysisType.length) {
                            object.analysisType = [];
                            for (var j = 0; j < message.analysisType.length; ++j)
                                object.analysisType[j] = message.analysisType[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AnalysisCompleted to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AnalysisCompleted.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AnalysisCompleted
                     * @function getTypeUrl
                     * @memberof grafeas.v1.DiscoveryOccurrence.AnalysisCompleted
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AnalysisCompleted.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.DiscoveryOccurrence.AnalysisCompleted";
                    };
    
                    return AnalysisCompleted;
                })();
    
                return DiscoveryOccurrence;
            })();
    
            v1.DSSEAttestationNote = (function() {
    
                /**
                 * Properties of a DSSEAttestationNote.
                 * @memberof grafeas.v1
                 * @interface IDSSEAttestationNote
                 * @property {grafeas.v1.DSSEAttestationNote.IDSSEHint|null} [hint] DSSEAttestationNote hint
                 */
    
                /**
                 * Constructs a new DSSEAttestationNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DSSEAttestationNote.
                 * @implements IDSSEAttestationNote
                 * @constructor
                 * @param {grafeas.v1.IDSSEAttestationNote=} [properties] Properties to set
                 */
                function DSSEAttestationNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DSSEAttestationNote hint.
                 * @member {grafeas.v1.DSSEAttestationNote.IDSSEHint|null|undefined} hint
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @instance
                 */
                DSSEAttestationNote.prototype.hint = null;
    
                /**
                 * Creates a new DSSEAttestationNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationNote=} [properties] Properties to set
                 * @returns {grafeas.v1.DSSEAttestationNote} DSSEAttestationNote instance
                 */
                DSSEAttestationNote.create = function create(properties) {
                    return new DSSEAttestationNote(properties);
                };
    
                /**
                 * Encodes the specified DSSEAttestationNote message. Does not implicitly {@link grafeas.v1.DSSEAttestationNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationNote} message DSSEAttestationNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DSSEAttestationNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hint != null && Object.hasOwnProperty.call(message, "hint"))
                        $root.grafeas.v1.DSSEAttestationNote.DSSEHint.encode(message.hint, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DSSEAttestationNote message, length delimited. Does not implicitly {@link grafeas.v1.DSSEAttestationNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationNote} message DSSEAttestationNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DSSEAttestationNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DSSEAttestationNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DSSEAttestationNote} DSSEAttestationNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DSSEAttestationNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DSSEAttestationNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.hint = $root.grafeas.v1.DSSEAttestationNote.DSSEHint.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DSSEAttestationNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DSSEAttestationNote} DSSEAttestationNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DSSEAttestationNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DSSEAttestationNote message.
                 * @function verify
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DSSEAttestationNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hint != null && message.hasOwnProperty("hint")) {
                        var error = $root.grafeas.v1.DSSEAttestationNote.DSSEHint.verify(message.hint);
                        if (error)
                            return "hint." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DSSEAttestationNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DSSEAttestationNote} DSSEAttestationNote
                 */
                DSSEAttestationNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DSSEAttestationNote)
                        return object;
                    var message = new $root.grafeas.v1.DSSEAttestationNote();
                    if (object.hint != null) {
                        if (typeof object.hint !== "object")
                            throw TypeError(".grafeas.v1.DSSEAttestationNote.hint: object expected");
                        message.hint = $root.grafeas.v1.DSSEAttestationNote.DSSEHint.fromObject(object.hint);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DSSEAttestationNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {grafeas.v1.DSSEAttestationNote} message DSSEAttestationNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DSSEAttestationNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.hint = null;
                    if (message.hint != null && message.hasOwnProperty("hint"))
                        object.hint = $root.grafeas.v1.DSSEAttestationNote.DSSEHint.toObject(message.hint, options);
                    return object;
                };
    
                /**
                 * Converts this DSSEAttestationNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DSSEAttestationNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DSSEAttestationNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DSSEAttestationNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DSSEAttestationNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DSSEAttestationNote";
                };
    
                DSSEAttestationNote.DSSEHint = (function() {
    
                    /**
                     * Properties of a DSSEHint.
                     * @memberof grafeas.v1.DSSEAttestationNote
                     * @interface IDSSEHint
                     * @property {string|null} [humanReadableName] DSSEHint humanReadableName
                     */
    
                    /**
                     * Constructs a new DSSEHint.
                     * @memberof grafeas.v1.DSSEAttestationNote
                     * @classdesc Represents a DSSEHint.
                     * @implements IDSSEHint
                     * @constructor
                     * @param {grafeas.v1.DSSEAttestationNote.IDSSEHint=} [properties] Properties to set
                     */
                    function DSSEHint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DSSEHint humanReadableName.
                     * @member {string} humanReadableName
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @instance
                     */
                    DSSEHint.prototype.humanReadableName = "";
    
                    /**
                     * Creates a new DSSEHint instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {grafeas.v1.DSSEAttestationNote.IDSSEHint=} [properties] Properties to set
                     * @returns {grafeas.v1.DSSEAttestationNote.DSSEHint} DSSEHint instance
                     */
                    DSSEHint.create = function create(properties) {
                        return new DSSEHint(properties);
                    };
    
                    /**
                     * Encodes the specified DSSEHint message. Does not implicitly {@link grafeas.v1.DSSEAttestationNote.DSSEHint.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {grafeas.v1.DSSEAttestationNote.IDSSEHint} message DSSEHint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DSSEHint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.humanReadableName != null && Object.hasOwnProperty.call(message, "humanReadableName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.humanReadableName);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DSSEHint message, length delimited. Does not implicitly {@link grafeas.v1.DSSEAttestationNote.DSSEHint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {grafeas.v1.DSSEAttestationNote.IDSSEHint} message DSSEHint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DSSEHint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DSSEHint message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.DSSEAttestationNote.DSSEHint} DSSEHint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DSSEHint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DSSEAttestationNote.DSSEHint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.humanReadableName = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DSSEHint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.DSSEAttestationNote.DSSEHint} DSSEHint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DSSEHint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DSSEHint message.
                     * @function verify
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DSSEHint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                            if (!$util.isString(message.humanReadableName))
                                return "humanReadableName: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DSSEHint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.DSSEAttestationNote.DSSEHint} DSSEHint
                     */
                    DSSEHint.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.DSSEAttestationNote.DSSEHint)
                            return object;
                        var message = new $root.grafeas.v1.DSSEAttestationNote.DSSEHint();
                        if (object.humanReadableName != null)
                            message.humanReadableName = String(object.humanReadableName);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DSSEHint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {grafeas.v1.DSSEAttestationNote.DSSEHint} message DSSEHint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DSSEHint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.humanReadableName = "";
                        if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                            object.humanReadableName = message.humanReadableName;
                        return object;
                    };
    
                    /**
                     * Converts this DSSEHint to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DSSEHint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DSSEHint
                     * @function getTypeUrl
                     * @memberof grafeas.v1.DSSEAttestationNote.DSSEHint
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DSSEHint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.DSSEAttestationNote.DSSEHint";
                    };
    
                    return DSSEHint;
                })();
    
                return DSSEAttestationNote;
            })();
    
            v1.DSSEAttestationOccurrence = (function() {
    
                /**
                 * Properties of a DSSEAttestationOccurrence.
                 * @memberof grafeas.v1
                 * @interface IDSSEAttestationOccurrence
                 * @property {grafeas.v1.IEnvelope|null} [envelope] DSSEAttestationOccurrence envelope
                 * @property {grafeas.v1.IInTotoStatement|null} [statement] DSSEAttestationOccurrence statement
                 */
    
                /**
                 * Constructs a new DSSEAttestationOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DSSEAttestationOccurrence.
                 * @implements IDSSEAttestationOccurrence
                 * @constructor
                 * @param {grafeas.v1.IDSSEAttestationOccurrence=} [properties] Properties to set
                 */
                function DSSEAttestationOccurrence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DSSEAttestationOccurrence envelope.
                 * @member {grafeas.v1.IEnvelope|null|undefined} envelope
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @instance
                 */
                DSSEAttestationOccurrence.prototype.envelope = null;
    
                /**
                 * DSSEAttestationOccurrence statement.
                 * @member {grafeas.v1.IInTotoStatement|null|undefined} statement
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @instance
                 */
                DSSEAttestationOccurrence.prototype.statement = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * DSSEAttestationOccurrence decodedPayload.
                 * @member {"statement"|undefined} decodedPayload
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @instance
                 */
                Object.defineProperty(DSSEAttestationOccurrence.prototype, "decodedPayload", {
                    get: $util.oneOfGetter($oneOfFields = ["statement"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new DSSEAttestationOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.DSSEAttestationOccurrence} DSSEAttestationOccurrence instance
                 */
                DSSEAttestationOccurrence.create = function create(properties) {
                    return new DSSEAttestationOccurrence(properties);
                };
    
                /**
                 * Encodes the specified DSSEAttestationOccurrence message. Does not implicitly {@link grafeas.v1.DSSEAttestationOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationOccurrence} message DSSEAttestationOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DSSEAttestationOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.envelope != null && Object.hasOwnProperty.call(message, "envelope"))
                        $root.grafeas.v1.Envelope.encode(message.envelope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.statement != null && Object.hasOwnProperty.call(message, "statement"))
                        $root.grafeas.v1.InTotoStatement.encode(message.statement, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DSSEAttestationOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.DSSEAttestationOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {grafeas.v1.IDSSEAttestationOccurrence} message DSSEAttestationOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DSSEAttestationOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DSSEAttestationOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DSSEAttestationOccurrence} DSSEAttestationOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DSSEAttestationOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DSSEAttestationOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.envelope = $root.grafeas.v1.Envelope.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.statement = $root.grafeas.v1.InTotoStatement.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DSSEAttestationOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DSSEAttestationOccurrence} DSSEAttestationOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DSSEAttestationOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DSSEAttestationOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DSSEAttestationOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.envelope != null && message.hasOwnProperty("envelope")) {
                        var error = $root.grafeas.v1.Envelope.verify(message.envelope);
                        if (error)
                            return "envelope." + error;
                    }
                    if (message.statement != null && message.hasOwnProperty("statement")) {
                        properties.decodedPayload = 1;
                        {
                            var error = $root.grafeas.v1.InTotoStatement.verify(message.statement);
                            if (error)
                                return "statement." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a DSSEAttestationOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DSSEAttestationOccurrence} DSSEAttestationOccurrence
                 */
                DSSEAttestationOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DSSEAttestationOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.DSSEAttestationOccurrence();
                    if (object.envelope != null) {
                        if (typeof object.envelope !== "object")
                            throw TypeError(".grafeas.v1.DSSEAttestationOccurrence.envelope: object expected");
                        message.envelope = $root.grafeas.v1.Envelope.fromObject(object.envelope);
                    }
                    if (object.statement != null) {
                        if (typeof object.statement !== "object")
                            throw TypeError(".grafeas.v1.DSSEAttestationOccurrence.statement: object expected");
                        message.statement = $root.grafeas.v1.InTotoStatement.fromObject(object.statement);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DSSEAttestationOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {grafeas.v1.DSSEAttestationOccurrence} message DSSEAttestationOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DSSEAttestationOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.envelope = null;
                    if (message.envelope != null && message.hasOwnProperty("envelope"))
                        object.envelope = $root.grafeas.v1.Envelope.toObject(message.envelope, options);
                    if (message.statement != null && message.hasOwnProperty("statement")) {
                        object.statement = $root.grafeas.v1.InTotoStatement.toObject(message.statement, options);
                        if (options.oneofs)
                            object.decodedPayload = "statement";
                    }
                    return object;
                };
    
                /**
                 * Converts this DSSEAttestationOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DSSEAttestationOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DSSEAttestationOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DSSEAttestationOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DSSEAttestationOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DSSEAttestationOccurrence";
                };
    
                return DSSEAttestationOccurrence;
            })();
    
            v1.Grafeas = (function() {
    
                /**
                 * Constructs a new Grafeas service.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Grafeas
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Grafeas(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Grafeas.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Grafeas;
    
                /**
                 * Creates new Grafeas service using the specified rpc implementation.
                 * @function create
                 * @memberof grafeas.v1.Grafeas
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Grafeas} RPC service. Useful where requests and/or responses are streamed.
                 */
                Grafeas.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|getOccurrence}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef GetOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls GetOccurrence.
                 * @function getOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetOccurrenceRequest} request GetOccurrenceRequest message or plain object
                 * @param {grafeas.v1.Grafeas.GetOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.getOccurrence = function getOccurrence(request, callback) {
                    return this.rpcCall(getOccurrence, $root.grafeas.v1.GetOccurrenceRequest, $root.grafeas.v1.Occurrence, request, callback);
                }, "name", { value: "GetOccurrence" });
    
                /**
                 * Calls GetOccurrence.
                 * @function getOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetOccurrenceRequest} request GetOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|listOccurrences}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef ListOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.ListOccurrencesResponse} [response] ListOccurrencesResponse
                 */
    
                /**
                 * Calls ListOccurrences.
                 * @function listOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListOccurrencesRequest} request ListOccurrencesRequest message or plain object
                 * @param {grafeas.v1.Grafeas.ListOccurrencesCallback} callback Node-style callback called with the error, if any, and ListOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.listOccurrences = function listOccurrences(request, callback) {
                    return this.rpcCall(listOccurrences, $root.grafeas.v1.ListOccurrencesRequest, $root.grafeas.v1.ListOccurrencesResponse, request, callback);
                }, "name", { value: "ListOccurrences" });
    
                /**
                 * Calls ListOccurrences.
                 * @function listOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListOccurrencesRequest} request ListOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1.ListOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|deleteOccurrence}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef DeleteOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOccurrence.
                 * @function deleteOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IDeleteOccurrenceRequest} request DeleteOccurrenceRequest message or plain object
                 * @param {grafeas.v1.Grafeas.DeleteOccurrenceCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.deleteOccurrence = function deleteOccurrence(request, callback) {
                    return this.rpcCall(deleteOccurrence, $root.grafeas.v1.DeleteOccurrenceRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOccurrence" });
    
                /**
                 * Calls DeleteOccurrence.
                 * @function deleteOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IDeleteOccurrenceRequest} request DeleteOccurrenceRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|createOccurrence}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef CreateOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls CreateOccurrence.
                 * @function createOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.ICreateOccurrenceRequest} request CreateOccurrenceRequest message or plain object
                 * @param {grafeas.v1.Grafeas.CreateOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.createOccurrence = function createOccurrence(request, callback) {
                    return this.rpcCall(createOccurrence, $root.grafeas.v1.CreateOccurrenceRequest, $root.grafeas.v1.Occurrence, request, callback);
                }, "name", { value: "CreateOccurrence" });
    
                /**
                 * Calls CreateOccurrence.
                 * @function createOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.ICreateOccurrenceRequest} request CreateOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|batchCreateOccurrences}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef BatchCreateOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.BatchCreateOccurrencesResponse} [response] BatchCreateOccurrencesResponse
                 */
    
                /**
                 * Calls BatchCreateOccurrences.
                 * @function batchCreateOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest} request BatchCreateOccurrencesRequest message or plain object
                 * @param {grafeas.v1.Grafeas.BatchCreateOccurrencesCallback} callback Node-style callback called with the error, if any, and BatchCreateOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.batchCreateOccurrences = function batchCreateOccurrences(request, callback) {
                    return this.rpcCall(batchCreateOccurrences, $root.grafeas.v1.BatchCreateOccurrencesRequest, $root.grafeas.v1.BatchCreateOccurrencesResponse, request, callback);
                }, "name", { value: "BatchCreateOccurrences" });
    
                /**
                 * Calls BatchCreateOccurrences.
                 * @function batchCreateOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest} request BatchCreateOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1.BatchCreateOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|updateOccurrence}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef UpdateOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls UpdateOccurrence.
                 * @function updateOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IUpdateOccurrenceRequest} request UpdateOccurrenceRequest message or plain object
                 * @param {grafeas.v1.Grafeas.UpdateOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.updateOccurrence = function updateOccurrence(request, callback) {
                    return this.rpcCall(updateOccurrence, $root.grafeas.v1.UpdateOccurrenceRequest, $root.grafeas.v1.Occurrence, request, callback);
                }, "name", { value: "UpdateOccurrence" });
    
                /**
                 * Calls UpdateOccurrence.
                 * @function updateOccurrence
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IUpdateOccurrenceRequest} request UpdateOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|getOccurrenceNote}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef GetOccurrenceNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Note} [response] Note
                 */
    
                /**
                 * Calls GetOccurrenceNote.
                 * @function getOccurrenceNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest} request GetOccurrenceNoteRequest message or plain object
                 * @param {grafeas.v1.Grafeas.GetOccurrenceNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.getOccurrenceNote = function getOccurrenceNote(request, callback) {
                    return this.rpcCall(getOccurrenceNote, $root.grafeas.v1.GetOccurrenceNoteRequest, $root.grafeas.v1.Note, request, callback);
                }, "name", { value: "GetOccurrenceNote" });
    
                /**
                 * Calls GetOccurrenceNote.
                 * @function getOccurrenceNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest} request GetOccurrenceNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|getNote}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef GetNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Note} [response] Note
                 */
    
                /**
                 * Calls GetNote.
                 * @function getNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetNoteRequest} request GetNoteRequest message or plain object
                 * @param {grafeas.v1.Grafeas.GetNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.getNote = function getNote(request, callback) {
                    return this.rpcCall(getNote, $root.grafeas.v1.GetNoteRequest, $root.grafeas.v1.Note, request, callback);
                }, "name", { value: "GetNote" });
    
                /**
                 * Calls GetNote.
                 * @function getNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IGetNoteRequest} request GetNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|listNotes}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef ListNotesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.ListNotesResponse} [response] ListNotesResponse
                 */
    
                /**
                 * Calls ListNotes.
                 * @function listNotes
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListNotesRequest} request ListNotesRequest message or plain object
                 * @param {grafeas.v1.Grafeas.ListNotesCallback} callback Node-style callback called with the error, if any, and ListNotesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.listNotes = function listNotes(request, callback) {
                    return this.rpcCall(listNotes, $root.grafeas.v1.ListNotesRequest, $root.grafeas.v1.ListNotesResponse, request, callback);
                }, "name", { value: "ListNotes" });
    
                /**
                 * Calls ListNotes.
                 * @function listNotes
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListNotesRequest} request ListNotesRequest message or plain object
                 * @returns {Promise<grafeas.v1.ListNotesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|deleteNote}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef DeleteNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteNote.
                 * @function deleteNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IDeleteNoteRequest} request DeleteNoteRequest message or plain object
                 * @param {grafeas.v1.Grafeas.DeleteNoteCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.deleteNote = function deleteNote(request, callback) {
                    return this.rpcCall(deleteNote, $root.grafeas.v1.DeleteNoteRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteNote" });
    
                /**
                 * Calls DeleteNote.
                 * @function deleteNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IDeleteNoteRequest} request DeleteNoteRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|createNote}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef CreateNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Note} [response] Note
                 */
    
                /**
                 * Calls CreateNote.
                 * @function createNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.ICreateNoteRequest} request CreateNoteRequest message or plain object
                 * @param {grafeas.v1.Grafeas.CreateNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.createNote = function createNote(request, callback) {
                    return this.rpcCall(createNote, $root.grafeas.v1.CreateNoteRequest, $root.grafeas.v1.Note, request, callback);
                }, "name", { value: "CreateNote" });
    
                /**
                 * Calls CreateNote.
                 * @function createNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.ICreateNoteRequest} request CreateNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|batchCreateNotes}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef BatchCreateNotesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.BatchCreateNotesResponse} [response] BatchCreateNotesResponse
                 */
    
                /**
                 * Calls BatchCreateNotes.
                 * @function batchCreateNotes
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IBatchCreateNotesRequest} request BatchCreateNotesRequest message or plain object
                 * @param {grafeas.v1.Grafeas.BatchCreateNotesCallback} callback Node-style callback called with the error, if any, and BatchCreateNotesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.batchCreateNotes = function batchCreateNotes(request, callback) {
                    return this.rpcCall(batchCreateNotes, $root.grafeas.v1.BatchCreateNotesRequest, $root.grafeas.v1.BatchCreateNotesResponse, request, callback);
                }, "name", { value: "BatchCreateNotes" });
    
                /**
                 * Calls BatchCreateNotes.
                 * @function batchCreateNotes
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IBatchCreateNotesRequest} request BatchCreateNotesRequest message or plain object
                 * @returns {Promise<grafeas.v1.BatchCreateNotesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|updateNote}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef UpdateNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.Note} [response] Note
                 */
    
                /**
                 * Calls UpdateNote.
                 * @function updateNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IUpdateNoteRequest} request UpdateNoteRequest message or plain object
                 * @param {grafeas.v1.Grafeas.UpdateNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.updateNote = function updateNote(request, callback) {
                    return this.rpcCall(updateNote, $root.grafeas.v1.UpdateNoteRequest, $root.grafeas.v1.Note, request, callback);
                }, "name", { value: "UpdateNote" });
    
                /**
                 * Calls UpdateNote.
                 * @function updateNote
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IUpdateNoteRequest} request UpdateNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1.Grafeas|listNoteOccurrences}.
                 * @memberof grafeas.v1.Grafeas
                 * @typedef ListNoteOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1.ListNoteOccurrencesResponse} [response] ListNoteOccurrencesResponse
                 */
    
                /**
                 * Calls ListNoteOccurrences.
                 * @function listNoteOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListNoteOccurrencesRequest} request ListNoteOccurrencesRequest message or plain object
                 * @param {grafeas.v1.Grafeas.ListNoteOccurrencesCallback} callback Node-style callback called with the error, if any, and ListNoteOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Grafeas.prototype.listNoteOccurrences = function listNoteOccurrences(request, callback) {
                    return this.rpcCall(listNoteOccurrences, $root.grafeas.v1.ListNoteOccurrencesRequest, $root.grafeas.v1.ListNoteOccurrencesResponse, request, callback);
                }, "name", { value: "ListNoteOccurrences" });
    
                /**
                 * Calls ListNoteOccurrences.
                 * @function listNoteOccurrences
                 * @memberof grafeas.v1.Grafeas
                 * @instance
                 * @param {grafeas.v1.IListNoteOccurrencesRequest} request ListNoteOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1.ListNoteOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                return Grafeas;
            })();
    
            v1.Occurrence = (function() {
    
                /**
                 * Properties of an Occurrence.
                 * @memberof grafeas.v1
                 * @interface IOccurrence
                 * @property {string|null} [name] Occurrence name
                 * @property {string|null} [resourceUri] Occurrence resourceUri
                 * @property {string|null} [noteName] Occurrence noteName
                 * @property {grafeas.v1.NoteKind|null} [kind] Occurrence kind
                 * @property {string|null} [remediation] Occurrence remediation
                 * @property {google.protobuf.ITimestamp|null} [createTime] Occurrence createTime
                 * @property {google.protobuf.ITimestamp|null} [updateTime] Occurrence updateTime
                 * @property {grafeas.v1.IVulnerabilityOccurrence|null} [vulnerability] Occurrence vulnerability
                 * @property {grafeas.v1.IBuildOccurrence|null} [build] Occurrence build
                 * @property {grafeas.v1.IImageOccurrence|null} [image] Occurrence image
                 * @property {grafeas.v1.IPackageOccurrence|null} ["package"] Occurrence package
                 * @property {grafeas.v1.IDeploymentOccurrence|null} [deployment] Occurrence deployment
                 * @property {grafeas.v1.IDiscoveryOccurrence|null} [discovery] Occurrence discovery
                 * @property {grafeas.v1.IAttestationOccurrence|null} [attestation] Occurrence attestation
                 * @property {grafeas.v1.IUpgradeOccurrence|null} [upgrade] Occurrence upgrade
                 * @property {grafeas.v1.IComplianceOccurrence|null} [compliance] Occurrence compliance
                 * @property {grafeas.v1.IDSSEAttestationOccurrence|null} [dsseAttestation] Occurrence dsseAttestation
                 * @property {grafeas.v1.IEnvelope|null} [envelope] Occurrence envelope
                 */
    
                /**
                 * Constructs a new Occurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents an Occurrence.
                 * @implements IOccurrence
                 * @constructor
                 * @param {grafeas.v1.IOccurrence=} [properties] Properties to set
                 */
                function Occurrence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Occurrence name.
                 * @member {string} name
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.name = "";
    
                /**
                 * Occurrence resourceUri.
                 * @member {string} resourceUri
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.resourceUri = "";
    
                /**
                 * Occurrence noteName.
                 * @member {string} noteName
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.noteName = "";
    
                /**
                 * Occurrence kind.
                 * @member {grafeas.v1.NoteKind} kind
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.kind = 0;
    
                /**
                 * Occurrence remediation.
                 * @member {string} remediation
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.remediation = "";
    
                /**
                 * Occurrence createTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} createTime
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.createTime = null;
    
                /**
                 * Occurrence updateTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.updateTime = null;
    
                /**
                 * Occurrence vulnerability.
                 * @member {grafeas.v1.IVulnerabilityOccurrence|null|undefined} vulnerability
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.vulnerability = null;
    
                /**
                 * Occurrence build.
                 * @member {grafeas.v1.IBuildOccurrence|null|undefined} build
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.build = null;
    
                /**
                 * Occurrence image.
                 * @member {grafeas.v1.IImageOccurrence|null|undefined} image
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.image = null;
    
                /**
                 * Occurrence package.
                 * @member {grafeas.v1.IPackageOccurrence|null|undefined} package
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype["package"] = null;
    
                /**
                 * Occurrence deployment.
                 * @member {grafeas.v1.IDeploymentOccurrence|null|undefined} deployment
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.deployment = null;
    
                /**
                 * Occurrence discovery.
                 * @member {grafeas.v1.IDiscoveryOccurrence|null|undefined} discovery
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.discovery = null;
    
                /**
                 * Occurrence attestation.
                 * @member {grafeas.v1.IAttestationOccurrence|null|undefined} attestation
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.attestation = null;
    
                /**
                 * Occurrence upgrade.
                 * @member {grafeas.v1.IUpgradeOccurrence|null|undefined} upgrade
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.upgrade = null;
    
                /**
                 * Occurrence compliance.
                 * @member {grafeas.v1.IComplianceOccurrence|null|undefined} compliance
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.compliance = null;
    
                /**
                 * Occurrence dsseAttestation.
                 * @member {grafeas.v1.IDSSEAttestationOccurrence|null|undefined} dsseAttestation
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.dsseAttestation = null;
    
                /**
                 * Occurrence envelope.
                 * @member {grafeas.v1.IEnvelope|null|undefined} envelope
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.envelope = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Occurrence details.
                 * @member {"vulnerability"|"build"|"image"|"package"|"deployment"|"discovery"|"attestation"|"upgrade"|"compliance"|"dsseAttestation"|undefined} details
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 */
                Object.defineProperty(Occurrence.prototype, "details", {
                    get: $util.oneOfGetter($oneOfFields = ["vulnerability", "build", "image", "package", "deployment", "discovery", "attestation", "upgrade", "compliance", "dsseAttestation"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Occurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {grafeas.v1.IOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.Occurrence} Occurrence instance
                 */
                Occurrence.create = function create(properties) {
                    return new Occurrence(properties);
                };
    
                /**
                 * Encodes the specified Occurrence message. Does not implicitly {@link grafeas.v1.Occurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {grafeas.v1.IOccurrence} message Occurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Occurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.resourceUri != null && Object.hasOwnProperty.call(message, "resourceUri"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.resourceUri);
                    if (message.noteName != null && Object.hasOwnProperty.call(message, "noteName"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.noteName);
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                    if (message.remediation != null && Object.hasOwnProperty.call(message, "remediation"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.remediation);
                    if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                        $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                        $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.vulnerability != null && Object.hasOwnProperty.call(message, "vulnerability"))
                        $root.grafeas.v1.VulnerabilityOccurrence.encode(message.vulnerability, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                        $root.grafeas.v1.BuildOccurrence.encode(message.build, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                        $root.grafeas.v1.ImageOccurrence.encode(message.image, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        $root.grafeas.v1.PackageOccurrence.encode(message["package"], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.deployment != null && Object.hasOwnProperty.call(message, "deployment"))
                        $root.grafeas.v1.DeploymentOccurrence.encode(message.deployment, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.discovery != null && Object.hasOwnProperty.call(message, "discovery"))
                        $root.grafeas.v1.DiscoveryOccurrence.encode(message.discovery, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
                        $root.grafeas.v1.AttestationOccurrence.encode(message.attestation, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.upgrade != null && Object.hasOwnProperty.call(message, "upgrade"))
                        $root.grafeas.v1.UpgradeOccurrence.encode(message.upgrade, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    if (message.compliance != null && Object.hasOwnProperty.call(message, "compliance"))
                        $root.grafeas.v1.ComplianceOccurrence.encode(message.compliance, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.dsseAttestation != null && Object.hasOwnProperty.call(message, "dsseAttestation"))
                        $root.grafeas.v1.DSSEAttestationOccurrence.encode(message.dsseAttestation, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                    if (message.envelope != null && Object.hasOwnProperty.call(message, "envelope"))
                        $root.grafeas.v1.Envelope.encode(message.envelope, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Occurrence message, length delimited. Does not implicitly {@link grafeas.v1.Occurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {grafeas.v1.IOccurrence} message Occurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Occurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Occurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Occurrence} Occurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Occurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Occurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.resourceUri = reader.string();
                                break;
                            }
                        case 3: {
                                message.noteName = reader.string();
                                break;
                            }
                        case 4: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 5: {
                                message.remediation = reader.string();
                                break;
                            }
                        case 6: {
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.vulnerability = $root.grafeas.v1.VulnerabilityOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.build = $root.grafeas.v1.BuildOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 10: {
                                message.image = $root.grafeas.v1.ImageOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 11: {
                                message["package"] = $root.grafeas.v1.PackageOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.deployment = $root.grafeas.v1.DeploymentOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 13: {
                                message.discovery = $root.grafeas.v1.DiscoveryOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 14: {
                                message.attestation = $root.grafeas.v1.AttestationOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 15: {
                                message.upgrade = $root.grafeas.v1.UpgradeOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 16: {
                                message.compliance = $root.grafeas.v1.ComplianceOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.dsseAttestation = $root.grafeas.v1.DSSEAttestationOccurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 18: {
                                message.envelope = $root.grafeas.v1.Envelope.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Occurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Occurrence} Occurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Occurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Occurrence message.
                 * @function verify
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Occurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.resourceUri != null && message.hasOwnProperty("resourceUri"))
                        if (!$util.isString(message.resourceUri))
                            return "resourceUri: string expected";
                    if (message.noteName != null && message.hasOwnProperty("noteName"))
                        if (!$util.isString(message.noteName))
                            return "noteName: string expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                            break;
                        }
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        if (!$util.isString(message.remediation))
                            return "remediation: string expected";
                    if (message.createTime != null && message.hasOwnProperty("createTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                        if (error)
                            return "createTime." + error;
                    }
                    if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                        if (error)
                            return "updateTime." + error;
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.VulnerabilityOccurrence.verify(message.vulnerability);
                            if (error)
                                return "vulnerability." + error;
                        }
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.BuildOccurrence.verify(message.build);
                            if (error)
                                return "build." + error;
                        }
                    }
                    if (message.image != null && message.hasOwnProperty("image")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.ImageOccurrence.verify(message.image);
                            if (error)
                                return "image." + error;
                        }
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.PackageOccurrence.verify(message["package"]);
                            if (error)
                                return "package." + error;
                        }
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.DeploymentOccurrence.verify(message.deployment);
                            if (error)
                                return "deployment." + error;
                        }
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.DiscoveryOccurrence.verify(message.discovery);
                            if (error)
                                return "discovery." + error;
                        }
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.AttestationOccurrence.verify(message.attestation);
                            if (error)
                                return "attestation." + error;
                        }
                    }
                    if (message.upgrade != null && message.hasOwnProperty("upgrade")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.UpgradeOccurrence.verify(message.upgrade);
                            if (error)
                                return "upgrade." + error;
                        }
                    }
                    if (message.compliance != null && message.hasOwnProperty("compliance")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.ComplianceOccurrence.verify(message.compliance);
                            if (error)
                                return "compliance." + error;
                        }
                    }
                    if (message.dsseAttestation != null && message.hasOwnProperty("dsseAttestation")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1.DSSEAttestationOccurrence.verify(message.dsseAttestation);
                            if (error)
                                return "dsseAttestation." + error;
                        }
                    }
                    if (message.envelope != null && message.hasOwnProperty("envelope")) {
                        var error = $root.grafeas.v1.Envelope.verify(message.envelope);
                        if (error)
                            return "envelope." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an Occurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Occurrence} Occurrence
                 */
                Occurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Occurrence)
                        return object;
                    var message = new $root.grafeas.v1.Occurrence();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.resourceUri != null)
                        message.resourceUri = String(object.resourceUri);
                    if (object.noteName != null)
                        message.noteName = String(object.noteName);
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "NOTE_KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "VULNERABILITY":
                    case 1:
                        message.kind = 1;
                        break;
                    case "BUILD":
                    case 2:
                        message.kind = 2;
                        break;
                    case "IMAGE":
                    case 3:
                        message.kind = 3;
                        break;
                    case "PACKAGE":
                    case 4:
                        message.kind = 4;
                        break;
                    case "DEPLOYMENT":
                    case 5:
                        message.kind = 5;
                        break;
                    case "DISCOVERY":
                    case 6:
                        message.kind = 6;
                        break;
                    case "ATTESTATION":
                    case 7:
                        message.kind = 7;
                        break;
                    case "UPGRADE":
                    case 8:
                        message.kind = 8;
                        break;
                    case "COMPLIANCE":
                    case 9:
                        message.kind = 9;
                        break;
                    case "DSSE_ATTESTATION":
                    case 10:
                        message.kind = 10;
                        break;
                    case "VULNERABILITY_ASSESSMENT":
                    case 11:
                        message.kind = 11;
                        break;
                    }
                    if (object.remediation != null)
                        message.remediation = String(object.remediation);
                    if (object.createTime != null) {
                        if (typeof object.createTime !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.createTime: object expected");
                        message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                    }
                    if (object.updateTime != null) {
                        if (typeof object.updateTime !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.updateTime: object expected");
                        message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                    }
                    if (object.vulnerability != null) {
                        if (typeof object.vulnerability !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.vulnerability: object expected");
                        message.vulnerability = $root.grafeas.v1.VulnerabilityOccurrence.fromObject(object.vulnerability);
                    }
                    if (object.build != null) {
                        if (typeof object.build !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.build: object expected");
                        message.build = $root.grafeas.v1.BuildOccurrence.fromObject(object.build);
                    }
                    if (object.image != null) {
                        if (typeof object.image !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.image: object expected");
                        message.image = $root.grafeas.v1.ImageOccurrence.fromObject(object.image);
                    }
                    if (object["package"] != null) {
                        if (typeof object["package"] !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.package: object expected");
                        message["package"] = $root.grafeas.v1.PackageOccurrence.fromObject(object["package"]);
                    }
                    if (object.deployment != null) {
                        if (typeof object.deployment !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.deployment: object expected");
                        message.deployment = $root.grafeas.v1.DeploymentOccurrence.fromObject(object.deployment);
                    }
                    if (object.discovery != null) {
                        if (typeof object.discovery !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.discovery: object expected");
                        message.discovery = $root.grafeas.v1.DiscoveryOccurrence.fromObject(object.discovery);
                    }
                    if (object.attestation != null) {
                        if (typeof object.attestation !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.attestation: object expected");
                        message.attestation = $root.grafeas.v1.AttestationOccurrence.fromObject(object.attestation);
                    }
                    if (object.upgrade != null) {
                        if (typeof object.upgrade !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.upgrade: object expected");
                        message.upgrade = $root.grafeas.v1.UpgradeOccurrence.fromObject(object.upgrade);
                    }
                    if (object.compliance != null) {
                        if (typeof object.compliance !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.compliance: object expected");
                        message.compliance = $root.grafeas.v1.ComplianceOccurrence.fromObject(object.compliance);
                    }
                    if (object.dsseAttestation != null) {
                        if (typeof object.dsseAttestation !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.dsseAttestation: object expected");
                        message.dsseAttestation = $root.grafeas.v1.DSSEAttestationOccurrence.fromObject(object.dsseAttestation);
                    }
                    if (object.envelope != null) {
                        if (typeof object.envelope !== "object")
                            throw TypeError(".grafeas.v1.Occurrence.envelope: object expected");
                        message.envelope = $root.grafeas.v1.Envelope.fromObject(object.envelope);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Occurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {grafeas.v1.Occurrence} message Occurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Occurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.resourceUri = "";
                        object.noteName = "";
                        object.kind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                        object.remediation = "";
                        object.createTime = null;
                        object.updateTime = null;
                        object.envelope = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.resourceUri != null && message.hasOwnProperty("resourceUri"))
                        object.resourceUri = message.resourceUri;
                    if (message.noteName != null && message.hasOwnProperty("noteName"))
                        object.noteName = message.noteName;
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1.NoteKind[message.kind] === undefined ? message.kind : $root.grafeas.v1.NoteKind[message.kind] : message.kind;
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        object.remediation = message.remediation;
                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                        object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        object.vulnerability = $root.grafeas.v1.VulnerabilityOccurrence.toObject(message.vulnerability, options);
                        if (options.oneofs)
                            object.details = "vulnerability";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        object.build = $root.grafeas.v1.BuildOccurrence.toObject(message.build, options);
                        if (options.oneofs)
                            object.details = "build";
                    }
                    if (message.image != null && message.hasOwnProperty("image")) {
                        object.image = $root.grafeas.v1.ImageOccurrence.toObject(message.image, options);
                        if (options.oneofs)
                            object.details = "image";
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        object["package"] = $root.grafeas.v1.PackageOccurrence.toObject(message["package"], options);
                        if (options.oneofs)
                            object.details = "package";
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        object.deployment = $root.grafeas.v1.DeploymentOccurrence.toObject(message.deployment, options);
                        if (options.oneofs)
                            object.details = "deployment";
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        object.discovery = $root.grafeas.v1.DiscoveryOccurrence.toObject(message.discovery, options);
                        if (options.oneofs)
                            object.details = "discovery";
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        object.attestation = $root.grafeas.v1.AttestationOccurrence.toObject(message.attestation, options);
                        if (options.oneofs)
                            object.details = "attestation";
                    }
                    if (message.upgrade != null && message.hasOwnProperty("upgrade")) {
                        object.upgrade = $root.grafeas.v1.UpgradeOccurrence.toObject(message.upgrade, options);
                        if (options.oneofs)
                            object.details = "upgrade";
                    }
                    if (message.compliance != null && message.hasOwnProperty("compliance")) {
                        object.compliance = $root.grafeas.v1.ComplianceOccurrence.toObject(message.compliance, options);
                        if (options.oneofs)
                            object.details = "compliance";
                    }
                    if (message.dsseAttestation != null && message.hasOwnProperty("dsseAttestation")) {
                        object.dsseAttestation = $root.grafeas.v1.DSSEAttestationOccurrence.toObject(message.dsseAttestation, options);
                        if (options.oneofs)
                            object.details = "dsseAttestation";
                    }
                    if (message.envelope != null && message.hasOwnProperty("envelope"))
                        object.envelope = $root.grafeas.v1.Envelope.toObject(message.envelope, options);
                    return object;
                };
    
                /**
                 * Converts this Occurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Occurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Occurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Occurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Occurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Occurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Occurrence";
                };
    
                return Occurrence;
            })();
    
            v1.Note = (function() {
    
                /**
                 * Properties of a Note.
                 * @memberof grafeas.v1
                 * @interface INote
                 * @property {string|null} [name] Note name
                 * @property {string|null} [shortDescription] Note shortDescription
                 * @property {string|null} [longDescription] Note longDescription
                 * @property {grafeas.v1.NoteKind|null} [kind] Note kind
                 * @property {Array.<grafeas.v1.IRelatedUrl>|null} [relatedUrl] Note relatedUrl
                 * @property {google.protobuf.ITimestamp|null} [expirationTime] Note expirationTime
                 * @property {google.protobuf.ITimestamp|null} [createTime] Note createTime
                 * @property {google.protobuf.ITimestamp|null} [updateTime] Note updateTime
                 * @property {Array.<string>|null} [relatedNoteNames] Note relatedNoteNames
                 * @property {grafeas.v1.IVulnerabilityNote|null} [vulnerability] Note vulnerability
                 * @property {grafeas.v1.IBuildNote|null} [build] Note build
                 * @property {grafeas.v1.IImageNote|null} [image] Note image
                 * @property {grafeas.v1.IPackageNote|null} ["package"] Note package
                 * @property {grafeas.v1.IDeploymentNote|null} [deployment] Note deployment
                 * @property {grafeas.v1.IDiscoveryNote|null} [discovery] Note discovery
                 * @property {grafeas.v1.IAttestationNote|null} [attestation] Note attestation
                 * @property {grafeas.v1.IUpgradeNote|null} [upgrade] Note upgrade
                 * @property {grafeas.v1.IComplianceNote|null} [compliance] Note compliance
                 * @property {grafeas.v1.IDSSEAttestationNote|null} [dsseAttestation] Note dsseAttestation
                 * @property {grafeas.v1.IVulnerabilityAssessmentNote|null} [vulnerabilityAssessment] Note vulnerabilityAssessment
                 */
    
                /**
                 * Constructs a new Note.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Note.
                 * @implements INote
                 * @constructor
                 * @param {grafeas.v1.INote=} [properties] Properties to set
                 */
                function Note(properties) {
                    this.relatedUrl = [];
                    this.relatedNoteNames = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Note name.
                 * @member {string} name
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.name = "";
    
                /**
                 * Note shortDescription.
                 * @member {string} shortDescription
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.shortDescription = "";
    
                /**
                 * Note longDescription.
                 * @member {string} longDescription
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.longDescription = "";
    
                /**
                 * Note kind.
                 * @member {grafeas.v1.NoteKind} kind
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.kind = 0;
    
                /**
                 * Note relatedUrl.
                 * @member {Array.<grafeas.v1.IRelatedUrl>} relatedUrl
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.relatedUrl = $util.emptyArray;
    
                /**
                 * Note expirationTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} expirationTime
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.expirationTime = null;
    
                /**
                 * Note createTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} createTime
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.createTime = null;
    
                /**
                 * Note updateTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.updateTime = null;
    
                /**
                 * Note relatedNoteNames.
                 * @member {Array.<string>} relatedNoteNames
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.relatedNoteNames = $util.emptyArray;
    
                /**
                 * Note vulnerability.
                 * @member {grafeas.v1.IVulnerabilityNote|null|undefined} vulnerability
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.vulnerability = null;
    
                /**
                 * Note build.
                 * @member {grafeas.v1.IBuildNote|null|undefined} build
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.build = null;
    
                /**
                 * Note image.
                 * @member {grafeas.v1.IImageNote|null|undefined} image
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.image = null;
    
                /**
                 * Note package.
                 * @member {grafeas.v1.IPackageNote|null|undefined} package
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype["package"] = null;
    
                /**
                 * Note deployment.
                 * @member {grafeas.v1.IDeploymentNote|null|undefined} deployment
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.deployment = null;
    
                /**
                 * Note discovery.
                 * @member {grafeas.v1.IDiscoveryNote|null|undefined} discovery
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.discovery = null;
    
                /**
                 * Note attestation.
                 * @member {grafeas.v1.IAttestationNote|null|undefined} attestation
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.attestation = null;
    
                /**
                 * Note upgrade.
                 * @member {grafeas.v1.IUpgradeNote|null|undefined} upgrade
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.upgrade = null;
    
                /**
                 * Note compliance.
                 * @member {grafeas.v1.IComplianceNote|null|undefined} compliance
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.compliance = null;
    
                /**
                 * Note dsseAttestation.
                 * @member {grafeas.v1.IDSSEAttestationNote|null|undefined} dsseAttestation
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.dsseAttestation = null;
    
                /**
                 * Note vulnerabilityAssessment.
                 * @member {grafeas.v1.IVulnerabilityAssessmentNote|null|undefined} vulnerabilityAssessment
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Note.prototype.vulnerabilityAssessment = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Note type.
                 * @member {"vulnerability"|"build"|"image"|"package"|"deployment"|"discovery"|"attestation"|"upgrade"|"compliance"|"dsseAttestation"|"vulnerabilityAssessment"|undefined} type
                 * @memberof grafeas.v1.Note
                 * @instance
                 */
                Object.defineProperty(Note.prototype, "type", {
                    get: $util.oneOfGetter($oneOfFields = ["vulnerability", "build", "image", "package", "deployment", "discovery", "attestation", "upgrade", "compliance", "dsseAttestation", "vulnerabilityAssessment"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Note instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {grafeas.v1.INote=} [properties] Properties to set
                 * @returns {grafeas.v1.Note} Note instance
                 */
                Note.create = function create(properties) {
                    return new Note(properties);
                };
    
                /**
                 * Encodes the specified Note message. Does not implicitly {@link grafeas.v1.Note.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {grafeas.v1.INote} message Note message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Note.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.shortDescription);
                    if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.longDescription);
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                    if (message.relatedUrl != null && message.relatedUrl.length)
                        for (var i = 0; i < message.relatedUrl.length; ++i)
                            $root.grafeas.v1.RelatedUrl.encode(message.relatedUrl[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.expirationTime != null && Object.hasOwnProperty.call(message, "expirationTime"))
                        $root.google.protobuf.Timestamp.encode(message.expirationTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                        $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                        $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.relatedNoteNames != null && message.relatedNoteNames.length)
                        for (var i = 0; i < message.relatedNoteNames.length; ++i)
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.relatedNoteNames[i]);
                    if (message.vulnerability != null && Object.hasOwnProperty.call(message, "vulnerability"))
                        $root.grafeas.v1.VulnerabilityNote.encode(message.vulnerability, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                        $root.grafeas.v1.BuildNote.encode(message.build, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                        $root.grafeas.v1.ImageNote.encode(message.image, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        $root.grafeas.v1.PackageNote.encode(message["package"], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.deployment != null && Object.hasOwnProperty.call(message, "deployment"))
                        $root.grafeas.v1.DeploymentNote.encode(message.deployment, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.discovery != null && Object.hasOwnProperty.call(message, "discovery"))
                        $root.grafeas.v1.DiscoveryNote.encode(message.discovery, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
                        $root.grafeas.v1.AttestationNote.encode(message.attestation, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.upgrade != null && Object.hasOwnProperty.call(message, "upgrade"))
                        $root.grafeas.v1.UpgradeNote.encode(message.upgrade, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                    if (message.compliance != null && Object.hasOwnProperty.call(message, "compliance"))
                        $root.grafeas.v1.ComplianceNote.encode(message.compliance, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    if (message.dsseAttestation != null && Object.hasOwnProperty.call(message, "dsseAttestation"))
                        $root.grafeas.v1.DSSEAttestationNote.encode(message.dsseAttestation, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                    if (message.vulnerabilityAssessment != null && Object.hasOwnProperty.call(message, "vulnerabilityAssessment"))
                        $root.grafeas.v1.VulnerabilityAssessmentNote.encode(message.vulnerabilityAssessment, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Note message, length delimited. Does not implicitly {@link grafeas.v1.Note.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {grafeas.v1.INote} message Note message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Note.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Note message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Note} Note
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Note.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Note();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.shortDescription = reader.string();
                                break;
                            }
                        case 3: {
                                message.longDescription = reader.string();
                                break;
                            }
                        case 4: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 5: {
                                if (!(message.relatedUrl && message.relatedUrl.length))
                                    message.relatedUrl = [];
                                message.relatedUrl.push($root.grafeas.v1.RelatedUrl.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                message.expirationTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.relatedNoteNames && message.relatedNoteNames.length))
                                    message.relatedNoteNames = [];
                                message.relatedNoteNames.push(reader.string());
                                break;
                            }
                        case 10: {
                                message.vulnerability = $root.grafeas.v1.VulnerabilityNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 11: {
                                message.build = $root.grafeas.v1.BuildNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.image = $root.grafeas.v1.ImageNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 13: {
                                message["package"] = $root.grafeas.v1.PackageNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 14: {
                                message.deployment = $root.grafeas.v1.DeploymentNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 15: {
                                message.discovery = $root.grafeas.v1.DiscoveryNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 16: {
                                message.attestation = $root.grafeas.v1.AttestationNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.upgrade = $root.grafeas.v1.UpgradeNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 18: {
                                message.compliance = $root.grafeas.v1.ComplianceNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 19: {
                                message.dsseAttestation = $root.grafeas.v1.DSSEAttestationNote.decode(reader, reader.uint32());
                                break;
                            }
                        case 20: {
                                message.vulnerabilityAssessment = $root.grafeas.v1.VulnerabilityAssessmentNote.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Note message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Note} Note
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Note.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Note message.
                 * @function verify
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Note.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        if (!$util.isString(message.shortDescription))
                            return "shortDescription: string expected";
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        if (!$util.isString(message.longDescription))
                            return "longDescription: string expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                            break;
                        }
                    if (message.relatedUrl != null && message.hasOwnProperty("relatedUrl")) {
                        if (!Array.isArray(message.relatedUrl))
                            return "relatedUrl: array expected";
                        for (var i = 0; i < message.relatedUrl.length; ++i) {
                            var error = $root.grafeas.v1.RelatedUrl.verify(message.relatedUrl[i]);
                            if (error)
                                return "relatedUrl." + error;
                        }
                    }
                    if (message.expirationTime != null && message.hasOwnProperty("expirationTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expirationTime);
                        if (error)
                            return "expirationTime." + error;
                    }
                    if (message.createTime != null && message.hasOwnProperty("createTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                        if (error)
                            return "createTime." + error;
                    }
                    if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                        if (error)
                            return "updateTime." + error;
                    }
                    if (message.relatedNoteNames != null && message.hasOwnProperty("relatedNoteNames")) {
                        if (!Array.isArray(message.relatedNoteNames))
                            return "relatedNoteNames: array expected";
                        for (var i = 0; i < message.relatedNoteNames.length; ++i)
                            if (!$util.isString(message.relatedNoteNames[i]))
                                return "relatedNoteNames: string[] expected";
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.VulnerabilityNote.verify(message.vulnerability);
                            if (error)
                                return "vulnerability." + error;
                        }
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.BuildNote.verify(message.build);
                            if (error)
                                return "build." + error;
                        }
                    }
                    if (message.image != null && message.hasOwnProperty("image")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.ImageNote.verify(message.image);
                            if (error)
                                return "image." + error;
                        }
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.PackageNote.verify(message["package"]);
                            if (error)
                                return "package." + error;
                        }
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.DeploymentNote.verify(message.deployment);
                            if (error)
                                return "deployment." + error;
                        }
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.DiscoveryNote.verify(message.discovery);
                            if (error)
                                return "discovery." + error;
                        }
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.AttestationNote.verify(message.attestation);
                            if (error)
                                return "attestation." + error;
                        }
                    }
                    if (message.upgrade != null && message.hasOwnProperty("upgrade")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.UpgradeNote.verify(message.upgrade);
                            if (error)
                                return "upgrade." + error;
                        }
                    }
                    if (message.compliance != null && message.hasOwnProperty("compliance")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.ComplianceNote.verify(message.compliance);
                            if (error)
                                return "compliance." + error;
                        }
                    }
                    if (message.dsseAttestation != null && message.hasOwnProperty("dsseAttestation")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.DSSEAttestationNote.verify(message.dsseAttestation);
                            if (error)
                                return "dsseAttestation." + error;
                        }
                    }
                    if (message.vulnerabilityAssessment != null && message.hasOwnProperty("vulnerabilityAssessment")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1.VulnerabilityAssessmentNote.verify(message.vulnerabilityAssessment);
                            if (error)
                                return "vulnerabilityAssessment." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Note message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Note} Note
                 */
                Note.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Note)
                        return object;
                    var message = new $root.grafeas.v1.Note();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.shortDescription != null)
                        message.shortDescription = String(object.shortDescription);
                    if (object.longDescription != null)
                        message.longDescription = String(object.longDescription);
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "NOTE_KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "VULNERABILITY":
                    case 1:
                        message.kind = 1;
                        break;
                    case "BUILD":
                    case 2:
                        message.kind = 2;
                        break;
                    case "IMAGE":
                    case 3:
                        message.kind = 3;
                        break;
                    case "PACKAGE":
                    case 4:
                        message.kind = 4;
                        break;
                    case "DEPLOYMENT":
                    case 5:
                        message.kind = 5;
                        break;
                    case "DISCOVERY":
                    case 6:
                        message.kind = 6;
                        break;
                    case "ATTESTATION":
                    case 7:
                        message.kind = 7;
                        break;
                    case "UPGRADE":
                    case 8:
                        message.kind = 8;
                        break;
                    case "COMPLIANCE":
                    case 9:
                        message.kind = 9;
                        break;
                    case "DSSE_ATTESTATION":
                    case 10:
                        message.kind = 10;
                        break;
                    case "VULNERABILITY_ASSESSMENT":
                    case 11:
                        message.kind = 11;
                        break;
                    }
                    if (object.relatedUrl) {
                        if (!Array.isArray(object.relatedUrl))
                            throw TypeError(".grafeas.v1.Note.relatedUrl: array expected");
                        message.relatedUrl = [];
                        for (var i = 0; i < object.relatedUrl.length; ++i) {
                            if (typeof object.relatedUrl[i] !== "object")
                                throw TypeError(".grafeas.v1.Note.relatedUrl: object expected");
                            message.relatedUrl[i] = $root.grafeas.v1.RelatedUrl.fromObject(object.relatedUrl[i]);
                        }
                    }
                    if (object.expirationTime != null) {
                        if (typeof object.expirationTime !== "object")
                            throw TypeError(".grafeas.v1.Note.expirationTime: object expected");
                        message.expirationTime = $root.google.protobuf.Timestamp.fromObject(object.expirationTime);
                    }
                    if (object.createTime != null) {
                        if (typeof object.createTime !== "object")
                            throw TypeError(".grafeas.v1.Note.createTime: object expected");
                        message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                    }
                    if (object.updateTime != null) {
                        if (typeof object.updateTime !== "object")
                            throw TypeError(".grafeas.v1.Note.updateTime: object expected");
                        message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                    }
                    if (object.relatedNoteNames) {
                        if (!Array.isArray(object.relatedNoteNames))
                            throw TypeError(".grafeas.v1.Note.relatedNoteNames: array expected");
                        message.relatedNoteNames = [];
                        for (var i = 0; i < object.relatedNoteNames.length; ++i)
                            message.relatedNoteNames[i] = String(object.relatedNoteNames[i]);
                    }
                    if (object.vulnerability != null) {
                        if (typeof object.vulnerability !== "object")
                            throw TypeError(".grafeas.v1.Note.vulnerability: object expected");
                        message.vulnerability = $root.grafeas.v1.VulnerabilityNote.fromObject(object.vulnerability);
                    }
                    if (object.build != null) {
                        if (typeof object.build !== "object")
                            throw TypeError(".grafeas.v1.Note.build: object expected");
                        message.build = $root.grafeas.v1.BuildNote.fromObject(object.build);
                    }
                    if (object.image != null) {
                        if (typeof object.image !== "object")
                            throw TypeError(".grafeas.v1.Note.image: object expected");
                        message.image = $root.grafeas.v1.ImageNote.fromObject(object.image);
                    }
                    if (object["package"] != null) {
                        if (typeof object["package"] !== "object")
                            throw TypeError(".grafeas.v1.Note.package: object expected");
                        message["package"] = $root.grafeas.v1.PackageNote.fromObject(object["package"]);
                    }
                    if (object.deployment != null) {
                        if (typeof object.deployment !== "object")
                            throw TypeError(".grafeas.v1.Note.deployment: object expected");
                        message.deployment = $root.grafeas.v1.DeploymentNote.fromObject(object.deployment);
                    }
                    if (object.discovery != null) {
                        if (typeof object.discovery !== "object")
                            throw TypeError(".grafeas.v1.Note.discovery: object expected");
                        message.discovery = $root.grafeas.v1.DiscoveryNote.fromObject(object.discovery);
                    }
                    if (object.attestation != null) {
                        if (typeof object.attestation !== "object")
                            throw TypeError(".grafeas.v1.Note.attestation: object expected");
                        message.attestation = $root.grafeas.v1.AttestationNote.fromObject(object.attestation);
                    }
                    if (object.upgrade != null) {
                        if (typeof object.upgrade !== "object")
                            throw TypeError(".grafeas.v1.Note.upgrade: object expected");
                        message.upgrade = $root.grafeas.v1.UpgradeNote.fromObject(object.upgrade);
                    }
                    if (object.compliance != null) {
                        if (typeof object.compliance !== "object")
                            throw TypeError(".grafeas.v1.Note.compliance: object expected");
                        message.compliance = $root.grafeas.v1.ComplianceNote.fromObject(object.compliance);
                    }
                    if (object.dsseAttestation != null) {
                        if (typeof object.dsseAttestation !== "object")
                            throw TypeError(".grafeas.v1.Note.dsseAttestation: object expected");
                        message.dsseAttestation = $root.grafeas.v1.DSSEAttestationNote.fromObject(object.dsseAttestation);
                    }
                    if (object.vulnerabilityAssessment != null) {
                        if (typeof object.vulnerabilityAssessment !== "object")
                            throw TypeError(".grafeas.v1.Note.vulnerabilityAssessment: object expected");
                        message.vulnerabilityAssessment = $root.grafeas.v1.VulnerabilityAssessmentNote.fromObject(object.vulnerabilityAssessment);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Note message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {grafeas.v1.Note} message Note
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Note.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.relatedUrl = [];
                        object.relatedNoteNames = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.shortDescription = "";
                        object.longDescription = "";
                        object.kind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                        object.expirationTime = null;
                        object.createTime = null;
                        object.updateTime = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        object.shortDescription = message.shortDescription;
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        object.longDescription = message.longDescription;
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1.NoteKind[message.kind] === undefined ? message.kind : $root.grafeas.v1.NoteKind[message.kind] : message.kind;
                    if (message.relatedUrl && message.relatedUrl.length) {
                        object.relatedUrl = [];
                        for (var j = 0; j < message.relatedUrl.length; ++j)
                            object.relatedUrl[j] = $root.grafeas.v1.RelatedUrl.toObject(message.relatedUrl[j], options);
                    }
                    if (message.expirationTime != null && message.hasOwnProperty("expirationTime"))
                        object.expirationTime = $root.google.protobuf.Timestamp.toObject(message.expirationTime, options);
                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                        object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                    if (message.relatedNoteNames && message.relatedNoteNames.length) {
                        object.relatedNoteNames = [];
                        for (var j = 0; j < message.relatedNoteNames.length; ++j)
                            object.relatedNoteNames[j] = message.relatedNoteNames[j];
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        object.vulnerability = $root.grafeas.v1.VulnerabilityNote.toObject(message.vulnerability, options);
                        if (options.oneofs)
                            object.type = "vulnerability";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        object.build = $root.grafeas.v1.BuildNote.toObject(message.build, options);
                        if (options.oneofs)
                            object.type = "build";
                    }
                    if (message.image != null && message.hasOwnProperty("image")) {
                        object.image = $root.grafeas.v1.ImageNote.toObject(message.image, options);
                        if (options.oneofs)
                            object.type = "image";
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        object["package"] = $root.grafeas.v1.PackageNote.toObject(message["package"], options);
                        if (options.oneofs)
                            object.type = "package";
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        object.deployment = $root.grafeas.v1.DeploymentNote.toObject(message.deployment, options);
                        if (options.oneofs)
                            object.type = "deployment";
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        object.discovery = $root.grafeas.v1.DiscoveryNote.toObject(message.discovery, options);
                        if (options.oneofs)
                            object.type = "discovery";
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        object.attestation = $root.grafeas.v1.AttestationNote.toObject(message.attestation, options);
                        if (options.oneofs)
                            object.type = "attestation";
                    }
                    if (message.upgrade != null && message.hasOwnProperty("upgrade")) {
                        object.upgrade = $root.grafeas.v1.UpgradeNote.toObject(message.upgrade, options);
                        if (options.oneofs)
                            object.type = "upgrade";
                    }
                    if (message.compliance != null && message.hasOwnProperty("compliance")) {
                        object.compliance = $root.grafeas.v1.ComplianceNote.toObject(message.compliance, options);
                        if (options.oneofs)
                            object.type = "compliance";
                    }
                    if (message.dsseAttestation != null && message.hasOwnProperty("dsseAttestation")) {
                        object.dsseAttestation = $root.grafeas.v1.DSSEAttestationNote.toObject(message.dsseAttestation, options);
                        if (options.oneofs)
                            object.type = "dsseAttestation";
                    }
                    if (message.vulnerabilityAssessment != null && message.hasOwnProperty("vulnerabilityAssessment")) {
                        object.vulnerabilityAssessment = $root.grafeas.v1.VulnerabilityAssessmentNote.toObject(message.vulnerabilityAssessment, options);
                        if (options.oneofs)
                            object.type = "vulnerabilityAssessment";
                    }
                    return object;
                };
    
                /**
                 * Converts this Note to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Note
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Note.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Note
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Note
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Note.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Note";
                };
    
                return Note;
            })();
    
            v1.GetOccurrenceRequest = (function() {
    
                /**
                 * Properties of a GetOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @interface IGetOccurrenceRequest
                 * @property {string|null} [name] GetOccurrenceRequest name
                 */
    
                /**
                 * Constructs a new GetOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a GetOccurrenceRequest.
                 * @implements IGetOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1.IGetOccurrenceRequest=} [properties] Properties to set
                 */
                function GetOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @instance
                 */
                GetOccurrenceRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.GetOccurrenceRequest} GetOccurrenceRequest instance
                 */
                GetOccurrenceRequest.create = function create(properties) {
                    return new GetOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOccurrenceRequest message. Does not implicitly {@link grafeas.v1.GetOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceRequest} message GetOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1.GetOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceRequest} message GetOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.GetOccurrenceRequest} GetOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.GetOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.GetOccurrenceRequest} GetOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.GetOccurrenceRequest} GetOccurrenceRequest
                 */
                GetOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.GetOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1.GetOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.GetOccurrenceRequest} message GetOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.GetOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.GetOccurrenceRequest";
                };
    
                return GetOccurrenceRequest;
            })();
    
            v1.ListOccurrencesRequest = (function() {
    
                /**
                 * Properties of a ListOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @interface IListOccurrencesRequest
                 * @property {string|null} [parent] ListOccurrencesRequest parent
                 * @property {string|null} [filter] ListOccurrencesRequest filter
                 * @property {number|null} [pageSize] ListOccurrencesRequest pageSize
                 * @property {string|null} [pageToken] ListOccurrencesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListOccurrencesRequest.
                 * @implements IListOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1.IListOccurrencesRequest=} [properties] Properties to set
                 */
                function ListOccurrencesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOccurrencesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.parent = "";
    
                /**
                 * ListOccurrencesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.filter = "";
    
                /**
                 * ListOccurrencesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.pageSize = 0;
    
                /**
                 * ListOccurrencesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.ListOccurrencesRequest} ListOccurrencesRequest instance
                 */
                ListOccurrencesRequest.create = function create(properties) {
                    return new ListOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOccurrencesRequest message. Does not implicitly {@link grafeas.v1.ListOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListOccurrencesRequest} message ListOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1.ListOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListOccurrencesRequest} message ListOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListOccurrencesRequest} ListOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListOccurrencesRequest} ListOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListOccurrencesRequest} ListOccurrencesRequest
                 */
                ListOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1.ListOccurrencesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.ListOccurrencesRequest} message ListOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListOccurrencesRequest";
                };
    
                return ListOccurrencesRequest;
            })();
    
            v1.ListOccurrencesResponse = (function() {
    
                /**
                 * Properties of a ListOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @interface IListOccurrencesResponse
                 * @property {Array.<grafeas.v1.IOccurrence>|null} [occurrences] ListOccurrencesResponse occurrences
                 * @property {string|null} [nextPageToken] ListOccurrencesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListOccurrencesResponse.
                 * @implements IListOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1.IListOccurrencesResponse=} [properties] Properties to set
                 */
                function ListOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1.IOccurrence>} occurrences
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @instance
                 */
                ListOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * ListOccurrencesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @instance
                 */
                ListOccurrencesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1.ListOccurrencesResponse} ListOccurrencesResponse instance
                 */
                ListOccurrencesResponse.create = function create(properties) {
                    return new ListOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOccurrencesResponse message. Does not implicitly {@link grafeas.v1.ListOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListOccurrencesResponse} message ListOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1.ListOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListOccurrencesResponse} message ListOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListOccurrencesResponse} ListOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListOccurrencesResponse} ListOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListOccurrencesResponse} ListOccurrencesResponse
                 */
                ListOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1.ListOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1.ListOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1.ListOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.ListOccurrencesResponse} message ListOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListOccurrencesResponse";
                };
    
                return ListOccurrencesResponse;
            })();
    
            v1.DeleteOccurrenceRequest = (function() {
    
                /**
                 * Properties of a DeleteOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @interface IDeleteOccurrenceRequest
                 * @property {string|null} [name] DeleteOccurrenceRequest name
                 */
    
                /**
                 * Constructs a new DeleteOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DeleteOccurrenceRequest.
                 * @implements IDeleteOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1.IDeleteOccurrenceRequest=} [properties] Properties to set
                 */
                function DeleteOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @instance
                 */
                DeleteOccurrenceRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IDeleteOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.DeleteOccurrenceRequest} DeleteOccurrenceRequest instance
                 */
                DeleteOccurrenceRequest.create = function create(properties) {
                    return new DeleteOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOccurrenceRequest message. Does not implicitly {@link grafeas.v1.DeleteOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IDeleteOccurrenceRequest} message DeleteOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1.DeleteOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IDeleteOccurrenceRequest} message DeleteOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DeleteOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 */
                DeleteOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DeleteOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1.DeleteOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.DeleteOccurrenceRequest} message DeleteOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DeleteOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DeleteOccurrenceRequest";
                };
    
                return DeleteOccurrenceRequest;
            })();
    
            v1.CreateOccurrenceRequest = (function() {
    
                /**
                 * Properties of a CreateOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @interface ICreateOccurrenceRequest
                 * @property {string|null} [parent] CreateOccurrenceRequest parent
                 * @property {grafeas.v1.IOccurrence|null} [occurrence] CreateOccurrenceRequest occurrence
                 */
    
                /**
                 * Constructs a new CreateOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a CreateOccurrenceRequest.
                 * @implements ICreateOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1.ICreateOccurrenceRequest=} [properties] Properties to set
                 */
                function CreateOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CreateOccurrenceRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @instance
                 */
                CreateOccurrenceRequest.prototype.parent = "";
    
                /**
                 * CreateOccurrenceRequest occurrence.
                 * @member {grafeas.v1.IOccurrence|null|undefined} occurrence
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @instance
                 */
                CreateOccurrenceRequest.prototype.occurrence = null;
    
                /**
                 * Creates a new CreateOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.ICreateOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.CreateOccurrenceRequest} CreateOccurrenceRequest instance
                 */
                CreateOccurrenceRequest.create = function create(properties) {
                    return new CreateOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified CreateOccurrenceRequest message. Does not implicitly {@link grafeas.v1.CreateOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.ICreateOccurrenceRequest} message CreateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.occurrence != null && Object.hasOwnProperty.call(message, "occurrence"))
                        $root.grafeas.v1.Occurrence.encode(message.occurrence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CreateOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1.CreateOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.ICreateOccurrenceRequest} message CreateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CreateOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.CreateOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.occurrence = $root.grafeas.v1.Occurrence.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CreateOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CreateOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.occurrence != null && message.hasOwnProperty("occurrence")) {
                        var error = $root.grafeas.v1.Occurrence.verify(message.occurrence);
                        if (error)
                            return "occurrence." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CreateOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 */
                CreateOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.CreateOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1.CreateOccurrenceRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.occurrence != null) {
                        if (typeof object.occurrence !== "object")
                            throw TypeError(".grafeas.v1.CreateOccurrenceRequest.occurrence: object expected");
                        message.occurrence = $root.grafeas.v1.Occurrence.fromObject(object.occurrence);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CreateOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.CreateOccurrenceRequest} message CreateOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.occurrence = null;
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.occurrence != null && message.hasOwnProperty("occurrence"))
                        object.occurrence = $root.grafeas.v1.Occurrence.toObject(message.occurrence, options);
                    return object;
                };
    
                /**
                 * Converts this CreateOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CreateOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.CreateOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CreateOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.CreateOccurrenceRequest";
                };
    
                return CreateOccurrenceRequest;
            })();
    
            v1.UpdateOccurrenceRequest = (function() {
    
                /**
                 * Properties of an UpdateOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @interface IUpdateOccurrenceRequest
                 * @property {string|null} [name] UpdateOccurrenceRequest name
                 * @property {grafeas.v1.IOccurrence|null} [occurrence] UpdateOccurrenceRequest occurrence
                 * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateOccurrenceRequest updateMask
                 */
    
                /**
                 * Constructs a new UpdateOccurrenceRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents an UpdateOccurrenceRequest.
                 * @implements IUpdateOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1.IUpdateOccurrenceRequest=} [properties] Properties to set
                 */
                function UpdateOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpdateOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.name = "";
    
                /**
                 * UpdateOccurrenceRequest occurrence.
                 * @member {grafeas.v1.IOccurrence|null|undefined} occurrence
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.occurrence = null;
    
                /**
                 * UpdateOccurrenceRequest updateMask.
                 * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.updateMask = null;
    
                /**
                 * Creates a new UpdateOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IUpdateOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.UpdateOccurrenceRequest} UpdateOccurrenceRequest instance
                 */
                UpdateOccurrenceRequest.create = function create(properties) {
                    return new UpdateOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified UpdateOccurrenceRequest message. Does not implicitly {@link grafeas.v1.UpdateOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IUpdateOccurrenceRequest} message UpdateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.occurrence != null && Object.hasOwnProperty.call(message, "occurrence"))
                        $root.grafeas.v1.Occurrence.encode(message.occurrence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                        $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpdateOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1.UpdateOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.IUpdateOccurrenceRequest} message UpdateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpdateOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.UpdateOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.occurrence = $root.grafeas.v1.Occurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpdateOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpdateOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.occurrence != null && message.hasOwnProperty("occurrence")) {
                        var error = $root.grafeas.v1.Occurrence.verify(message.occurrence);
                        if (error)
                            return "occurrence." + error;
                    }
                    if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                        var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                        if (error)
                            return "updateMask." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpdateOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 */
                UpdateOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.UpdateOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1.UpdateOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.occurrence != null) {
                        if (typeof object.occurrence !== "object")
                            throw TypeError(".grafeas.v1.UpdateOccurrenceRequest.occurrence: object expected");
                        message.occurrence = $root.grafeas.v1.Occurrence.fromObject(object.occurrence);
                    }
                    if (object.updateMask != null) {
                        if (typeof object.updateMask !== "object")
                            throw TypeError(".grafeas.v1.UpdateOccurrenceRequest.updateMask: object expected");
                        message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpdateOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1.UpdateOccurrenceRequest} message UpdateOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.occurrence = null;
                        object.updateMask = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.occurrence != null && message.hasOwnProperty("occurrence"))
                        object.occurrence = $root.grafeas.v1.Occurrence.toObject(message.occurrence, options);
                    if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                        object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                    return object;
                };
    
                /**
                 * Converts this UpdateOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpdateOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.UpdateOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpdateOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.UpdateOccurrenceRequest";
                };
    
                return UpdateOccurrenceRequest;
            })();
    
            v1.GetNoteRequest = (function() {
    
                /**
                 * Properties of a GetNoteRequest.
                 * @memberof grafeas.v1
                 * @interface IGetNoteRequest
                 * @property {string|null} [name] GetNoteRequest name
                 */
    
                /**
                 * Constructs a new GetNoteRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a GetNoteRequest.
                 * @implements IGetNoteRequest
                 * @constructor
                 * @param {grafeas.v1.IGetNoteRequest=} [properties] Properties to set
                 */
                function GetNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.GetNoteRequest
                 * @instance
                 */
                GetNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new GetNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.GetNoteRequest} GetNoteRequest instance
                 */
                GetNoteRequest.create = function create(properties) {
                    return new GetNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified GetNoteRequest message. Does not implicitly {@link grafeas.v1.GetNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetNoteRequest} message GetNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1.GetNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetNoteRequest} message GetNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.GetNoteRequest} GetNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.GetNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.GetNoteRequest} GetNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.GetNoteRequest} GetNoteRequest
                 */
                GetNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.GetNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1.GetNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1.GetNoteRequest} message GetNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.GetNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.GetNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.GetNoteRequest";
                };
    
                return GetNoteRequest;
            })();
    
            v1.GetOccurrenceNoteRequest = (function() {
    
                /**
                 * Properties of a GetOccurrenceNoteRequest.
                 * @memberof grafeas.v1
                 * @interface IGetOccurrenceNoteRequest
                 * @property {string|null} [name] GetOccurrenceNoteRequest name
                 */
    
                /**
                 * Constructs a new GetOccurrenceNoteRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a GetOccurrenceNoteRequest.
                 * @implements IGetOccurrenceNoteRequest
                 * @constructor
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest=} [properties] Properties to set
                 */
                function GetOccurrenceNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOccurrenceNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @instance
                 */
                GetOccurrenceNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOccurrenceNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest instance
                 */
                GetOccurrenceNoteRequest.create = function create(properties) {
                    return new GetOccurrenceNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOccurrenceNoteRequest message. Does not implicitly {@link grafeas.v1.GetOccurrenceNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest} message GetOccurrenceNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOccurrenceNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1.GetOccurrenceNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1.IGetOccurrenceNoteRequest} message GetOccurrenceNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOccurrenceNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.GetOccurrenceNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOccurrenceNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOccurrenceNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOccurrenceNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOccurrenceNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 */
                GetOccurrenceNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.GetOccurrenceNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1.GetOccurrenceNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOccurrenceNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1.GetOccurrenceNoteRequest} message GetOccurrenceNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOccurrenceNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOccurrenceNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOccurrenceNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOccurrenceNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.GetOccurrenceNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOccurrenceNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.GetOccurrenceNoteRequest";
                };
    
                return GetOccurrenceNoteRequest;
            })();
    
            v1.ListNotesRequest = (function() {
    
                /**
                 * Properties of a ListNotesRequest.
                 * @memberof grafeas.v1
                 * @interface IListNotesRequest
                 * @property {string|null} [parent] ListNotesRequest parent
                 * @property {string|null} [filter] ListNotesRequest filter
                 * @property {number|null} [pageSize] ListNotesRequest pageSize
                 * @property {string|null} [pageToken] ListNotesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListNotesRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListNotesRequest.
                 * @implements IListNotesRequest
                 * @constructor
                 * @param {grafeas.v1.IListNotesRequest=} [properties] Properties to set
                 */
                function ListNotesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNotesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.parent = "";
    
                /**
                 * ListNotesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.filter = "";
    
                /**
                 * ListNotesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.pageSize = 0;
    
                /**
                 * ListNotesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListNotesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1.IListNotesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.ListNotesRequest} ListNotesRequest instance
                 */
                ListNotesRequest.create = function create(properties) {
                    return new ListNotesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListNotesRequest message. Does not implicitly {@link grafeas.v1.ListNotesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1.IListNotesRequest} message ListNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNotesRequest message, length delimited. Does not implicitly {@link grafeas.v1.ListNotesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1.IListNotesRequest} message ListNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNotesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListNotesRequest} ListNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListNotesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNotesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListNotesRequest} ListNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNotesRequest message.
                 * @function verify
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNotesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNotesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListNotesRequest} ListNotesRequest
                 */
                ListNotesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListNotesRequest)
                        return object;
                    var message = new $root.grafeas.v1.ListNotesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNotesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1.ListNotesRequest} message ListNotesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNotesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNotesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListNotesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNotesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNotesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListNotesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNotesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListNotesRequest";
                };
    
                return ListNotesRequest;
            })();
    
            v1.ListNotesResponse = (function() {
    
                /**
                 * Properties of a ListNotesResponse.
                 * @memberof grafeas.v1
                 * @interface IListNotesResponse
                 * @property {Array.<grafeas.v1.INote>|null} [notes] ListNotesResponse notes
                 * @property {string|null} [nextPageToken] ListNotesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListNotesResponse.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListNotesResponse.
                 * @implements IListNotesResponse
                 * @constructor
                 * @param {grafeas.v1.IListNotesResponse=} [properties] Properties to set
                 */
                function ListNotesResponse(properties) {
                    this.notes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNotesResponse notes.
                 * @member {Array.<grafeas.v1.INote>} notes
                 * @memberof grafeas.v1.ListNotesResponse
                 * @instance
                 */
                ListNotesResponse.prototype.notes = $util.emptyArray;
    
                /**
                 * ListNotesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1.ListNotesResponse
                 * @instance
                 */
                ListNotesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListNotesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1.IListNotesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1.ListNotesResponse} ListNotesResponse instance
                 */
                ListNotesResponse.create = function create(properties) {
                    return new ListNotesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListNotesResponse message. Does not implicitly {@link grafeas.v1.ListNotesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1.IListNotesResponse} message ListNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.notes != null && message.notes.length)
                        for (var i = 0; i < message.notes.length; ++i)
                            $root.grafeas.v1.Note.encode(message.notes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNotesResponse message, length delimited. Does not implicitly {@link grafeas.v1.ListNotesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1.IListNotesResponse} message ListNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNotesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListNotesResponse} ListNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListNotesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.notes && message.notes.length))
                                    message.notes = [];
                                message.notes.push($root.grafeas.v1.Note.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNotesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListNotesResponse} ListNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNotesResponse message.
                 * @function verify
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNotesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!Array.isArray(message.notes))
                            return "notes: array expected";
                        for (var i = 0; i < message.notes.length; ++i) {
                            var error = $root.grafeas.v1.Note.verify(message.notes[i]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNotesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListNotesResponse} ListNotesResponse
                 */
                ListNotesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListNotesResponse)
                        return object;
                    var message = new $root.grafeas.v1.ListNotesResponse();
                    if (object.notes) {
                        if (!Array.isArray(object.notes))
                            throw TypeError(".grafeas.v1.ListNotesResponse.notes: array expected");
                        message.notes = [];
                        for (var i = 0; i < object.notes.length; ++i) {
                            if (typeof object.notes[i] !== "object")
                                throw TypeError(".grafeas.v1.ListNotesResponse.notes: object expected");
                            message.notes[i] = $root.grafeas.v1.Note.fromObject(object.notes[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNotesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1.ListNotesResponse} message ListNotesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNotesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.notes = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.notes && message.notes.length) {
                        object.notes = [];
                        for (var j = 0; j < message.notes.length; ++j)
                            object.notes[j] = $root.grafeas.v1.Note.toObject(message.notes[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNotesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListNotesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNotesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNotesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListNotesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNotesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListNotesResponse";
                };
    
                return ListNotesResponse;
            })();
    
            v1.DeleteNoteRequest = (function() {
    
                /**
                 * Properties of a DeleteNoteRequest.
                 * @memberof grafeas.v1
                 * @interface IDeleteNoteRequest
                 * @property {string|null} [name] DeleteNoteRequest name
                 */
    
                /**
                 * Constructs a new DeleteNoteRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a DeleteNoteRequest.
                 * @implements IDeleteNoteRequest
                 * @constructor
                 * @param {grafeas.v1.IDeleteNoteRequest=} [properties] Properties to set
                 */
                function DeleteNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @instance
                 */
                DeleteNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1.IDeleteNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.DeleteNoteRequest} DeleteNoteRequest instance
                 */
                DeleteNoteRequest.create = function create(properties) {
                    return new DeleteNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteNoteRequest message. Does not implicitly {@link grafeas.v1.DeleteNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1.IDeleteNoteRequest} message DeleteNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1.DeleteNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1.IDeleteNoteRequest} message DeleteNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.DeleteNoteRequest} DeleteNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.DeleteNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.DeleteNoteRequest} DeleteNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.DeleteNoteRequest} DeleteNoteRequest
                 */
                DeleteNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.DeleteNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1.DeleteNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1.DeleteNoteRequest} message DeleteNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.DeleteNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.DeleteNoteRequest";
                };
    
                return DeleteNoteRequest;
            })();
    
            v1.CreateNoteRequest = (function() {
    
                /**
                 * Properties of a CreateNoteRequest.
                 * @memberof grafeas.v1
                 * @interface ICreateNoteRequest
                 * @property {string|null} [parent] CreateNoteRequest parent
                 * @property {string|null} [noteId] CreateNoteRequest noteId
                 * @property {grafeas.v1.INote|null} [note] CreateNoteRequest note
                 */
    
                /**
                 * Constructs a new CreateNoteRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a CreateNoteRequest.
                 * @implements ICreateNoteRequest
                 * @constructor
                 * @param {grafeas.v1.ICreateNoteRequest=} [properties] Properties to set
                 */
                function CreateNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CreateNoteRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.parent = "";
    
                /**
                 * CreateNoteRequest noteId.
                 * @member {string} noteId
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.noteId = "";
    
                /**
                 * CreateNoteRequest note.
                 * @member {grafeas.v1.INote|null|undefined} note
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.note = null;
    
                /**
                 * Creates a new CreateNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1.ICreateNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.CreateNoteRequest} CreateNoteRequest instance
                 */
                CreateNoteRequest.create = function create(properties) {
                    return new CreateNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified CreateNoteRequest message. Does not implicitly {@link grafeas.v1.CreateNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1.ICreateNoteRequest} message CreateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.noteId != null && Object.hasOwnProperty.call(message, "noteId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.noteId);
                    if (message.note != null && Object.hasOwnProperty.call(message, "note"))
                        $root.grafeas.v1.Note.encode(message.note, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CreateNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1.CreateNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1.ICreateNoteRequest} message CreateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CreateNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.CreateNoteRequest} CreateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.CreateNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.noteId = reader.string();
                                break;
                            }
                        case 3: {
                                message.note = $root.grafeas.v1.Note.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CreateNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.CreateNoteRequest} CreateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CreateNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.noteId != null && message.hasOwnProperty("noteId"))
                        if (!$util.isString(message.noteId))
                            return "noteId: string expected";
                    if (message.note != null && message.hasOwnProperty("note")) {
                        var error = $root.grafeas.v1.Note.verify(message.note);
                        if (error)
                            return "note." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CreateNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.CreateNoteRequest} CreateNoteRequest
                 */
                CreateNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.CreateNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1.CreateNoteRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.noteId != null)
                        message.noteId = String(object.noteId);
                    if (object.note != null) {
                        if (typeof object.note !== "object")
                            throw TypeError(".grafeas.v1.CreateNoteRequest.note: object expected");
                        message.note = $root.grafeas.v1.Note.fromObject(object.note);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CreateNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1.CreateNoteRequest} message CreateNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.noteId = "";
                        object.note = null;
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.noteId != null && message.hasOwnProperty("noteId"))
                        object.noteId = message.noteId;
                    if (message.note != null && message.hasOwnProperty("note"))
                        object.note = $root.grafeas.v1.Note.toObject(message.note, options);
                    return object;
                };
    
                /**
                 * Converts this CreateNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CreateNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.CreateNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CreateNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.CreateNoteRequest";
                };
    
                return CreateNoteRequest;
            })();
    
            v1.UpdateNoteRequest = (function() {
    
                /**
                 * Properties of an UpdateNoteRequest.
                 * @memberof grafeas.v1
                 * @interface IUpdateNoteRequest
                 * @property {string|null} [name] UpdateNoteRequest name
                 * @property {grafeas.v1.INote|null} [note] UpdateNoteRequest note
                 * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateNoteRequest updateMask
                 */
    
                /**
                 * Constructs a new UpdateNoteRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents an UpdateNoteRequest.
                 * @implements IUpdateNoteRequest
                 * @constructor
                 * @param {grafeas.v1.IUpdateNoteRequest=} [properties] Properties to set
                 */
                function UpdateNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpdateNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.name = "";
    
                /**
                 * UpdateNoteRequest note.
                 * @member {grafeas.v1.INote|null|undefined} note
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.note = null;
    
                /**
                 * UpdateNoteRequest updateMask.
                 * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.updateMask = null;
    
                /**
                 * Creates a new UpdateNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1.IUpdateNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.UpdateNoteRequest} UpdateNoteRequest instance
                 */
                UpdateNoteRequest.create = function create(properties) {
                    return new UpdateNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified UpdateNoteRequest message. Does not implicitly {@link grafeas.v1.UpdateNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1.IUpdateNoteRequest} message UpdateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.note != null && Object.hasOwnProperty.call(message, "note"))
                        $root.grafeas.v1.Note.encode(message.note, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                        $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpdateNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1.UpdateNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1.IUpdateNoteRequest} message UpdateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpdateNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.UpdateNoteRequest} UpdateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.UpdateNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.note = $root.grafeas.v1.Note.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpdateNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.UpdateNoteRequest} UpdateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpdateNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.note != null && message.hasOwnProperty("note")) {
                        var error = $root.grafeas.v1.Note.verify(message.note);
                        if (error)
                            return "note." + error;
                    }
                    if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                        var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                        if (error)
                            return "updateMask." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpdateNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.UpdateNoteRequest} UpdateNoteRequest
                 */
                UpdateNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.UpdateNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1.UpdateNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.note != null) {
                        if (typeof object.note !== "object")
                            throw TypeError(".grafeas.v1.UpdateNoteRequest.note: object expected");
                        message.note = $root.grafeas.v1.Note.fromObject(object.note);
                    }
                    if (object.updateMask != null) {
                        if (typeof object.updateMask !== "object")
                            throw TypeError(".grafeas.v1.UpdateNoteRequest.updateMask: object expected");
                        message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpdateNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1.UpdateNoteRequest} message UpdateNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.note = null;
                        object.updateMask = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.note != null && message.hasOwnProperty("note"))
                        object.note = $root.grafeas.v1.Note.toObject(message.note, options);
                    if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                        object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                    return object;
                };
    
                /**
                 * Converts this UpdateNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpdateNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.UpdateNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpdateNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.UpdateNoteRequest";
                };
    
                return UpdateNoteRequest;
            })();
    
            v1.ListNoteOccurrencesRequest = (function() {
    
                /**
                 * Properties of a ListNoteOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @interface IListNoteOccurrencesRequest
                 * @property {string|null} [name] ListNoteOccurrencesRequest name
                 * @property {string|null} [filter] ListNoteOccurrencesRequest filter
                 * @property {number|null} [pageSize] ListNoteOccurrencesRequest pageSize
                 * @property {string|null} [pageToken] ListNoteOccurrencesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListNoteOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListNoteOccurrencesRequest.
                 * @implements IListNoteOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1.IListNoteOccurrencesRequest=} [properties] Properties to set
                 */
                function ListNoteOccurrencesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNoteOccurrencesRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.name = "";
    
                /**
                 * ListNoteOccurrencesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.filter = "";
    
                /**
                 * ListNoteOccurrencesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.pageSize = 0;
    
                /**
                 * ListNoteOccurrencesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListNoteOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest instance
                 */
                ListNoteOccurrencesRequest.create = function create(properties) {
                    return new ListNoteOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesRequest message. Does not implicitly {@link grafeas.v1.ListNoteOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesRequest} message ListNoteOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1.ListNoteOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesRequest} message ListNoteOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNoteOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListNoteOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNoteOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNoteOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNoteOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNoteOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 */
                ListNoteOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListNoteOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1.ListNoteOccurrencesRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNoteOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.ListNoteOccurrencesRequest} message ListNoteOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNoteOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNoteOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNoteOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNoteOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListNoteOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNoteOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListNoteOccurrencesRequest";
                };
    
                return ListNoteOccurrencesRequest;
            })();
    
            v1.ListNoteOccurrencesResponse = (function() {
    
                /**
                 * Properties of a ListNoteOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @interface IListNoteOccurrencesResponse
                 * @property {Array.<grafeas.v1.IOccurrence>|null} [occurrences] ListNoteOccurrencesResponse occurrences
                 * @property {string|null} [nextPageToken] ListNoteOccurrencesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListNoteOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @classdesc Represents a ListNoteOccurrencesResponse.
                 * @implements IListNoteOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1.IListNoteOccurrencesResponse=} [properties] Properties to set
                 */
                function ListNoteOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNoteOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1.IOccurrence>} occurrences
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @instance
                 */
                ListNoteOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * ListNoteOccurrencesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @instance
                 */
                ListNoteOccurrencesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListNoteOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse instance
                 */
                ListNoteOccurrencesResponse.create = function create(properties) {
                    return new ListNoteOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesResponse message. Does not implicitly {@link grafeas.v1.ListNoteOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesResponse} message ListNoteOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1.ListNoteOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IListNoteOccurrencesResponse} message ListNoteOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNoteOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ListNoteOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNoteOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNoteOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNoteOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNoteOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 */
                ListNoteOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ListNoteOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1.ListNoteOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1.ListNoteOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1.ListNoteOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNoteOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.ListNoteOccurrencesResponse} message ListNoteOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNoteOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNoteOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNoteOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNoteOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ListNoteOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNoteOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ListNoteOccurrencesResponse";
                };
    
                return ListNoteOccurrencesResponse;
            })();
    
            v1.BatchCreateNotesRequest = (function() {
    
                /**
                 * Properties of a BatchCreateNotesRequest.
                 * @memberof grafeas.v1
                 * @interface IBatchCreateNotesRequest
                 * @property {string|null} [parent] BatchCreateNotesRequest parent
                 * @property {Object.<string,grafeas.v1.INote>|null} [notes] BatchCreateNotesRequest notes
                 */
    
                /**
                 * Constructs a new BatchCreateNotesRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BatchCreateNotesRequest.
                 * @implements IBatchCreateNotesRequest
                 * @constructor
                 * @param {grafeas.v1.IBatchCreateNotesRequest=} [properties] Properties to set
                 */
                function BatchCreateNotesRequest(properties) {
                    this.notes = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateNotesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @instance
                 */
                BatchCreateNotesRequest.prototype.parent = "";
    
                /**
                 * BatchCreateNotesRequest notes.
                 * @member {Object.<string,grafeas.v1.INote>} notes
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @instance
                 */
                BatchCreateNotesRequest.prototype.notes = $util.emptyObject;
    
                /**
                 * Creates a new BatchCreateNotesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.BatchCreateNotesRequest} BatchCreateNotesRequest instance
                 */
                BatchCreateNotesRequest.create = function create(properties) {
                    return new BatchCreateNotesRequest(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateNotesRequest message. Does not implicitly {@link grafeas.v1.BatchCreateNotesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesRequest} message BatchCreateNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.notes != null && Object.hasOwnProperty.call(message, "notes"))
                        for (var keys = Object.keys(message.notes), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.grafeas.v1.Note.encode(message.notes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateNotesRequest message, length delimited. Does not implicitly {@link grafeas.v1.BatchCreateNotesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesRequest} message BatchCreateNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateNotesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BatchCreateNotesRequest(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.notes === $util.emptyObject)
                                    message.notes = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.grafeas.v1.Note.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.notes[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateNotesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateNotesRequest message.
                 * @function verify
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateNotesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!$util.isObject(message.notes))
                            return "notes: object expected";
                        var key = Object.keys(message.notes);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.grafeas.v1.Note.verify(message.notes[key[i]]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateNotesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 */
                BatchCreateNotesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BatchCreateNotesRequest)
                        return object;
                    var message = new $root.grafeas.v1.BatchCreateNotesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.notes) {
                        if (typeof object.notes !== "object")
                            throw TypeError(".grafeas.v1.BatchCreateNotesRequest.notes: object expected");
                        message.notes = {};
                        for (var keys = Object.keys(object.notes), i = 0; i < keys.length; ++i) {
                            if (typeof object.notes[keys[i]] !== "object")
                                throw TypeError(".grafeas.v1.BatchCreateNotesRequest.notes: object expected");
                            message.notes[keys[i]] = $root.grafeas.v1.Note.fromObject(object.notes[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateNotesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1.BatchCreateNotesRequest} message BatchCreateNotesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateNotesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.notes = {};
                    if (options.defaults)
                        object.parent = "";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    var keys2;
                    if (message.notes && (keys2 = Object.keys(message.notes)).length) {
                        object.notes = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.notes[keys2[j]] = $root.grafeas.v1.Note.toObject(message.notes[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateNotesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateNotesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateNotesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BatchCreateNotesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateNotesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BatchCreateNotesRequest";
                };
    
                return BatchCreateNotesRequest;
            })();
    
            v1.BatchCreateNotesResponse = (function() {
    
                /**
                 * Properties of a BatchCreateNotesResponse.
                 * @memberof grafeas.v1
                 * @interface IBatchCreateNotesResponse
                 * @property {Array.<grafeas.v1.INote>|null} [notes] BatchCreateNotesResponse notes
                 */
    
                /**
                 * Constructs a new BatchCreateNotesResponse.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BatchCreateNotesResponse.
                 * @implements IBatchCreateNotesResponse
                 * @constructor
                 * @param {grafeas.v1.IBatchCreateNotesResponse=} [properties] Properties to set
                 */
                function BatchCreateNotesResponse(properties) {
                    this.notes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateNotesResponse notes.
                 * @member {Array.<grafeas.v1.INote>} notes
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @instance
                 */
                BatchCreateNotesResponse.prototype.notes = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateNotesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1.BatchCreateNotesResponse} BatchCreateNotesResponse instance
                 */
                BatchCreateNotesResponse.create = function create(properties) {
                    return new BatchCreateNotesResponse(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateNotesResponse message. Does not implicitly {@link grafeas.v1.BatchCreateNotesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesResponse} message BatchCreateNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.notes != null && message.notes.length)
                        for (var i = 0; i < message.notes.length; ++i)
                            $root.grafeas.v1.Note.encode(message.notes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateNotesResponse message, length delimited. Does not implicitly {@link grafeas.v1.BatchCreateNotesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateNotesResponse} message BatchCreateNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateNotesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BatchCreateNotesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.notes && message.notes.length))
                                    message.notes = [];
                                message.notes.push($root.grafeas.v1.Note.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateNotesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateNotesResponse message.
                 * @function verify
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateNotesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!Array.isArray(message.notes))
                            return "notes: array expected";
                        for (var i = 0; i < message.notes.length; ++i) {
                            var error = $root.grafeas.v1.Note.verify(message.notes[i]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateNotesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 */
                BatchCreateNotesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BatchCreateNotesResponse)
                        return object;
                    var message = new $root.grafeas.v1.BatchCreateNotesResponse();
                    if (object.notes) {
                        if (!Array.isArray(object.notes))
                            throw TypeError(".grafeas.v1.BatchCreateNotesResponse.notes: array expected");
                        message.notes = [];
                        for (var i = 0; i < object.notes.length; ++i) {
                            if (typeof object.notes[i] !== "object")
                                throw TypeError(".grafeas.v1.BatchCreateNotesResponse.notes: object expected");
                            message.notes[i] = $root.grafeas.v1.Note.fromObject(object.notes[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateNotesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1.BatchCreateNotesResponse} message BatchCreateNotesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateNotesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.notes = [];
                    if (message.notes && message.notes.length) {
                        object.notes = [];
                        for (var j = 0; j < message.notes.length; ++j)
                            object.notes[j] = $root.grafeas.v1.Note.toObject(message.notes[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateNotesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateNotesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateNotesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BatchCreateNotesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateNotesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BatchCreateNotesResponse";
                };
    
                return BatchCreateNotesResponse;
            })();
    
            v1.BatchCreateOccurrencesRequest = (function() {
    
                /**
                 * Properties of a BatchCreateOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @interface IBatchCreateOccurrencesRequest
                 * @property {string|null} [parent] BatchCreateOccurrencesRequest parent
                 * @property {Array.<grafeas.v1.IOccurrence>|null} [occurrences] BatchCreateOccurrencesRequest occurrences
                 */
    
                /**
                 * Constructs a new BatchCreateOccurrencesRequest.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BatchCreateOccurrencesRequest.
                 * @implements IBatchCreateOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest=} [properties] Properties to set
                 */
                function BatchCreateOccurrencesRequest(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateOccurrencesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @instance
                 */
                BatchCreateOccurrencesRequest.prototype.parent = "";
    
                /**
                 * BatchCreateOccurrencesRequest occurrences.
                 * @member {Array.<grafeas.v1.IOccurrence>} occurrences
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @instance
                 */
                BatchCreateOccurrencesRequest.prototype.occurrences = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest instance
                 */
                BatchCreateOccurrencesRequest.create = function create(properties) {
                    return new BatchCreateOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesRequest message. Does not implicitly {@link grafeas.v1.BatchCreateOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1.BatchCreateOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BatchCreateOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 */
                BatchCreateOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BatchCreateOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1.BatchCreateOccurrencesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1.BatchCreateOccurrencesRequest.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1.BatchCreateOccurrencesRequest.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1.BatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.parent = "";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BatchCreateOccurrencesRequest";
                };
    
                return BatchCreateOccurrencesRequest;
            })();
    
            v1.BatchCreateOccurrencesResponse = (function() {
    
                /**
                 * Properties of a BatchCreateOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @interface IBatchCreateOccurrencesResponse
                 * @property {Array.<grafeas.v1.IOccurrence>|null} [occurrences] BatchCreateOccurrencesResponse occurrences
                 */
    
                /**
                 * Constructs a new BatchCreateOccurrencesResponse.
                 * @memberof grafeas.v1
                 * @classdesc Represents a BatchCreateOccurrencesResponse.
                 * @implements IBatchCreateOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1.IBatchCreateOccurrencesResponse=} [properties] Properties to set
                 */
                function BatchCreateOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1.IOccurrence>} occurrences
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @instance
                 */
                BatchCreateOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse instance
                 */
                BatchCreateOccurrencesResponse.create = function create(properties) {
                    return new BatchCreateOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesResponse message. Does not implicitly {@link grafeas.v1.BatchCreateOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1.BatchCreateOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.IBatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.BatchCreateOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 */
                BatchCreateOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.BatchCreateOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1.BatchCreateOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1.BatchCreateOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1.BatchCreateOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1.BatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.BatchCreateOccurrencesResponse";
                };
    
                return BatchCreateOccurrencesResponse;
            })();
    
            v1.Layer = (function() {
    
                /**
                 * Properties of a Layer.
                 * @memberof grafeas.v1
                 * @interface ILayer
                 * @property {string|null} [directive] Layer directive
                 * @property {string|null} ["arguments"] Layer arguments
                 */
    
                /**
                 * Constructs a new Layer.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Layer.
                 * @implements ILayer
                 * @constructor
                 * @param {grafeas.v1.ILayer=} [properties] Properties to set
                 */
                function Layer(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Layer directive.
                 * @member {string} directive
                 * @memberof grafeas.v1.Layer
                 * @instance
                 */
                Layer.prototype.directive = "";
    
                /**
                 * Layer arguments.
                 * @member {string} arguments
                 * @memberof grafeas.v1.Layer
                 * @instance
                 */
                Layer.prototype["arguments"] = "";
    
                /**
                 * Creates a new Layer instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {grafeas.v1.ILayer=} [properties] Properties to set
                 * @returns {grafeas.v1.Layer} Layer instance
                 */
                Layer.create = function create(properties) {
                    return new Layer(properties);
                };
    
                /**
                 * Encodes the specified Layer message. Does not implicitly {@link grafeas.v1.Layer.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {grafeas.v1.ILayer} message Layer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Layer.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.directive != null && Object.hasOwnProperty.call(message, "directive"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.directive);
                    if (message["arguments"] != null && Object.hasOwnProperty.call(message, "arguments"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["arguments"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Layer message, length delimited. Does not implicitly {@link grafeas.v1.Layer.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {grafeas.v1.ILayer} message Layer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Layer.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Layer message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Layer} Layer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Layer.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Layer();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.directive = reader.string();
                                break;
                            }
                        case 2: {
                                message["arguments"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Layer message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Layer} Layer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Layer.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Layer message.
                 * @function verify
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Layer.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.directive != null && message.hasOwnProperty("directive"))
                        if (!$util.isString(message.directive))
                            return "directive: string expected";
                    if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                        if (!$util.isString(message["arguments"]))
                            return "arguments: string expected";
                    return null;
                };
    
                /**
                 * Creates a Layer message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Layer} Layer
                 */
                Layer.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Layer)
                        return object;
                    var message = new $root.grafeas.v1.Layer();
                    if (object.directive != null)
                        message.directive = String(object.directive);
                    if (object["arguments"] != null)
                        message["arguments"] = String(object["arguments"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Layer message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {grafeas.v1.Layer} message Layer
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Layer.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.directive = "";
                        object["arguments"] = "";
                    }
                    if (message.directive != null && message.hasOwnProperty("directive"))
                        object.directive = message.directive;
                    if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                        object["arguments"] = message["arguments"];
                    return object;
                };
    
                /**
                 * Converts this Layer to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Layer
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Layer.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Layer
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Layer
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Layer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Layer";
                };
    
                return Layer;
            })();
    
            v1.Fingerprint = (function() {
    
                /**
                 * Properties of a Fingerprint.
                 * @memberof grafeas.v1
                 * @interface IFingerprint
                 * @property {string|null} [v1Name] Fingerprint v1Name
                 * @property {Array.<string>|null} [v2Blob] Fingerprint v2Blob
                 * @property {string|null} [v2Name] Fingerprint v2Name
                 */
    
                /**
                 * Constructs a new Fingerprint.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Fingerprint.
                 * @implements IFingerprint
                 * @constructor
                 * @param {grafeas.v1.IFingerprint=} [properties] Properties to set
                 */
                function Fingerprint(properties) {
                    this.v2Blob = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Fingerprint v1Name.
                 * @member {string} v1Name
                 * @memberof grafeas.v1.Fingerprint
                 * @instance
                 */
                Fingerprint.prototype.v1Name = "";
    
                /**
                 * Fingerprint v2Blob.
                 * @member {Array.<string>} v2Blob
                 * @memberof grafeas.v1.Fingerprint
                 * @instance
                 */
                Fingerprint.prototype.v2Blob = $util.emptyArray;
    
                /**
                 * Fingerprint v2Name.
                 * @member {string} v2Name
                 * @memberof grafeas.v1.Fingerprint
                 * @instance
                 */
                Fingerprint.prototype.v2Name = "";
    
                /**
                 * Creates a new Fingerprint instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {grafeas.v1.IFingerprint=} [properties] Properties to set
                 * @returns {grafeas.v1.Fingerprint} Fingerprint instance
                 */
                Fingerprint.create = function create(properties) {
                    return new Fingerprint(properties);
                };
    
                /**
                 * Encodes the specified Fingerprint message. Does not implicitly {@link grafeas.v1.Fingerprint.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {grafeas.v1.IFingerprint} message Fingerprint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fingerprint.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.v1Name != null && Object.hasOwnProperty.call(message, "v1Name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.v1Name);
                    if (message.v2Blob != null && message.v2Blob.length)
                        for (var i = 0; i < message.v2Blob.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.v2Blob[i]);
                    if (message.v2Name != null && Object.hasOwnProperty.call(message, "v2Name"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.v2Name);
                    return writer;
                };
    
                /**
                 * Encodes the specified Fingerprint message, length delimited. Does not implicitly {@link grafeas.v1.Fingerprint.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {grafeas.v1.IFingerprint} message Fingerprint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fingerprint.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Fingerprint message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Fingerprint} Fingerprint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fingerprint.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Fingerprint();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.v1Name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.v2Blob && message.v2Blob.length))
                                    message.v2Blob = [];
                                message.v2Blob.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.v2Name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Fingerprint message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Fingerprint} Fingerprint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fingerprint.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Fingerprint message.
                 * @function verify
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Fingerprint.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.v1Name != null && message.hasOwnProperty("v1Name"))
                        if (!$util.isString(message.v1Name))
                            return "v1Name: string expected";
                    if (message.v2Blob != null && message.hasOwnProperty("v2Blob")) {
                        if (!Array.isArray(message.v2Blob))
                            return "v2Blob: array expected";
                        for (var i = 0; i < message.v2Blob.length; ++i)
                            if (!$util.isString(message.v2Blob[i]))
                                return "v2Blob: string[] expected";
                    }
                    if (message.v2Name != null && message.hasOwnProperty("v2Name"))
                        if (!$util.isString(message.v2Name))
                            return "v2Name: string expected";
                    return null;
                };
    
                /**
                 * Creates a Fingerprint message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Fingerprint} Fingerprint
                 */
                Fingerprint.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Fingerprint)
                        return object;
                    var message = new $root.grafeas.v1.Fingerprint();
                    if (object.v1Name != null)
                        message.v1Name = String(object.v1Name);
                    if (object.v2Blob) {
                        if (!Array.isArray(object.v2Blob))
                            throw TypeError(".grafeas.v1.Fingerprint.v2Blob: array expected");
                        message.v2Blob = [];
                        for (var i = 0; i < object.v2Blob.length; ++i)
                            message.v2Blob[i] = String(object.v2Blob[i]);
                    }
                    if (object.v2Name != null)
                        message.v2Name = String(object.v2Name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Fingerprint message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {grafeas.v1.Fingerprint} message Fingerprint
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Fingerprint.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.v2Blob = [];
                    if (options.defaults) {
                        object.v1Name = "";
                        object.v2Name = "";
                    }
                    if (message.v1Name != null && message.hasOwnProperty("v1Name"))
                        object.v1Name = message.v1Name;
                    if (message.v2Blob && message.v2Blob.length) {
                        object.v2Blob = [];
                        for (var j = 0; j < message.v2Blob.length; ++j)
                            object.v2Blob[j] = message.v2Blob[j];
                    }
                    if (message.v2Name != null && message.hasOwnProperty("v2Name"))
                        object.v2Name = message.v2Name;
                    return object;
                };
    
                /**
                 * Converts this Fingerprint to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Fingerprint
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Fingerprint.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Fingerprint
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Fingerprint
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Fingerprint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Fingerprint";
                };
    
                return Fingerprint;
            })();
    
            v1.ImageNote = (function() {
    
                /**
                 * Properties of an ImageNote.
                 * @memberof grafeas.v1
                 * @interface IImageNote
                 * @property {string|null} [resourceUrl] ImageNote resourceUrl
                 * @property {grafeas.v1.IFingerprint|null} [fingerprint] ImageNote fingerprint
                 */
    
                /**
                 * Constructs a new ImageNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents an ImageNote.
                 * @implements IImageNote
                 * @constructor
                 * @param {grafeas.v1.IImageNote=} [properties] Properties to set
                 */
                function ImageNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ImageNote resourceUrl.
                 * @member {string} resourceUrl
                 * @memberof grafeas.v1.ImageNote
                 * @instance
                 */
                ImageNote.prototype.resourceUrl = "";
    
                /**
                 * ImageNote fingerprint.
                 * @member {grafeas.v1.IFingerprint|null|undefined} fingerprint
                 * @memberof grafeas.v1.ImageNote
                 * @instance
                 */
                ImageNote.prototype.fingerprint = null;
    
                /**
                 * Creates a new ImageNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {grafeas.v1.IImageNote=} [properties] Properties to set
                 * @returns {grafeas.v1.ImageNote} ImageNote instance
                 */
                ImageNote.create = function create(properties) {
                    return new ImageNote(properties);
                };
    
                /**
                 * Encodes the specified ImageNote message. Does not implicitly {@link grafeas.v1.ImageNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {grafeas.v1.IImageNote} message ImageNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.resourceUrl != null && Object.hasOwnProperty.call(message, "resourceUrl"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceUrl);
                    if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                        $root.grafeas.v1.Fingerprint.encode(message.fingerprint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ImageNote message, length delimited. Does not implicitly {@link grafeas.v1.ImageNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {grafeas.v1.IImageNote} message ImageNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ImageNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ImageNote} ImageNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ImageNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.resourceUrl = reader.string();
                                break;
                            }
                        case 2: {
                                message.fingerprint = $root.grafeas.v1.Fingerprint.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ImageNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ImageNote} ImageNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ImageNote message.
                 * @function verify
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ImageNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                        if (!$util.isString(message.resourceUrl))
                            return "resourceUrl: string expected";
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                        var error = $root.grafeas.v1.Fingerprint.verify(message.fingerprint);
                        if (error)
                            return "fingerprint." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an ImageNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ImageNote} ImageNote
                 */
                ImageNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ImageNote)
                        return object;
                    var message = new $root.grafeas.v1.ImageNote();
                    if (object.resourceUrl != null)
                        message.resourceUrl = String(object.resourceUrl);
                    if (object.fingerprint != null) {
                        if (typeof object.fingerprint !== "object")
                            throw TypeError(".grafeas.v1.ImageNote.fingerprint: object expected");
                        message.fingerprint = $root.grafeas.v1.Fingerprint.fromObject(object.fingerprint);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ImageNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {grafeas.v1.ImageNote} message ImageNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ImageNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.resourceUrl = "";
                        object.fingerprint = null;
                    }
                    if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                        object.resourceUrl = message.resourceUrl;
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                        object.fingerprint = $root.grafeas.v1.Fingerprint.toObject(message.fingerprint, options);
                    return object;
                };
    
                /**
                 * Converts this ImageNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ImageNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ImageNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ImageNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ImageNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ImageNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ImageNote";
                };
    
                return ImageNote;
            })();
    
            v1.ImageOccurrence = (function() {
    
                /**
                 * Properties of an ImageOccurrence.
                 * @memberof grafeas.v1
                 * @interface IImageOccurrence
                 * @property {grafeas.v1.IFingerprint|null} [fingerprint] ImageOccurrence fingerprint
                 * @property {number|null} [distance] ImageOccurrence distance
                 * @property {Array.<grafeas.v1.ILayer>|null} [layerInfo] ImageOccurrence layerInfo
                 * @property {string|null} [baseResourceUrl] ImageOccurrence baseResourceUrl
                 */
    
                /**
                 * Constructs a new ImageOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents an ImageOccurrence.
                 * @implements IImageOccurrence
                 * @constructor
                 * @param {grafeas.v1.IImageOccurrence=} [properties] Properties to set
                 */
                function ImageOccurrence(properties) {
                    this.layerInfo = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ImageOccurrence fingerprint.
                 * @member {grafeas.v1.IFingerprint|null|undefined} fingerprint
                 * @memberof grafeas.v1.ImageOccurrence
                 * @instance
                 */
                ImageOccurrence.prototype.fingerprint = null;
    
                /**
                 * ImageOccurrence distance.
                 * @member {number} distance
                 * @memberof grafeas.v1.ImageOccurrence
                 * @instance
                 */
                ImageOccurrence.prototype.distance = 0;
    
                /**
                 * ImageOccurrence layerInfo.
                 * @member {Array.<grafeas.v1.ILayer>} layerInfo
                 * @memberof grafeas.v1.ImageOccurrence
                 * @instance
                 */
                ImageOccurrence.prototype.layerInfo = $util.emptyArray;
    
                /**
                 * ImageOccurrence baseResourceUrl.
                 * @member {string} baseResourceUrl
                 * @memberof grafeas.v1.ImageOccurrence
                 * @instance
                 */
                ImageOccurrence.prototype.baseResourceUrl = "";
    
                /**
                 * Creates a new ImageOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {grafeas.v1.IImageOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.ImageOccurrence} ImageOccurrence instance
                 */
                ImageOccurrence.create = function create(properties) {
                    return new ImageOccurrence(properties);
                };
    
                /**
                 * Encodes the specified ImageOccurrence message. Does not implicitly {@link grafeas.v1.ImageOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {grafeas.v1.IImageOccurrence} message ImageOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                        $root.grafeas.v1.Fingerprint.encode(message.fingerprint, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.distance != null && Object.hasOwnProperty.call(message, "distance"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.distance);
                    if (message.layerInfo != null && message.layerInfo.length)
                        for (var i = 0; i < message.layerInfo.length; ++i)
                            $root.grafeas.v1.Layer.encode(message.layerInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.baseResourceUrl != null && Object.hasOwnProperty.call(message, "baseResourceUrl"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.baseResourceUrl);
                    return writer;
                };
    
                /**
                 * Encodes the specified ImageOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.ImageOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {grafeas.v1.IImageOccurrence} message ImageOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ImageOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.ImageOccurrence} ImageOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.ImageOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fingerprint = $root.grafeas.v1.Fingerprint.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.distance = reader.int32();
                                break;
                            }
                        case 3: {
                                if (!(message.layerInfo && message.layerInfo.length))
                                    message.layerInfo = [];
                                message.layerInfo.push($root.grafeas.v1.Layer.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.baseResourceUrl = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ImageOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.ImageOccurrence} ImageOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ImageOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ImageOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                        var error = $root.grafeas.v1.Fingerprint.verify(message.fingerprint);
                        if (error)
                            return "fingerprint." + error;
                    }
                    if (message.distance != null && message.hasOwnProperty("distance"))
                        if (!$util.isInteger(message.distance))
                            return "distance: integer expected";
                    if (message.layerInfo != null && message.hasOwnProperty("layerInfo")) {
                        if (!Array.isArray(message.layerInfo))
                            return "layerInfo: array expected";
                        for (var i = 0; i < message.layerInfo.length; ++i) {
                            var error = $root.grafeas.v1.Layer.verify(message.layerInfo[i]);
                            if (error)
                                return "layerInfo." + error;
                        }
                    }
                    if (message.baseResourceUrl != null && message.hasOwnProperty("baseResourceUrl"))
                        if (!$util.isString(message.baseResourceUrl))
                            return "baseResourceUrl: string expected";
                    return null;
                };
    
                /**
                 * Creates an ImageOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.ImageOccurrence} ImageOccurrence
                 */
                ImageOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.ImageOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.ImageOccurrence();
                    if (object.fingerprint != null) {
                        if (typeof object.fingerprint !== "object")
                            throw TypeError(".grafeas.v1.ImageOccurrence.fingerprint: object expected");
                        message.fingerprint = $root.grafeas.v1.Fingerprint.fromObject(object.fingerprint);
                    }
                    if (object.distance != null)
                        message.distance = object.distance | 0;
                    if (object.layerInfo) {
                        if (!Array.isArray(object.layerInfo))
                            throw TypeError(".grafeas.v1.ImageOccurrence.layerInfo: array expected");
                        message.layerInfo = [];
                        for (var i = 0; i < object.layerInfo.length; ++i) {
                            if (typeof object.layerInfo[i] !== "object")
                                throw TypeError(".grafeas.v1.ImageOccurrence.layerInfo: object expected");
                            message.layerInfo[i] = $root.grafeas.v1.Layer.fromObject(object.layerInfo[i]);
                        }
                    }
                    if (object.baseResourceUrl != null)
                        message.baseResourceUrl = String(object.baseResourceUrl);
                    return message;
                };
    
                /**
                 * Creates a plain object from an ImageOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {grafeas.v1.ImageOccurrence} message ImageOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ImageOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.layerInfo = [];
                    if (options.defaults) {
                        object.fingerprint = null;
                        object.distance = 0;
                        object.baseResourceUrl = "";
                    }
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                        object.fingerprint = $root.grafeas.v1.Fingerprint.toObject(message.fingerprint, options);
                    if (message.distance != null && message.hasOwnProperty("distance"))
                        object.distance = message.distance;
                    if (message.layerInfo && message.layerInfo.length) {
                        object.layerInfo = [];
                        for (var j = 0; j < message.layerInfo.length; ++j)
                            object.layerInfo[j] = $root.grafeas.v1.Layer.toObject(message.layerInfo[j], options);
                    }
                    if (message.baseResourceUrl != null && message.hasOwnProperty("baseResourceUrl"))
                        object.baseResourceUrl = message.baseResourceUrl;
                    return object;
                };
    
                /**
                 * Converts this ImageOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.ImageOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ImageOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ImageOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.ImageOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ImageOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.ImageOccurrence";
                };
    
                return ImageOccurrence;
            })();
    
            /**
             * Architecture enum.
             * @name grafeas.v1.Architecture
             * @enum {number}
             * @property {number} ARCHITECTURE_UNSPECIFIED=0 ARCHITECTURE_UNSPECIFIED value
             * @property {number} X86=1 X86 value
             * @property {number} X64=2 X64 value
             */
            v1.Architecture = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ARCHITECTURE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "X86"] = 1;
                values[valuesById[2] = "X64"] = 2;
                return values;
            })();
    
            v1.Distribution = (function() {
    
                /**
                 * Properties of a Distribution.
                 * @memberof grafeas.v1
                 * @interface IDistribution
                 * @property {string|null} [cpeUri] Distribution cpeUri
                 * @property {grafeas.v1.Architecture|null} [architecture] Distribution architecture
                 * @property {grafeas.v1.IVersion|null} [latestVersion] Distribution latestVersion
                 * @property {string|null} [maintainer] Distribution maintainer
                 * @property {string|null} [url] Distribution url
                 * @property {string|null} [description] Distribution description
                 */
    
                /**
                 * Constructs a new Distribution.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Distribution.
                 * @implements IDistribution
                 * @constructor
                 * @param {grafeas.v1.IDistribution=} [properties] Properties to set
                 */
                function Distribution(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Distribution cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.cpeUri = "";
    
                /**
                 * Distribution architecture.
                 * @member {grafeas.v1.Architecture} architecture
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.architecture = 0;
    
                /**
                 * Distribution latestVersion.
                 * @member {grafeas.v1.IVersion|null|undefined} latestVersion
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.latestVersion = null;
    
                /**
                 * Distribution maintainer.
                 * @member {string} maintainer
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.maintainer = "";
    
                /**
                 * Distribution url.
                 * @member {string} url
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.url = "";
    
                /**
                 * Distribution description.
                 * @member {string} description
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 */
                Distribution.prototype.description = "";
    
                /**
                 * Creates a new Distribution instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {grafeas.v1.IDistribution=} [properties] Properties to set
                 * @returns {grafeas.v1.Distribution} Distribution instance
                 */
                Distribution.create = function create(properties) {
                    return new Distribution(properties);
                };
    
                /**
                 * Encodes the specified Distribution message. Does not implicitly {@link grafeas.v1.Distribution.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {grafeas.v1.IDistribution} message Distribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Distribution.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                    if (message.architecture != null && Object.hasOwnProperty.call(message, "architecture"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.architecture);
                    if (message.latestVersion != null && Object.hasOwnProperty.call(message, "latestVersion"))
                        $root.grafeas.v1.Version.encode(message.latestVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.maintainer != null && Object.hasOwnProperty.call(message, "maintainer"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.maintainer);
                    if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);
                    return writer;
                };
    
                /**
                 * Encodes the specified Distribution message, length delimited. Does not implicitly {@link grafeas.v1.Distribution.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {grafeas.v1.IDistribution} message Distribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Distribution.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Distribution message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Distribution} Distribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Distribution.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Distribution();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 2: {
                                message.architecture = reader.int32();
                                break;
                            }
                        case 3: {
                                message.latestVersion = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.maintainer = reader.string();
                                break;
                            }
                        case 5: {
                                message.url = reader.string();
                                break;
                            }
                        case 6: {
                                message.description = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Distribution message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Distribution} Distribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Distribution.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Distribution message.
                 * @function verify
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Distribution.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        switch (message.architecture) {
                        default:
                            return "architecture: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.latestVersion != null && message.hasOwnProperty("latestVersion")) {
                        var error = $root.grafeas.v1.Version.verify(message.latestVersion);
                        if (error)
                            return "latestVersion." + error;
                    }
                    if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                        if (!$util.isString(message.maintainer))
                            return "maintainer: string expected";
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };
    
                /**
                 * Creates a Distribution message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Distribution} Distribution
                 */
                Distribution.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Distribution)
                        return object;
                    var message = new $root.grafeas.v1.Distribution();
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    switch (object.architecture) {
                    default:
                        if (typeof object.architecture === "number") {
                            message.architecture = object.architecture;
                            break;
                        }
                        break;
                    case "ARCHITECTURE_UNSPECIFIED":
                    case 0:
                        message.architecture = 0;
                        break;
                    case "X86":
                    case 1:
                        message.architecture = 1;
                        break;
                    case "X64":
                    case 2:
                        message.architecture = 2;
                        break;
                    }
                    if (object.latestVersion != null) {
                        if (typeof object.latestVersion !== "object")
                            throw TypeError(".grafeas.v1.Distribution.latestVersion: object expected");
                        message.latestVersion = $root.grafeas.v1.Version.fromObject(object.latestVersion);
                    }
                    if (object.maintainer != null)
                        message.maintainer = String(object.maintainer);
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Distribution message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {grafeas.v1.Distribution} message Distribution
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Distribution.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.cpeUri = "";
                        object.architecture = options.enums === String ? "ARCHITECTURE_UNSPECIFIED" : 0;
                        object.latestVersion = null;
                        object.maintainer = "";
                        object.url = "";
                        object.description = "";
                    }
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        object.architecture = options.enums === String ? $root.grafeas.v1.Architecture[message.architecture] === undefined ? message.architecture : $root.grafeas.v1.Architecture[message.architecture] : message.architecture;
                    if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                        object.latestVersion = $root.grafeas.v1.Version.toObject(message.latestVersion, options);
                    if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                        object.maintainer = message.maintainer;
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };
    
                /**
                 * Converts this Distribution to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Distribution
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Distribution.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Distribution
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Distribution
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Distribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Distribution";
                };
    
                return Distribution;
            })();
    
            v1.Location = (function() {
    
                /**
                 * Properties of a Location.
                 * @memberof grafeas.v1
                 * @interface ILocation
                 * @property {string|null} [cpeUri] Location cpeUri
                 * @property {grafeas.v1.IVersion|null} [version] Location version
                 * @property {string|null} [path] Location path
                 */
    
                /**
                 * Constructs a new Location.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {grafeas.v1.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Location cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.Location
                 * @instance
                 */
                Location.prototype.cpeUri = "";
    
                /**
                 * Location version.
                 * @member {grafeas.v1.IVersion|null|undefined} version
                 * @memberof grafeas.v1.Location
                 * @instance
                 */
                Location.prototype.version = null;
    
                /**
                 * Location path.
                 * @member {string} path
                 * @memberof grafeas.v1.Location
                 * @instance
                 */
                Location.prototype.path = "";
    
                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {grafeas.v1.ILocation=} [properties] Properties to set
                 * @returns {grafeas.v1.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };
    
                /**
                 * Encodes the specified Location message. Does not implicitly {@link grafeas.v1.Location.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {grafeas.v1.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.grafeas.v1.Version.encode(message.version, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link grafeas.v1.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {grafeas.v1.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 2: {
                                message.version = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.grafeas.v1.Version.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Location)
                        return object;
                    var message = new $root.grafeas.v1.Location();
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".grafeas.v1.Location.version: object expected");
                        message.version = $root.grafeas.v1.Version.fromObject(object.version);
                    }
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {grafeas.v1.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.cpeUri = "";
                        object.version = null;
                        object.path = "";
                    }
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.grafeas.v1.Version.toObject(message.version, options);
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Location
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Location
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Location";
                };
    
                return Location;
            })();
    
            v1.PackageNote = (function() {
    
                /**
                 * Properties of a PackageNote.
                 * @memberof grafeas.v1
                 * @interface IPackageNote
                 * @property {string|null} [name] PackageNote name
                 * @property {Array.<grafeas.v1.IDistribution>|null} [distribution] PackageNote distribution
                 * @property {string|null} [packageType] PackageNote packageType
                 * @property {string|null} [cpeUri] PackageNote cpeUri
                 * @property {grafeas.v1.Architecture|null} [architecture] PackageNote architecture
                 * @property {grafeas.v1.IVersion|null} [version] PackageNote version
                 * @property {string|null} [maintainer] PackageNote maintainer
                 * @property {string|null} [url] PackageNote url
                 * @property {string|null} [description] PackageNote description
                 * @property {grafeas.v1.ILicense|null} [license] PackageNote license
                 * @property {Array.<grafeas.v1.IDigest>|null} [digest] PackageNote digest
                 */
    
                /**
                 * Constructs a new PackageNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a PackageNote.
                 * @implements IPackageNote
                 * @constructor
                 * @param {grafeas.v1.IPackageNote=} [properties] Properties to set
                 */
                function PackageNote(properties) {
                    this.distribution = [];
                    this.digest = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PackageNote name.
                 * @member {string} name
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.name = "";
    
                /**
                 * PackageNote distribution.
                 * @member {Array.<grafeas.v1.IDistribution>} distribution
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.distribution = $util.emptyArray;
    
                /**
                 * PackageNote packageType.
                 * @member {string} packageType
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.packageType = "";
    
                /**
                 * PackageNote cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.cpeUri = "";
    
                /**
                 * PackageNote architecture.
                 * @member {grafeas.v1.Architecture} architecture
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.architecture = 0;
    
                /**
                 * PackageNote version.
                 * @member {grafeas.v1.IVersion|null|undefined} version
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.version = null;
    
                /**
                 * PackageNote maintainer.
                 * @member {string} maintainer
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.maintainer = "";
    
                /**
                 * PackageNote url.
                 * @member {string} url
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.url = "";
    
                /**
                 * PackageNote description.
                 * @member {string} description
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.description = "";
    
                /**
                 * PackageNote license.
                 * @member {grafeas.v1.ILicense|null|undefined} license
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.license = null;
    
                /**
                 * PackageNote digest.
                 * @member {Array.<grafeas.v1.IDigest>} digest
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 */
                PackageNote.prototype.digest = $util.emptyArray;
    
                /**
                 * Creates a new PackageNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {grafeas.v1.IPackageNote=} [properties] Properties to set
                 * @returns {grafeas.v1.PackageNote} PackageNote instance
                 */
                PackageNote.create = function create(properties) {
                    return new PackageNote(properties);
                };
    
                /**
                 * Encodes the specified PackageNote message. Does not implicitly {@link grafeas.v1.PackageNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {grafeas.v1.IPackageNote} message PackageNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PackageNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.distribution != null && message.distribution.length)
                        for (var i = 0; i < message.distribution.length; ++i)
                            $root.grafeas.v1.Distribution.encode(message.distribution[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.packageType != null && Object.hasOwnProperty.call(message, "packageType"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.packageType);
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.cpeUri);
                    if (message.architecture != null && Object.hasOwnProperty.call(message, "architecture"))
                        writer.uint32(/* id 13, wireType 0 =*/104).int32(message.architecture);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.grafeas.v1.Version.encode(message.version, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.maintainer != null && Object.hasOwnProperty.call(message, "maintainer"))
                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.maintainer);
                    if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.url);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 17, wireType 2 =*/138).string(message.description);
                    if (message.license != null && Object.hasOwnProperty.call(message, "license"))
                        $root.grafeas.v1.License.encode(message.license, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    if (message.digest != null && message.digest.length)
                        for (var i = 0; i < message.digest.length; ++i)
                            $root.grafeas.v1.Digest.encode(message.digest[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PackageNote message, length delimited. Does not implicitly {@link grafeas.v1.PackageNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {grafeas.v1.IPackageNote} message PackageNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PackageNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PackageNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.PackageNote} PackageNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PackageNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.PackageNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.distribution && message.distribution.length))
                                    message.distribution = [];
                                message.distribution.push($root.grafeas.v1.Distribution.decode(reader, reader.uint32()));
                                break;
                            }
                        case 11: {
                                message.packageType = reader.string();
                                break;
                            }
                        case 12: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 13: {
                                message.architecture = reader.int32();
                                break;
                            }
                        case 14: {
                                message.version = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        case 15: {
                                message.maintainer = reader.string();
                                break;
                            }
                        case 16: {
                                message.url = reader.string();
                                break;
                            }
                        case 17: {
                                message.description = reader.string();
                                break;
                            }
                        case 18: {
                                message.license = $root.grafeas.v1.License.decode(reader, reader.uint32());
                                break;
                            }
                        case 19: {
                                if (!(message.digest && message.digest.length))
                                    message.digest = [];
                                message.digest.push($root.grafeas.v1.Digest.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PackageNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.PackageNote} PackageNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PackageNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PackageNote message.
                 * @function verify
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PackageNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.distribution != null && message.hasOwnProperty("distribution")) {
                        if (!Array.isArray(message.distribution))
                            return "distribution: array expected";
                        for (var i = 0; i < message.distribution.length; ++i) {
                            var error = $root.grafeas.v1.Distribution.verify(message.distribution[i]);
                            if (error)
                                return "distribution." + error;
                        }
                    }
                    if (message.packageType != null && message.hasOwnProperty("packageType"))
                        if (!$util.isString(message.packageType))
                            return "packageType: string expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        switch (message.architecture) {
                        default:
                            return "architecture: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.grafeas.v1.Version.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                        if (!$util.isString(message.maintainer))
                            return "maintainer: string expected";
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.license != null && message.hasOwnProperty("license")) {
                        var error = $root.grafeas.v1.License.verify(message.license);
                        if (error)
                            return "license." + error;
                    }
                    if (message.digest != null && message.hasOwnProperty("digest")) {
                        if (!Array.isArray(message.digest))
                            return "digest: array expected";
                        for (var i = 0; i < message.digest.length; ++i) {
                            var error = $root.grafeas.v1.Digest.verify(message.digest[i]);
                            if (error)
                                return "digest." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a PackageNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.PackageNote} PackageNote
                 */
                PackageNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.PackageNote)
                        return object;
                    var message = new $root.grafeas.v1.PackageNote();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.distribution) {
                        if (!Array.isArray(object.distribution))
                            throw TypeError(".grafeas.v1.PackageNote.distribution: array expected");
                        message.distribution = [];
                        for (var i = 0; i < object.distribution.length; ++i) {
                            if (typeof object.distribution[i] !== "object")
                                throw TypeError(".grafeas.v1.PackageNote.distribution: object expected");
                            message.distribution[i] = $root.grafeas.v1.Distribution.fromObject(object.distribution[i]);
                        }
                    }
                    if (object.packageType != null)
                        message.packageType = String(object.packageType);
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    switch (object.architecture) {
                    default:
                        if (typeof object.architecture === "number") {
                            message.architecture = object.architecture;
                            break;
                        }
                        break;
                    case "ARCHITECTURE_UNSPECIFIED":
                    case 0:
                        message.architecture = 0;
                        break;
                    case "X86":
                    case 1:
                        message.architecture = 1;
                        break;
                    case "X64":
                    case 2:
                        message.architecture = 2;
                        break;
                    }
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".grafeas.v1.PackageNote.version: object expected");
                        message.version = $root.grafeas.v1.Version.fromObject(object.version);
                    }
                    if (object.maintainer != null)
                        message.maintainer = String(object.maintainer);
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.license != null) {
                        if (typeof object.license !== "object")
                            throw TypeError(".grafeas.v1.PackageNote.license: object expected");
                        message.license = $root.grafeas.v1.License.fromObject(object.license);
                    }
                    if (object.digest) {
                        if (!Array.isArray(object.digest))
                            throw TypeError(".grafeas.v1.PackageNote.digest: array expected");
                        message.digest = [];
                        for (var i = 0; i < object.digest.length; ++i) {
                            if (typeof object.digest[i] !== "object")
                                throw TypeError(".grafeas.v1.PackageNote.digest: object expected");
                            message.digest[i] = $root.grafeas.v1.Digest.fromObject(object.digest[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PackageNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {grafeas.v1.PackageNote} message PackageNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PackageNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.distribution = [];
                        object.digest = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.packageType = "";
                        object.cpeUri = "";
                        object.architecture = options.enums === String ? "ARCHITECTURE_UNSPECIFIED" : 0;
                        object.version = null;
                        object.maintainer = "";
                        object.url = "";
                        object.description = "";
                        object.license = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.distribution && message.distribution.length) {
                        object.distribution = [];
                        for (var j = 0; j < message.distribution.length; ++j)
                            object.distribution[j] = $root.grafeas.v1.Distribution.toObject(message.distribution[j], options);
                    }
                    if (message.packageType != null && message.hasOwnProperty("packageType"))
                        object.packageType = message.packageType;
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        object.architecture = options.enums === String ? $root.grafeas.v1.Architecture[message.architecture] === undefined ? message.architecture : $root.grafeas.v1.Architecture[message.architecture] : message.architecture;
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.grafeas.v1.Version.toObject(message.version, options);
                    if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                        object.maintainer = message.maintainer;
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.license != null && message.hasOwnProperty("license"))
                        object.license = $root.grafeas.v1.License.toObject(message.license, options);
                    if (message.digest && message.digest.length) {
                        object.digest = [];
                        for (var j = 0; j < message.digest.length; ++j)
                            object.digest[j] = $root.grafeas.v1.Digest.toObject(message.digest[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this PackageNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.PackageNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PackageNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PackageNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.PackageNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PackageNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.PackageNote";
                };
    
                return PackageNote;
            })();
    
            v1.PackageOccurrence = (function() {
    
                /**
                 * Properties of a PackageOccurrence.
                 * @memberof grafeas.v1
                 * @interface IPackageOccurrence
                 * @property {string|null} [name] PackageOccurrence name
                 * @property {Array.<grafeas.v1.ILocation>|null} [location] PackageOccurrence location
                 * @property {string|null} [packageType] PackageOccurrence packageType
                 * @property {string|null} [cpeUri] PackageOccurrence cpeUri
                 * @property {grafeas.v1.Architecture|null} [architecture] PackageOccurrence architecture
                 * @property {grafeas.v1.ILicense|null} [license] PackageOccurrence license
                 * @property {grafeas.v1.IVersion|null} [version] PackageOccurrence version
                 */
    
                /**
                 * Constructs a new PackageOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a PackageOccurrence.
                 * @implements IPackageOccurrence
                 * @constructor
                 * @param {grafeas.v1.IPackageOccurrence=} [properties] Properties to set
                 */
                function PackageOccurrence(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PackageOccurrence name.
                 * @member {string} name
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.name = "";
    
                /**
                 * PackageOccurrence location.
                 * @member {Array.<grafeas.v1.ILocation>} location
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.location = $util.emptyArray;
    
                /**
                 * PackageOccurrence packageType.
                 * @member {string} packageType
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.packageType = "";
    
                /**
                 * PackageOccurrence cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.cpeUri = "";
    
                /**
                 * PackageOccurrence architecture.
                 * @member {grafeas.v1.Architecture} architecture
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.architecture = 0;
    
                /**
                 * PackageOccurrence license.
                 * @member {grafeas.v1.ILicense|null|undefined} license
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.license = null;
    
                /**
                 * PackageOccurrence version.
                 * @member {grafeas.v1.IVersion|null|undefined} version
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 */
                PackageOccurrence.prototype.version = null;
    
                /**
                 * Creates a new PackageOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {grafeas.v1.IPackageOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.PackageOccurrence} PackageOccurrence instance
                 */
                PackageOccurrence.create = function create(properties) {
                    return new PackageOccurrence(properties);
                };
    
                /**
                 * Encodes the specified PackageOccurrence message. Does not implicitly {@link grafeas.v1.PackageOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {grafeas.v1.IPackageOccurrence} message PackageOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PackageOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.grafeas.v1.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.packageType != null && Object.hasOwnProperty.call(message, "packageType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.packageType);
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.cpeUri);
                    if (message.architecture != null && Object.hasOwnProperty.call(message, "architecture"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.architecture);
                    if (message.license != null && Object.hasOwnProperty.call(message, "license"))
                        $root.grafeas.v1.License.encode(message.license, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.grafeas.v1.Version.encode(message.version, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PackageOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.PackageOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {grafeas.v1.IPackageOccurrence} message PackageOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PackageOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PackageOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.PackageOccurrence} PackageOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PackageOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.PackageOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.grafeas.v1.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.packageType = reader.string();
                                break;
                            }
                        case 4: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 5: {
                                message.architecture = reader.int32();
                                break;
                            }
                        case 6: {
                                message.license = $root.grafeas.v1.License.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.version = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PackageOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.PackageOccurrence} PackageOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PackageOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PackageOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PackageOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.grafeas.v1.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    if (message.packageType != null && message.hasOwnProperty("packageType"))
                        if (!$util.isString(message.packageType))
                            return "packageType: string expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        switch (message.architecture) {
                        default:
                            return "architecture: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.license != null && message.hasOwnProperty("license")) {
                        var error = $root.grafeas.v1.License.verify(message.license);
                        if (error)
                            return "license." + error;
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.grafeas.v1.Version.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PackageOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.PackageOccurrence} PackageOccurrence
                 */
                PackageOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.PackageOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.PackageOccurrence();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".grafeas.v1.PackageOccurrence.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".grafeas.v1.PackageOccurrence.location: object expected");
                            message.location[i] = $root.grafeas.v1.Location.fromObject(object.location[i]);
                        }
                    }
                    if (object.packageType != null)
                        message.packageType = String(object.packageType);
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    switch (object.architecture) {
                    default:
                        if (typeof object.architecture === "number") {
                            message.architecture = object.architecture;
                            break;
                        }
                        break;
                    case "ARCHITECTURE_UNSPECIFIED":
                    case 0:
                        message.architecture = 0;
                        break;
                    case "X86":
                    case 1:
                        message.architecture = 1;
                        break;
                    case "X64":
                    case 2:
                        message.architecture = 2;
                        break;
                    }
                    if (object.license != null) {
                        if (typeof object.license !== "object")
                            throw TypeError(".grafeas.v1.PackageOccurrence.license: object expected");
                        message.license = $root.grafeas.v1.License.fromObject(object.license);
                    }
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".grafeas.v1.PackageOccurrence.version: object expected");
                        message.version = $root.grafeas.v1.Version.fromObject(object.version);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PackageOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {grafeas.v1.PackageOccurrence} message PackageOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PackageOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (options.defaults) {
                        object.name = "";
                        object.packageType = "";
                        object.cpeUri = "";
                        object.architecture = options.enums === String ? "ARCHITECTURE_UNSPECIFIED" : 0;
                        object.license = null;
                        object.version = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.grafeas.v1.Location.toObject(message.location[j], options);
                    }
                    if (message.packageType != null && message.hasOwnProperty("packageType"))
                        object.packageType = message.packageType;
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                        object.architecture = options.enums === String ? $root.grafeas.v1.Architecture[message.architecture] === undefined ? message.architecture : $root.grafeas.v1.Architecture[message.architecture] : message.architecture;
                    if (message.license != null && message.hasOwnProperty("license"))
                        object.license = $root.grafeas.v1.License.toObject(message.license, options);
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.grafeas.v1.Version.toObject(message.version, options);
                    return object;
                };
    
                /**
                 * Converts this PackageOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.PackageOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PackageOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PackageOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.PackageOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PackageOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.PackageOccurrence";
                };
    
                return PackageOccurrence;
            })();
    
            v1.Version = (function() {
    
                /**
                 * Properties of a Version.
                 * @memberof grafeas.v1
                 * @interface IVersion
                 * @property {number|null} [epoch] Version epoch
                 * @property {string|null} [name] Version name
                 * @property {string|null} [revision] Version revision
                 * @property {boolean|null} [inclusive] Version inclusive
                 * @property {grafeas.v1.Version.VersionKind|null} [kind] Version kind
                 * @property {string|null} [fullName] Version fullName
                 */
    
                /**
                 * Constructs a new Version.
                 * @memberof grafeas.v1
                 * @classdesc Represents a Version.
                 * @implements IVersion
                 * @constructor
                 * @param {grafeas.v1.IVersion=} [properties] Properties to set
                 */
                function Version(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Version epoch.
                 * @member {number} epoch
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.epoch = 0;
    
                /**
                 * Version name.
                 * @member {string} name
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.name = "";
    
                /**
                 * Version revision.
                 * @member {string} revision
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.revision = "";
    
                /**
                 * Version inclusive.
                 * @member {boolean} inclusive
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.inclusive = false;
    
                /**
                 * Version kind.
                 * @member {grafeas.v1.Version.VersionKind} kind
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.kind = 0;
    
                /**
                 * Version fullName.
                 * @member {string} fullName
                 * @memberof grafeas.v1.Version
                 * @instance
                 */
                Version.prototype.fullName = "";
    
                /**
                 * Creates a new Version instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {grafeas.v1.IVersion=} [properties] Properties to set
                 * @returns {grafeas.v1.Version} Version instance
                 */
                Version.create = function create(properties) {
                    return new Version(properties);
                };
    
                /**
                 * Encodes the specified Version message. Does not implicitly {@link grafeas.v1.Version.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {grafeas.v1.IVersion} message Version message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Version.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.epoch != null && Object.hasOwnProperty.call(message, "epoch"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.epoch);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.revision);
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                    if (message.fullName != null && Object.hasOwnProperty.call(message, "fullName"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.fullName);
                    if (message.inclusive != null && Object.hasOwnProperty.call(message, "inclusive"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.inclusive);
                    return writer;
                };
    
                /**
                 * Encodes the specified Version message, length delimited. Does not implicitly {@link grafeas.v1.Version.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {grafeas.v1.IVersion} message Version message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Version.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Version message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.Version} Version
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Version.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.Version();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.epoch = reader.int32();
                                break;
                            }
                        case 2: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.revision = reader.string();
                                break;
                            }
                        case 6: {
                                message.inclusive = reader.bool();
                                break;
                            }
                        case 4: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 5: {
                                message.fullName = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Version message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.Version} Version
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Version.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Version message.
                 * @function verify
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Version.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.epoch != null && message.hasOwnProperty("epoch"))
                        if (!$util.isInteger(message.epoch))
                            return "epoch: integer expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (!$util.isString(message.revision))
                            return "revision: string expected";
                    if (message.inclusive != null && message.hasOwnProperty("inclusive"))
                        if (typeof message.inclusive !== "boolean")
                            return "inclusive: boolean expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.fullName != null && message.hasOwnProperty("fullName"))
                        if (!$util.isString(message.fullName))
                            return "fullName: string expected";
                    return null;
                };
    
                /**
                 * Creates a Version message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.Version} Version
                 */
                Version.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.Version)
                        return object;
                    var message = new $root.grafeas.v1.Version();
                    if (object.epoch != null)
                        message.epoch = object.epoch | 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.revision != null)
                        message.revision = String(object.revision);
                    if (object.inclusive != null)
                        message.inclusive = Boolean(object.inclusive);
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "VERSION_KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "NORMAL":
                    case 1:
                        message.kind = 1;
                        break;
                    case "MINIMUM":
                    case 2:
                        message.kind = 2;
                        break;
                    case "MAXIMUM":
                    case 3:
                        message.kind = 3;
                        break;
                    }
                    if (object.fullName != null)
                        message.fullName = String(object.fullName);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Version message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {grafeas.v1.Version} message Version
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Version.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.epoch = 0;
                        object.name = "";
                        object.revision = "";
                        object.kind = options.enums === String ? "VERSION_KIND_UNSPECIFIED" : 0;
                        object.fullName = "";
                        object.inclusive = false;
                    }
                    if (message.epoch != null && message.hasOwnProperty("epoch"))
                        object.epoch = message.epoch;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        object.revision = message.revision;
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1.Version.VersionKind[message.kind] === undefined ? message.kind : $root.grafeas.v1.Version.VersionKind[message.kind] : message.kind;
                    if (message.fullName != null && message.hasOwnProperty("fullName"))
                        object.fullName = message.fullName;
                    if (message.inclusive != null && message.hasOwnProperty("inclusive"))
                        object.inclusive = message.inclusive;
                    return object;
                };
    
                /**
                 * Converts this Version to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.Version
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Version.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Version
                 * @function getTypeUrl
                 * @memberof grafeas.v1.Version
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Version.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.Version";
                };
    
                /**
                 * VersionKind enum.
                 * @name grafeas.v1.Version.VersionKind
                 * @enum {number}
                 * @property {number} VERSION_KIND_UNSPECIFIED=0 VERSION_KIND_UNSPECIFIED value
                 * @property {number} NORMAL=1 NORMAL value
                 * @property {number} MINIMUM=2 MINIMUM value
                 * @property {number} MAXIMUM=3 MAXIMUM value
                 */
                Version.VersionKind = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "VERSION_KIND_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "NORMAL"] = 1;
                    values[valuesById[2] = "MINIMUM"] = 2;
                    values[valuesById[3] = "MAXIMUM"] = 3;
                    return values;
                })();
    
                return Version;
            })();
    
            v1.UpgradeNote = (function() {
    
                /**
                 * Properties of an UpgradeNote.
                 * @memberof grafeas.v1
                 * @interface IUpgradeNote
                 * @property {string|null} ["package"] UpgradeNote package
                 * @property {grafeas.v1.IVersion|null} [version] UpgradeNote version
                 * @property {Array.<grafeas.v1.IUpgradeDistribution>|null} [distributions] UpgradeNote distributions
                 * @property {grafeas.v1.IWindowsUpdate|null} [windowsUpdate] UpgradeNote windowsUpdate
                 */
    
                /**
                 * Constructs a new UpgradeNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents an UpgradeNote.
                 * @implements IUpgradeNote
                 * @constructor
                 * @param {grafeas.v1.IUpgradeNote=} [properties] Properties to set
                 */
                function UpgradeNote(properties) {
                    this.distributions = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpgradeNote package.
                 * @member {string} package
                 * @memberof grafeas.v1.UpgradeNote
                 * @instance
                 */
                UpgradeNote.prototype["package"] = "";
    
                /**
                 * UpgradeNote version.
                 * @member {grafeas.v1.IVersion|null|undefined} version
                 * @memberof grafeas.v1.UpgradeNote
                 * @instance
                 */
                UpgradeNote.prototype.version = null;
    
                /**
                 * UpgradeNote distributions.
                 * @member {Array.<grafeas.v1.IUpgradeDistribution>} distributions
                 * @memberof grafeas.v1.UpgradeNote
                 * @instance
                 */
                UpgradeNote.prototype.distributions = $util.emptyArray;
    
                /**
                 * UpgradeNote windowsUpdate.
                 * @member {grafeas.v1.IWindowsUpdate|null|undefined} windowsUpdate
                 * @memberof grafeas.v1.UpgradeNote
                 * @instance
                 */
                UpgradeNote.prototype.windowsUpdate = null;
    
                /**
                 * Creates a new UpgradeNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {grafeas.v1.IUpgradeNote=} [properties] Properties to set
                 * @returns {grafeas.v1.UpgradeNote} UpgradeNote instance
                 */
                UpgradeNote.create = function create(properties) {
                    return new UpgradeNote(properties);
                };
    
                /**
                 * Encodes the specified UpgradeNote message. Does not implicitly {@link grafeas.v1.UpgradeNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {grafeas.v1.IUpgradeNote} message UpgradeNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["package"]);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.grafeas.v1.Version.encode(message.version, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.distributions != null && message.distributions.length)
                        for (var i = 0; i < message.distributions.length; ++i)
                            $root.grafeas.v1.UpgradeDistribution.encode(message.distributions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.windowsUpdate != null && Object.hasOwnProperty.call(message, "windowsUpdate"))
                        $root.grafeas.v1.WindowsUpdate.encode(message.windowsUpdate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpgradeNote message, length delimited. Does not implicitly {@link grafeas.v1.UpgradeNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {grafeas.v1.IUpgradeNote} message UpgradeNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpgradeNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.UpgradeNote} UpgradeNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.UpgradeNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 2: {
                                message.version = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.distributions && message.distributions.length))
                                    message.distributions = [];
                                message.distributions.push($root.grafeas.v1.UpgradeDistribution.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.windowsUpdate = $root.grafeas.v1.WindowsUpdate.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpgradeNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.UpgradeNote} UpgradeNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpgradeNote message.
                 * @function verify
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpgradeNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.grafeas.v1.Version.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    if (message.distributions != null && message.hasOwnProperty("distributions")) {
                        if (!Array.isArray(message.distributions))
                            return "distributions: array expected";
                        for (var i = 0; i < message.distributions.length; ++i) {
                            var error = $root.grafeas.v1.UpgradeDistribution.verify(message.distributions[i]);
                            if (error)
                                return "distributions." + error;
                        }
                    }
                    if (message.windowsUpdate != null && message.hasOwnProperty("windowsUpdate")) {
                        var error = $root.grafeas.v1.WindowsUpdate.verify(message.windowsUpdate);
                        if (error)
                            return "windowsUpdate." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpgradeNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.UpgradeNote} UpgradeNote
                 */
                UpgradeNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.UpgradeNote)
                        return object;
                    var message = new $root.grafeas.v1.UpgradeNote();
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".grafeas.v1.UpgradeNote.version: object expected");
                        message.version = $root.grafeas.v1.Version.fromObject(object.version);
                    }
                    if (object.distributions) {
                        if (!Array.isArray(object.distributions))
                            throw TypeError(".grafeas.v1.UpgradeNote.distributions: array expected");
                        message.distributions = [];
                        for (var i = 0; i < object.distributions.length; ++i) {
                            if (typeof object.distributions[i] !== "object")
                                throw TypeError(".grafeas.v1.UpgradeNote.distributions: object expected");
                            message.distributions[i] = $root.grafeas.v1.UpgradeDistribution.fromObject(object.distributions[i]);
                        }
                    }
                    if (object.windowsUpdate != null) {
                        if (typeof object.windowsUpdate !== "object")
                            throw TypeError(".grafeas.v1.UpgradeNote.windowsUpdate: object expected");
                        message.windowsUpdate = $root.grafeas.v1.WindowsUpdate.fromObject(object.windowsUpdate);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpgradeNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {grafeas.v1.UpgradeNote} message UpgradeNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpgradeNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.distributions = [];
                    if (options.defaults) {
                        object["package"] = "";
                        object.version = null;
                        object.windowsUpdate = null;
                    }
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.grafeas.v1.Version.toObject(message.version, options);
                    if (message.distributions && message.distributions.length) {
                        object.distributions = [];
                        for (var j = 0; j < message.distributions.length; ++j)
                            object.distributions[j] = $root.grafeas.v1.UpgradeDistribution.toObject(message.distributions[j], options);
                    }
                    if (message.windowsUpdate != null && message.hasOwnProperty("windowsUpdate"))
                        object.windowsUpdate = $root.grafeas.v1.WindowsUpdate.toObject(message.windowsUpdate, options);
                    return object;
                };
    
                /**
                 * Converts this UpgradeNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.UpgradeNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpgradeNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpgradeNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.UpgradeNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpgradeNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.UpgradeNote";
                };
    
                return UpgradeNote;
            })();
    
            v1.UpgradeDistribution = (function() {
    
                /**
                 * Properties of an UpgradeDistribution.
                 * @memberof grafeas.v1
                 * @interface IUpgradeDistribution
                 * @property {string|null} [cpeUri] UpgradeDistribution cpeUri
                 * @property {string|null} [classification] UpgradeDistribution classification
                 * @property {string|null} [severity] UpgradeDistribution severity
                 * @property {Array.<string>|null} [cve] UpgradeDistribution cve
                 */
    
                /**
                 * Constructs a new UpgradeDistribution.
                 * @memberof grafeas.v1
                 * @classdesc Represents an UpgradeDistribution.
                 * @implements IUpgradeDistribution
                 * @constructor
                 * @param {grafeas.v1.IUpgradeDistribution=} [properties] Properties to set
                 */
                function UpgradeDistribution(properties) {
                    this.cve = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpgradeDistribution cpeUri.
                 * @member {string} cpeUri
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @instance
                 */
                UpgradeDistribution.prototype.cpeUri = "";
    
                /**
                 * UpgradeDistribution classification.
                 * @member {string} classification
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @instance
                 */
                UpgradeDistribution.prototype.classification = "";
    
                /**
                 * UpgradeDistribution severity.
                 * @member {string} severity
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @instance
                 */
                UpgradeDistribution.prototype.severity = "";
    
                /**
                 * UpgradeDistribution cve.
                 * @member {Array.<string>} cve
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @instance
                 */
                UpgradeDistribution.prototype.cve = $util.emptyArray;
    
                /**
                 * Creates a new UpgradeDistribution instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {grafeas.v1.IUpgradeDistribution=} [properties] Properties to set
                 * @returns {grafeas.v1.UpgradeDistribution} UpgradeDistribution instance
                 */
                UpgradeDistribution.create = function create(properties) {
                    return new UpgradeDistribution(properties);
                };
    
                /**
                 * Encodes the specified UpgradeDistribution message. Does not implicitly {@link grafeas.v1.UpgradeDistribution.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {grafeas.v1.IUpgradeDistribution} message UpgradeDistribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeDistribution.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                    if (message.classification != null && Object.hasOwnProperty.call(message, "classification"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.classification);
                    if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.severity);
                    if (message.cve != null && message.cve.length)
                        for (var i = 0; i < message.cve.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cve[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified UpgradeDistribution message, length delimited. Does not implicitly {@link grafeas.v1.UpgradeDistribution.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {grafeas.v1.IUpgradeDistribution} message UpgradeDistribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeDistribution.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpgradeDistribution message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.UpgradeDistribution} UpgradeDistribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeDistribution.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.UpgradeDistribution();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cpeUri = reader.string();
                                break;
                            }
                        case 2: {
                                message.classification = reader.string();
                                break;
                            }
                        case 3: {
                                message.severity = reader.string();
                                break;
                            }
                        case 4: {
                                if (!(message.cve && message.cve.length))
                                    message.cve = [];
                                message.cve.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpgradeDistribution message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.UpgradeDistribution} UpgradeDistribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeDistribution.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpgradeDistribution message.
                 * @function verify
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpgradeDistribution.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        if (!$util.isString(message.cpeUri))
                            return "cpeUri: string expected";
                    if (message.classification != null && message.hasOwnProperty("classification"))
                        if (!$util.isString(message.classification))
                            return "classification: string expected";
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        if (!$util.isString(message.severity))
                            return "severity: string expected";
                    if (message.cve != null && message.hasOwnProperty("cve")) {
                        if (!Array.isArray(message.cve))
                            return "cve: array expected";
                        for (var i = 0; i < message.cve.length; ++i)
                            if (!$util.isString(message.cve[i]))
                                return "cve: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an UpgradeDistribution message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.UpgradeDistribution} UpgradeDistribution
                 */
                UpgradeDistribution.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.UpgradeDistribution)
                        return object;
                    var message = new $root.grafeas.v1.UpgradeDistribution();
                    if (object.cpeUri != null)
                        message.cpeUri = String(object.cpeUri);
                    if (object.classification != null)
                        message.classification = String(object.classification);
                    if (object.severity != null)
                        message.severity = String(object.severity);
                    if (object.cve) {
                        if (!Array.isArray(object.cve))
                            throw TypeError(".grafeas.v1.UpgradeDistribution.cve: array expected");
                        message.cve = [];
                        for (var i = 0; i < object.cve.length; ++i)
                            message.cve[i] = String(object.cve[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpgradeDistribution message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {grafeas.v1.UpgradeDistribution} message UpgradeDistribution
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpgradeDistribution.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.cve = [];
                    if (options.defaults) {
                        object.cpeUri = "";
                        object.classification = "";
                        object.severity = "";
                    }
                    if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                        object.cpeUri = message.cpeUri;
                    if (message.classification != null && message.hasOwnProperty("classification"))
                        object.classification = message.classification;
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        object.severity = message.severity;
                    if (message.cve && message.cve.length) {
                        object.cve = [];
                        for (var j = 0; j < message.cve.length; ++j)
                            object.cve[j] = message.cve[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this UpgradeDistribution to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpgradeDistribution.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpgradeDistribution
                 * @function getTypeUrl
                 * @memberof grafeas.v1.UpgradeDistribution
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpgradeDistribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.UpgradeDistribution";
                };
    
                return UpgradeDistribution;
            })();
    
            v1.WindowsUpdate = (function() {
    
                /**
                 * Properties of a WindowsUpdate.
                 * @memberof grafeas.v1
                 * @interface IWindowsUpdate
                 * @property {grafeas.v1.WindowsUpdate.IIdentity|null} [identity] WindowsUpdate identity
                 * @property {string|null} [title] WindowsUpdate title
                 * @property {string|null} [description] WindowsUpdate description
                 * @property {Array.<grafeas.v1.WindowsUpdate.ICategory>|null} [categories] WindowsUpdate categories
                 * @property {Array.<string>|null} [kbArticleIds] WindowsUpdate kbArticleIds
                 * @property {string|null} [supportUrl] WindowsUpdate supportUrl
                 * @property {google.protobuf.ITimestamp|null} [lastPublishedTimestamp] WindowsUpdate lastPublishedTimestamp
                 */
    
                /**
                 * Constructs a new WindowsUpdate.
                 * @memberof grafeas.v1
                 * @classdesc Represents a WindowsUpdate.
                 * @implements IWindowsUpdate
                 * @constructor
                 * @param {grafeas.v1.IWindowsUpdate=} [properties] Properties to set
                 */
                function WindowsUpdate(properties) {
                    this.categories = [];
                    this.kbArticleIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WindowsUpdate identity.
                 * @member {grafeas.v1.WindowsUpdate.IIdentity|null|undefined} identity
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.identity = null;
    
                /**
                 * WindowsUpdate title.
                 * @member {string} title
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.title = "";
    
                /**
                 * WindowsUpdate description.
                 * @member {string} description
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.description = "";
    
                /**
                 * WindowsUpdate categories.
                 * @member {Array.<grafeas.v1.WindowsUpdate.ICategory>} categories
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.categories = $util.emptyArray;
    
                /**
                 * WindowsUpdate kbArticleIds.
                 * @member {Array.<string>} kbArticleIds
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.kbArticleIds = $util.emptyArray;
    
                /**
                 * WindowsUpdate supportUrl.
                 * @member {string} supportUrl
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.supportUrl = "";
    
                /**
                 * WindowsUpdate lastPublishedTimestamp.
                 * @member {google.protobuf.ITimestamp|null|undefined} lastPublishedTimestamp
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 */
                WindowsUpdate.prototype.lastPublishedTimestamp = null;
    
                /**
                 * Creates a new WindowsUpdate instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {grafeas.v1.IWindowsUpdate=} [properties] Properties to set
                 * @returns {grafeas.v1.WindowsUpdate} WindowsUpdate instance
                 */
                WindowsUpdate.create = function create(properties) {
                    return new WindowsUpdate(properties);
                };
    
                /**
                 * Encodes the specified WindowsUpdate message. Does not implicitly {@link grafeas.v1.WindowsUpdate.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {grafeas.v1.IWindowsUpdate} message WindowsUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WindowsUpdate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.identity != null && Object.hasOwnProperty.call(message, "identity"))
                        $root.grafeas.v1.WindowsUpdate.Identity.encode(message.identity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.categories != null && message.categories.length)
                        for (var i = 0; i < message.categories.length; ++i)
                            $root.grafeas.v1.WindowsUpdate.Category.encode(message.categories[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.kbArticleIds != null && message.kbArticleIds.length)
                        for (var i = 0; i < message.kbArticleIds.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.kbArticleIds[i]);
                    if (message.supportUrl != null && Object.hasOwnProperty.call(message, "supportUrl"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.supportUrl);
                    if (message.lastPublishedTimestamp != null && Object.hasOwnProperty.call(message, "lastPublishedTimestamp"))
                        $root.google.protobuf.Timestamp.encode(message.lastPublishedTimestamp, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WindowsUpdate message, length delimited. Does not implicitly {@link grafeas.v1.WindowsUpdate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {grafeas.v1.IWindowsUpdate} message WindowsUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WindowsUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WindowsUpdate message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.WindowsUpdate} WindowsUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WindowsUpdate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.WindowsUpdate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.identity = $root.grafeas.v1.WindowsUpdate.Identity.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.title = reader.string();
                                break;
                            }
                        case 3: {
                                message.description = reader.string();
                                break;
                            }
                        case 4: {
                                if (!(message.categories && message.categories.length))
                                    message.categories = [];
                                message.categories.push($root.grafeas.v1.WindowsUpdate.Category.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.kbArticleIds && message.kbArticleIds.length))
                                    message.kbArticleIds = [];
                                message.kbArticleIds.push(reader.string());
                                break;
                            }
                        case 6: {
                                message.supportUrl = reader.string();
                                break;
                            }
                        case 7: {
                                message.lastPublishedTimestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WindowsUpdate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.WindowsUpdate} WindowsUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WindowsUpdate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WindowsUpdate message.
                 * @function verify
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WindowsUpdate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.identity != null && message.hasOwnProperty("identity")) {
                        var error = $root.grafeas.v1.WindowsUpdate.Identity.verify(message.identity);
                        if (error)
                            return "identity." + error;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.categories != null && message.hasOwnProperty("categories")) {
                        if (!Array.isArray(message.categories))
                            return "categories: array expected";
                        for (var i = 0; i < message.categories.length; ++i) {
                            var error = $root.grafeas.v1.WindowsUpdate.Category.verify(message.categories[i]);
                            if (error)
                                return "categories." + error;
                        }
                    }
                    if (message.kbArticleIds != null && message.hasOwnProperty("kbArticleIds")) {
                        if (!Array.isArray(message.kbArticleIds))
                            return "kbArticleIds: array expected";
                        for (var i = 0; i < message.kbArticleIds.length; ++i)
                            if (!$util.isString(message.kbArticleIds[i]))
                                return "kbArticleIds: string[] expected";
                    }
                    if (message.supportUrl != null && message.hasOwnProperty("supportUrl"))
                        if (!$util.isString(message.supportUrl))
                            return "supportUrl: string expected";
                    if (message.lastPublishedTimestamp != null && message.hasOwnProperty("lastPublishedTimestamp")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.lastPublishedTimestamp);
                        if (error)
                            return "lastPublishedTimestamp." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WindowsUpdate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.WindowsUpdate} WindowsUpdate
                 */
                WindowsUpdate.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.WindowsUpdate)
                        return object;
                    var message = new $root.grafeas.v1.WindowsUpdate();
                    if (object.identity != null) {
                        if (typeof object.identity !== "object")
                            throw TypeError(".grafeas.v1.WindowsUpdate.identity: object expected");
                        message.identity = $root.grafeas.v1.WindowsUpdate.Identity.fromObject(object.identity);
                    }
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.categories) {
                        if (!Array.isArray(object.categories))
                            throw TypeError(".grafeas.v1.WindowsUpdate.categories: array expected");
                        message.categories = [];
                        for (var i = 0; i < object.categories.length; ++i) {
                            if (typeof object.categories[i] !== "object")
                                throw TypeError(".grafeas.v1.WindowsUpdate.categories: object expected");
                            message.categories[i] = $root.grafeas.v1.WindowsUpdate.Category.fromObject(object.categories[i]);
                        }
                    }
                    if (object.kbArticleIds) {
                        if (!Array.isArray(object.kbArticleIds))
                            throw TypeError(".grafeas.v1.WindowsUpdate.kbArticleIds: array expected");
                        message.kbArticleIds = [];
                        for (var i = 0; i < object.kbArticleIds.length; ++i)
                            message.kbArticleIds[i] = String(object.kbArticleIds[i]);
                    }
                    if (object.supportUrl != null)
                        message.supportUrl = String(object.supportUrl);
                    if (object.lastPublishedTimestamp != null) {
                        if (typeof object.lastPublishedTimestamp !== "object")
                            throw TypeError(".grafeas.v1.WindowsUpdate.lastPublishedTimestamp: object expected");
                        message.lastPublishedTimestamp = $root.google.protobuf.Timestamp.fromObject(object.lastPublishedTimestamp);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WindowsUpdate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {grafeas.v1.WindowsUpdate} message WindowsUpdate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WindowsUpdate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.categories = [];
                        object.kbArticleIds = [];
                    }
                    if (options.defaults) {
                        object.identity = null;
                        object.title = "";
                        object.description = "";
                        object.supportUrl = "";
                        object.lastPublishedTimestamp = null;
                    }
                    if (message.identity != null && message.hasOwnProperty("identity"))
                        object.identity = $root.grafeas.v1.WindowsUpdate.Identity.toObject(message.identity, options);
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.categories && message.categories.length) {
                        object.categories = [];
                        for (var j = 0; j < message.categories.length; ++j)
                            object.categories[j] = $root.grafeas.v1.WindowsUpdate.Category.toObject(message.categories[j], options);
                    }
                    if (message.kbArticleIds && message.kbArticleIds.length) {
                        object.kbArticleIds = [];
                        for (var j = 0; j < message.kbArticleIds.length; ++j)
                            object.kbArticleIds[j] = message.kbArticleIds[j];
                    }
                    if (message.supportUrl != null && message.hasOwnProperty("supportUrl"))
                        object.supportUrl = message.supportUrl;
                    if (message.lastPublishedTimestamp != null && message.hasOwnProperty("lastPublishedTimestamp"))
                        object.lastPublishedTimestamp = $root.google.protobuf.Timestamp.toObject(message.lastPublishedTimestamp, options);
                    return object;
                };
    
                /**
                 * Converts this WindowsUpdate to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.WindowsUpdate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WindowsUpdate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for WindowsUpdate
                 * @function getTypeUrl
                 * @memberof grafeas.v1.WindowsUpdate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                WindowsUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.WindowsUpdate";
                };
    
                WindowsUpdate.Identity = (function() {
    
                    /**
                     * Properties of an Identity.
                     * @memberof grafeas.v1.WindowsUpdate
                     * @interface IIdentity
                     * @property {string|null} [updateId] Identity updateId
                     * @property {number|null} [revision] Identity revision
                     */
    
                    /**
                     * Constructs a new Identity.
                     * @memberof grafeas.v1.WindowsUpdate
                     * @classdesc Represents an Identity.
                     * @implements IIdentity
                     * @constructor
                     * @param {grafeas.v1.WindowsUpdate.IIdentity=} [properties] Properties to set
                     */
                    function Identity(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Identity updateId.
                     * @member {string} updateId
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @instance
                     */
                    Identity.prototype.updateId = "";
    
                    /**
                     * Identity revision.
                     * @member {number} revision
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @instance
                     */
                    Identity.prototype.revision = 0;
    
                    /**
                     * Creates a new Identity instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.IIdentity=} [properties] Properties to set
                     * @returns {grafeas.v1.WindowsUpdate.Identity} Identity instance
                     */
                    Identity.create = function create(properties) {
                        return new Identity(properties);
                    };
    
                    /**
                     * Encodes the specified Identity message. Does not implicitly {@link grafeas.v1.WindowsUpdate.Identity.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.IIdentity} message Identity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Identity.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.updateId != null && Object.hasOwnProperty.call(message, "updateId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.updateId);
                        if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.revision);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Identity message, length delimited. Does not implicitly {@link grafeas.v1.WindowsUpdate.Identity.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.IIdentity} message Identity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Identity.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Identity message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.WindowsUpdate.Identity} Identity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Identity.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.WindowsUpdate.Identity();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.updateId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.revision = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Identity message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.WindowsUpdate.Identity} Identity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Identity.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Identity message.
                     * @function verify
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Identity.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.updateId != null && message.hasOwnProperty("updateId"))
                            if (!$util.isString(message.updateId))
                                return "updateId: string expected";
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            if (!$util.isInteger(message.revision))
                                return "revision: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Identity message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.WindowsUpdate.Identity} Identity
                     */
                    Identity.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.WindowsUpdate.Identity)
                            return object;
                        var message = new $root.grafeas.v1.WindowsUpdate.Identity();
                        if (object.updateId != null)
                            message.updateId = String(object.updateId);
                        if (object.revision != null)
                            message.revision = object.revision | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Identity message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.Identity} message Identity
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Identity.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.updateId = "";
                            object.revision = 0;
                        }
                        if (message.updateId != null && message.hasOwnProperty("updateId"))
                            object.updateId = message.updateId;
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            object.revision = message.revision;
                        return object;
                    };
    
                    /**
                     * Converts this Identity to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Identity.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Identity
                     * @function getTypeUrl
                     * @memberof grafeas.v1.WindowsUpdate.Identity
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Identity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.WindowsUpdate.Identity";
                    };
    
                    return Identity;
                })();
    
                WindowsUpdate.Category = (function() {
    
                    /**
                     * Properties of a Category.
                     * @memberof grafeas.v1.WindowsUpdate
                     * @interface ICategory
                     * @property {string|null} [categoryId] Category categoryId
                     * @property {string|null} [name] Category name
                     */
    
                    /**
                     * Constructs a new Category.
                     * @memberof grafeas.v1.WindowsUpdate
                     * @classdesc Represents a Category.
                     * @implements ICategory
                     * @constructor
                     * @param {grafeas.v1.WindowsUpdate.ICategory=} [properties] Properties to set
                     */
                    function Category(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Category categoryId.
                     * @member {string} categoryId
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @instance
                     */
                    Category.prototype.categoryId = "";
    
                    /**
                     * Category name.
                     * @member {string} name
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @instance
                     */
                    Category.prototype.name = "";
    
                    /**
                     * Creates a new Category instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.ICategory=} [properties] Properties to set
                     * @returns {grafeas.v1.WindowsUpdate.Category} Category instance
                     */
                    Category.create = function create(properties) {
                        return new Category(properties);
                    };
    
                    /**
                     * Encodes the specified Category message. Does not implicitly {@link grafeas.v1.WindowsUpdate.Category.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.ICategory} message Category message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Category.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.categoryId != null && Object.hasOwnProperty.call(message, "categoryId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.categoryId);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Category message, length delimited. Does not implicitly {@link grafeas.v1.WindowsUpdate.Category.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.ICategory} message Category message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Category.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Category message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.WindowsUpdate.Category} Category
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Category.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.WindowsUpdate.Category();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.categoryId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Category message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.WindowsUpdate.Category} Category
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Category.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Category message.
                     * @function verify
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Category.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            if (!$util.isString(message.categoryId))
                                return "categoryId: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Category message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.WindowsUpdate.Category} Category
                     */
                    Category.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.WindowsUpdate.Category)
                            return object;
                        var message = new $root.grafeas.v1.WindowsUpdate.Category();
                        if (object.categoryId != null)
                            message.categoryId = String(object.categoryId);
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Category message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {grafeas.v1.WindowsUpdate.Category} message Category
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Category.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.categoryId = "";
                            object.name = "";
                        }
                        if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                            object.categoryId = message.categoryId;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this Category to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Category.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Category
                     * @function getTypeUrl
                     * @memberof grafeas.v1.WindowsUpdate.Category
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Category.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.WindowsUpdate.Category";
                    };
    
                    return Category;
                })();
    
                return WindowsUpdate;
            })();
    
            v1.UpgradeOccurrence = (function() {
    
                /**
                 * Properties of an UpgradeOccurrence.
                 * @memberof grafeas.v1
                 * @interface IUpgradeOccurrence
                 * @property {string|null} ["package"] UpgradeOccurrence package
                 * @property {grafeas.v1.IVersion|null} [parsedVersion] UpgradeOccurrence parsedVersion
                 * @property {grafeas.v1.IUpgradeDistribution|null} [distribution] UpgradeOccurrence distribution
                 * @property {grafeas.v1.IWindowsUpdate|null} [windowsUpdate] UpgradeOccurrence windowsUpdate
                 */
    
                /**
                 * Constructs a new UpgradeOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents an UpgradeOccurrence.
                 * @implements IUpgradeOccurrence
                 * @constructor
                 * @param {grafeas.v1.IUpgradeOccurrence=} [properties] Properties to set
                 */
                function UpgradeOccurrence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpgradeOccurrence package.
                 * @member {string} package
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @instance
                 */
                UpgradeOccurrence.prototype["package"] = "";
    
                /**
                 * UpgradeOccurrence parsedVersion.
                 * @member {grafeas.v1.IVersion|null|undefined} parsedVersion
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @instance
                 */
                UpgradeOccurrence.prototype.parsedVersion = null;
    
                /**
                 * UpgradeOccurrence distribution.
                 * @member {grafeas.v1.IUpgradeDistribution|null|undefined} distribution
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @instance
                 */
                UpgradeOccurrence.prototype.distribution = null;
    
                /**
                 * UpgradeOccurrence windowsUpdate.
                 * @member {grafeas.v1.IWindowsUpdate|null|undefined} windowsUpdate
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @instance
                 */
                UpgradeOccurrence.prototype.windowsUpdate = null;
    
                /**
                 * Creates a new UpgradeOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {grafeas.v1.IUpgradeOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.UpgradeOccurrence} UpgradeOccurrence instance
                 */
                UpgradeOccurrence.create = function create(properties) {
                    return new UpgradeOccurrence(properties);
                };
    
                /**
                 * Encodes the specified UpgradeOccurrence message. Does not implicitly {@link grafeas.v1.UpgradeOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {grafeas.v1.IUpgradeOccurrence} message UpgradeOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["package"]);
                    if (message.parsedVersion != null && Object.hasOwnProperty.call(message, "parsedVersion"))
                        $root.grafeas.v1.Version.encode(message.parsedVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.distribution != null && Object.hasOwnProperty.call(message, "distribution"))
                        $root.grafeas.v1.UpgradeDistribution.encode(message.distribution, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.windowsUpdate != null && Object.hasOwnProperty.call(message, "windowsUpdate"))
                        $root.grafeas.v1.WindowsUpdate.encode(message.windowsUpdate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpgradeOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.UpgradeOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {grafeas.v1.IUpgradeOccurrence} message UpgradeOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpgradeOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpgradeOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.UpgradeOccurrence} UpgradeOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.UpgradeOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                message.parsedVersion = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.distribution = $root.grafeas.v1.UpgradeDistribution.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.windowsUpdate = $root.grafeas.v1.WindowsUpdate.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpgradeOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.UpgradeOccurrence} UpgradeOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpgradeOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpgradeOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpgradeOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.parsedVersion != null && message.hasOwnProperty("parsedVersion")) {
                        var error = $root.grafeas.v1.Version.verify(message.parsedVersion);
                        if (error)
                            return "parsedVersion." + error;
                    }
                    if (message.distribution != null && message.hasOwnProperty("distribution")) {
                        var error = $root.grafeas.v1.UpgradeDistribution.verify(message.distribution);
                        if (error)
                            return "distribution." + error;
                    }
                    if (message.windowsUpdate != null && message.hasOwnProperty("windowsUpdate")) {
                        var error = $root.grafeas.v1.WindowsUpdate.verify(message.windowsUpdate);
                        if (error)
                            return "windowsUpdate." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpgradeOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.UpgradeOccurrence} UpgradeOccurrence
                 */
                UpgradeOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.UpgradeOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.UpgradeOccurrence();
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.parsedVersion != null) {
                        if (typeof object.parsedVersion !== "object")
                            throw TypeError(".grafeas.v1.UpgradeOccurrence.parsedVersion: object expected");
                        message.parsedVersion = $root.grafeas.v1.Version.fromObject(object.parsedVersion);
                    }
                    if (object.distribution != null) {
                        if (typeof object.distribution !== "object")
                            throw TypeError(".grafeas.v1.UpgradeOccurrence.distribution: object expected");
                        message.distribution = $root.grafeas.v1.UpgradeDistribution.fromObject(object.distribution);
                    }
                    if (object.windowsUpdate != null) {
                        if (typeof object.windowsUpdate !== "object")
                            throw TypeError(".grafeas.v1.UpgradeOccurrence.windowsUpdate: object expected");
                        message.windowsUpdate = $root.grafeas.v1.WindowsUpdate.fromObject(object.windowsUpdate);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpgradeOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {grafeas.v1.UpgradeOccurrence} message UpgradeOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpgradeOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object["package"] = "";
                        object.parsedVersion = null;
                        object.distribution = null;
                        object.windowsUpdate = null;
                    }
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.parsedVersion != null && message.hasOwnProperty("parsedVersion"))
                        object.parsedVersion = $root.grafeas.v1.Version.toObject(message.parsedVersion, options);
                    if (message.distribution != null && message.hasOwnProperty("distribution"))
                        object.distribution = $root.grafeas.v1.UpgradeDistribution.toObject(message.distribution, options);
                    if (message.windowsUpdate != null && message.hasOwnProperty("windowsUpdate"))
                        object.windowsUpdate = $root.grafeas.v1.WindowsUpdate.toObject(message.windowsUpdate, options);
                    return object;
                };
    
                /**
                 * Converts this UpgradeOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpgradeOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpgradeOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.UpgradeOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpgradeOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.UpgradeOccurrence";
                };
    
                return UpgradeOccurrence;
            })();
    
            v1.VulnerabilityAssessmentNote = (function() {
    
                /**
                 * Properties of a VulnerabilityAssessmentNote.
                 * @memberof grafeas.v1
                 * @interface IVulnerabilityAssessmentNote
                 * @property {string|null} [title] VulnerabilityAssessmentNote title
                 * @property {string|null} [shortDescription] VulnerabilityAssessmentNote shortDescription
                 * @property {string|null} [longDescription] VulnerabilityAssessmentNote longDescription
                 * @property {string|null} [languageCode] VulnerabilityAssessmentNote languageCode
                 * @property {grafeas.v1.VulnerabilityAssessmentNote.IPublisher|null} [publisher] VulnerabilityAssessmentNote publisher
                 * @property {grafeas.v1.VulnerabilityAssessmentNote.IProduct|null} [product] VulnerabilityAssessmentNote product
                 * @property {grafeas.v1.VulnerabilityAssessmentNote.IAssessment|null} [assessment] VulnerabilityAssessmentNote assessment
                 */
    
                /**
                 * Constructs a new VulnerabilityAssessmentNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a VulnerabilityAssessmentNote.
                 * @implements IVulnerabilityAssessmentNote
                 * @constructor
                 * @param {grafeas.v1.IVulnerabilityAssessmentNote=} [properties] Properties to set
                 */
                function VulnerabilityAssessmentNote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VulnerabilityAssessmentNote title.
                 * @member {string} title
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.title = "";
    
                /**
                 * VulnerabilityAssessmentNote shortDescription.
                 * @member {string} shortDescription
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.shortDescription = "";
    
                /**
                 * VulnerabilityAssessmentNote longDescription.
                 * @member {string} longDescription
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.longDescription = "";
    
                /**
                 * VulnerabilityAssessmentNote languageCode.
                 * @member {string} languageCode
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.languageCode = "";
    
                /**
                 * VulnerabilityAssessmentNote publisher.
                 * @member {grafeas.v1.VulnerabilityAssessmentNote.IPublisher|null|undefined} publisher
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.publisher = null;
    
                /**
                 * VulnerabilityAssessmentNote product.
                 * @member {grafeas.v1.VulnerabilityAssessmentNote.IProduct|null|undefined} product
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.product = null;
    
                /**
                 * VulnerabilityAssessmentNote assessment.
                 * @member {grafeas.v1.VulnerabilityAssessmentNote.IAssessment|null|undefined} assessment
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 */
                VulnerabilityAssessmentNote.prototype.assessment = null;
    
                /**
                 * Creates a new VulnerabilityAssessmentNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityAssessmentNote=} [properties] Properties to set
                 * @returns {grafeas.v1.VulnerabilityAssessmentNote} VulnerabilityAssessmentNote instance
                 */
                VulnerabilityAssessmentNote.create = function create(properties) {
                    return new VulnerabilityAssessmentNote(properties);
                };
    
                /**
                 * Encodes the specified VulnerabilityAssessmentNote message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityAssessmentNote} message VulnerabilityAssessmentNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityAssessmentNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.shortDescription);
                    if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.longDescription);
                    if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.languageCode);
                    if (message.publisher != null && Object.hasOwnProperty.call(message, "publisher"))
                        $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher.encode(message.publisher, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.product != null && Object.hasOwnProperty.call(message, "product"))
                        $root.grafeas.v1.VulnerabilityAssessmentNote.Product.encode(message.product, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.assessment != null && Object.hasOwnProperty.call(message, "assessment"))
                        $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.encode(message.assessment, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VulnerabilityAssessmentNote message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityAssessmentNote} message VulnerabilityAssessmentNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityAssessmentNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VulnerabilityAssessmentNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.VulnerabilityAssessmentNote} VulnerabilityAssessmentNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityAssessmentNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                message.shortDescription = reader.string();
                                break;
                            }
                        case 3: {
                                message.longDescription = reader.string();
                                break;
                            }
                        case 4: {
                                message.languageCode = reader.string();
                                break;
                            }
                        case 5: {
                                message.publisher = $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.product = $root.grafeas.v1.VulnerabilityAssessmentNote.Product.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.assessment = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VulnerabilityAssessmentNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.VulnerabilityAssessmentNote} VulnerabilityAssessmentNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityAssessmentNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VulnerabilityAssessmentNote message.
                 * @function verify
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VulnerabilityAssessmentNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        if (!$util.isString(message.shortDescription))
                            return "shortDescription: string expected";
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        if (!$util.isString(message.longDescription))
                            return "longDescription: string expected";
                    if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                        if (!$util.isString(message.languageCode))
                            return "languageCode: string expected";
                    if (message.publisher != null && message.hasOwnProperty("publisher")) {
                        var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher.verify(message.publisher);
                        if (error)
                            return "publisher." + error;
                    }
                    if (message.product != null && message.hasOwnProperty("product")) {
                        var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Product.verify(message.product);
                        if (error)
                            return "product." + error;
                    }
                    if (message.assessment != null && message.hasOwnProperty("assessment")) {
                        var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.verify(message.assessment);
                        if (error)
                            return "assessment." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VulnerabilityAssessmentNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.VulnerabilityAssessmentNote} VulnerabilityAssessmentNote
                 */
                VulnerabilityAssessmentNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote)
                        return object;
                    var message = new $root.grafeas.v1.VulnerabilityAssessmentNote();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.shortDescription != null)
                        message.shortDescription = String(object.shortDescription);
                    if (object.longDescription != null)
                        message.longDescription = String(object.longDescription);
                    if (object.languageCode != null)
                        message.languageCode = String(object.languageCode);
                    if (object.publisher != null) {
                        if (typeof object.publisher !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.publisher: object expected");
                        message.publisher = $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher.fromObject(object.publisher);
                    }
                    if (object.product != null) {
                        if (typeof object.product !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.product: object expected");
                        message.product = $root.grafeas.v1.VulnerabilityAssessmentNote.Product.fromObject(object.product);
                    }
                    if (object.assessment != null) {
                        if (typeof object.assessment !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.assessment: object expected");
                        message.assessment = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.fromObject(object.assessment);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VulnerabilityAssessmentNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {grafeas.v1.VulnerabilityAssessmentNote} message VulnerabilityAssessmentNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VulnerabilityAssessmentNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.shortDescription = "";
                        object.longDescription = "";
                        object.languageCode = "";
                        object.publisher = null;
                        object.product = null;
                        object.assessment = null;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        object.shortDescription = message.shortDescription;
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        object.longDescription = message.longDescription;
                    if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                        object.languageCode = message.languageCode;
                    if (message.publisher != null && message.hasOwnProperty("publisher"))
                        object.publisher = $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher.toObject(message.publisher, options);
                    if (message.product != null && message.hasOwnProperty("product"))
                        object.product = $root.grafeas.v1.VulnerabilityAssessmentNote.Product.toObject(message.product, options);
                    if (message.assessment != null && message.hasOwnProperty("assessment"))
                        object.assessment = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.toObject(message.assessment, options);
                    return object;
                };
    
                /**
                 * Converts this VulnerabilityAssessmentNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VulnerabilityAssessmentNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for VulnerabilityAssessmentNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.VulnerabilityAssessmentNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VulnerabilityAssessmentNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote";
                };
    
                VulnerabilityAssessmentNote.Publisher = (function() {
    
                    /**
                     * Properties of a Publisher.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @interface IPublisher
                     * @property {string|null} [name] Publisher name
                     * @property {string|null} [issuingAuthority] Publisher issuingAuthority
                     * @property {string|null} [publisherNamespace] Publisher publisherNamespace
                     */
    
                    /**
                     * Constructs a new Publisher.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @classdesc Represents a Publisher.
                     * @implements IPublisher
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IPublisher=} [properties] Properties to set
                     */
                    function Publisher(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Publisher name.
                     * @member {string} name
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @instance
                     */
                    Publisher.prototype.name = "";
    
                    /**
                     * Publisher issuingAuthority.
                     * @member {string} issuingAuthority
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @instance
                     */
                    Publisher.prototype.issuingAuthority = "";
    
                    /**
                     * Publisher publisherNamespace.
                     * @member {string} publisherNamespace
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @instance
                     */
                    Publisher.prototype.publisherNamespace = "";
    
                    /**
                     * Creates a new Publisher instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IPublisher=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Publisher} Publisher instance
                     */
                    Publisher.create = function create(properties) {
                        return new Publisher(properties);
                    };
    
                    /**
                     * Encodes the specified Publisher message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Publisher.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IPublisher} message Publisher message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Publisher.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.issuingAuthority != null && Object.hasOwnProperty.call(message, "issuingAuthority"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.issuingAuthority);
                        if (message.publisherNamespace != null && Object.hasOwnProperty.call(message, "publisherNamespace"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.publisherNamespace);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Publisher message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Publisher.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IPublisher} message Publisher message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Publisher.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Publisher message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Publisher} Publisher
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Publisher.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.issuingAuthority = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.publisherNamespace = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Publisher message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Publisher} Publisher
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Publisher.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Publisher message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Publisher.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.issuingAuthority != null && message.hasOwnProperty("issuingAuthority"))
                            if (!$util.isString(message.issuingAuthority))
                                return "issuingAuthority: string expected";
                        if (message.publisherNamespace != null && message.hasOwnProperty("publisherNamespace"))
                            if (!$util.isString(message.publisherNamespace))
                                return "publisherNamespace: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Publisher message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Publisher} Publisher
                     */
                    Publisher.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Publisher();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.issuingAuthority != null)
                            message.issuingAuthority = String(object.issuingAuthority);
                        if (object.publisherNamespace != null)
                            message.publisherNamespace = String(object.publisherNamespace);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Publisher message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.Publisher} message Publisher
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Publisher.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.issuingAuthority = "";
                            object.publisherNamespace = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.issuingAuthority != null && message.hasOwnProperty("issuingAuthority"))
                            object.issuingAuthority = message.issuingAuthority;
                        if (message.publisherNamespace != null && message.hasOwnProperty("publisherNamespace"))
                            object.publisherNamespace = message.publisherNamespace;
                        return object;
                    };
    
                    /**
                     * Converts this Publisher to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Publisher.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Publisher
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Publisher
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Publisher.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote.Publisher";
                    };
    
                    return Publisher;
                })();
    
                VulnerabilityAssessmentNote.Product = (function() {
    
                    /**
                     * Properties of a Product.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @interface IProduct
                     * @property {string|null} [name] Product name
                     * @property {string|null} [id] Product id
                     * @property {string|null} [genericUri] Product genericUri
                     */
    
                    /**
                     * Constructs a new Product.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @classdesc Represents a Product.
                     * @implements IProduct
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IProduct=} [properties] Properties to set
                     */
                    function Product(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Product name.
                     * @member {string} name
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @instance
                     */
                    Product.prototype.name = "";
    
                    /**
                     * Product id.
                     * @member {string} id
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @instance
                     */
                    Product.prototype.id = "";
    
                    /**
                     * Product genericUri.
                     * @member {string|null|undefined} genericUri
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @instance
                     */
                    Product.prototype.genericUri = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Product identifier.
                     * @member {"genericUri"|undefined} identifier
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @instance
                     */
                    Object.defineProperty(Product.prototype, "identifier", {
                        get: $util.oneOfGetter($oneOfFields = ["genericUri"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Product instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IProduct=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Product} Product instance
                     */
                    Product.create = function create(properties) {
                        return new Product(properties);
                    };
    
                    /**
                     * Encodes the specified Product message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Product.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IProduct} message Product message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Product.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
                        if (message.genericUri != null && Object.hasOwnProperty.call(message, "genericUri"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.genericUri);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Product message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Product.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IProduct} message Product message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Product.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Product message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Product} Product
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Product.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Product();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.id = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.genericUri = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Product message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Product} Product
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Product.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Product message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Product.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.genericUri != null && message.hasOwnProperty("genericUri")) {
                            properties.identifier = 1;
                            if (!$util.isString(message.genericUri))
                                return "genericUri: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Product message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Product} Product
                     */
                    Product.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote.Product)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Product();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.genericUri != null)
                            message.genericUri = String(object.genericUri);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Product message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.Product} message Product
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Product.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.id = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.genericUri != null && message.hasOwnProperty("genericUri")) {
                            object.genericUri = message.genericUri;
                            if (options.oneofs)
                                object.identifier = "genericUri";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Product to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Product.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Product
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Product
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Product.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote.Product";
                    };
    
                    return Product;
                })();
    
                VulnerabilityAssessmentNote.Assessment = (function() {
    
                    /**
                     * Properties of an Assessment.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @interface IAssessment
                     * @property {string|null} [cve] Assessment cve
                     * @property {string|null} [shortDescription] Assessment shortDescription
                     * @property {string|null} [longDescription] Assessment longDescription
                     * @property {Array.<grafeas.v1.IRelatedUrl>|null} [relatedUris] Assessment relatedUris
                     * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.State|null} [state] Assessment state
                     * @property {Array.<string>|null} [impacts] Assessment impacts
                     * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification|null} [justification] Assessment justification
                     * @property {Array.<grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation>|null} [remediations] Assessment remediations
                     */
    
                    /**
                     * Constructs a new Assessment.
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote
                     * @classdesc Represents an Assessment.
                     * @implements IAssessment
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IAssessment=} [properties] Properties to set
                     */
                    function Assessment(properties) {
                        this.relatedUris = [];
                        this.impacts = [];
                        this.remediations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Assessment cve.
                     * @member {string} cve
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.cve = "";
    
                    /**
                     * Assessment shortDescription.
                     * @member {string} shortDescription
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.shortDescription = "";
    
                    /**
                     * Assessment longDescription.
                     * @member {string} longDescription
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.longDescription = "";
    
                    /**
                     * Assessment relatedUris.
                     * @member {Array.<grafeas.v1.IRelatedUrl>} relatedUris
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.relatedUris = $util.emptyArray;
    
                    /**
                     * Assessment state.
                     * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.State} state
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.state = 0;
    
                    /**
                     * Assessment impacts.
                     * @member {Array.<string>} impacts
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.impacts = $util.emptyArray;
    
                    /**
                     * Assessment justification.
                     * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification|null|undefined} justification
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.justification = null;
    
                    /**
                     * Assessment remediations.
                     * @member {Array.<grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation>} remediations
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     */
                    Assessment.prototype.remediations = $util.emptyArray;
    
                    /**
                     * Creates a new Assessment instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IAssessment=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment} Assessment instance
                     */
                    Assessment.create = function create(properties) {
                        return new Assessment(properties);
                    };
    
                    /**
                     * Encodes the specified Assessment message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IAssessment} message Assessment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Assessment.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cve != null && Object.hasOwnProperty.call(message, "cve"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cve);
                        if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.shortDescription);
                        if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.longDescription);
                        if (message.relatedUris != null && message.relatedUris.length)
                            for (var i = 0; i < message.relatedUris.length; ++i)
                                $root.grafeas.v1.RelatedUrl.encode(message.relatedUris[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
                        if (message.impacts != null && message.impacts.length)
                            for (var i = 0; i < message.impacts.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.impacts[i]);
                        if (message.justification != null && Object.hasOwnProperty.call(message, "justification"))
                            $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.encode(message.justification, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.remediations != null && message.remediations.length)
                            for (var i = 0; i < message.remediations.length; ++i)
                                $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.encode(message.remediations[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Assessment message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.IAssessment} message Assessment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Assessment.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Assessment message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment} Assessment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Assessment.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cve = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.shortDescription = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.longDescription = reader.string();
                                    break;
                                }
                            case 4: {
                                    if (!(message.relatedUris && message.relatedUris.length))
                                        message.relatedUris = [];
                                    message.relatedUris.push($root.grafeas.v1.RelatedUrl.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 5: {
                                    message.state = reader.int32();
                                    break;
                                }
                            case 6: {
                                    if (!(message.impacts && message.impacts.length))
                                        message.impacts = [];
                                    message.impacts.push(reader.string());
                                    break;
                                }
                            case 7: {
                                    message.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    if (!(message.remediations && message.remediations.length))
                                        message.remediations = [];
                                    message.remediations.push($root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Assessment message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment} Assessment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Assessment.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Assessment message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Assessment.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cve != null && message.hasOwnProperty("cve"))
                            if (!$util.isString(message.cve))
                                return "cve: string expected";
                        if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                            if (!$util.isString(message.shortDescription))
                                return "shortDescription: string expected";
                        if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                            if (!$util.isString(message.longDescription))
                                return "longDescription: string expected";
                        if (message.relatedUris != null && message.hasOwnProperty("relatedUris")) {
                            if (!Array.isArray(message.relatedUris))
                                return "relatedUris: array expected";
                            for (var i = 0; i < message.relatedUris.length; ++i) {
                                var error = $root.grafeas.v1.RelatedUrl.verify(message.relatedUris[i]);
                                if (error)
                                    return "relatedUris." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.impacts != null && message.hasOwnProperty("impacts")) {
                            if (!Array.isArray(message.impacts))
                                return "impacts: array expected";
                            for (var i = 0; i < message.impacts.length; ++i)
                                if (!$util.isString(message.impacts[i]))
                                    return "impacts: string[] expected";
                        }
                        if (message.justification != null && message.hasOwnProperty("justification")) {
                            var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.verify(message.justification);
                            if (error)
                                return "justification." + error;
                        }
                        if (message.remediations != null && message.hasOwnProperty("remediations")) {
                            if (!Array.isArray(message.remediations))
                                return "remediations: array expected";
                            for (var i = 0; i < message.remediations.length; ++i) {
                                var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.verify(message.remediations[i]);
                                if (error)
                                    return "remediations." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Assessment message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment} Assessment
                     */
                    Assessment.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment();
                        if (object.cve != null)
                            message.cve = String(object.cve);
                        if (object.shortDescription != null)
                            message.shortDescription = String(object.shortDescription);
                        if (object.longDescription != null)
                            message.longDescription = String(object.longDescription);
                        if (object.relatedUris) {
                            if (!Array.isArray(object.relatedUris))
                                throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.relatedUris: array expected");
                            message.relatedUris = [];
                            for (var i = 0; i < object.relatedUris.length; ++i) {
                                if (typeof object.relatedUris[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.relatedUris: object expected");
                                message.relatedUris[i] = $root.grafeas.v1.RelatedUrl.fromObject(object.relatedUris[i]);
                            }
                        }
                        switch (object.state) {
                        default:
                            if (typeof object.state === "number") {
                                message.state = object.state;
                                break;
                            }
                            break;
                        case "STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "AFFECTED":
                        case 1:
                            message.state = 1;
                            break;
                        case "NOT_AFFECTED":
                        case 2:
                            message.state = 2;
                            break;
                        case "FIXED":
                        case 3:
                            message.state = 3;
                            break;
                        case "UNDER_INVESTIGATION":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        if (object.impacts) {
                            if (!Array.isArray(object.impacts))
                                throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.impacts: array expected");
                            message.impacts = [];
                            for (var i = 0; i < object.impacts.length; ++i)
                                message.impacts[i] = String(object.impacts[i]);
                        }
                        if (object.justification != null) {
                            if (typeof object.justification !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.justification: object expected");
                            message.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.fromObject(object.justification);
                        }
                        if (object.remediations) {
                            if (!Array.isArray(object.remediations))
                                throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.remediations: array expected");
                            message.remediations = [];
                            for (var i = 0; i < object.remediations.length; ++i) {
                                if (typeof object.remediations[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.remediations: object expected");
                                message.remediations[i] = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.fromObject(object.remediations[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Assessment message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment} message Assessment
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Assessment.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.relatedUris = [];
                            object.impacts = [];
                            object.remediations = [];
                        }
                        if (options.defaults) {
                            object.cve = "";
                            object.shortDescription = "";
                            object.longDescription = "";
                            object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            object.justification = null;
                        }
                        if (message.cve != null && message.hasOwnProperty("cve"))
                            object.cve = message.cve;
                        if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                            object.shortDescription = message.shortDescription;
                        if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                            object.longDescription = message.longDescription;
                        if (message.relatedUris && message.relatedUris.length) {
                            object.relatedUris = [];
                            for (var j = 0; j < message.relatedUris.length; ++j)
                                object.relatedUris[j] = $root.grafeas.v1.RelatedUrl.toObject(message.relatedUris[j], options);
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.State[message.state] === undefined ? message.state : $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.State[message.state] : message.state;
                        if (message.impacts && message.impacts.length) {
                            object.impacts = [];
                            for (var j = 0; j < message.impacts.length; ++j)
                                object.impacts[j] = message.impacts[j];
                        }
                        if (message.justification != null && message.hasOwnProperty("justification"))
                            object.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.toObject(message.justification, options);
                        if (message.remediations && message.remediations.length) {
                            object.remediations = [];
                            for (var j = 0; j < message.remediations.length; ++j)
                                object.remediations[j] = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.toObject(message.remediations[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Assessment to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Assessment.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Assessment
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Assessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote.Assessment";
                    };
    
                    /**
                     * State enum.
                     * @name grafeas.v1.VulnerabilityAssessmentNote.Assessment.State
                     * @enum {number}
                     * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                     * @property {number} AFFECTED=1 AFFECTED value
                     * @property {number} NOT_AFFECTED=2 NOT_AFFECTED value
                     * @property {number} FIXED=3 FIXED value
                     * @property {number} UNDER_INVESTIGATION=4 UNDER_INVESTIGATION value
                     */
                    Assessment.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "AFFECTED"] = 1;
                        values[valuesById[2] = "NOT_AFFECTED"] = 2;
                        values[valuesById[3] = "FIXED"] = 3;
                        values[valuesById[4] = "UNDER_INVESTIGATION"] = 4;
                        return values;
                    })();
    
                    Assessment.Justification = (function() {
    
                        /**
                         * Properties of a Justification.
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                         * @interface IJustification
                         * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.JustificationType|null} [justificationType] Justification justificationType
                         * @property {string|null} [details] Justification details
                         */
    
                        /**
                         * Constructs a new Justification.
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                         * @classdesc Represents a Justification.
                         * @implements IJustification
                         * @constructor
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification=} [properties] Properties to set
                         */
                        function Justification(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Justification justificationType.
                         * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.JustificationType} justificationType
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @instance
                         */
                        Justification.prototype.justificationType = 0;
    
                        /**
                         * Justification details.
                         * @member {string} details
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @instance
                         */
                        Justification.prototype.details = "";
    
                        /**
                         * Creates a new Justification instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification=} [properties] Properties to set
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification} Justification instance
                         */
                        Justification.create = function create(properties) {
                            return new Justification(properties);
                        };
    
                        /**
                         * Encodes the specified Justification message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification} message Justification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Justification.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.justificationType != null && Object.hasOwnProperty.call(message, "justificationType"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.justificationType);
                            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.details);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Justification message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification} message Justification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Justification.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Justification message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification} Justification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Justification.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.justificationType = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.details = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Justification message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification} Justification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Justification.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Justification message.
                         * @function verify
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Justification.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.justificationType != null && message.hasOwnProperty("justificationType"))
                                switch (message.justificationType) {
                                default:
                                    return "justificationType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.details != null && message.hasOwnProperty("details"))
                                if (!$util.isString(message.details))
                                    return "details: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Justification message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification} Justification
                         */
                        Justification.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification)
                                return object;
                            var message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification();
                            switch (object.justificationType) {
                            default:
                                if (typeof object.justificationType === "number") {
                                    message.justificationType = object.justificationType;
                                    break;
                                }
                                break;
                            case "JUSTIFICATION_TYPE_UNSPECIFIED":
                            case 0:
                                message.justificationType = 0;
                                break;
                            case "COMPONENT_NOT_PRESENT":
                            case 1:
                                message.justificationType = 1;
                                break;
                            case "VULNERABLE_CODE_NOT_PRESENT":
                            case 2:
                                message.justificationType = 2;
                                break;
                            case "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH":
                            case 3:
                                message.justificationType = 3;
                                break;
                            case "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY":
                            case 4:
                                message.justificationType = 4;
                                break;
                            case "INLINE_MITIGATIONS_ALREADY_EXIST":
                            case 5:
                                message.justificationType = 5;
                                break;
                            }
                            if (object.details != null)
                                message.details = String(object.details);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Justification message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification} message Justification
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Justification.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.justificationType = options.enums === String ? "JUSTIFICATION_TYPE_UNSPECIFIED" : 0;
                                object.details = "";
                            }
                            if (message.justificationType != null && message.hasOwnProperty("justificationType"))
                                object.justificationType = options.enums === String ? $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.JustificationType[message.justificationType] === undefined ? message.justificationType : $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.JustificationType[message.justificationType] : message.justificationType;
                            if (message.details != null && message.hasOwnProperty("details"))
                                object.details = message.details;
                            return object;
                        };
    
                        /**
                         * Converts this Justification to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Justification.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Justification
                         * @function getTypeUrl
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Justification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification";
                        };
    
                        /**
                         * JustificationType enum.
                         * @name grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.JustificationType
                         * @enum {number}
                         * @property {number} JUSTIFICATION_TYPE_UNSPECIFIED=0 JUSTIFICATION_TYPE_UNSPECIFIED value
                         * @property {number} COMPONENT_NOT_PRESENT=1 COMPONENT_NOT_PRESENT value
                         * @property {number} VULNERABLE_CODE_NOT_PRESENT=2 VULNERABLE_CODE_NOT_PRESENT value
                         * @property {number} VULNERABLE_CODE_NOT_IN_EXECUTE_PATH=3 VULNERABLE_CODE_NOT_IN_EXECUTE_PATH value
                         * @property {number} VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY=4 VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY value
                         * @property {number} INLINE_MITIGATIONS_ALREADY_EXIST=5 INLINE_MITIGATIONS_ALREADY_EXIST value
                         */
                        Justification.JustificationType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "JUSTIFICATION_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "COMPONENT_NOT_PRESENT"] = 1;
                            values[valuesById[2] = "VULNERABLE_CODE_NOT_PRESENT"] = 2;
                            values[valuesById[3] = "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH"] = 3;
                            values[valuesById[4] = "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY"] = 4;
                            values[valuesById[5] = "INLINE_MITIGATIONS_ALREADY_EXIST"] = 5;
                            return values;
                        })();
    
                        return Justification;
                    })();
    
                    Assessment.Remediation = (function() {
    
                        /**
                         * Properties of a Remediation.
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                         * @interface IRemediation
                         * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.RemediationType|null} [remediationType] Remediation remediationType
                         * @property {string|null} [details] Remediation details
                         * @property {grafeas.v1.IRelatedUrl|null} [remediationUri] Remediation remediationUri
                         */
    
                        /**
                         * Constructs a new Remediation.
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment
                         * @classdesc Represents a Remediation.
                         * @implements IRemediation
                         * @constructor
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation=} [properties] Properties to set
                         */
                        function Remediation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Remediation remediationType.
                         * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.RemediationType} remediationType
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @instance
                         */
                        Remediation.prototype.remediationType = 0;
    
                        /**
                         * Remediation details.
                         * @member {string} details
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @instance
                         */
                        Remediation.prototype.details = "";
    
                        /**
                         * Remediation remediationUri.
                         * @member {grafeas.v1.IRelatedUrl|null|undefined} remediationUri
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @instance
                         */
                        Remediation.prototype.remediationUri = null;
    
                        /**
                         * Creates a new Remediation instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation=} [properties] Properties to set
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation} Remediation instance
                         */
                        Remediation.create = function create(properties) {
                            return new Remediation(properties);
                        };
    
                        /**
                         * Encodes the specified Remediation message. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation} message Remediation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Remediation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.remediationType != null && Object.hasOwnProperty.call(message, "remediationType"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.remediationType);
                            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.details);
                            if (message.remediationUri != null && Object.hasOwnProperty.call(message, "remediationUri"))
                                $root.grafeas.v1.RelatedUrl.encode(message.remediationUri, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Remediation message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation} message Remediation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Remediation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Remediation message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation} Remediation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Remediation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.remediationType = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.details = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.remediationUri = $root.grafeas.v1.RelatedUrl.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Remediation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation} Remediation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Remediation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Remediation message.
                         * @function verify
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Remediation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.remediationType != null && message.hasOwnProperty("remediationType"))
                                switch (message.remediationType) {
                                default:
                                    return "remediationType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.details != null && message.hasOwnProperty("details"))
                                if (!$util.isString(message.details))
                                    return "details: string expected";
                            if (message.remediationUri != null && message.hasOwnProperty("remediationUri")) {
                                var error = $root.grafeas.v1.RelatedUrl.verify(message.remediationUri);
                                if (error)
                                    return "remediationUri." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Remediation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation} Remediation
                         */
                        Remediation.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation)
                                return object;
                            var message = new $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation();
                            switch (object.remediationType) {
                            default:
                                if (typeof object.remediationType === "number") {
                                    message.remediationType = object.remediationType;
                                    break;
                                }
                                break;
                            case "REMEDIATION_TYPE_UNSPECIFIED":
                            case 0:
                                message.remediationType = 0;
                                break;
                            case "MITIGATION":
                            case 1:
                                message.remediationType = 1;
                                break;
                            case "NO_FIX_PLANNED":
                            case 2:
                                message.remediationType = 2;
                                break;
                            case "NONE_AVAILABLE":
                            case 3:
                                message.remediationType = 3;
                                break;
                            case "VENDOR_FIX":
                            case 4:
                                message.remediationType = 4;
                                break;
                            case "WORKAROUND":
                            case 5:
                                message.remediationType = 5;
                                break;
                            }
                            if (object.details != null)
                                message.details = String(object.details);
                            if (object.remediationUri != null) {
                                if (typeof object.remediationUri !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.remediationUri: object expected");
                                message.remediationUri = $root.grafeas.v1.RelatedUrl.fromObject(object.remediationUri);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Remediation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation} message Remediation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Remediation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.remediationType = options.enums === String ? "REMEDIATION_TYPE_UNSPECIFIED" : 0;
                                object.details = "";
                                object.remediationUri = null;
                            }
                            if (message.remediationType != null && message.hasOwnProperty("remediationType"))
                                object.remediationType = options.enums === String ? $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.RemediationType[message.remediationType] === undefined ? message.remediationType : $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.RemediationType[message.remediationType] : message.remediationType;
                            if (message.details != null && message.hasOwnProperty("details"))
                                object.details = message.details;
                            if (message.remediationUri != null && message.hasOwnProperty("remediationUri"))
                                object.remediationUri = $root.grafeas.v1.RelatedUrl.toObject(message.remediationUri, options);
                            return object;
                        };
    
                        /**
                         * Converts this Remediation to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Remediation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Remediation
                         * @function getTypeUrl
                         * @memberof grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Remediation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation";
                        };
    
                        /**
                         * RemediationType enum.
                         * @name grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.RemediationType
                         * @enum {number}
                         * @property {number} REMEDIATION_TYPE_UNSPECIFIED=0 REMEDIATION_TYPE_UNSPECIFIED value
                         * @property {number} MITIGATION=1 MITIGATION value
                         * @property {number} NO_FIX_PLANNED=2 NO_FIX_PLANNED value
                         * @property {number} NONE_AVAILABLE=3 NONE_AVAILABLE value
                         * @property {number} VENDOR_FIX=4 VENDOR_FIX value
                         * @property {number} WORKAROUND=5 WORKAROUND value
                         */
                        Remediation.RemediationType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "REMEDIATION_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "MITIGATION"] = 1;
                            values[valuesById[2] = "NO_FIX_PLANNED"] = 2;
                            values[valuesById[3] = "NONE_AVAILABLE"] = 3;
                            values[valuesById[4] = "VENDOR_FIX"] = 4;
                            values[valuesById[5] = "WORKAROUND"] = 5;
                            return values;
                        })();
    
                        return Remediation;
                    })();
    
                    return Assessment;
                })();
    
                return VulnerabilityAssessmentNote;
            })();
    
            v1.VulnerabilityNote = (function() {
    
                /**
                 * Properties of a VulnerabilityNote.
                 * @memberof grafeas.v1
                 * @interface IVulnerabilityNote
                 * @property {number|null} [cvssScore] VulnerabilityNote cvssScore
                 * @property {grafeas.v1.Severity|null} [severity] VulnerabilityNote severity
                 * @property {Array.<grafeas.v1.VulnerabilityNote.IDetail>|null} [details] VulnerabilityNote details
                 * @property {grafeas.v1.ICVSSv3|null} [cvssV3] VulnerabilityNote cvssV3
                 * @property {Array.<grafeas.v1.VulnerabilityNote.IWindowsDetail>|null} [windowsDetails] VulnerabilityNote windowsDetails
                 * @property {google.protobuf.ITimestamp|null} [sourceUpdateTime] VulnerabilityNote sourceUpdateTime
                 * @property {grafeas.v1.CVSSVersion|null} [cvssVersion] VulnerabilityNote cvssVersion
                 * @property {grafeas.v1.ICVSS|null} [cvssV2] VulnerabilityNote cvssV2
                 */
    
                /**
                 * Constructs a new VulnerabilityNote.
                 * @memberof grafeas.v1
                 * @classdesc Represents a VulnerabilityNote.
                 * @implements IVulnerabilityNote
                 * @constructor
                 * @param {grafeas.v1.IVulnerabilityNote=} [properties] Properties to set
                 */
                function VulnerabilityNote(properties) {
                    this.details = [];
                    this.windowsDetails = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VulnerabilityNote cvssScore.
                 * @member {number} cvssScore
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.cvssScore = 0;
    
                /**
                 * VulnerabilityNote severity.
                 * @member {grafeas.v1.Severity} severity
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.severity = 0;
    
                /**
                 * VulnerabilityNote details.
                 * @member {Array.<grafeas.v1.VulnerabilityNote.IDetail>} details
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.details = $util.emptyArray;
    
                /**
                 * VulnerabilityNote cvssV3.
                 * @member {grafeas.v1.ICVSSv3|null|undefined} cvssV3
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.cvssV3 = null;
    
                /**
                 * VulnerabilityNote windowsDetails.
                 * @member {Array.<grafeas.v1.VulnerabilityNote.IWindowsDetail>} windowsDetails
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.windowsDetails = $util.emptyArray;
    
                /**
                 * VulnerabilityNote sourceUpdateTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} sourceUpdateTime
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.sourceUpdateTime = null;
    
                /**
                 * VulnerabilityNote cvssVersion.
                 * @member {grafeas.v1.CVSSVersion} cvssVersion
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.cvssVersion = 0;
    
                /**
                 * VulnerabilityNote cvssV2.
                 * @member {grafeas.v1.ICVSS|null|undefined} cvssV2
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 */
                VulnerabilityNote.prototype.cvssV2 = null;
    
                /**
                 * Creates a new VulnerabilityNote instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityNote=} [properties] Properties to set
                 * @returns {grafeas.v1.VulnerabilityNote} VulnerabilityNote instance
                 */
                VulnerabilityNote.create = function create(properties) {
                    return new VulnerabilityNote(properties);
                };
    
                /**
                 * Encodes the specified VulnerabilityNote message. Does not implicitly {@link grafeas.v1.VulnerabilityNote.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityNote} message VulnerabilityNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityNote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cvssScore != null && Object.hasOwnProperty.call(message, "cvssScore"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.cvssScore);
                    if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.grafeas.v1.VulnerabilityNote.Detail.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.cvssV3 != null && Object.hasOwnProperty.call(message, "cvssV3"))
                        $root.grafeas.v1.CVSSv3.encode(message.cvssV3, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.windowsDetails != null && message.windowsDetails.length)
                        for (var i = 0; i < message.windowsDetails.length; ++i)
                            $root.grafeas.v1.VulnerabilityNote.WindowsDetail.encode(message.windowsDetails[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.sourceUpdateTime != null && Object.hasOwnProperty.call(message, "sourceUpdateTime"))
                        $root.google.protobuf.Timestamp.encode(message.sourceUpdateTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.cvssVersion != null && Object.hasOwnProperty.call(message, "cvssVersion"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.cvssVersion);
                    if (message.cvssV2 != null && Object.hasOwnProperty.call(message, "cvssV2"))
                        $root.grafeas.v1.CVSS.encode(message.cvssV2, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VulnerabilityNote message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityNote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {grafeas.v1.IVulnerabilityNote} message VulnerabilityNote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityNote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VulnerabilityNote message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.VulnerabilityNote} VulnerabilityNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityNote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityNote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cvssScore = reader.float();
                                break;
                            }
                        case 2: {
                                message.severity = reader.int32();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.grafeas.v1.VulnerabilityNote.Detail.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.cvssV3 = $root.grafeas.v1.CVSSv3.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                if (!(message.windowsDetails && message.windowsDetails.length))
                                    message.windowsDetails = [];
                                message.windowsDetails.push($root.grafeas.v1.VulnerabilityNote.WindowsDetail.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                message.sourceUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.cvssVersion = reader.int32();
                                break;
                            }
                        case 8: {
                                message.cvssV2 = $root.grafeas.v1.CVSS.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VulnerabilityNote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.VulnerabilityNote} VulnerabilityNote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityNote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VulnerabilityNote message.
                 * @function verify
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VulnerabilityNote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                        if (typeof message.cvssScore !== "number")
                            return "cvssScore: number expected";
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        switch (message.severity) {
                        default:
                            return "severity: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.grafeas.v1.VulnerabilityNote.Detail.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    if (message.cvssV3 != null && message.hasOwnProperty("cvssV3")) {
                        var error = $root.grafeas.v1.CVSSv3.verify(message.cvssV3);
                        if (error)
                            return "cvssV3." + error;
                    }
                    if (message.windowsDetails != null && message.hasOwnProperty("windowsDetails")) {
                        if (!Array.isArray(message.windowsDetails))
                            return "windowsDetails: array expected";
                        for (var i = 0; i < message.windowsDetails.length; ++i) {
                            var error = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.verify(message.windowsDetails[i]);
                            if (error)
                                return "windowsDetails." + error;
                        }
                    }
                    if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.sourceUpdateTime);
                        if (error)
                            return "sourceUpdateTime." + error;
                    }
                    if (message.cvssVersion != null && message.hasOwnProperty("cvssVersion"))
                        switch (message.cvssVersion) {
                        default:
                            return "cvssVersion: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.cvssV2 != null && message.hasOwnProperty("cvssV2")) {
                        var error = $root.grafeas.v1.CVSS.verify(message.cvssV2);
                        if (error)
                            return "cvssV2." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VulnerabilityNote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.VulnerabilityNote} VulnerabilityNote
                 */
                VulnerabilityNote.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.VulnerabilityNote)
                        return object;
                    var message = new $root.grafeas.v1.VulnerabilityNote();
                    if (object.cvssScore != null)
                        message.cvssScore = Number(object.cvssScore);
                    switch (object.severity) {
                    default:
                        if (typeof object.severity === "number") {
                            message.severity = object.severity;
                            break;
                        }
                        break;
                    case "SEVERITY_UNSPECIFIED":
                    case 0:
                        message.severity = 0;
                        break;
                    case "MINIMAL":
                    case 1:
                        message.severity = 1;
                        break;
                    case "LOW":
                    case 2:
                        message.severity = 2;
                        break;
                    case "MEDIUM":
                    case 3:
                        message.severity = 3;
                        break;
                    case "HIGH":
                    case 4:
                        message.severity = 4;
                        break;
                    case "CRITICAL":
                    case 5:
                        message.severity = 5;
                        break;
                    }
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".grafeas.v1.VulnerabilityNote.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.details: object expected");
                            message.details[i] = $root.grafeas.v1.VulnerabilityNote.Detail.fromObject(object.details[i]);
                        }
                    }
                    if (object.cvssV3 != null) {
                        if (typeof object.cvssV3 !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityNote.cvssV3: object expected");
                        message.cvssV3 = $root.grafeas.v1.CVSSv3.fromObject(object.cvssV3);
                    }
                    if (object.windowsDetails) {
                        if (!Array.isArray(object.windowsDetails))
                            throw TypeError(".grafeas.v1.VulnerabilityNote.windowsDetails: array expected");
                        message.windowsDetails = [];
                        for (var i = 0; i < object.windowsDetails.length; ++i) {
                            if (typeof object.windowsDetails[i] !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.windowsDetails: object expected");
                            message.windowsDetails[i] = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.fromObject(object.windowsDetails[i]);
                        }
                    }
                    if (object.sourceUpdateTime != null) {
                        if (typeof object.sourceUpdateTime !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityNote.sourceUpdateTime: object expected");
                        message.sourceUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.sourceUpdateTime);
                    }
                    switch (object.cvssVersion) {
                    default:
                        if (typeof object.cvssVersion === "number") {
                            message.cvssVersion = object.cvssVersion;
                            break;
                        }
                        break;
                    case "CVSS_VERSION_UNSPECIFIED":
                    case 0:
                        message.cvssVersion = 0;
                        break;
                    case "CVSS_VERSION_2":
                    case 1:
                        message.cvssVersion = 1;
                        break;
                    case "CVSS_VERSION_3":
                    case 2:
                        message.cvssVersion = 2;
                        break;
                    }
                    if (object.cvssV2 != null) {
                        if (typeof object.cvssV2 !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityNote.cvssV2: object expected");
                        message.cvssV2 = $root.grafeas.v1.CVSS.fromObject(object.cvssV2);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VulnerabilityNote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {grafeas.v1.VulnerabilityNote} message VulnerabilityNote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VulnerabilityNote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.details = [];
                        object.windowsDetails = [];
                    }
                    if (options.defaults) {
                        object.cvssScore = 0;
                        object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        object.cvssV3 = null;
                        object.sourceUpdateTime = null;
                        object.cvssVersion = options.enums === String ? "CVSS_VERSION_UNSPECIFIED" : 0;
                        object.cvssV2 = null;
                    }
                    if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                        object.cvssScore = options.json && !isFinite(message.cvssScore) ? String(message.cvssScore) : message.cvssScore;
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        object.severity = options.enums === String ? $root.grafeas.v1.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1.Severity[message.severity] : message.severity;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.grafeas.v1.VulnerabilityNote.Detail.toObject(message.details[j], options);
                    }
                    if (message.cvssV3 != null && message.hasOwnProperty("cvssV3"))
                        object.cvssV3 = $root.grafeas.v1.CVSSv3.toObject(message.cvssV3, options);
                    if (message.windowsDetails && message.windowsDetails.length) {
                        object.windowsDetails = [];
                        for (var j = 0; j < message.windowsDetails.length; ++j)
                            object.windowsDetails[j] = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.toObject(message.windowsDetails[j], options);
                    }
                    if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime"))
                        object.sourceUpdateTime = $root.google.protobuf.Timestamp.toObject(message.sourceUpdateTime, options);
                    if (message.cvssVersion != null && message.hasOwnProperty("cvssVersion"))
                        object.cvssVersion = options.enums === String ? $root.grafeas.v1.CVSSVersion[message.cvssVersion] === undefined ? message.cvssVersion : $root.grafeas.v1.CVSSVersion[message.cvssVersion] : message.cvssVersion;
                    if (message.cvssV2 != null && message.hasOwnProperty("cvssV2"))
                        object.cvssV2 = $root.grafeas.v1.CVSS.toObject(message.cvssV2, options);
                    return object;
                };
    
                /**
                 * Converts this VulnerabilityNote to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VulnerabilityNote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for VulnerabilityNote
                 * @function getTypeUrl
                 * @memberof grafeas.v1.VulnerabilityNote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VulnerabilityNote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.VulnerabilityNote";
                };
    
                VulnerabilityNote.Detail = (function() {
    
                    /**
                     * Properties of a Detail.
                     * @memberof grafeas.v1.VulnerabilityNote
                     * @interface IDetail
                     * @property {string|null} [severityName] Detail severityName
                     * @property {string|null} [description] Detail description
                     * @property {string|null} [packageType] Detail packageType
                     * @property {string|null} [affectedCpeUri] Detail affectedCpeUri
                     * @property {string|null} [affectedPackage] Detail affectedPackage
                     * @property {grafeas.v1.IVersion|null} [affectedVersionStart] Detail affectedVersionStart
                     * @property {grafeas.v1.IVersion|null} [affectedVersionEnd] Detail affectedVersionEnd
                     * @property {string|null} [fixedCpeUri] Detail fixedCpeUri
                     * @property {string|null} [fixedPackage] Detail fixedPackage
                     * @property {grafeas.v1.IVersion|null} [fixedVersion] Detail fixedVersion
                     * @property {boolean|null} [isObsolete] Detail isObsolete
                     * @property {google.protobuf.ITimestamp|null} [sourceUpdateTime] Detail sourceUpdateTime
                     * @property {string|null} [source] Detail source
                     * @property {string|null} [vendor] Detail vendor
                     */
    
                    /**
                     * Constructs a new Detail.
                     * @memberof grafeas.v1.VulnerabilityNote
                     * @classdesc Represents a Detail.
                     * @implements IDetail
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityNote.IDetail=} [properties] Properties to set
                     */
                    function Detail(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Detail severityName.
                     * @member {string} severityName
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.severityName = "";
    
                    /**
                     * Detail description.
                     * @member {string} description
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.description = "";
    
                    /**
                     * Detail packageType.
                     * @member {string} packageType
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.packageType = "";
    
                    /**
                     * Detail affectedCpeUri.
                     * @member {string} affectedCpeUri
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.affectedCpeUri = "";
    
                    /**
                     * Detail affectedPackage.
                     * @member {string} affectedPackage
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.affectedPackage = "";
    
                    /**
                     * Detail affectedVersionStart.
                     * @member {grafeas.v1.IVersion|null|undefined} affectedVersionStart
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.affectedVersionStart = null;
    
                    /**
                     * Detail affectedVersionEnd.
                     * @member {grafeas.v1.IVersion|null|undefined} affectedVersionEnd
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.affectedVersionEnd = null;
    
                    /**
                     * Detail fixedCpeUri.
                     * @member {string} fixedCpeUri
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.fixedCpeUri = "";
    
                    /**
                     * Detail fixedPackage.
                     * @member {string} fixedPackage
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.fixedPackage = "";
    
                    /**
                     * Detail fixedVersion.
                     * @member {grafeas.v1.IVersion|null|undefined} fixedVersion
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.fixedVersion = null;
    
                    /**
                     * Detail isObsolete.
                     * @member {boolean} isObsolete
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.isObsolete = false;
    
                    /**
                     * Detail sourceUpdateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} sourceUpdateTime
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.sourceUpdateTime = null;
    
                    /**
                     * Detail source.
                     * @member {string} source
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.source = "";
    
                    /**
                     * Detail vendor.
                     * @member {string} vendor
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     */
                    Detail.prototype.vendor = "";
    
                    /**
                     * Creates a new Detail instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IDetail=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityNote.Detail} Detail instance
                     */
                    Detail.create = function create(properties) {
                        return new Detail(properties);
                    };
    
                    /**
                     * Encodes the specified Detail message. Does not implicitly {@link grafeas.v1.VulnerabilityNote.Detail.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IDetail} message Detail message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Detail.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.severityName != null && Object.hasOwnProperty.call(message, "severityName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.severityName);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.packageType != null && Object.hasOwnProperty.call(message, "packageType"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.packageType);
                        if (message.affectedCpeUri != null && Object.hasOwnProperty.call(message, "affectedCpeUri"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.affectedCpeUri);
                        if (message.affectedPackage != null && Object.hasOwnProperty.call(message, "affectedPackage"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.affectedPackage);
                        if (message.affectedVersionStart != null && Object.hasOwnProperty.call(message, "affectedVersionStart"))
                            $root.grafeas.v1.Version.encode(message.affectedVersionStart, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.affectedVersionEnd != null && Object.hasOwnProperty.call(message, "affectedVersionEnd"))
                            $root.grafeas.v1.Version.encode(message.affectedVersionEnd, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.fixedCpeUri != null && Object.hasOwnProperty.call(message, "fixedCpeUri"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.fixedCpeUri);
                        if (message.fixedPackage != null && Object.hasOwnProperty.call(message, "fixedPackage"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.fixedPackage);
                        if (message.fixedVersion != null && Object.hasOwnProperty.call(message, "fixedVersion"))
                            $root.grafeas.v1.Version.encode(message.fixedVersion, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.isObsolete != null && Object.hasOwnProperty.call(message, "isObsolete"))
                            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isObsolete);
                        if (message.sourceUpdateTime != null && Object.hasOwnProperty.call(message, "sourceUpdateTime"))
                            $root.google.protobuf.Timestamp.encode(message.sourceUpdateTime, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.source);
                        if (message.vendor != null && Object.hasOwnProperty.call(message, "vendor"))
                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.vendor);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Detail message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityNote.Detail.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IDetail} message Detail message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Detail.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Detail message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityNote.Detail} Detail
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Detail.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityNote.Detail();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.severityName = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.description = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.packageType = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.affectedCpeUri = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.affectedPackage = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.affectedVersionStart = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.affectedVersionEnd = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    message.fixedCpeUri = reader.string();
                                    break;
                                }
                            case 9: {
                                    message.fixedPackage = reader.string();
                                    break;
                                }
                            case 10: {
                                    message.fixedVersion = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 11: {
                                    message.isObsolete = reader.bool();
                                    break;
                                }
                            case 12: {
                                    message.sourceUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 13: {
                                    message.source = reader.string();
                                    break;
                                }
                            case 14: {
                                    message.vendor = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Detail message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityNote.Detail} Detail
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Detail.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Detail message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Detail.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.severityName != null && message.hasOwnProperty("severityName"))
                            if (!$util.isString(message.severityName))
                                return "severityName: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.packageType != null && message.hasOwnProperty("packageType"))
                            if (!$util.isString(message.packageType))
                                return "packageType: string expected";
                        if (message.affectedCpeUri != null && message.hasOwnProperty("affectedCpeUri"))
                            if (!$util.isString(message.affectedCpeUri))
                                return "affectedCpeUri: string expected";
                        if (message.affectedPackage != null && message.hasOwnProperty("affectedPackage"))
                            if (!$util.isString(message.affectedPackage))
                                return "affectedPackage: string expected";
                        if (message.affectedVersionStart != null && message.hasOwnProperty("affectedVersionStart")) {
                            var error = $root.grafeas.v1.Version.verify(message.affectedVersionStart);
                            if (error)
                                return "affectedVersionStart." + error;
                        }
                        if (message.affectedVersionEnd != null && message.hasOwnProperty("affectedVersionEnd")) {
                            var error = $root.grafeas.v1.Version.verify(message.affectedVersionEnd);
                            if (error)
                                return "affectedVersionEnd." + error;
                        }
                        if (message.fixedCpeUri != null && message.hasOwnProperty("fixedCpeUri"))
                            if (!$util.isString(message.fixedCpeUri))
                                return "fixedCpeUri: string expected";
                        if (message.fixedPackage != null && message.hasOwnProperty("fixedPackage"))
                            if (!$util.isString(message.fixedPackage))
                                return "fixedPackage: string expected";
                        if (message.fixedVersion != null && message.hasOwnProperty("fixedVersion")) {
                            var error = $root.grafeas.v1.Version.verify(message.fixedVersion);
                            if (error)
                                return "fixedVersion." + error;
                        }
                        if (message.isObsolete != null && message.hasOwnProperty("isObsolete"))
                            if (typeof message.isObsolete !== "boolean")
                                return "isObsolete: boolean expected";
                        if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.sourceUpdateTime);
                            if (error)
                                return "sourceUpdateTime." + error;
                        }
                        if (message.source != null && message.hasOwnProperty("source"))
                            if (!$util.isString(message.source))
                                return "source: string expected";
                        if (message.vendor != null && message.hasOwnProperty("vendor"))
                            if (!$util.isString(message.vendor))
                                return "vendor: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Detail message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityNote.Detail} Detail
                     */
                    Detail.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityNote.Detail)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityNote.Detail();
                        if (object.severityName != null)
                            message.severityName = String(object.severityName);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.packageType != null)
                            message.packageType = String(object.packageType);
                        if (object.affectedCpeUri != null)
                            message.affectedCpeUri = String(object.affectedCpeUri);
                        if (object.affectedPackage != null)
                            message.affectedPackage = String(object.affectedPackage);
                        if (object.affectedVersionStart != null) {
                            if (typeof object.affectedVersionStart !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.Detail.affectedVersionStart: object expected");
                            message.affectedVersionStart = $root.grafeas.v1.Version.fromObject(object.affectedVersionStart);
                        }
                        if (object.affectedVersionEnd != null) {
                            if (typeof object.affectedVersionEnd !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.Detail.affectedVersionEnd: object expected");
                            message.affectedVersionEnd = $root.grafeas.v1.Version.fromObject(object.affectedVersionEnd);
                        }
                        if (object.fixedCpeUri != null)
                            message.fixedCpeUri = String(object.fixedCpeUri);
                        if (object.fixedPackage != null)
                            message.fixedPackage = String(object.fixedPackage);
                        if (object.fixedVersion != null) {
                            if (typeof object.fixedVersion !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.Detail.fixedVersion: object expected");
                            message.fixedVersion = $root.grafeas.v1.Version.fromObject(object.fixedVersion);
                        }
                        if (object.isObsolete != null)
                            message.isObsolete = Boolean(object.isObsolete);
                        if (object.sourceUpdateTime != null) {
                            if (typeof object.sourceUpdateTime !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityNote.Detail.sourceUpdateTime: object expected");
                            message.sourceUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.sourceUpdateTime);
                        }
                        if (object.source != null)
                            message.source = String(object.source);
                        if (object.vendor != null)
                            message.vendor = String(object.vendor);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Detail message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.Detail} message Detail
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Detail.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.severityName = "";
                            object.description = "";
                            object.packageType = "";
                            object.affectedCpeUri = "";
                            object.affectedPackage = "";
                            object.affectedVersionStart = null;
                            object.affectedVersionEnd = null;
                            object.fixedCpeUri = "";
                            object.fixedPackage = "";
                            object.fixedVersion = null;
                            object.isObsolete = false;
                            object.sourceUpdateTime = null;
                            object.source = "";
                            object.vendor = "";
                        }
                        if (message.severityName != null && message.hasOwnProperty("severityName"))
                            object.severityName = message.severityName;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.packageType != null && message.hasOwnProperty("packageType"))
                            object.packageType = message.packageType;
                        if (message.affectedCpeUri != null && message.hasOwnProperty("affectedCpeUri"))
                            object.affectedCpeUri = message.affectedCpeUri;
                        if (message.affectedPackage != null && message.hasOwnProperty("affectedPackage"))
                            object.affectedPackage = message.affectedPackage;
                        if (message.affectedVersionStart != null && message.hasOwnProperty("affectedVersionStart"))
                            object.affectedVersionStart = $root.grafeas.v1.Version.toObject(message.affectedVersionStart, options);
                        if (message.affectedVersionEnd != null && message.hasOwnProperty("affectedVersionEnd"))
                            object.affectedVersionEnd = $root.grafeas.v1.Version.toObject(message.affectedVersionEnd, options);
                        if (message.fixedCpeUri != null && message.hasOwnProperty("fixedCpeUri"))
                            object.fixedCpeUri = message.fixedCpeUri;
                        if (message.fixedPackage != null && message.hasOwnProperty("fixedPackage"))
                            object.fixedPackage = message.fixedPackage;
                        if (message.fixedVersion != null && message.hasOwnProperty("fixedVersion"))
                            object.fixedVersion = $root.grafeas.v1.Version.toObject(message.fixedVersion, options);
                        if (message.isObsolete != null && message.hasOwnProperty("isObsolete"))
                            object.isObsolete = message.isObsolete;
                        if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime"))
                            object.sourceUpdateTime = $root.google.protobuf.Timestamp.toObject(message.sourceUpdateTime, options);
                        if (message.source != null && message.hasOwnProperty("source"))
                            object.source = message.source;
                        if (message.vendor != null && message.hasOwnProperty("vendor"))
                            object.vendor = message.vendor;
                        return object;
                    };
    
                    /**
                     * Converts this Detail to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Detail.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Detail
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityNote.Detail
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Detail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityNote.Detail";
                    };
    
                    return Detail;
                })();
    
                VulnerabilityNote.WindowsDetail = (function() {
    
                    /**
                     * Properties of a WindowsDetail.
                     * @memberof grafeas.v1.VulnerabilityNote
                     * @interface IWindowsDetail
                     * @property {string|null} [cpeUri] WindowsDetail cpeUri
                     * @property {string|null} [name] WindowsDetail name
                     * @property {string|null} [description] WindowsDetail description
                     * @property {Array.<grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase>|null} [fixingKbs] WindowsDetail fixingKbs
                     */
    
                    /**
                     * Constructs a new WindowsDetail.
                     * @memberof grafeas.v1.VulnerabilityNote
                     * @classdesc Represents a WindowsDetail.
                     * @implements IWindowsDetail
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityNote.IWindowsDetail=} [properties] Properties to set
                     */
                    function WindowsDetail(properties) {
                        this.fixingKbs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WindowsDetail cpeUri.
                     * @member {string} cpeUri
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @instance
                     */
                    WindowsDetail.prototype.cpeUri = "";
    
                    /**
                     * WindowsDetail name.
                     * @member {string} name
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @instance
                     */
                    WindowsDetail.prototype.name = "";
    
                    /**
                     * WindowsDetail description.
                     * @member {string} description
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @instance
                     */
                    WindowsDetail.prototype.description = "";
    
                    /**
                     * WindowsDetail fixingKbs.
                     * @member {Array.<grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase>} fixingKbs
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @instance
                     */
                    WindowsDetail.prototype.fixingKbs = $util.emptyArray;
    
                    /**
                     * Creates a new WindowsDetail instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IWindowsDetail=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail} WindowsDetail instance
                     */
                    WindowsDetail.create = function create(properties) {
                        return new WindowsDetail(properties);
                    };
    
                    /**
                     * Encodes the specified WindowsDetail message. Does not implicitly {@link grafeas.v1.VulnerabilityNote.WindowsDetail.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IWindowsDetail} message WindowsDetail message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WindowsDetail.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        if (message.fixingKbs != null && message.fixingKbs.length)
                            for (var i = 0; i < message.fixingKbs.length; ++i)
                                $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.encode(message.fixingKbs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WindowsDetail message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityNote.WindowsDetail.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.IWindowsDetail} message WindowsDetail message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WindowsDetail.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WindowsDetail message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail} WindowsDetail
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WindowsDetail.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityNote.WindowsDetail();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cpeUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.description = reader.string();
                                    break;
                                }
                            case 4: {
                                    if (!(message.fixingKbs && message.fixingKbs.length))
                                        message.fixingKbs = [];
                                    message.fixingKbs.push($root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WindowsDetail message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail} WindowsDetail
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WindowsDetail.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WindowsDetail message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WindowsDetail.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            if (!$util.isString(message.cpeUri))
                                return "cpeUri: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.fixingKbs != null && message.hasOwnProperty("fixingKbs")) {
                            if (!Array.isArray(message.fixingKbs))
                                return "fixingKbs: array expected";
                            for (var i = 0; i < message.fixingKbs.length; ++i) {
                                var error = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.verify(message.fixingKbs[i]);
                                if (error)
                                    return "fixingKbs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a WindowsDetail message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail} WindowsDetail
                     */
                    WindowsDetail.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityNote.WindowsDetail)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityNote.WindowsDetail();
                        if (object.cpeUri != null)
                            message.cpeUri = String(object.cpeUri);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.fixingKbs) {
                            if (!Array.isArray(object.fixingKbs))
                                throw TypeError(".grafeas.v1.VulnerabilityNote.WindowsDetail.fixingKbs: array expected");
                            message.fixingKbs = [];
                            for (var i = 0; i < object.fixingKbs.length; ++i) {
                                if (typeof object.fixingKbs[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityNote.WindowsDetail.fixingKbs: object expected");
                                message.fixingKbs[i] = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.fromObject(object.fixingKbs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WindowsDetail message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {grafeas.v1.VulnerabilityNote.WindowsDetail} message WindowsDetail
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WindowsDetail.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.fixingKbs = [];
                        if (options.defaults) {
                            object.cpeUri = "";
                            object.name = "";
                            object.description = "";
                        }
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            object.cpeUri = message.cpeUri;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.fixingKbs && message.fixingKbs.length) {
                            object.fixingKbs = [];
                            for (var j = 0; j < message.fixingKbs.length; ++j)
                                object.fixingKbs[j] = $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.toObject(message.fixingKbs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this WindowsDetail to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WindowsDetail.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for WindowsDetail
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    WindowsDetail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityNote.WindowsDetail";
                    };
    
                    WindowsDetail.KnowledgeBase = (function() {
    
                        /**
                         * Properties of a KnowledgeBase.
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                         * @interface IKnowledgeBase
                         * @property {string|null} [name] KnowledgeBase name
                         * @property {string|null} [url] KnowledgeBase url
                         */
    
                        /**
                         * Constructs a new KnowledgeBase.
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail
                         * @classdesc Represents a KnowledgeBase.
                         * @implements IKnowledgeBase
                         * @constructor
                         * @param {grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase=} [properties] Properties to set
                         */
                        function KnowledgeBase(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * KnowledgeBase name.
                         * @member {string} name
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @instance
                         */
                        KnowledgeBase.prototype.name = "";
    
                        /**
                         * KnowledgeBase url.
                         * @member {string} url
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @instance
                         */
                        KnowledgeBase.prototype.url = "";
    
                        /**
                         * Creates a new KnowledgeBase instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase=} [properties] Properties to set
                         * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase} KnowledgeBase instance
                         */
                        KnowledgeBase.create = function create(properties) {
                            return new KnowledgeBase(properties);
                        };
    
                        /**
                         * Encodes the specified KnowledgeBase message. Does not implicitly {@link grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase} message KnowledgeBase message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KnowledgeBase.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified KnowledgeBase message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {grafeas.v1.VulnerabilityNote.WindowsDetail.IKnowledgeBase} message KnowledgeBase message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KnowledgeBase.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a KnowledgeBase message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase} KnowledgeBase
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KnowledgeBase.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.url = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a KnowledgeBase message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase} KnowledgeBase
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KnowledgeBase.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a KnowledgeBase message.
                         * @function verify
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        KnowledgeBase.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a KnowledgeBase message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase} KnowledgeBase
                         */
                        KnowledgeBase.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase)
                                return object;
                            var message = new $root.grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.url != null)
                                message.url = String(object.url);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a KnowledgeBase message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase} message KnowledgeBase
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        KnowledgeBase.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.url = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            return object;
                        };
    
                        /**
                         * Converts this KnowledgeBase to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        KnowledgeBase.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for KnowledgeBase
                         * @function getTypeUrl
                         * @memberof grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        KnowledgeBase.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1.VulnerabilityNote.WindowsDetail.KnowledgeBase";
                        };
    
                        return KnowledgeBase;
                    })();
    
                    return WindowsDetail;
                })();
    
                return VulnerabilityNote;
            })();
    
            v1.VulnerabilityOccurrence = (function() {
    
                /**
                 * Properties of a VulnerabilityOccurrence.
                 * @memberof grafeas.v1
                 * @interface IVulnerabilityOccurrence
                 * @property {string|null} [type] VulnerabilityOccurrence type
                 * @property {grafeas.v1.Severity|null} [severity] VulnerabilityOccurrence severity
                 * @property {number|null} [cvssScore] VulnerabilityOccurrence cvssScore
                 * @property {grafeas.v1.ICVSS|null} [cvssv3] VulnerabilityOccurrence cvssv3
                 * @property {Array.<grafeas.v1.VulnerabilityOccurrence.IPackageIssue>|null} [packageIssue] VulnerabilityOccurrence packageIssue
                 * @property {string|null} [shortDescription] VulnerabilityOccurrence shortDescription
                 * @property {string|null} [longDescription] VulnerabilityOccurrence longDescription
                 * @property {Array.<grafeas.v1.IRelatedUrl>|null} [relatedUrls] VulnerabilityOccurrence relatedUrls
                 * @property {grafeas.v1.Severity|null} [effectiveSeverity] VulnerabilityOccurrence effectiveSeverity
                 * @property {boolean|null} [fixAvailable] VulnerabilityOccurrence fixAvailable
                 * @property {grafeas.v1.CVSSVersion|null} [cvssVersion] VulnerabilityOccurrence cvssVersion
                 * @property {grafeas.v1.ICVSS|null} [cvssV2] VulnerabilityOccurrence cvssV2
                 * @property {grafeas.v1.VulnerabilityOccurrence.IVexAssessment|null} [vexAssessment] VulnerabilityOccurrence vexAssessment
                 */
    
                /**
                 * Constructs a new VulnerabilityOccurrence.
                 * @memberof grafeas.v1
                 * @classdesc Represents a VulnerabilityOccurrence.
                 * @implements IVulnerabilityOccurrence
                 * @constructor
                 * @param {grafeas.v1.IVulnerabilityOccurrence=} [properties] Properties to set
                 */
                function VulnerabilityOccurrence(properties) {
                    this.packageIssue = [];
                    this.relatedUrls = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VulnerabilityOccurrence type.
                 * @member {string} type
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.type = "";
    
                /**
                 * VulnerabilityOccurrence severity.
                 * @member {grafeas.v1.Severity} severity
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.severity = 0;
    
                /**
                 * VulnerabilityOccurrence cvssScore.
                 * @member {number} cvssScore
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.cvssScore = 0;
    
                /**
                 * VulnerabilityOccurrence cvssv3.
                 * @member {grafeas.v1.ICVSS|null|undefined} cvssv3
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.cvssv3 = null;
    
                /**
                 * VulnerabilityOccurrence packageIssue.
                 * @member {Array.<grafeas.v1.VulnerabilityOccurrence.IPackageIssue>} packageIssue
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.packageIssue = $util.emptyArray;
    
                /**
                 * VulnerabilityOccurrence shortDescription.
                 * @member {string} shortDescription
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.shortDescription = "";
    
                /**
                 * VulnerabilityOccurrence longDescription.
                 * @member {string} longDescription
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.longDescription = "";
    
                /**
                 * VulnerabilityOccurrence relatedUrls.
                 * @member {Array.<grafeas.v1.IRelatedUrl>} relatedUrls
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.relatedUrls = $util.emptyArray;
    
                /**
                 * VulnerabilityOccurrence effectiveSeverity.
                 * @member {grafeas.v1.Severity} effectiveSeverity
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.effectiveSeverity = 0;
    
                /**
                 * VulnerabilityOccurrence fixAvailable.
                 * @member {boolean} fixAvailable
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.fixAvailable = false;
    
                /**
                 * VulnerabilityOccurrence cvssVersion.
                 * @member {grafeas.v1.CVSSVersion} cvssVersion
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.cvssVersion = 0;
    
                /**
                 * VulnerabilityOccurrence cvssV2.
                 * @member {grafeas.v1.ICVSS|null|undefined} cvssV2
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.cvssV2 = null;
    
                /**
                 * VulnerabilityOccurrence vexAssessment.
                 * @member {grafeas.v1.VulnerabilityOccurrence.IVexAssessment|null|undefined} vexAssessment
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 */
                VulnerabilityOccurrence.prototype.vexAssessment = null;
    
                /**
                 * Creates a new VulnerabilityOccurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {grafeas.v1.IVulnerabilityOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1.VulnerabilityOccurrence} VulnerabilityOccurrence instance
                 */
                VulnerabilityOccurrence.create = function create(properties) {
                    return new VulnerabilityOccurrence(properties);
                };
    
                /**
                 * Encodes the specified VulnerabilityOccurrence message. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {grafeas.v1.IVulnerabilityOccurrence} message VulnerabilityOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityOccurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                    if (message.cvssScore != null && Object.hasOwnProperty.call(message, "cvssScore"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.cvssScore);
                    if (message.packageIssue != null && message.packageIssue.length)
                        for (var i = 0; i < message.packageIssue.length; ++i)
                            $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue.encode(message.packageIssue[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.shortDescription);
                    if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.longDescription);
                    if (message.relatedUrls != null && message.relatedUrls.length)
                        for (var i = 0; i < message.relatedUrls.length; ++i)
                            $root.grafeas.v1.RelatedUrl.encode(message.relatedUrls[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.effectiveSeverity != null && Object.hasOwnProperty.call(message, "effectiveSeverity"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.effectiveSeverity);
                    if (message.fixAvailable != null && Object.hasOwnProperty.call(message, "fixAvailable"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixAvailable);
                    if (message.cvssv3 != null && Object.hasOwnProperty.call(message, "cvssv3"))
                        $root.grafeas.v1.CVSS.encode(message.cvssv3, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.cvssVersion != null && Object.hasOwnProperty.call(message, "cvssVersion"))
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.cvssVersion);
                    if (message.cvssV2 != null && Object.hasOwnProperty.call(message, "cvssV2"))
                        $root.grafeas.v1.CVSS.encode(message.cvssV2, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.vexAssessment != null && Object.hasOwnProperty.call(message, "vexAssessment"))
                        $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment.encode(message.vexAssessment, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VulnerabilityOccurrence message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {grafeas.v1.IVulnerabilityOccurrence} message VulnerabilityOccurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityOccurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VulnerabilityOccurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1.VulnerabilityOccurrence} VulnerabilityOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityOccurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityOccurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.severity = reader.int32();
                                break;
                            }
                        case 3: {
                                message.cvssScore = reader.float();
                                break;
                            }
                        case 10: {
                                message.cvssv3 = $root.grafeas.v1.CVSS.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.packageIssue && message.packageIssue.length))
                                    message.packageIssue = [];
                                message.packageIssue.push($root.grafeas.v1.VulnerabilityOccurrence.PackageIssue.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                message.shortDescription = reader.string();
                                break;
                            }
                        case 6: {
                                message.longDescription = reader.string();
                                break;
                            }
                        case 7: {
                                if (!(message.relatedUrls && message.relatedUrls.length))
                                    message.relatedUrls = [];
                                message.relatedUrls.push($root.grafeas.v1.RelatedUrl.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.effectiveSeverity = reader.int32();
                                break;
                            }
                        case 9: {
                                message.fixAvailable = reader.bool();
                                break;
                            }
                        case 11: {
                                message.cvssVersion = reader.int32();
                                break;
                            }
                        case 12: {
                                message.cvssV2 = $root.grafeas.v1.CVSS.decode(reader, reader.uint32());
                                break;
                            }
                        case 13: {
                                message.vexAssessment = $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VulnerabilityOccurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1.VulnerabilityOccurrence} VulnerabilityOccurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityOccurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VulnerabilityOccurrence message.
                 * @function verify
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VulnerabilityOccurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        switch (message.severity) {
                        default:
                            return "severity: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                        if (typeof message.cvssScore !== "number")
                            return "cvssScore: number expected";
                    if (message.cvssv3 != null && message.hasOwnProperty("cvssv3")) {
                        var error = $root.grafeas.v1.CVSS.verify(message.cvssv3);
                        if (error)
                            return "cvssv3." + error;
                    }
                    if (message.packageIssue != null && message.hasOwnProperty("packageIssue")) {
                        if (!Array.isArray(message.packageIssue))
                            return "packageIssue: array expected";
                        for (var i = 0; i < message.packageIssue.length; ++i) {
                            var error = $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue.verify(message.packageIssue[i]);
                            if (error)
                                return "packageIssue." + error;
                        }
                    }
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        if (!$util.isString(message.shortDescription))
                            return "shortDescription: string expected";
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        if (!$util.isString(message.longDescription))
                            return "longDescription: string expected";
                    if (message.relatedUrls != null && message.hasOwnProperty("relatedUrls")) {
                        if (!Array.isArray(message.relatedUrls))
                            return "relatedUrls: array expected";
                        for (var i = 0; i < message.relatedUrls.length; ++i) {
                            var error = $root.grafeas.v1.RelatedUrl.verify(message.relatedUrls[i]);
                            if (error)
                                return "relatedUrls." + error;
                        }
                    }
                    if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                        switch (message.effectiveSeverity) {
                        default:
                            return "effectiveSeverity: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.fixAvailable != null && message.hasOwnProperty("fixAvailable"))
                        if (typeof message.fixAvailable !== "boolean")
                            return "fixAvailable: boolean expected";
                    if (message.cvssVersion != null && message.hasOwnProperty("cvssVersion"))
                        switch (message.cvssVersion) {
                        default:
                            return "cvssVersion: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.cvssV2 != null && message.hasOwnProperty("cvssV2")) {
                        var error = $root.grafeas.v1.CVSS.verify(message.cvssV2);
                        if (error)
                            return "cvssV2." + error;
                    }
                    if (message.vexAssessment != null && message.hasOwnProperty("vexAssessment")) {
                        var error = $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment.verify(message.vexAssessment);
                        if (error)
                            return "vexAssessment." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VulnerabilityOccurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1.VulnerabilityOccurrence} VulnerabilityOccurrence
                 */
                VulnerabilityOccurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1.VulnerabilityOccurrence)
                        return object;
                    var message = new $root.grafeas.v1.VulnerabilityOccurrence();
                    if (object.type != null)
                        message.type = String(object.type);
                    switch (object.severity) {
                    default:
                        if (typeof object.severity === "number") {
                            message.severity = object.severity;
                            break;
                        }
                        break;
                    case "SEVERITY_UNSPECIFIED":
                    case 0:
                        message.severity = 0;
                        break;
                    case "MINIMAL":
                    case 1:
                        message.severity = 1;
                        break;
                    case "LOW":
                    case 2:
                        message.severity = 2;
                        break;
                    case "MEDIUM":
                    case 3:
                        message.severity = 3;
                        break;
                    case "HIGH":
                    case 4:
                        message.severity = 4;
                        break;
                    case "CRITICAL":
                    case 5:
                        message.severity = 5;
                        break;
                    }
                    if (object.cvssScore != null)
                        message.cvssScore = Number(object.cvssScore);
                    if (object.cvssv3 != null) {
                        if (typeof object.cvssv3 !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityOccurrence.cvssv3: object expected");
                        message.cvssv3 = $root.grafeas.v1.CVSS.fromObject(object.cvssv3);
                    }
                    if (object.packageIssue) {
                        if (!Array.isArray(object.packageIssue))
                            throw TypeError(".grafeas.v1.VulnerabilityOccurrence.packageIssue: array expected");
                        message.packageIssue = [];
                        for (var i = 0; i < object.packageIssue.length; ++i) {
                            if (typeof object.packageIssue[i] !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.packageIssue: object expected");
                            message.packageIssue[i] = $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue.fromObject(object.packageIssue[i]);
                        }
                    }
                    if (object.shortDescription != null)
                        message.shortDescription = String(object.shortDescription);
                    if (object.longDescription != null)
                        message.longDescription = String(object.longDescription);
                    if (object.relatedUrls) {
                        if (!Array.isArray(object.relatedUrls))
                            throw TypeError(".grafeas.v1.VulnerabilityOccurrence.relatedUrls: array expected");
                        message.relatedUrls = [];
                        for (var i = 0; i < object.relatedUrls.length; ++i) {
                            if (typeof object.relatedUrls[i] !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.relatedUrls: object expected");
                            message.relatedUrls[i] = $root.grafeas.v1.RelatedUrl.fromObject(object.relatedUrls[i]);
                        }
                    }
                    switch (object.effectiveSeverity) {
                    default:
                        if (typeof object.effectiveSeverity === "number") {
                            message.effectiveSeverity = object.effectiveSeverity;
                            break;
                        }
                        break;
                    case "SEVERITY_UNSPECIFIED":
                    case 0:
                        message.effectiveSeverity = 0;
                        break;
                    case "MINIMAL":
                    case 1:
                        message.effectiveSeverity = 1;
                        break;
                    case "LOW":
                    case 2:
                        message.effectiveSeverity = 2;
                        break;
                    case "MEDIUM":
                    case 3:
                        message.effectiveSeverity = 3;
                        break;
                    case "HIGH":
                    case 4:
                        message.effectiveSeverity = 4;
                        break;
                    case "CRITICAL":
                    case 5:
                        message.effectiveSeverity = 5;
                        break;
                    }
                    if (object.fixAvailable != null)
                        message.fixAvailable = Boolean(object.fixAvailable);
                    switch (object.cvssVersion) {
                    default:
                        if (typeof object.cvssVersion === "number") {
                            message.cvssVersion = object.cvssVersion;
                            break;
                        }
                        break;
                    case "CVSS_VERSION_UNSPECIFIED":
                    case 0:
                        message.cvssVersion = 0;
                        break;
                    case "CVSS_VERSION_2":
                    case 1:
                        message.cvssVersion = 1;
                        break;
                    case "CVSS_VERSION_3":
                    case 2:
                        message.cvssVersion = 2;
                        break;
                    }
                    if (object.cvssV2 != null) {
                        if (typeof object.cvssV2 !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityOccurrence.cvssV2: object expected");
                        message.cvssV2 = $root.grafeas.v1.CVSS.fromObject(object.cvssV2);
                    }
                    if (object.vexAssessment != null) {
                        if (typeof object.vexAssessment !== "object")
                            throw TypeError(".grafeas.v1.VulnerabilityOccurrence.vexAssessment: object expected");
                        message.vexAssessment = $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment.fromObject(object.vexAssessment);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VulnerabilityOccurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {grafeas.v1.VulnerabilityOccurrence} message VulnerabilityOccurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VulnerabilityOccurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.packageIssue = [];
                        object.relatedUrls = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        object.cvssScore = 0;
                        object.shortDescription = "";
                        object.longDescription = "";
                        object.effectiveSeverity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        object.fixAvailable = false;
                        object.cvssv3 = null;
                        object.cvssVersion = options.enums === String ? "CVSS_VERSION_UNSPECIFIED" : 0;
                        object.cvssV2 = null;
                        object.vexAssessment = null;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.severity != null && message.hasOwnProperty("severity"))
                        object.severity = options.enums === String ? $root.grafeas.v1.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1.Severity[message.severity] : message.severity;
                    if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                        object.cvssScore = options.json && !isFinite(message.cvssScore) ? String(message.cvssScore) : message.cvssScore;
                    if (message.packageIssue && message.packageIssue.length) {
                        object.packageIssue = [];
                        for (var j = 0; j < message.packageIssue.length; ++j)
                            object.packageIssue[j] = $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue.toObject(message.packageIssue[j], options);
                    }
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        object.shortDescription = message.shortDescription;
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        object.longDescription = message.longDescription;
                    if (message.relatedUrls && message.relatedUrls.length) {
                        object.relatedUrls = [];
                        for (var j = 0; j < message.relatedUrls.length; ++j)
                            object.relatedUrls[j] = $root.grafeas.v1.RelatedUrl.toObject(message.relatedUrls[j], options);
                    }
                    if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                        object.effectiveSeverity = options.enums === String ? $root.grafeas.v1.Severity[message.effectiveSeverity] === undefined ? message.effectiveSeverity : $root.grafeas.v1.Severity[message.effectiveSeverity] : message.effectiveSeverity;
                    if (message.fixAvailable != null && message.hasOwnProperty("fixAvailable"))
                        object.fixAvailable = message.fixAvailable;
                    if (message.cvssv3 != null && message.hasOwnProperty("cvssv3"))
                        object.cvssv3 = $root.grafeas.v1.CVSS.toObject(message.cvssv3, options);
                    if (message.cvssVersion != null && message.hasOwnProperty("cvssVersion"))
                        object.cvssVersion = options.enums === String ? $root.grafeas.v1.CVSSVersion[message.cvssVersion] === undefined ? message.cvssVersion : $root.grafeas.v1.CVSSVersion[message.cvssVersion] : message.cvssVersion;
                    if (message.cvssV2 != null && message.hasOwnProperty("cvssV2"))
                        object.cvssV2 = $root.grafeas.v1.CVSS.toObject(message.cvssV2, options);
                    if (message.vexAssessment != null && message.hasOwnProperty("vexAssessment"))
                        object.vexAssessment = $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment.toObject(message.vexAssessment, options);
                    return object;
                };
    
                /**
                 * Converts this VulnerabilityOccurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VulnerabilityOccurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for VulnerabilityOccurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1.VulnerabilityOccurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VulnerabilityOccurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1.VulnerabilityOccurrence";
                };
    
                VulnerabilityOccurrence.PackageIssue = (function() {
    
                    /**
                     * Properties of a PackageIssue.
                     * @memberof grafeas.v1.VulnerabilityOccurrence
                     * @interface IPackageIssue
                     * @property {string|null} [affectedCpeUri] PackageIssue affectedCpeUri
                     * @property {string|null} [affectedPackage] PackageIssue affectedPackage
                     * @property {grafeas.v1.IVersion|null} [affectedVersion] PackageIssue affectedVersion
                     * @property {string|null} [fixedCpeUri] PackageIssue fixedCpeUri
                     * @property {string|null} [fixedPackage] PackageIssue fixedPackage
                     * @property {grafeas.v1.IVersion|null} [fixedVersion] PackageIssue fixedVersion
                     * @property {boolean|null} [fixAvailable] PackageIssue fixAvailable
                     * @property {string|null} [packageType] PackageIssue packageType
                     * @property {grafeas.v1.Severity|null} [effectiveSeverity] PackageIssue effectiveSeverity
                     * @property {Array.<grafeas.v1.IFileLocation>|null} [fileLocation] PackageIssue fileLocation
                     */
    
                    /**
                     * Constructs a new PackageIssue.
                     * @memberof grafeas.v1.VulnerabilityOccurrence
                     * @classdesc Represents a PackageIssue.
                     * @implements IPackageIssue
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityOccurrence.IPackageIssue=} [properties] Properties to set
                     */
                    function PackageIssue(properties) {
                        this.fileLocation = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageIssue affectedCpeUri.
                     * @member {string} affectedCpeUri
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.affectedCpeUri = "";
    
                    /**
                     * PackageIssue affectedPackage.
                     * @member {string} affectedPackage
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.affectedPackage = "";
    
                    /**
                     * PackageIssue affectedVersion.
                     * @member {grafeas.v1.IVersion|null|undefined} affectedVersion
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.affectedVersion = null;
    
                    /**
                     * PackageIssue fixedCpeUri.
                     * @member {string} fixedCpeUri
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fixedCpeUri = "";
    
                    /**
                     * PackageIssue fixedPackage.
                     * @member {string} fixedPackage
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fixedPackage = "";
    
                    /**
                     * PackageIssue fixedVersion.
                     * @member {grafeas.v1.IVersion|null|undefined} fixedVersion
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fixedVersion = null;
    
                    /**
                     * PackageIssue fixAvailable.
                     * @member {boolean} fixAvailable
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fixAvailable = false;
    
                    /**
                     * PackageIssue packageType.
                     * @member {string} packageType
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.packageType = "";
    
                    /**
                     * PackageIssue effectiveSeverity.
                     * @member {grafeas.v1.Severity} effectiveSeverity
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.effectiveSeverity = 0;
    
                    /**
                     * PackageIssue fileLocation.
                     * @member {Array.<grafeas.v1.IFileLocation>} fileLocation
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fileLocation = $util.emptyArray;
    
                    /**
                     * Creates a new PackageIssue instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IPackageIssue=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityOccurrence.PackageIssue} PackageIssue instance
                     */
                    PackageIssue.create = function create(properties) {
                        return new PackageIssue(properties);
                    };
    
                    /**
                     * Encodes the specified PackageIssue message. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.PackageIssue.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IPackageIssue} message PackageIssue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageIssue.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.affectedCpeUri != null && Object.hasOwnProperty.call(message, "affectedCpeUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.affectedCpeUri);
                        if (message.affectedPackage != null && Object.hasOwnProperty.call(message, "affectedPackage"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.affectedPackage);
                        if (message.affectedVersion != null && Object.hasOwnProperty.call(message, "affectedVersion"))
                            $root.grafeas.v1.Version.encode(message.affectedVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.fixedCpeUri != null && Object.hasOwnProperty.call(message, "fixedCpeUri"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.fixedCpeUri);
                        if (message.fixedPackage != null && Object.hasOwnProperty.call(message, "fixedPackage"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.fixedPackage);
                        if (message.fixedVersion != null && Object.hasOwnProperty.call(message, "fixedVersion"))
                            $root.grafeas.v1.Version.encode(message.fixedVersion, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.fixAvailable != null && Object.hasOwnProperty.call(message, "fixAvailable"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.fixAvailable);
                        if (message.packageType != null && Object.hasOwnProperty.call(message, "packageType"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.packageType);
                        if (message.effectiveSeverity != null && Object.hasOwnProperty.call(message, "effectiveSeverity"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.effectiveSeverity);
                        if (message.fileLocation != null && message.fileLocation.length)
                            for (var i = 0; i < message.fileLocation.length; ++i)
                                $root.grafeas.v1.FileLocation.encode(message.fileLocation[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageIssue message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.PackageIssue.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IPackageIssue} message PackageIssue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageIssue.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageIssue message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityOccurrence.PackageIssue} PackageIssue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageIssue.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.affectedCpeUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.affectedPackage = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.affectedVersion = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.fixedCpeUri = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.fixedPackage = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.fixedVersion = $root.grafeas.v1.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.fixAvailable = reader.bool();
                                    break;
                                }
                            case 8: {
                                    message.packageType = reader.string();
                                    break;
                                }
                            case 9: {
                                    message.effectiveSeverity = reader.int32();
                                    break;
                                }
                            case 10: {
                                    if (!(message.fileLocation && message.fileLocation.length))
                                        message.fileLocation = [];
                                    message.fileLocation.push($root.grafeas.v1.FileLocation.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageIssue message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityOccurrence.PackageIssue} PackageIssue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageIssue.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageIssue message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageIssue.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.affectedCpeUri != null && message.hasOwnProperty("affectedCpeUri"))
                            if (!$util.isString(message.affectedCpeUri))
                                return "affectedCpeUri: string expected";
                        if (message.affectedPackage != null && message.hasOwnProperty("affectedPackage"))
                            if (!$util.isString(message.affectedPackage))
                                return "affectedPackage: string expected";
                        if (message.affectedVersion != null && message.hasOwnProperty("affectedVersion")) {
                            var error = $root.grafeas.v1.Version.verify(message.affectedVersion);
                            if (error)
                                return "affectedVersion." + error;
                        }
                        if (message.fixedCpeUri != null && message.hasOwnProperty("fixedCpeUri"))
                            if (!$util.isString(message.fixedCpeUri))
                                return "fixedCpeUri: string expected";
                        if (message.fixedPackage != null && message.hasOwnProperty("fixedPackage"))
                            if (!$util.isString(message.fixedPackage))
                                return "fixedPackage: string expected";
                        if (message.fixedVersion != null && message.hasOwnProperty("fixedVersion")) {
                            var error = $root.grafeas.v1.Version.verify(message.fixedVersion);
                            if (error)
                                return "fixedVersion." + error;
                        }
                        if (message.fixAvailable != null && message.hasOwnProperty("fixAvailable"))
                            if (typeof message.fixAvailable !== "boolean")
                                return "fixAvailable: boolean expected";
                        if (message.packageType != null && message.hasOwnProperty("packageType"))
                            if (!$util.isString(message.packageType))
                                return "packageType: string expected";
                        if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                            switch (message.effectiveSeverity) {
                            default:
                                return "effectiveSeverity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.fileLocation != null && message.hasOwnProperty("fileLocation")) {
                            if (!Array.isArray(message.fileLocation))
                                return "fileLocation: array expected";
                            for (var i = 0; i < message.fileLocation.length; ++i) {
                                var error = $root.grafeas.v1.FileLocation.verify(message.fileLocation[i]);
                                if (error)
                                    return "fileLocation." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageIssue message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityOccurrence.PackageIssue} PackageIssue
                     */
                    PackageIssue.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityOccurrence.PackageIssue();
                        if (object.affectedCpeUri != null)
                            message.affectedCpeUri = String(object.affectedCpeUri);
                        if (object.affectedPackage != null)
                            message.affectedPackage = String(object.affectedPackage);
                        if (object.affectedVersion != null) {
                            if (typeof object.affectedVersion !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.PackageIssue.affectedVersion: object expected");
                            message.affectedVersion = $root.grafeas.v1.Version.fromObject(object.affectedVersion);
                        }
                        if (object.fixedCpeUri != null)
                            message.fixedCpeUri = String(object.fixedCpeUri);
                        if (object.fixedPackage != null)
                            message.fixedPackage = String(object.fixedPackage);
                        if (object.fixedVersion != null) {
                            if (typeof object.fixedVersion !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.PackageIssue.fixedVersion: object expected");
                            message.fixedVersion = $root.grafeas.v1.Version.fromObject(object.fixedVersion);
                        }
                        if (object.fixAvailable != null)
                            message.fixAvailable = Boolean(object.fixAvailable);
                        if (object.packageType != null)
                            message.packageType = String(object.packageType);
                        switch (object.effectiveSeverity) {
                        default:
                            if (typeof object.effectiveSeverity === "number") {
                                message.effectiveSeverity = object.effectiveSeverity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.effectiveSeverity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.effectiveSeverity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.effectiveSeverity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.effectiveSeverity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.effectiveSeverity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.effectiveSeverity = 5;
                            break;
                        }
                        if (object.fileLocation) {
                            if (!Array.isArray(object.fileLocation))
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.PackageIssue.fileLocation: array expected");
                            message.fileLocation = [];
                            for (var i = 0; i < object.fileLocation.length; ++i) {
                                if (typeof object.fileLocation[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityOccurrence.PackageIssue.fileLocation: object expected");
                                message.fileLocation[i] = $root.grafeas.v1.FileLocation.fromObject(object.fileLocation[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageIssue message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.PackageIssue} message PackageIssue
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageIssue.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.fileLocation = [];
                        if (options.defaults) {
                            object.affectedCpeUri = "";
                            object.affectedPackage = "";
                            object.affectedVersion = null;
                            object.fixedCpeUri = "";
                            object.fixedPackage = "";
                            object.fixedVersion = null;
                            object.fixAvailable = false;
                            object.packageType = "";
                            object.effectiveSeverity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        }
                        if (message.affectedCpeUri != null && message.hasOwnProperty("affectedCpeUri"))
                            object.affectedCpeUri = message.affectedCpeUri;
                        if (message.affectedPackage != null && message.hasOwnProperty("affectedPackage"))
                            object.affectedPackage = message.affectedPackage;
                        if (message.affectedVersion != null && message.hasOwnProperty("affectedVersion"))
                            object.affectedVersion = $root.grafeas.v1.Version.toObject(message.affectedVersion, options);
                        if (message.fixedCpeUri != null && message.hasOwnProperty("fixedCpeUri"))
                            object.fixedCpeUri = message.fixedCpeUri;
                        if (message.fixedPackage != null && message.hasOwnProperty("fixedPackage"))
                            object.fixedPackage = message.fixedPackage;
                        if (message.fixedVersion != null && message.hasOwnProperty("fixedVersion"))
                            object.fixedVersion = $root.grafeas.v1.Version.toObject(message.fixedVersion, options);
                        if (message.fixAvailable != null && message.hasOwnProperty("fixAvailable"))
                            object.fixAvailable = message.fixAvailable;
                        if (message.packageType != null && message.hasOwnProperty("packageType"))
                            object.packageType = message.packageType;
                        if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                            object.effectiveSeverity = options.enums === String ? $root.grafeas.v1.Severity[message.effectiveSeverity] === undefined ? message.effectiveSeverity : $root.grafeas.v1.Severity[message.effectiveSeverity] : message.effectiveSeverity;
                        if (message.fileLocation && message.fileLocation.length) {
                            object.fileLocation = [];
                            for (var j = 0; j < message.fileLocation.length; ++j)
                                object.fileLocation[j] = $root.grafeas.v1.FileLocation.toObject(message.fileLocation[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PackageIssue to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageIssue.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PackageIssue
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityOccurrence.PackageIssue
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PackageIssue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityOccurrence.PackageIssue";
                    };
    
                    return PackageIssue;
                })();
    
                VulnerabilityOccurrence.VexAssessment = (function() {
    
                    /**
                     * Properties of a VexAssessment.
                     * @memberof grafeas.v1.VulnerabilityOccurrence
                     * @interface IVexAssessment
                     * @property {string|null} [cve] VexAssessment cve
                     * @property {Array.<grafeas.v1.IRelatedUrl>|null} [relatedUris] VexAssessment relatedUris
                     * @property {string|null} [noteName] VexAssessment noteName
                     * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.State|null} [state] VexAssessment state
                     * @property {Array.<string>|null} [impacts] VexAssessment impacts
                     * @property {Array.<grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation>|null} [remediations] VexAssessment remediations
                     * @property {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification|null} [justification] VexAssessment justification
                     */
    
                    /**
                     * Constructs a new VexAssessment.
                     * @memberof grafeas.v1.VulnerabilityOccurrence
                     * @classdesc Represents a VexAssessment.
                     * @implements IVexAssessment
                     * @constructor
                     * @param {grafeas.v1.VulnerabilityOccurrence.IVexAssessment=} [properties] Properties to set
                     */
                    function VexAssessment(properties) {
                        this.relatedUris = [];
                        this.impacts = [];
                        this.remediations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VexAssessment cve.
                     * @member {string} cve
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.cve = "";
    
                    /**
                     * VexAssessment relatedUris.
                     * @member {Array.<grafeas.v1.IRelatedUrl>} relatedUris
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.relatedUris = $util.emptyArray;
    
                    /**
                     * VexAssessment noteName.
                     * @member {string} noteName
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.noteName = "";
    
                    /**
                     * VexAssessment state.
                     * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.State} state
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.state = 0;
    
                    /**
                     * VexAssessment impacts.
                     * @member {Array.<string>} impacts
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.impacts = $util.emptyArray;
    
                    /**
                     * VexAssessment remediations.
                     * @member {Array.<grafeas.v1.VulnerabilityAssessmentNote.Assessment.IRemediation>} remediations
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.remediations = $util.emptyArray;
    
                    /**
                     * VexAssessment justification.
                     * @member {grafeas.v1.VulnerabilityAssessmentNote.Assessment.IJustification|null|undefined} justification
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     */
                    VexAssessment.prototype.justification = null;
    
                    /**
                     * Creates a new VexAssessment instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IVexAssessment=} [properties] Properties to set
                     * @returns {grafeas.v1.VulnerabilityOccurrence.VexAssessment} VexAssessment instance
                     */
                    VexAssessment.create = function create(properties) {
                        return new VexAssessment(properties);
                    };
    
                    /**
                     * Encodes the specified VexAssessment message. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.VexAssessment.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IVexAssessment} message VexAssessment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VexAssessment.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cve != null && Object.hasOwnProperty.call(message, "cve"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cve);
                        if (message.relatedUris != null && message.relatedUris.length)
                            for (var i = 0; i < message.relatedUris.length; ++i)
                                $root.grafeas.v1.RelatedUrl.encode(message.relatedUris[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.noteName != null && Object.hasOwnProperty.call(message, "noteName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.noteName);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);
                        if (message.impacts != null && message.impacts.length)
                            for (var i = 0; i < message.impacts.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.impacts[i]);
                        if (message.remediations != null && message.remediations.length)
                            for (var i = 0; i < message.remediations.length; ++i)
                                $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.encode(message.remediations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.justification != null && Object.hasOwnProperty.call(message, "justification"))
                            $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.encode(message.justification, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VexAssessment message, length delimited. Does not implicitly {@link grafeas.v1.VulnerabilityOccurrence.VexAssessment.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.IVexAssessment} message VexAssessment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VexAssessment.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VexAssessment message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1.VulnerabilityOccurrence.VexAssessment} VexAssessment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VexAssessment.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cve = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.relatedUris && message.relatedUris.length))
                                        message.relatedUris = [];
                                    message.relatedUris.push($root.grafeas.v1.RelatedUrl.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 3: {
                                    message.noteName = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.state = reader.int32();
                                    break;
                                }
                            case 5: {
                                    if (!(message.impacts && message.impacts.length))
                                        message.impacts = [];
                                    message.impacts.push(reader.string());
                                    break;
                                }
                            case 6: {
                                    if (!(message.remediations && message.remediations.length))
                                        message.remediations = [];
                                    message.remediations.push($root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 7: {
                                    message.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VexAssessment message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1.VulnerabilityOccurrence.VexAssessment} VexAssessment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VexAssessment.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VexAssessment message.
                     * @function verify
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VexAssessment.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cve != null && message.hasOwnProperty("cve"))
                            if (!$util.isString(message.cve))
                                return "cve: string expected";
                        if (message.relatedUris != null && message.hasOwnProperty("relatedUris")) {
                            if (!Array.isArray(message.relatedUris))
                                return "relatedUris: array expected";
                            for (var i = 0; i < message.relatedUris.length; ++i) {
                                var error = $root.grafeas.v1.RelatedUrl.verify(message.relatedUris[i]);
                                if (error)
                                    return "relatedUris." + error;
                            }
                        }
                        if (message.noteName != null && message.hasOwnProperty("noteName"))
                            if (!$util.isString(message.noteName))
                                return "noteName: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.impacts != null && message.hasOwnProperty("impacts")) {
                            if (!Array.isArray(message.impacts))
                                return "impacts: array expected";
                            for (var i = 0; i < message.impacts.length; ++i)
                                if (!$util.isString(message.impacts[i]))
                                    return "impacts: string[] expected";
                        }
                        if (message.remediations != null && message.hasOwnProperty("remediations")) {
                            if (!Array.isArray(message.remediations))
                                return "remediations: array expected";
                            for (var i = 0; i < message.remediations.length; ++i) {
                                var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.verify(message.remediations[i]);
                                if (error)
                                    return "remediations." + error;
                            }
                        }
                        if (message.justification != null && message.hasOwnProperty("justification")) {
                            var error = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.verify(message.justification);
                            if (error)
                                return "justification." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a VexAssessment message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1.VulnerabilityOccurrence.VexAssessment} VexAssessment
                     */
                    VexAssessment.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment)
                            return object;
                        var message = new $root.grafeas.v1.VulnerabilityOccurrence.VexAssessment();
                        if (object.cve != null)
                            message.cve = String(object.cve);
                        if (object.relatedUris) {
                            if (!Array.isArray(object.relatedUris))
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.relatedUris: array expected");
                            message.relatedUris = [];
                            for (var i = 0; i < object.relatedUris.length; ++i) {
                                if (typeof object.relatedUris[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.relatedUris: object expected");
                                message.relatedUris[i] = $root.grafeas.v1.RelatedUrl.fromObject(object.relatedUris[i]);
                            }
                        }
                        if (object.noteName != null)
                            message.noteName = String(object.noteName);
                        switch (object.state) {
                        default:
                            if (typeof object.state === "number") {
                                message.state = object.state;
                                break;
                            }
                            break;
                        case "STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "AFFECTED":
                        case 1:
                            message.state = 1;
                            break;
                        case "NOT_AFFECTED":
                        case 2:
                            message.state = 2;
                            break;
                        case "FIXED":
                        case 3:
                            message.state = 3;
                            break;
                        case "UNDER_INVESTIGATION":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        if (object.impacts) {
                            if (!Array.isArray(object.impacts))
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.impacts: array expected");
                            message.impacts = [];
                            for (var i = 0; i < object.impacts.length; ++i)
                                message.impacts[i] = String(object.impacts[i]);
                        }
                        if (object.remediations) {
                            if (!Array.isArray(object.remediations))
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.remediations: array expected");
                            message.remediations = [];
                            for (var i = 0; i < object.remediations.length; ++i) {
                                if (typeof object.remediations[i] !== "object")
                                    throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.remediations: object expected");
                                message.remediations[i] = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.fromObject(object.remediations[i]);
                            }
                        }
                        if (object.justification != null) {
                            if (typeof object.justification !== "object")
                                throw TypeError(".grafeas.v1.VulnerabilityOccurrence.VexAssessment.justification: object expected");
                            message.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.fromObject(object.justification);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VexAssessment message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {grafeas.v1.VulnerabilityOccurrence.VexAssessment} message VexAssessment
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VexAssessment.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.relatedUris = [];
                            object.impacts = [];
                            object.remediations = [];
                        }
                        if (options.defaults) {
                            object.cve = "";
                            object.noteName = "";
                            object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            object.justification = null;
                        }
                        if (message.cve != null && message.hasOwnProperty("cve"))
                            object.cve = message.cve;
                        if (message.relatedUris && message.relatedUris.length) {
                            object.relatedUris = [];
                            for (var j = 0; j < message.relatedUris.length; ++j)
                                object.relatedUris[j] = $root.grafeas.v1.RelatedUrl.toObject(message.relatedUris[j], options);
                        }
                        if (message.noteName != null && message.hasOwnProperty("noteName"))
                            object.noteName = message.noteName;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.State[message.state] === undefined ? message.state : $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.State[message.state] : message.state;
                        if (message.impacts && message.impacts.length) {
                            object.impacts = [];
                            for (var j = 0; j < message.impacts.length; ++j)
                                object.impacts[j] = message.impacts[j];
                        }
                        if (message.remediations && message.remediations.length) {
                            object.remediations = [];
                            for (var j = 0; j < message.remediations.length; ++j)
                                object.remediations[j] = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Remediation.toObject(message.remediations[j], options);
                        }
                        if (message.justification != null && message.hasOwnProperty("justification"))
                            object.justification = $root.grafeas.v1.VulnerabilityAssessmentNote.Assessment.Justification.toObject(message.justification, options);
                        return object;
                    };
    
                    /**
                     * Converts this VexAssessment to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VexAssessment.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for VexAssessment
                     * @function getTypeUrl
                     * @memberof grafeas.v1.VulnerabilityOccurrence.VexAssessment
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    VexAssessment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1.VulnerabilityOccurrence.VexAssessment";
                    };
    
                    return VexAssessment;
                })();
    
                return VulnerabilityOccurrence;
            })();
    
            return v1;
        })();
    
        return grafeas;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.Struct = (function() {
    
                /**
                 * Properties of a Struct.
                 * @memberof google.protobuf
                 * @interface IStruct
                 * @property {Object.<string,google.protobuf.IValue>|null} [fields] Struct fields
                 */
    
                /**
                 * Constructs a new Struct.
                 * @memberof google.protobuf
                 * @classdesc Represents a Struct.
                 * @implements IStruct
                 * @constructor
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 */
                function Struct(properties) {
                    this.fields = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Struct fields.
                 * @member {Object.<string,google.protobuf.IValue>} fields
                 * @memberof google.protobuf.Struct
                 * @instance
                 */
                Struct.prototype.fields = $util.emptyObject;
    
                /**
                 * Creates a new Struct instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 * @returns {google.protobuf.Struct} Struct instance
                 */
                Struct.create = function create(properties) {
                    return new Struct(properties);
                };
    
                /**
                 * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && Object.hasOwnProperty.call(message, "fields"))
                        for (var keys = Object.keys(message.fields), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.google.protobuf.Value.encode(message.fields[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Struct(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (message.fields === $util.emptyObject)
                                    message.fields = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.fields[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Struct message.
                 * @function verify
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Struct.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!$util.isObject(message.fields))
                            return "fields: object expected";
                        var key = Object.keys(message.fields);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.fields[key[i]]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Struct message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Struct} Struct
                 */
                Struct.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Struct)
                        return object;
                    var message = new $root.google.protobuf.Struct();
                    if (object.fields) {
                        if (typeof object.fields !== "object")
                            throw TypeError(".google.protobuf.Struct.fields: object expected");
                        message.fields = {};
                        for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                            if (typeof object.fields[keys[i]] !== "object")
                                throw TypeError(".google.protobuf.Struct.fields: object expected");
                            message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Struct message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Struct.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.fields = {};
                    var keys2;
                    if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                        object.fields = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Struct to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Struct
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Struct.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Struct
                 * @function getTypeUrl
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Struct.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Struct";
                };
    
                return Struct;
            })();
    
            protobuf.Value = (function() {
    
                /**
                 * Properties of a Value.
                 * @memberof google.protobuf
                 * @interface IValue
                 * @property {google.protobuf.NullValue|null} [nullValue] Value nullValue
                 * @property {number|null} [numberValue] Value numberValue
                 * @property {string|null} [stringValue] Value stringValue
                 * @property {boolean|null} [boolValue] Value boolValue
                 * @property {google.protobuf.IStruct|null} [structValue] Value structValue
                 * @property {google.protobuf.IListValue|null} [listValue] Value listValue
                 */
    
                /**
                 * Constructs a new Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a Value.
                 * @implements IValue
                 * @constructor
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 */
                function Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Value nullValue.
                 * @member {google.protobuf.NullValue|null|undefined} nullValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.nullValue = null;
    
                /**
                 * Value numberValue.
                 * @member {number|null|undefined} numberValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.numberValue = null;
    
                /**
                 * Value stringValue.
                 * @member {string|null|undefined} stringValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.stringValue = null;
    
                /**
                 * Value boolValue.
                 * @member {boolean|null|undefined} boolValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.boolValue = null;
    
                /**
                 * Value structValue.
                 * @member {google.protobuf.IStruct|null|undefined} structValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.structValue = null;
    
                /**
                 * Value listValue.
                 * @member {google.protobuf.IListValue|null|undefined} listValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.listValue = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Value kind.
                 * @member {"nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue"|undefined} kind
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Object.defineProperty(Value.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 * @returns {google.protobuf.Value} Value instance
                 */
                Value.create = function create(properties) {
                    return new Value(properties);
                };
    
                /**
                 * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nullValue != null && Object.hasOwnProperty.call(message, "nullValue"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nullValue);
                    if (message.numberValue != null && Object.hasOwnProperty.call(message, "numberValue"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.numberValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                    if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                    if (message.structValue != null && Object.hasOwnProperty.call(message, "structValue"))
                        $root.google.protobuf.Struct.encode(message.structValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.listValue != null && Object.hasOwnProperty.call(message, "listValue"))
                        $root.google.protobuf.ListValue.encode(message.listValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.nullValue = reader.int32();
                                break;
                            }
                        case 2: {
                                message.numberValue = reader.double();
                                break;
                            }
                        case 3: {
                                message.stringValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.boolValue = reader.bool();
                                break;
                            }
                        case 5: {
                                message.structValue = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.listValue = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Value message.
                 * @function verify
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        properties.kind = 1;
                        switch (message.nullValue) {
                        default:
                            return "nullValue: enum value expected";
                        case 0:
                            break;
                        }
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.numberValue !== "number")
                            return "numberValue: number expected";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (!$util.isString(message.stringValue))
                            return "stringValue: string expected";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.boolValue !== "boolean")
                            return "boolValue: boolean expected";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.Struct.verify(message.structValue);
                            if (error)
                                return "structValue." + error;
                        }
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.ListValue.verify(message.listValue);
                            if (error)
                                return "listValue." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Value} Value
                 */
                Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Value)
                        return object;
                    var message = new $root.google.protobuf.Value();
                    switch (object.nullValue) {
                    default:
                        if (typeof object.nullValue === "number") {
                            message.nullValue = object.nullValue;
                            break;
                        }
                        break;
                    case "NULL_VALUE":
                    case 0:
                        message.nullValue = 0;
                        break;
                    }
                    if (object.numberValue != null)
                        message.numberValue = Number(object.numberValue);
                    if (object.stringValue != null)
                        message.stringValue = String(object.stringValue);
                    if (object.boolValue != null)
                        message.boolValue = Boolean(object.boolValue);
                    if (object.structValue != null) {
                        if (typeof object.structValue !== "object")
                            throw TypeError(".google.protobuf.Value.structValue: object expected");
                        message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
                    }
                    if (object.listValue != null) {
                        if (typeof object.listValue !== "object")
                            throw TypeError(".google.protobuf.Value.listValue: object expected");
                        message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] === undefined ? message.nullValue : $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                        if (options.oneofs)
                            object.kind = "nullValue";
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                        if (options.oneofs)
                            object.kind = "numberValue";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        object.stringValue = message.stringValue;
                        if (options.oneofs)
                            object.kind = "stringValue";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        object.boolValue = message.boolValue;
                        if (options.oneofs)
                            object.kind = "boolValue";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                        if (options.oneofs)
                            object.kind = "structValue";
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                        if (options.oneofs)
                            object.kind = "listValue";
                    }
                    return object;
                };
    
                /**
                 * Converts this Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Value";
                };
    
                return Value;
            })();
    
            /**
             * NullValue enum.
             * @name google.protobuf.NullValue
             * @enum {number}
             * @property {number} NULL_VALUE=0 NULL_VALUE value
             */
            protobuf.NullValue = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NULL_VALUE"] = 0;
                return values;
            })();
    
            protobuf.ListValue = (function() {
    
                /**
                 * Properties of a ListValue.
                 * @memberof google.protobuf
                 * @interface IListValue
                 * @property {Array.<google.protobuf.IValue>|null} [values] ListValue values
                 */
    
                /**
                 * Constructs a new ListValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a ListValue.
                 * @implements IListValue
                 * @constructor
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 */
                function ListValue(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListValue values.
                 * @member {Array.<google.protobuf.IValue>} values
                 * @memberof google.protobuf.ListValue
                 * @instance
                 */
                ListValue.prototype.values = $util.emptyArray;
    
                /**
                 * Creates a new ListValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 * @returns {google.protobuf.ListValue} ListValue instance
                 */
                ListValue.create = function create(properties) {
                    return new ListValue(properties);
                };
    
                /**
                 * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ListValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.values && message.values.length))
                                    message.values = [];
                                message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListValue message.
                 * @function verify
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.values[i]);
                            if (error)
                                return "values." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ListValue} ListValue
                 */
                ListValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ListValue)
                        return object;
                    var message = new $root.google.protobuf.ListValue();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".google.protobuf.ListValue.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i) {
                            if (typeof object.values[i] !== "object")
                                throw TypeError(".google.protobuf.ListValue.values: object expected");
                            message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ListValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ListValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ListValue";
                };
    
                return ListValue;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                    message[".google.api.resourceDefinition"] = [];
                                message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {google.protobuf.FieldOptions.OptionTargetType|null} [target] FieldOptions target
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions target.
                 * @member {google.protobuf.FieldOptions.OptionTargetType} target
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.target = 0;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.target);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 18: {
                                message.target = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        case 1055: {
                                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.target != null && message.hasOwnProperty("target"))
                        switch (message.target) {
                        default:
                            return "target: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    switch (object.target) {
                    default:
                        if (typeof object.target === "number") {
                            message.target = object.target;
                            break;
                        }
                        break;
                    case "TARGET_TYPE_UNKNOWN":
                    case 0:
                        message.target = 0;
                        break;
                    case "TARGET_TYPE_FILE":
                    case 1:
                        message.target = 1;
                        break;
                    case "TARGET_TYPE_EXTENSION_RANGE":
                    case 2:
                        message.target = 2;
                        break;
                    case "TARGET_TYPE_MESSAGE":
                    case 3:
                        message.target = 3;
                        break;
                    case "TARGET_TYPE_FIELD":
                    case 4:
                        message.target = 4;
                        break;
                    case "TARGET_TYPE_ONEOF":
                    case 5:
                        message.target = 5;
                        break;
                    case "TARGET_TYPE_ENUM":
                    case 6:
                        message.target = 6;
                        break;
                    case "TARGET_TYPE_ENUM_ENTRY":
                    case 7:
                        message.target = 7;
                        break;
                    case "TARGET_TYPE_SERVICE":
                    case 8:
                        message.target = 8;
                        break;
                    case "TARGET_TYPE_METHOD":
                    case 9:
                        message.target = 9;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === undefined ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldMask
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldMask";
                };
    
                return FieldMask;
            })();
    
            return protobuf;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.pattern && message.pattern.length))
                                    message.pattern = [];
                                message.pattern.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.nameField = reader.string();
                                break;
                            }
                        case 4: {
                                message.history = reader.int32();
                                break;
                            }
                        case 5: {
                                message.plural = reader.string();
                                break;
                            }
                        case 6: {
                                message.singular = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.style && message.style.length))
                                    message.style = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.style.push(reader.int32());
                                } else
                                    message.style.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    default:
                        if (typeof object.history === "number") {
                            message.history = object.history;
                            break;
                        }
                        break;
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                                if (typeof object.style[i] === "number") {
                                    message.style[i] = object.style[i];
                                    break;
                                }
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === undefined ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === undefined ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceDescriptor
                 * @function getTypeUrl
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceDescriptor";
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.childType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceReference
                 * @function getTypeUrl
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceReference";
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
