// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/policy_tag_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './policy_tag_manager_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Policy Tag Manager API service allows you to manage your policy tags and
 *  taxonomies.
 *
 *  Policy tags are used to tag BigQuery columns and apply additional access
 *  control policies. A taxonomy is a hierarchical grouping of policy tags that
 *  classify data along a common axis.
 * @class
 * @memberof v1
 */
export class PolicyTagManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  policyTagManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of PolicyTagManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new PolicyTagManagerClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof PolicyTagManagerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      entryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}'
      ),
      entryGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      policyTagPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/taxonomies/{taxonomy}/policyTags/{policy_tag}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      tagPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}/tags/{tag}'
      ),
      tagTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tagTemplates/{tag_template}'
      ),
      tagTemplateFieldPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tagTemplates/{tag_template}/fields/{field}'
      ),
      taxonomyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/taxonomies/{taxonomy}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTaxonomies: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'taxonomies'
      ),
      listPolicyTags: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'policyTags'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.datacatalog.v1.PolicyTagManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.policyTagManagerStub) {
      return this.policyTagManagerStub;
    }

    // Put together the "service stub" for
    // google.cloud.datacatalog.v1.PolicyTagManager.
    this.policyTagManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.datacatalog.v1.PolicyTagManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.datacatalog.v1.PolicyTagManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const policyTagManagerStubMethods = [
      'createTaxonomy',
      'deleteTaxonomy',
      'updateTaxonomy',
      'listTaxonomies',
      'getTaxonomy',
      'createPolicyTag',
      'deletePolicyTag',
      'updatePolicyTag',
      'listPolicyTags',
      'getPolicyTag',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of policyTagManagerStubMethods) {
      const callPromise = this.policyTagManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.policyTagManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'datacatalog.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'datacatalog.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a taxonomy in a specified project.
   *
   * The taxonomy is initially empty, that is, it doesn't contain policy tags.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the project that the taxonomy will belong to.
   * @param {google.cloud.datacatalog.v1.Taxonomy} request.taxonomy
   *   The taxonomy to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.create_taxonomy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_CreateTaxonomy_async
   */
  createTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest | undefined,
      {} | undefined
    ]
  >;
  createTaxonomy(
    request: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTaxonomy(
    request: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.ITaxonomy,
          | protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.ICreateTaxonomyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTaxonomy(request, options, callback);
  }
  /**
   * Deletes a taxonomy, including all policy tags in this
   * taxonomy, their associated policies, and the policy tags references from
   * BigQuery columns.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the taxonomy to delete.
   *
   *   Note: All policy tags in this taxonomy are also deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.delete_taxonomy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_DeleteTaxonomy_async
   */
  deleteTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.datacatalog.v1.IDeleteTaxonomyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTaxonomy(request, options, callback);
  }
  /**
   * Updates a taxonomy, including its display name,
   * description, and activated policy types.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1.Taxonomy} request.taxonomy
   *   The taxonomy to update. You can update only its description, display name,
   *   and activated policy types.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Specifies fields to update. If not set, defaults to all fields you can
   *   update.
   *
   *   For more information, see [FieldMask]
   *   (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.update_taxonomy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_UpdateTaxonomy_async
   */
  updateTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest | undefined,
      {} | undefined
    ]
  >;
  updateTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.ITaxonomy,
          | protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      | protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IUpdateTaxonomyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'taxonomy.name': request.taxonomy!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTaxonomy(request, options, callback);
  }
  /**
   * Gets a taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the taxonomy to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.get_taxonomy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_GetTaxonomy_async
   */
  getTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | undefined,
      {} | undefined
    ]
  >;
  getTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTaxonomy(
    request: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTaxonomy(
    request?: protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.ITaxonomy,
          | protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy,
      protos.google.cloud.datacatalog.v1.IGetTaxonomyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTaxonomy(request, options, callback);
  }
  /**
   * Creates a policy tag in a taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the taxonomy that the policy tag will belong to.
   * @param {google.cloud.datacatalog.v1.PolicyTag} request.policyTag
   *   The policy tag to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.create_policy_tag.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_CreatePolicyTag_async
   */
  createPolicyTag(
    request?: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest | undefined,
      {} | undefined
    ]
  >;
  createPolicyTag(
    request: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPolicyTag(
    request: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createPolicyTag(
    request?: protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.IPolicyTag,
          | protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.ICreatePolicyTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPolicyTag(request, options, callback);
  }
  /**
   * Deletes a policy tag together with the following:
   *
   * * All of its descendant policy tags, if any
   * * Policies associated with the policy tag and its descendants
   * * References from BigQuery table schema of the policy tag and its
   *   descendants
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the policy tag to delete.
   *
   *   Note: All of its descendant policy tags are also deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.delete_policy_tag.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_DeletePolicyTag_async
   */
  deletePolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest | undefined,
      {} | undefined
    ]
  >;
  deletePolicyTag(
    request: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePolicyTag(
    request: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deletePolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.datacatalog.v1.IDeletePolicyTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePolicyTag(request, options, callback);
  }
  /**
   * Updates a policy tag, including its display
   * name, description, and parent policy tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.v1.PolicyTag} request.policyTag
   *   The policy tag to update. You can update only its description, display
   *   name, and parent policy tag fields.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Specifies the fields to update.
   *
   *   You can update only display name, description, and parent policy tag.
   *   If not set, defaults to all updatable fields.
   *   For more information, see [FieldMask]
   *   (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.update_policy_tag.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_UpdatePolicyTag_async
   */
  updatePolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest | undefined,
      {} | undefined
    ]
  >;
  updatePolicyTag(
    request: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePolicyTag(
    request: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.IPolicyTag,
          | protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.IUpdatePolicyTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'policy_tag.name': request.policyTag!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePolicyTag(request, options, callback);
  }
  /**
   * Gets a policy tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the policy tag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.get_policy_tag.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_GetPolicyTag_async
   */
  getPolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest | undefined,
      {} | undefined
    ]
  >;
  getPolicyTag(
    request: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPolicyTag(
    request: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPolicyTag(
    request?: protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.v1.IPolicyTag,
          | protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      | protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag,
      protos.google.cloud.datacatalog.v1.IGetPolicyTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPolicyTag(request, options, callback);
  }
  /**
   * Gets the IAM policy for a policy tag or a taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.get_iam_policy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Sets the IAM policy for a policy tag or a taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.set_iam_policy.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Returns your permissions on a specified policy tag or
   * taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.test_iam_permissions.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  /**
   * Lists all taxonomies in a project in a particular location that you
   * have a permission to view.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the project to list the taxonomies of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively. If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set,
   *   the first page is returned.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTaxonomiesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTaxonomies(
    request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy[],
      protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest | null,
      protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
    ]
  >;
  listTaxonomies(
    request: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
      | protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.ITaxonomy
    >
  ): void;
  listTaxonomies(
    request: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
      | protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.ITaxonomy
    >
  ): void;
  listTaxonomies(
    request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
          | protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.v1.ITaxonomy
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
      | protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.ITaxonomy
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.ITaxonomy[],
      protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest | null,
      protos.google.cloud.datacatalog.v1.IListTaxonomiesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTaxonomies(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the project to list the taxonomies of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively. If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set,
   *   the first page is returned.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTaxonomiesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTaxonomiesStream(
    request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTaxonomies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTaxonomies.createStream(
      this.innerApiCalls.listTaxonomies as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTaxonomies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the project to list the taxonomies of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively. If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set,
   *   the first page is returned.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Taxonomy]{@link google.cloud.datacatalog.v1.Taxonomy}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.list_taxonomies.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_ListTaxonomies_async
   */
  listTaxonomiesAsync(
    request?: protos.google.cloud.datacatalog.v1.IListTaxonomiesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.v1.ITaxonomy> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTaxonomies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTaxonomies.asyncIterate(
      this.innerApiCalls['listTaxonomies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.v1.ITaxonomy>;
  }
  /**
   * Lists all policy tags in a taxonomy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the taxonomy to list the policy tags of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively.
   *   If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set, returns the
   *   first page.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPolicyTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPolicyTags(
    request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag[],
      protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest | null,
      protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
    ]
  >;
  listPolicyTags(
    request: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
      | protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.IPolicyTag
    >
  ): void;
  listPolicyTags(
    request: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
      | protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.IPolicyTag
    >
  ): void;
  listPolicyTags(
    request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
          | protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.v1.IPolicyTag
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
      | protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.v1.IPolicyTag
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.v1.IPolicyTag[],
      protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest | null,
      protos.google.cloud.datacatalog.v1.IListPolicyTagsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPolicyTags(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the taxonomy to list the policy tags of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively.
   *   If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set, returns the
   *   first page.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPolicyTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPolicyTagsStream(
    request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPolicyTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPolicyTags.createStream(
      this.innerApiCalls.listPolicyTags as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPolicyTags`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the taxonomy to list the policy tags of.
   * @param {number} request.pageSize
   *   The maximum number of items to return. Must be a value between 1 and 1000
   *   inclusively.
   *   If not set, defaults to 50.
   * @param {string} request.pageToken
   *   The pagination token of the next results page. If not set, returns the
   *   first page.
   *
   *   The token is returned in the response to a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [PolicyTag]{@link google.cloud.datacatalog.v1.PolicyTag}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/policy_tag_manager.list_policy_tags.js</caption>
   * region_tag:datacatalog_v1_generated_PolicyTagManager_ListPolicyTags_async
   */
  listPolicyTagsAsync(
    request?: protos.google.cloud.datacatalog.v1.IListPolicyTagsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.v1.IPolicyTag> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPolicyTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPolicyTags.asyncIterate(
      this.innerApiCalls['listPolicyTags'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.v1.IPolicyTag>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified entry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @returns {string} Resource name string.
   */
  entryPath(
    project: string,
    location: string,
    entryGroup: string,
    entry: string
  ) {
    return this.pathTemplates.entryPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
      entry: entry,
    });
  }

  /**
   * Parse the project from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).project;
  }

  /**
   * Parse the location from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).location;
  }

  /**
   * Parse the entry_group from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry_group;
  }

  /**
   * Parse the entry from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry;
  }

  /**
   * Return a fully-qualified entryGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @returns {string} Resource name string.
   */
  entryGroupPath(project: string, location: string, entryGroup: string) {
    return this.pathTemplates.entryGroupPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
    });
  }

  /**
   * Parse the project from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .project;
  }

  /**
   * Parse the location from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .location;
  }

  /**
   * Parse the entry_group from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .entry_group;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified policyTag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} taxonomy
   * @param {string} policy_tag
   * @returns {string} Resource name string.
   */
  policyTagPath(
    project: string,
    location: string,
    taxonomy: string,
    policyTag: string
  ) {
    return this.pathTemplates.policyTagPathTemplate.render({
      project: project,
      location: location,
      taxonomy: taxonomy,
      policy_tag: policyTag,
    });
  }

  /**
   * Parse the project from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPolicyTagName(policyTagName: string) {
    return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
      .project;
  }

  /**
   * Parse the location from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPolicyTagName(policyTagName: string) {
    return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
      .location;
  }

  /**
   * Parse the taxonomy from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the taxonomy.
   */
  matchTaxonomyFromPolicyTagName(policyTagName: string) {
    return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
      .taxonomy;
  }

  /**
   * Parse the policy_tag from PolicyTag resource.
   *
   * @param {string} policyTagName
   *   A fully-qualified path representing PolicyTag resource.
   * @returns {string} A string representing the policy_tag.
   */
  matchPolicyTagFromPolicyTagName(policyTagName: string) {
    return this.pathTemplates.policyTagPathTemplate.match(policyTagName)
      .policy_tag;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified tag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @param {string} tag
   * @returns {string} Resource name string.
   */
  tagPath(
    project: string,
    location: string,
    entryGroup: string,
    entry: string,
    tag: string
  ) {
    return this.pathTemplates.tagPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
      entry: entry,
      tag: tag,
    });
  }

  /**
   * Parse the project from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).project;
  }

  /**
   * Parse the location from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).location;
  }

  /**
   * Parse the entry_group from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).entry_group;
  }

  /**
   * Parse the entry from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).entry;
  }

  /**
   * Parse the tag from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the tag.
   */
  matchTagFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).tag;
  }

  /**
   * Return a fully-qualified tagTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tag_template
   * @returns {string} Resource name string.
   */
  tagTemplatePath(project: string, location: string, tagTemplate: string) {
    return this.pathTemplates.tagTemplatePathTemplate.render({
      project: project,
      location: location,
      tag_template: tagTemplate,
    });
  }

  /**
   * Parse the project from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagTemplateName(tagTemplateName: string) {
    return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .project;
  }

  /**
   * Parse the location from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagTemplateName(tagTemplateName: string) {
    return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .location;
  }

  /**
   * Parse the tag_template from TagTemplate resource.
   *
   * @param {string} tagTemplateName
   *   A fully-qualified path representing TagTemplate resource.
   * @returns {string} A string representing the tag_template.
   */
  matchTagTemplateFromTagTemplateName(tagTemplateName: string) {
    return this.pathTemplates.tagTemplatePathTemplate.match(tagTemplateName)
      .tag_template;
  }

  /**
   * Return a fully-qualified tagTemplateField resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tag_template
   * @param {string} field
   * @returns {string} Resource name string.
   */
  tagTemplateFieldPath(
    project: string,
    location: string,
    tagTemplate: string,
    field: string
  ) {
    return this.pathTemplates.tagTemplateFieldPathTemplate.render({
      project: project,
      location: location,
      tag_template: tagTemplate,
      field: field,
    });
  }

  /**
   * Parse the project from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this.pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).project;
  }

  /**
   * Parse the location from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this.pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).location;
  }

  /**
   * Parse the tag_template from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the tag_template.
   */
  matchTagTemplateFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this.pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).tag_template;
  }

  /**
   * Parse the field from TagTemplateField resource.
   *
   * @param {string} tagTemplateFieldName
   *   A fully-qualified path representing TagTemplateField resource.
   * @returns {string} A string representing the field.
   */
  matchFieldFromTagTemplateFieldName(tagTemplateFieldName: string) {
    return this.pathTemplates.tagTemplateFieldPathTemplate.match(
      tagTemplateFieldName
    ).field;
  }

  /**
   * Return a fully-qualified taxonomy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} taxonomy
   * @returns {string} Resource name string.
   */
  taxonomyPath(project: string, location: string, taxonomy: string) {
    return this.pathTemplates.taxonomyPathTemplate.render({
      project: project,
      location: location,
      taxonomy: taxonomy,
    });
  }

  /**
   * Parse the project from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaxonomyName(taxonomyName: string) {
    return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).project;
  }

  /**
   * Parse the location from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaxonomyName(taxonomyName: string) {
    return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).location;
  }

  /**
   * Parse the taxonomy from Taxonomy resource.
   *
   * @param {string} taxonomyName
   *   A fully-qualified path representing Taxonomy resource.
   * @returns {string} A string representing the taxonomy.
   */
  matchTaxonomyFromTaxonomyName(taxonomyName: string) {
    return this.pathTemplates.taxonomyPathTemplate.match(taxonomyName).taxonomy;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.policyTagManagerStub && !this._terminated) {
      return this.policyTagManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
