// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datacatalogModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.DataCatalogClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        datacatalogModule.v1beta1.DataCatalogClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        datacatalogModule.v1beta1.DataCatalogClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = datacatalogModule.v1beta1.DataCatalogClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.dataCatalogStub, undefined);
      await client.initialize();
      assert(client.dataCatalogStub);
    });

    it('has close method for the initialized client', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.dataCatalogStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.dataCatalogStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('createEntryGroup', () => {
    it('invokes createEntryGroup without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.createEntryGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.createEntryGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.createEntryGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntryGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntryGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntryGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createEntryGroup(request), expectedError);
    });
  });

  describe('updateEntryGroup', () => {
    it('invokes updateEntryGroup without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.updateEntryGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.updateEntryGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.updateEntryGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEntryGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntryGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntryGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateEntryGroup(request), expectedError);
    });
  });

  describe('getEntryGroup', () => {
    it('invokes getEntryGroup without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.getEntryGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntryGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
      );
      client.innerApiCalls.getEntryGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntryGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntryGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntryGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntryGroup(request), expectedError);
    });
  });

  describe('deleteEntryGroup', () => {
    it('invokes deleteEntryGroup without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEntryGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteEntryGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEntryGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEntryGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntryGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteEntryGroup(request), expectedError);
    });
  });

  describe('createEntry', () => {
    it('invokes createEntry without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.createEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.createEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.createEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createEntry(request), expectedError);
    });
  });

  describe('updateEntry', () => {
    it('invokes updateEntry without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.updateEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.updateEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.updateEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateEntry(request), expectedError);
    });
  });

  describe('deleteEntry', () => {
    it('invokes deleteEntry without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteEntry(request), expectedError);
    });
  });

  describe('getEntry', () => {
    it('invokes getEntry without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.getEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.getEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntry = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntry(request), expectedError);
    });
  });

  describe('lookupEntry', () => {
    it('invokes lookupEntry without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.LookupEntryRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.lookupEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.lookupEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes lookupEntry without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.LookupEntryRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Entry()
      );
      client.innerApiCalls.lookupEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes lookupEntry with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.LookupEntryRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.lookupEntry(request), expectedError);
    });

    it('invokes lookupEntry with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.LookupEntryRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.lookupEntry(request), expectedError);
    });
  });

  describe('createTagTemplate', () => {
    it('invokes createTagTemplate without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.createTagTemplate = stubSimpleCall(expectedResponse);
      const [response] = await client.createTagTemplate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplate without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.createTagTemplate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTagTemplate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplate | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplate with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTagTemplate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createTagTemplate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplate with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createTagTemplate(request), expectedError);
    });
  });

  describe('getTagTemplate', () => {
    it('invokes getTagTemplate without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.getTagTemplate = stubSimpleCall(expectedResponse);
      const [response] = await client.getTagTemplate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTagTemplate without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.getTagTemplate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTagTemplate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplate | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTagTemplate with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTagTemplate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getTagTemplate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTagTemplate with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.GetTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTagTemplate(request), expectedError);
    });
  });

  describe('updateTagTemplate', () => {
    it('invokes updateTagTemplate without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest()
      );
      request.tagTemplate ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest',
        ['tagTemplate', 'name']
      );
      request.tagTemplate.name = defaultValue1;
      const expectedHeaderRequestParams = `tag_template.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.updateTagTemplate = stubSimpleCall(expectedResponse);
      const [response] = await client.updateTagTemplate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplate without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest()
      );
      request.tagTemplate ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest',
        ['tagTemplate', 'name']
      );
      request.tagTemplate.name = defaultValue1;
      const expectedHeaderRequestParams = `tag_template.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplate()
      );
      client.innerApiCalls.updateTagTemplate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTagTemplate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplate | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplate with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest()
      );
      request.tagTemplate ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest',
        ['tagTemplate', 'name']
      );
      request.tagTemplate.name = defaultValue1;
      const expectedHeaderRequestParams = `tag_template.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTagTemplate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateTagTemplate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplate with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest()
      );
      request.tagTemplate ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateRequest',
        ['tagTemplate', 'name']
      );
      request.tagTemplate.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateTagTemplate(request), expectedError);
    });
  });

  describe('deleteTagTemplate', () => {
    it('invokes deleteTagTemplate without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTagTemplate = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTagTemplate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplate without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTagTemplate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTagTemplate(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplate with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTagTemplate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteTagTemplate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplate with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteTagTemplate(request), expectedError);
    });
  });

  describe('createTagTemplateField', () => {
    it('invokes createTagTemplateField without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.createTagTemplateField =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createTagTemplateField(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplateField without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.createTagTemplateField =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTagTemplateField(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplateField | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplateField with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTagTemplateField = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createTagTemplateField(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTagTemplateField with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagTemplateFieldRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createTagTemplateField(request),
        expectedError
      );
    });
  });

  describe('updateTagTemplateField', () => {
    it('invokes updateTagTemplateField without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.updateTagTemplateField =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateTagTemplateField(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplateField without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.updateTagTemplateField =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTagTemplateField(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplateField | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplateField with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTagTemplateField = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateTagTemplateField(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTagTemplateField with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateTagTemplateField(request),
        expectedError
      );
    });
  });

  describe('renameTagTemplateField', () => {
    it('invokes renameTagTemplateField without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.renameTagTemplateField =
        stubSimpleCall(expectedResponse);
      const [response] = await client.renameTagTemplateField(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes renameTagTemplateField without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.TagTemplateField()
      );
      client.innerApiCalls.renameTagTemplateField =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.renameTagTemplateField(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITagTemplateField | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes renameTagTemplateField with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.renameTagTemplateField = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.renameTagTemplateField(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.renameTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes renameTagTemplateField with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.RenameTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.renameTagTemplateField(request),
        expectedError
      );
    });
  });

  describe('deleteTagTemplateField', () => {
    it('invokes deleteTagTemplateField without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTagTemplateField =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTagTemplateField(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplateField without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTagTemplateField =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTagTemplateField(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplateField with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTagTemplateField = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteTagTemplateField(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTagTemplateField as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTagTemplateField with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagTemplateFieldRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteTagTemplateField(request),
        expectedError
      );
    });
  });

  describe('createTag', () => {
    it('invokes createTag without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Tag()
      );
      client.innerApiCalls.createTag = stubSimpleCall(expectedResponse);
      const [response] = await client.createTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTag without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Tag()
      );
      client.innerApiCalls.createTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTag with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.createTag(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTag with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.CreateTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.CreateTagRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createTag(request), expectedError);
    });
  });

  describe('updateTag', () => {
    it('invokes updateTag without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagRequest()
      );
      request.tag ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagRequest',
        ['tag', 'name']
      );
      request.tag.name = defaultValue1;
      const expectedHeaderRequestParams = `tag.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Tag()
      );
      client.innerApiCalls.updateTag = stubSimpleCall(expectedResponse);
      const [response] = await client.updateTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTag without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagRequest()
      );
      request.tag ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagRequest',
        ['tag', 'name']
      );
      request.tag.name = defaultValue1;
      const expectedHeaderRequestParams = `tag.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.Tag()
      );
      client.innerApiCalls.updateTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTag with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagRequest()
      );
      request.tag ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagRequest',
        ['tag', 'name']
      );
      request.tag.name = defaultValue1;
      const expectedHeaderRequestParams = `tag.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.updateTag(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTag with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.UpdateTagRequest()
      );
      request.tag ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.UpdateTagRequest',
        ['tag', 'name']
      );
      request.tag.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateTag(request), expectedError);
    });
  });

  describe('deleteTag', () => {
    it('invokes deleteTag without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTag without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTag with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.deleteTag(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTag with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.DeleteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.DeleteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteTag(request), expectedError);
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setIamPolicy(request), expectedError);
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIamPolicy(request), expectedError);
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with closed client', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.testIamPermissions(request), expectedError);
    });
  });

  describe('searchCatalog', () => {
    it('invokes searchCatalog without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
      ];
      client.innerApiCalls.searchCatalog = stubSimpleCall(expectedResponse);
      const [response] = await client.searchCatalog(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes searchCatalog without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
      ];
      client.innerApiCalls.searchCatalog =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchCatalog(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes searchCatalog with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.searchCatalog = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.searchCatalog(request), expectedError);
    });

    it('invokes searchCatalogStream without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
      ];
      client.descriptors.page.searchCatalog.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchCatalogStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchCatalog.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchCatalog, request)
      );
    });

    it('invokes searchCatalogStream with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.searchCatalog.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchCatalogStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.searchCatalog.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchCatalog, request)
      );
    });

    it('uses async iteration with searchCatalog without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.SearchCatalogResult()
        ),
      ];
      client.descriptors.page.searchCatalog.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[] =
        [];
      const iterable = client.searchCatalogAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchCatalog.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with searchCatalog with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.SearchCatalogRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.searchCatalog.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.searchCatalogAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datacatalog.v1beta1.ISearchCatalogResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchCatalog.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listEntryGroups', () => {
    it('invokes listEntryGroups without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
      ];
      client.innerApiCalls.listEntryGroups = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntryGroups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroups without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
      ];
      client.innerApiCalls.listEntryGroups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntryGroups(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.datacatalog.v1beta1.IEntryGroup[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroups with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntryGroups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntryGroups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroupsStream without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
      ];
      client.descriptors.page.listEntryGroups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntryGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.EntryGroup[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.EntryGroup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryGroups, request)
      );
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEntryGroupsStream with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryGroups.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listEntryGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.EntryGroup[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.EntryGroup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryGroups, request)
      );
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntryGroups without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.EntryGroup()
        ),
      ];
      client.descriptors.page.listEntryGroups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datacatalog.v1beta1.IEntryGroup[] =
        [];
      const iterable = client.listEntryGroupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryGroups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntryGroups with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryGroups.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntryGroupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datacatalog.v1beta1.IEntryGroup[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryGroups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listEntries', () => {
    it('invokes listEntries without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
      ];
      client.innerApiCalls.listEntries = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntries without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
      ];
      client.innerApiCalls.listEntries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntries(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.IEntry[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntries with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntriesStream without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
      ];
      client.descriptors.page.listEntries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.Entry[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.Entry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntries, request)
      );
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEntriesStream with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntries.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.Entry[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.Entry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntries, request)
      );
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntries without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Entry()
        ),
      ];
      client.descriptors.page.listEntries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datacatalog.v1beta1.IEntry[] = [];
      const iterable = client.listEntriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEntries with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntries.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listEntriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datacatalog.v1beta1.IEntry[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listTags', () => {
    it('invokes listTags without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
      ];
      client.innerApiCalls.listTags = stubSimpleCall(expectedResponse);
      const [response] = await client.listTags(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTags without error using callback', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
      ];
      client.innerApiCalls.listTags =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTags(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.datacatalog.v1beta1.ITag[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTags with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTags = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listTags(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTags as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTagsStream without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
      ];
      client.descriptors.page.listTags.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.Tag[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.Tag) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTagsStream with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.datacatalog.v1beta1.Tag[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.datacatalog.v1beta1.Tag) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTags without error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
        generateSampleMessage(
          new protos.google.cloud.datacatalog.v1beta1.Tag()
        ),
      ];
      client.descriptors.page.listTags.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.datacatalog.v1beta1.ITag[] = [];
      const iterable = client.listTagsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listTags.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTags with error', async () => {
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.datacatalog.v1beta1.ListTagsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.datacatalog.v1beta1.ListTagsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listTagsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.datacatalog.v1beta1.ITag[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert(
        (client.descriptors.page.listTags.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('entry', () => {
      const fakePath = '/rendered/path/entry';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_group: 'entryGroupValue',
        entry: 'entryValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entryPath', () => {
        const result = client.entryPath(
          'projectValue',
          'locationValue',
          'entryGroupValue',
          'entryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntryName', () => {
        const result = client.matchProjectFromEntryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntryName', () => {
        const result = client.matchLocationFromEntryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryGroupFromEntryName', () => {
        const result = client.matchEntryGroupFromEntryName(fakePath);
        assert.strictEqual(result, 'entryGroupValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryFromEntryName', () => {
        const result = client.matchEntryFromEntryName(fakePath);
        assert.strictEqual(result, 'entryValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entryGroup', () => {
      const fakePath = '/rendered/path/entryGroup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_group: 'entryGroupValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entryGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entryGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entryGroupPath', () => {
        const result = client.entryGroupPath(
          'projectValue',
          'locationValue',
          'entryGroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entryGroupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntryGroupName', () => {
        const result = client.matchProjectFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntryGroupName', () => {
        const result = client.matchLocationFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryGroupFromEntryGroupName', () => {
        const result = client.matchEntryGroupFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'entryGroupValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('policyTag', () => {
      const fakePath = '/rendered/path/policyTag';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        taxonomy: 'taxonomyValue',
        policy_tag: 'policyTagValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.policyTagPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.policyTagPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('policyTagPath', () => {
        const result = client.policyTagPath(
          'projectValue',
          'locationValue',
          'taxonomyValue',
          'policyTagValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.policyTagPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPolicyTagName', () => {
        const result = client.matchProjectFromPolicyTagName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.policyTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPolicyTagName', () => {
        const result = client.matchLocationFromPolicyTagName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.policyTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaxonomyFromPolicyTagName', () => {
        const result = client.matchTaxonomyFromPolicyTagName(fakePath);
        assert.strictEqual(result, 'taxonomyValue');
        assert(
          (client.pathTemplates.policyTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPolicyTagFromPolicyTagName', () => {
        const result = client.matchPolicyTagFromPolicyTagName(fakePath);
        assert.strictEqual(result, 'policyTagValue');
        assert(
          (client.pathTemplates.policyTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tag', () => {
      const fakePath = '/rendered/path/tag';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_group: 'entryGroupValue',
        entry: 'entryValue',
        tag: 'tagValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagPath', () => {
        const result = client.tagPath(
          'projectValue',
          'locationValue',
          'entryGroupValue',
          'entryValue',
          'tagValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTagName', () => {
        const result = client.matchProjectFromTagName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTagName', () => {
        const result = client.matchLocationFromTagName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryGroupFromTagName', () => {
        const result = client.matchEntryGroupFromTagName(fakePath);
        assert.strictEqual(result, 'entryGroupValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryFromTagName', () => {
        const result = client.matchEntryFromTagName(fakePath);
        assert.strictEqual(result, 'entryValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTagFromTagName', () => {
        const result = client.matchTagFromTagName(fakePath);
        assert.strictEqual(result, 'tagValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tagTemplate', () => {
      const fakePath = '/rendered/path/tagTemplate';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tag_template: 'tagTemplateValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagTemplatePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagTemplatePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagTemplatePath', () => {
        const result = client.tagTemplatePath(
          'projectValue',
          'locationValue',
          'tagTemplateValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagTemplatePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTagTemplateName', () => {
        const result = client.matchProjectFromTagTemplateName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tagTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTagTemplateName', () => {
        const result = client.matchLocationFromTagTemplateName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.tagTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTagTemplateFromTagTemplateName', () => {
        const result = client.matchTagTemplateFromTagTemplateName(fakePath);
        assert.strictEqual(result, 'tagTemplateValue');
        assert(
          (client.pathTemplates.tagTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tagTemplateField', () => {
      const fakePath = '/rendered/path/tagTemplateField';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        tag_template: 'tagTemplateValue',
        field: 'fieldValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagTemplateFieldPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagTemplateFieldPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagTemplateFieldPath', () => {
        const result = client.tagTemplateFieldPath(
          'projectValue',
          'locationValue',
          'tagTemplateValue',
          'fieldValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.tagTemplateFieldPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTagTemplateFieldName', () => {
        const result = client.matchProjectFromTagTemplateFieldName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tagTemplateFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTagTemplateFieldName', () => {
        const result = client.matchLocationFromTagTemplateFieldName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.tagTemplateFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTagTemplateFromTagTemplateFieldName', () => {
        const result =
          client.matchTagTemplateFromTagTemplateFieldName(fakePath);
        assert.strictEqual(result, 'tagTemplateValue');
        assert(
          (client.pathTemplates.tagTemplateFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFieldFromTagTemplateFieldName', () => {
        const result = client.matchFieldFromTagTemplateFieldName(fakePath);
        assert.strictEqual(result, 'fieldValue');
        assert(
          (client.pathTemplates.tagTemplateFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('taxonomy', () => {
      const fakePath = '/rendered/path/taxonomy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        taxonomy: 'taxonomyValue',
      };
      const client = new datacatalogModule.v1beta1.DataCatalogClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taxonomyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taxonomyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taxonomyPath', () => {
        const result = client.taxonomyPath(
          'projectValue',
          'locationValue',
          'taxonomyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.taxonomyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTaxonomyName', () => {
        const result = client.matchProjectFromTaxonomyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.taxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTaxonomyName', () => {
        const result = client.matchLocationFromTaxonomyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.taxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaxonomyFromTaxonomyName', () => {
        const result = client.matchTaxonomyFromTaxonomyName(fakePath);
        assert.strictEqual(result, 'taxonomyValue');
        assert(
          (client.pathTemplates.taxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
