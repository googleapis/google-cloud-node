// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(location, radiusMeters) {
  // [START solar_v1_generated_Solar_GetDataLayers_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The longitude and latitude for the center of the region to get
   *  data for.
   */
  // const location = {}
  /**
   *  Required. The radius, in meters, defining the region surrounding that
   *  centre point for which data should be returned. The limitations
   *  on this value are:
   *  * Any value up to 100m can always be specified.
   *  * Values over 100m can be specified, as long as
   *    `radius_meters` <= `pixel_size_meters * 1000`.
   *  * However, for values over 175m, the `DataLayerView` in the
   *    request must not include monthly flux or hourly shade.
   */
  // const radiusMeters = 1234
  /**
   *  Optional. The desired subset of the data to return.
   */
  // const view = {}
  /**
   *  Optional. The minimum quality level allowed in the results. No result with
   *  lower quality than this will be returned. Not specifying this is
   *  equivalent to restricting to HIGH quality only.
   */
  // const requiredQuality = {}
  /**
   *  Optional. The minimum scale, in meters per pixel, of the data to return.
   *  Values of 0.1 (the default, if this field is not set explicitly),
   *  0.25, 0.5, and 1.0 are supported. Imagery components whose normal
   *  resolution is less than `pixel_size_meters` will be returned at
   *  the resolution specified by `pixel_size_meters`; imagery
   *  components whose normal resolution is equal to or greater than
   *  `pixel_size_meters` will be returned at that normal resolution.
   */
  // const pixelSizeMeters = 1234
  /**
   *  Optional. Whether to require exact quality of the imagery.
   *  If set to false, the `required_quality` field is interpreted as the minimum
   *  required quality, such that HIGH quality imagery may be returned when
   *  `required_quality` is set to MEDIUM.  If set to true, `required_quality`
   *  is interpreted as the exact required quality and only `MEDIUM` quality
   *  imagery is returned if `required_quality` is set to `MEDIUM`.
   */
  // const exactQualityRequired = true

  // Imports the Solar library
  const {SolarClient} = require('@googlemaps/solar').v1;

  // Instantiates a client
  const solarClient = new SolarClient();

  async function callGetDataLayers() {
    // Construct request
    const request = {
      location,
      radiusMeters,
    };

    // Run request
    const response = await solarClient.getDataLayers(request);
    console.log(response);
  }

  callGetDataLayers();
  // [END solar_v1_generated_Solar_GetDataLayers_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
