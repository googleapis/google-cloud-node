// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, trip, updateMask) {
  // [START fleetengine_v1_generated_TripService_UpdateTrip_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The standard Fleet Engine request header.
   */
  // const header = {}
  /**
   *  Required. Must be in the format
   *  `providers/{provider}/trips/{trip}`. The provider must
   *  be the Project ID (for example, `sample-consumer-project`) of the Google
   *  Cloud Project of which the service account making this call is a member.
   */
  // const name = 'abc123'
  /**
   *  Required. The Trip associated with the update.
   *  The following fields are maintained by the Fleet Engine. Do not update
   *  them using Trip.update.
   *  * `current_route_segment`
   *  * `current_route_segment_end_point`
   *  * `current_route_segment_traffic`
   *  * `current_route_segment_traffic_version`
   *  * `current_route_segment_version`
   *  * `dropoff_time`
   *  * `eta_to_next_waypoint`
   *  * `intermediate_destinations_version`
   *  * `last_location`
   *  * `name`
   *  * `number_of_passengers`
   *  * `pickup_time`
   *  * `remaining_distance_meters`
   *  * `remaining_time_to_first_waypoint`
   *  * `remaining_waypoints`
   *  * `remaining_waypoints_version`
   *  * `route`
   *  When you update the `Trip.vehicle_id` for a shared trip, you must supply
   *  the list of `Trip.vehicle_waypoints` to specify the order of the remaining
   *  waypoints, otherwise the order will be undetermined.
   *  When you specify `Trip.vehicle_waypoints`, the list must contain all
   *  the remaining waypoints of the vehicle's trips, with no extra waypoints.
   *  You must order these waypoints such that for a given trip, the pickup
   *  point is before intermediate destinations, and all intermediate
   *  destinations come before the drop-off point. An `EXCLUSIVE` trip's
   *  waypoints must not interleave with any other trips.
   *  The `trip_id`, `waypoint_type` and `location` fields are used, and all
   *  other TripWaypoint fields in `vehicle_waypoints` are ignored.
   *  To avoid a race condition for trips with multiple destinations, you
   *  should provide `Trip.intermediate_destinations_version` when updating
   *  the trip status to `ENROUTE_TO_INTERMEDIATE_DESTINATION`. The
   *  `Trip.intermediate_destinations_version` passed must be consistent with
   *  Fleet Engine's version. If it isn't, the request fails.
   */
  // const trip = {}
  /**
   *  Required. The field mask indicating which fields in Trip to update.
   *  The `update_mask` must contain at least one field.
   */
  // const updateMask = {}

  // Imports the Fleetengine library
  const {TripServiceClient} = require('@googlemaps/fleetengine').v1;

  // Instantiates a client
  const fleetengineClient = new TripServiceClient();

  async function callUpdateTrip() {
    // Construct request
    const request = {
      name,
      trip,
      updateMask,
    };

    // Run request
    const response = await fleetengineClient.updateTrip(request);
    console.log(response);
  }

  callUpdateTrip();
  // [END fleetengine_v1_generated_TripService_UpdateTrip_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
