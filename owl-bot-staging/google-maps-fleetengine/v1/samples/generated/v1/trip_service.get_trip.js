// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name) {
  // [START fleetengine_v1_generated_TripService_GetTrip_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The standard Fleet Engine request header.
   */
  // const header = {}
  /**
   *  Required. Must be in the format `providers/{provider}/trips/{trip}`.
   *  The provider must be the Project ID (for example, `sample-cloud-project`)
   *  of the Google Cloud Project of which the service account making
   *  this call is a member.
   */
  // const name = 'abc123'
  /**
   *  The subset of Trip fields that should be returned and their interpretation.
   */
  // const view = {}
  /**
   *  Indicates the minimum timestamp (exclusive) for which `Trip.route` or
   *  `Trip.current_route_segment` data are retrieved. If route data are
   *  unchanged since this timestamp, the route field is not set in the response.
   *  If a minimum is unspecified, the route data are always retrieved.
   */
  // const currentRouteSegmentVersion = {}
  /**
   *  Indicates the minimum timestamp (exclusive) for which
   *  `Trip.remaining_waypoints` are retrieved. If they are unchanged since this
   *  timestamp, the `remaining_waypoints` are not set in the response. If this
   *  field is unspecified, `remaining_waypoints` is always retrieved.
   */
  // const remainingWaypointsVersion = {}
  /**
   *  The returned current route format, `LAT_LNG_LIST_TYPE` (in `Trip.route`),
   *  or `ENCODED_POLYLINE_TYPE` (in `Trip.current_route_segment`). The default
   *  is `LAT_LNG_LIST_TYPE`.
   */
  // const routeFormatType = {}
  /**
   *  Indicates the minimum timestamp (exclusive) for which
   *  `Trip.current_route_segment_traffic` is retrieved. If traffic data are
   *  unchanged since this timestamp, the `current_route_segment_traffic` field
   *  is not set in the response. If a minimum is unspecified, the traffic data
   *  are always retrieved. Note that traffic is only available for On-Demand
   *  Rides and Deliveries Solution customers.
   */
  // const currentRouteSegmentTrafficVersion = {}
  /**
   *  Indicates the minimum timestamp (exclusive) for which
   *  `Trip.remaining_waypoints.traffic_to_waypoint` and
   *  `Trip.remaining_waypoints.path_to_waypoint` data are retrieved. If data are
   *  unchanged since this timestamp, the fields above are
   *  not set in the response. If `remaining_waypoints_route_version` is
   *  unspecified, traffic and path are always retrieved.
   */
  // const remainingWaypointsRouteVersion = {}

  // Imports the Fleetengine library
  const {TripServiceClient} = require('@googlemaps/fleetengine').v1;

  // Instantiates a client
  const fleetengineClient = new TripServiceClient();

  async function callGetTrip() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await fleetengineClient.getTrip(request);
    console.log(response);
  }

  callGetTrip();
  // [END fleetengine_v1_generated_TripService_GetTrip_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
