// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, hardware) {
  // [START gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardware_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The project and location to create hardware in.
   *  Format: `projects/{project}/locations/{location}`
   */
  // const parent = 'abc123'
  /**
   *  Optional. ID used to uniquely identify the Hardware within its parent
   *  scope. This field should contain at most 63 characters and must start with
   *  lowercase characters.
   *  Only lowercase characters, numbers and `-` are accepted.
   *  The `-` character cannot be the first or the last one.
   *  A system generated ID will be used if the field is not set.
   *  The hardware.name field in the request will be ignored.
   */
  // const hardwareId = 'abc123'
  /**
   *  Required. The resource to create.
   */
  // const hardware = {}

  // Imports the Gdchardwaremanagement library
  const {GDCHardwareManagementClient} = require('@google-cloud/gdchardwaremanagement').v1alpha;

  // Instantiates a client
  const gdchardwaremanagementClient = new GDCHardwareManagementClient();

  async function callCreateHardware() {
    // Construct request
    const request = {
      parent,
      hardware,
    };

    // Run request
    const [operation] = await gdchardwaremanagementClient.createHardware(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callCreateHardware();
  // [END gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardware_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
