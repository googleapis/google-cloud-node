// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(origin, destination) {
  // [START routes_v2_generated_Routes_ComputeRoutes_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Origin waypoint.
   */
  // const origin = {}
  /**
   *  Required. Destination waypoint.
   */
  // const destination = {}
  /**
   *  Optional. A set of waypoints along the route (excluding terminal points),
   *  for either stopping at or passing by. Up to 25 intermediate waypoints are
   *  supported.
   */
  // const intermediates = [1,2,3,4]
  /**
   *  Optional. Specifies the mode of transportation.
   */
  // const travelMode = {}
  /**
   *  Optional. Specifies how to compute the route. The server
   *  attempts to use the selected routing preference to compute the route. If
   *   the routing preference results in an error or an extra long latency, then
   *  an error is returned. You can specify this option only when the
   *  `travel_mode` is `DRIVE` or `TWO_WHEELER`, otherwise the request fails.
   */
  // const routingPreference = {}
  /**
   *  Optional. Specifies your preference for the quality of the polyline.
   */
  // const polylineQuality = {}
  /**
   *  Optional. Specifies the preferred encoding for the polyline.
   */
  // const polylineEncoding = {}
  /**
   *  Optional. The departure time. If you don't set this value, then this value
   *  defaults to the time that you made the request.
   *  NOTE: You can only specify a `departure_time` in the past when
   *  `RouteTravelMode` google.maps.routing.v2.RouteTravelMode  is set to
   *  `TRANSIT`. Transit trips are available for up to 7 days in the past or 100
   *  days in the future.
   */
  // const departureTime = {}
  /**
   *  Optional. The arrival time.
   *  NOTE: Can only be set when
   *  RouteTravelMode google.maps.routing.v2.RouteTravelMode  is set to
   *  `TRANSIT`. You can specify either `departure_time` or `arrival_time`, but
   *  not both. Transit trips are available for up to 7 days in the past or 100
   *  days in the future.
   */
  // const arrivalTime = {}
  /**
   *  Optional. Specifies whether to calculate alternate routes in addition to
   *  the route. No alternative routes are returned for requests that have
   *  intermediate waypoints.
   */
  // const computeAlternativeRoutes = true
  /**
   *  Optional. A set of conditions to satisfy that affect the way routes are
   *  calculated.
   */
  // const routeModifiers = {}
  /**
   *  Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   *  information, see Unicode Locale
   *  Identifier (http://www.unicode.org/reports/tr35/#Unicode_locale_identifier).
   *  See Language
   *  Support (https://developers.google.com/maps/faq#languagesupport)
   *  for the list of supported languages. When you don't provide this value, the
   *  display language is inferred from the location of the route request.
   */
  // const languageCode = 'abc123'
  /**
   *  Optional. The region code, specified as a ccTLD ("top-level domain")
   *  two-character value. For more information see Country code top-level
   *  domains (https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains).
   */
  // const regionCode = 'abc123'
  /**
   *  Optional. Specifies the units of measure for the display fields. These
   *  fields include the `instruction` field in
   *  `NavigationInstruction` google.maps.routing.v2.NavigationInstruction.
   *  The units of measure used for the route, leg, step distance, and duration
   *  are not affected by this value. If you don't provide this value, then the
   *  display units are inferred from the location of the first origin.
   */
  // const units = {}
  /**
   *  Optional. If set to true, the service attempts to minimize the overall cost
   *  of the route by re-ordering the specified intermediate waypoints. The
   *  request fails if any of the intermediate waypoints is a `via` waypoint. Use
   *  `ComputeRoutesResponse.Routes.optimized_intermediate_waypoint_index` to
   *  find the new ordering.
   *  If `ComputeRoutesResponseroutes.optimized_intermediate_waypoint_index` is
   *  not requested in the `X-Goog-FieldMask` header, the request fails.
   *  If `optimize_waypoint_order` is set to false,
   *  `ComputeRoutesResponse.optimized_intermediate_waypoint_index` will be
   *  empty.
   */
  // const optimizeWaypointOrder = true
  /**
   *  Optional. Specifies what reference routes to calculate as part of the
   *  request in addition to the default route. A reference route is a route with
   *  a different route calculation objective than the default route. For example
   *  a `FUEL_EFFICIENT` reference route calculation takes into account various
   *  parameters that would generate an optimal fuel efficient route.
   */
  // const requestedReferenceRoutes = [1,2,3,4]
  /**
   *  Optional. A list of extra computations which may be used to complete the
   *  request. Note: These extra computations may return extra fields on the
   *  response. These extra fields must also be specified in the field mask to be
   *  returned in the response.
   */
  // const extraComputations = [1,2,3,4]
  /**
   *  Optional. Specifies the assumptions to use when calculating time in
   *  traffic. This setting affects the value returned in the duration field in
   *  the
   *  `Route` google.maps.routing.v2.Route  and
   *  `RouteLeg` google.maps.routing.v2.RouteLeg  which contains the predicted
   *  time in traffic based on historical averages.
   *  `TrafficModel` is only available for requests that have set
   *  `RoutingPreference` google.maps.routing.v2.RoutingPreference  to
   *  `TRAFFIC_AWARE_OPTIMAL` and
   *  `RouteTravelMode` google.maps.routing.v2.RouteTravelMode  to `DRIVE`.
   *  Defaults to `BEST_GUESS` if traffic is requested and `TrafficModel` is not
   *  specified.
   */
  // const trafficModel = {}
  /**
   *  Optional. Specifies preferences that influence the route returned for
   *  `TRANSIT` routes. NOTE: You can only specify a `transit_preferences` when
   *  `RouteTravelMode` google.maps.routing.v2.RouteTravelMode  is set to
   *  `TRANSIT`.
   */
  // const transitPreferences = {}

  // Imports the Routing library
  const {RoutesClient} = require('@googlemaps/routing').v2;

  // Instantiates a client
  const routingClient = new RoutesClient();

  async function callComputeRoutes() {
    // Construct request
    const request = {
      origin,
      destination,
    };

    // Run request
    const response = await routingClient.computeRoutes(request);
    console.log(response);
  }

  callComputeRoutes();
  // [END routes_v2_generated_Routes_ComputeRoutes_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
