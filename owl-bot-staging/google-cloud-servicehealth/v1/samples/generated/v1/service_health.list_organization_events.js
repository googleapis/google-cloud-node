// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START servicehealth_v1_generated_ServiceHealth_ListOrganizationEvents_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Parent value using the form
   *  `organizations/{organization_id}/locations/{location}/organizationEvents`.
   *  `organization_id` - ID (number) of the project that contains the event. To
   *  get your `organization_id`, see
   *  Getting your organization resource
   *  ID (https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *  `location` - The location to get the service health events from. To
   *  retrieve service health events of category = INCIDENT, use `location` =
   *  `global`.
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of events that should be returned.  Acceptable
   *  values are `1` to `100`, inclusive. (The default value is `10`.) If more
   *  results are available, the service returns a `next_page_token` that you can
   *  use to get the next page of results in subsequent list requests. The
   *  service may return fewer events than the requested `page_size`.
   */
  // const pageSize = 1234
  /**
   *  Optional. A token identifying a page of results the server should return.
   *  Provide Page token returned by a previous `ListOrganizationEvents` call to
   *  retrieve the next page of results.
   *  When paginating, all other parameters provided to
   *  `ListOrganizationEvents` must match the call that provided the page token.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A filter expression that filters resources listed in the
   *  response. The expression takes the following forms:
   *  *   field=value for `category` and `state`
   *  *   field &lt;, >, &lt;=, or >= value for `update_time`
   *  Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *  Multiple filter queries are space-separated. Example:
   *  `category=INCIDENT state=ACTIVE`.
   *  By default, each expression is an AND expression. However, you can include
   *  AND and OR expressions explicitly.
   *  Filter is supported for the following fields: `category`, `state`,
   *  `update_time`
   */
  // const filter = 'abc123'
  /**
   *  Optional. OrganizationEvent fields to include in response.
   */
  // const view = {}

  // Imports the Servicehealth library
  const {ServiceHealthClient} = require('@google-cloud/servicehealth').v1;

  // Instantiates a client
  const servicehealthClient = new ServiceHealthClient();

  async function callListOrganizationEvents() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = servicehealthClient.listOrganizationEventsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListOrganizationEvents();
  // [END servicehealth_v1_generated_ServiceHealth_ListOrganizationEvents_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
