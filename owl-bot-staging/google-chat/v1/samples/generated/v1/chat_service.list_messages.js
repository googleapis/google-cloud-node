// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START chat_v1_generated_ChatService_ListMessages_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the space to list messages from.
   *  Format: `spaces/{space}`
   */
  // const parent = 'abc123'
  /**
   *  The maximum number of messages returned. The service might return fewer
   *  messages than this value.
   *  If unspecified, at most 25 are returned.
   *  The maximum value is 1000. If you use a value more than 1000, it's
   *  automatically changed to 1000.
   *  Negative values return an `INVALID_ARGUMENT` error.
   */
  // const pageSize = 1234
  /**
   *  Optional, if resuming from a previous query.
   *  A page token received from a previous list messages call. Provide this
   *  parameter to retrieve the subsequent page.
   *  When paginating, all other parameters provided should match the call that
   *  provided the page token. Passing different values to the other parameters
   *  might lead to unexpected results.
   */
  // const pageToken = 'abc123'
  /**
   *  A query filter.
   *  You can filter messages by date (`create_time`) and thread (`thread.name`).
   *  To filter messages by the date they were created, specify the `create_time`
   *  with a timestamp in RFC-3339 (https://www.rfc-editor.org/rfc/rfc3339)
   *  format and double quotation marks. For example,
   *  `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
   *  list messages that were created after a timestamp, or the less than
   *  operator `<` to list messages that were created before a timestamp. To
   *  filter messages within a time interval, use the `AND` operator between two
   *  timestamps.
   *  To filter by thread, specify the `thread.name`, formatted as
   *  `spaces/{space}/threads/{thread}`. You can only specify one
   *  `thread.name` per query.
   *  To filter by both thread and date, use the `AND` operator in your query.
   *  For example, the following queries are valid:
   *  ```
   *  create_time > "2012-04-21T11:30:00-04:00"
   *  create_time > "2012-04-21T11:30:00-04:00" AND
   *    thread.name = spaces/AAAAAAAAAAA/threads/123
   *  create_time > "2012-04-21T11:30:00+00:00" AND
   *  create_time < "2013-01-01T00:00:00+00:00" AND
   *    thread.name = spaces/AAAAAAAAAAA/threads/123
   *  thread.name = spaces/AAAAAAAAAAA/threads/123
   *  ```
   *  Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *  error.
   */
  // const filter = 'abc123'
  /**
   *  Optional, if resuming from a previous query.
   *  How the list of messages is ordered. Specify a value to order by an
   *  ordering operation. Valid ordering operation values are as follows:
   *  - `ASC` for ascending.
   *  - `DESC` for descending.
   *  The default ordering is `create_time ASC`.
   */
  // const orderBy = 'abc123'
  /**
   *  Whether to include deleted messages. Deleted messages include deleted time
   *  and metadata about their deletion, but message content is unavailable.
   */
  // const showDeleted = true

  // Imports the Chat library
  const {ChatServiceClient} = require('@google-apps/chat').v1;

  // Instantiates a client
  const chatClient = new ChatServiceClient();

  async function callListMessages() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = chatClient.listMessagesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListMessages();
  // [END chat_v1_generated_ChatService_ListMessages_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
