// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, filter) {
  // [START chat_v1_generated_ChatService_ListSpaceEvents_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Resource name of the Google Chat
   *  space (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
   *  where the events occurred.
   *  Format: `spaces/{space}`.
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of space events returned. The service might
   *  return fewer than this value.
   *  Negative values return an `INVALID_ARGUMENT` error.
   */
  // const pageSize = 1234
  /**
   *  A page token, received from a previous list space events call. Provide this
   *  to retrieve the subsequent page.
   *  When paginating, all other parameters provided to list space events must
   *  match the call that provided the page token. Passing different values to
   *  the other parameters might lead to unexpected results.
   */
  // const pageToken = 'abc123'
  /**
   *  Required. A query filter.
   *  You must specify at least one event type (`event_type`)
   *  using the has `:` operator. To filter by multiple event types, use the `OR`
   *  operator. Omit batch event types in your filter. The request automatically
   *  returns any related batch events. For example, if you filter by new
   *  reactions
   *  (`google.workspace.chat.reaction.v1.created`), the server also returns
   *  batch new reactions events
   *  (`google.workspace.chat.reaction.v1.batchCreated`). For a list of supported
   *  event types, see the `SpaceEvents` reference
   *  documentation (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.event_type).
   *  Optionally, you can also filter by start time (`start_time`) and
   *  end time (`end_time`):
   *  * `start_time`: Exclusive timestamp from which to start listing space
   *  events.
   *   You can list events that occurred up to 28 days ago. If unspecified, lists
   *   space events from the past 28 days.
   *  * `end_time`: Inclusive timestamp until which space events are listed.
   *   If unspecified, lists events up to the time of the request.
   *  To specify a start or end time, use the equals `=` operator and format in
   *  RFC-3339 (https://www.rfc-editor.org/rfc/rfc3339). To filter by both
   *  `start_time` and `end_time`, use the `AND` operator.
   *  For example, the following queries are valid:
   *  ```
   *  start_time="2023-08-23T19:20:33+00:00" AND
   *  end_time="2023-08-23T19:21:54+00:00"
   *  ```
   *  ```
   *  start_time="2023-08-23T19:20:33+00:00" AND
   *  (event_types:"google.workspace.chat.space.v1.updated" OR
   *  event_types:"google.workspace.chat.message.v1.created")
   *  ```
   *  The following queries are invalid:
   *  ```
   *  start_time="2023-08-23T19:20:33+00:00" OR
   *  end_time="2023-08-23T19:21:54+00:00"
   *  ```
   *  ```
   *  event_types:"google.workspace.chat.space.v1.updated" AND
   *  event_types:"google.workspace.chat.message.v1.created"
   *  ```
   *  Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *  error.
   */
  // const filter = 'abc123'

  // Imports the Chat library
  const {ChatServiceClient} = require('@google-apps/chat').v1;

  // Instantiates a client
  const chatClient = new ChatServiceClient();

  async function callListSpaceEvents() {
    // Construct request
    const request = {
      parent,
      filter,
    };

    // Run request
    const iterable = chatClient.listSpaceEventsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListSpaceEvents();
  // [END chat_v1_generated_ChatService_ListSpaceEvents_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
