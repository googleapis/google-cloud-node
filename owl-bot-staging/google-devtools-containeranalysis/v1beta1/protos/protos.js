// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_containeranalysis_protos || ($protobuf.roots._google_cloud_containeranalysis_protos = {});
    
    $root.grafeas = (function() {
    
        /**
         * Namespace grafeas.
         * @exports grafeas
         * @namespace
         */
        var grafeas = {};
    
        grafeas.v1beta1 = (function() {
    
            /**
             * Namespace v1beta1.
             * @memberof grafeas
             * @namespace
             */
            var v1beta1 = {};
    
            v1beta1.attestation = (function() {
    
                /**
                 * Namespace attestation.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var attestation = {};
    
                attestation.PgpSignedAttestation = (function() {
    
                    /**
                     * Properties of a PgpSignedAttestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @interface IPgpSignedAttestation
                     * @property {string|null} [signature] PgpSignedAttestation signature
                     * @property {grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType|null} [contentType] PgpSignedAttestation contentType
                     * @property {string|null} [pgpKeyId] PgpSignedAttestation pgpKeyId
                     */
    
                    /**
                     * Constructs a new PgpSignedAttestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @classdesc Represents a PgpSignedAttestation.
                     * @implements IPgpSignedAttestation
                     * @constructor
                     * @param {grafeas.v1beta1.attestation.IPgpSignedAttestation=} [properties] Properties to set
                     */
                    function PgpSignedAttestation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PgpSignedAttestation signature.
                     * @member {string} signature
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @instance
                     */
                    PgpSignedAttestation.prototype.signature = "";
    
                    /**
                     * PgpSignedAttestation contentType.
                     * @member {grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType} contentType
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @instance
                     */
                    PgpSignedAttestation.prototype.contentType = 0;
    
                    /**
                     * PgpSignedAttestation pgpKeyId.
                     * @member {string|null|undefined} pgpKeyId
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @instance
                     */
                    PgpSignedAttestation.prototype.pgpKeyId = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * PgpSignedAttestation keyId.
                     * @member {"pgpKeyId"|undefined} keyId
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @instance
                     */
                    Object.defineProperty(PgpSignedAttestation.prototype, "keyId", {
                        get: $util.oneOfGetter($oneOfFields = ["pgpKeyId"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new PgpSignedAttestation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IPgpSignedAttestation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.attestation.PgpSignedAttestation} PgpSignedAttestation instance
                     */
                    PgpSignedAttestation.create = function create(properties) {
                        return new PgpSignedAttestation(properties);
                    };
    
                    /**
                     * Encodes the specified PgpSignedAttestation message. Does not implicitly {@link grafeas.v1beta1.attestation.PgpSignedAttestation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IPgpSignedAttestation} message PgpSignedAttestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PgpSignedAttestation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.signature);
                        if (message.pgpKeyId != null && Object.hasOwnProperty.call(message, "pgpKeyId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pgpKeyId);
                        if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.contentType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PgpSignedAttestation message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.PgpSignedAttestation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IPgpSignedAttestation} message PgpSignedAttestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PgpSignedAttestation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PgpSignedAttestation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.attestation.PgpSignedAttestation} PgpSignedAttestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PgpSignedAttestation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.PgpSignedAttestation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.signature = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.contentType = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.pgpKeyId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PgpSignedAttestation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.attestation.PgpSignedAttestation} PgpSignedAttestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PgpSignedAttestation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PgpSignedAttestation message.
                     * @function verify
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PgpSignedAttestation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!$util.isString(message.signature))
                                return "signature: string expected";
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            switch (message.contentType) {
                            default:
                                return "contentType: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.pgpKeyId != null && message.hasOwnProperty("pgpKeyId")) {
                            properties.keyId = 1;
                            if (!$util.isString(message.pgpKeyId))
                                return "pgpKeyId: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PgpSignedAttestation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.attestation.PgpSignedAttestation} PgpSignedAttestation
                     */
                    PgpSignedAttestation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.attestation.PgpSignedAttestation)
                            return object;
                        var message = new $root.grafeas.v1beta1.attestation.PgpSignedAttestation();
                        if (object.signature != null)
                            message.signature = String(object.signature);
                        switch (object.contentType) {
                        default:
                            if (typeof object.contentType === "number") {
                                message.contentType = object.contentType;
                                break;
                            }
                            break;
                        case "CONTENT_TYPE_UNSPECIFIED":
                        case 0:
                            message.contentType = 0;
                            break;
                        case "SIMPLE_SIGNING_JSON":
                        case 1:
                            message.contentType = 1;
                            break;
                        }
                        if (object.pgpKeyId != null)
                            message.pgpKeyId = String(object.pgpKeyId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PgpSignedAttestation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.PgpSignedAttestation} message PgpSignedAttestation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PgpSignedAttestation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.signature = "";
                            object.contentType = options.enums === String ? "CONTENT_TYPE_UNSPECIFIED" : 0;
                        }
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = message.signature;
                        if (message.pgpKeyId != null && message.hasOwnProperty("pgpKeyId")) {
                            object.pgpKeyId = message.pgpKeyId;
                            if (options.oneofs)
                                object.keyId = "pgpKeyId";
                        }
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            object.contentType = options.enums === String ? $root.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType[message.contentType] === undefined ? message.contentType : $root.grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType[message.contentType] : message.contentType;
                        return object;
                    };
    
                    /**
                     * Converts this PgpSignedAttestation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PgpSignedAttestation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PgpSignedAttestation
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.attestation.PgpSignedAttestation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PgpSignedAttestation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.attestation.PgpSignedAttestation";
                    };
    
                    /**
                     * ContentType enum.
                     * @name grafeas.v1beta1.attestation.PgpSignedAttestation.ContentType
                     * @enum {number}
                     * @property {number} CONTENT_TYPE_UNSPECIFIED=0 CONTENT_TYPE_UNSPECIFIED value
                     * @property {number} SIMPLE_SIGNING_JSON=1 SIMPLE_SIGNING_JSON value
                     */
                    PgpSignedAttestation.ContentType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CONTENT_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SIMPLE_SIGNING_JSON"] = 1;
                        return values;
                    })();
    
                    return PgpSignedAttestation;
                })();
    
                attestation.GenericSignedAttestation = (function() {
    
                    /**
                     * Properties of a GenericSignedAttestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @interface IGenericSignedAttestation
                     * @property {grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType|null} [contentType] GenericSignedAttestation contentType
                     * @property {Uint8Array|null} [serializedPayload] GenericSignedAttestation serializedPayload
                     * @property {Array.<grafeas.v1beta1.ISignature>|null} [signatures] GenericSignedAttestation signatures
                     */
    
                    /**
                     * Constructs a new GenericSignedAttestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @classdesc Represents a GenericSignedAttestation.
                     * @implements IGenericSignedAttestation
                     * @constructor
                     * @param {grafeas.v1beta1.attestation.IGenericSignedAttestation=} [properties] Properties to set
                     */
                    function GenericSignedAttestation(properties) {
                        this.signatures = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GenericSignedAttestation contentType.
                     * @member {grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType} contentType
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @instance
                     */
                    GenericSignedAttestation.prototype.contentType = 0;
    
                    /**
                     * GenericSignedAttestation serializedPayload.
                     * @member {Uint8Array} serializedPayload
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @instance
                     */
                    GenericSignedAttestation.prototype.serializedPayload = $util.newBuffer([]);
    
                    /**
                     * GenericSignedAttestation signatures.
                     * @member {Array.<grafeas.v1beta1.ISignature>} signatures
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @instance
                     */
                    GenericSignedAttestation.prototype.signatures = $util.emptyArray;
    
                    /**
                     * Creates a new GenericSignedAttestation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IGenericSignedAttestation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.attestation.GenericSignedAttestation} GenericSignedAttestation instance
                     */
                    GenericSignedAttestation.create = function create(properties) {
                        return new GenericSignedAttestation(properties);
                    };
    
                    /**
                     * Encodes the specified GenericSignedAttestation message. Does not implicitly {@link grafeas.v1beta1.attestation.GenericSignedAttestation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IGenericSignedAttestation} message GenericSignedAttestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenericSignedAttestation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);
                        if (message.serializedPayload != null && Object.hasOwnProperty.call(message, "serializedPayload"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.serializedPayload);
                        if (message.signatures != null && message.signatures.length)
                            for (var i = 0; i < message.signatures.length; ++i)
                                $root.grafeas.v1beta1.Signature.encode(message.signatures[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GenericSignedAttestation message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.GenericSignedAttestation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IGenericSignedAttestation} message GenericSignedAttestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenericSignedAttestation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GenericSignedAttestation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.attestation.GenericSignedAttestation} GenericSignedAttestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenericSignedAttestation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.GenericSignedAttestation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.contentType = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.serializedPayload = reader.bytes();
                                    break;
                                }
                            case 3: {
                                    if (!(message.signatures && message.signatures.length))
                                        message.signatures = [];
                                    message.signatures.push($root.grafeas.v1beta1.Signature.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GenericSignedAttestation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.attestation.GenericSignedAttestation} GenericSignedAttestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenericSignedAttestation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GenericSignedAttestation message.
                     * @function verify
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenericSignedAttestation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            switch (message.contentType) {
                            default:
                                return "contentType: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.serializedPayload != null && message.hasOwnProperty("serializedPayload"))
                            if (!(message.serializedPayload && typeof message.serializedPayload.length === "number" || $util.isString(message.serializedPayload)))
                                return "serializedPayload: buffer expected";
                        if (message.signatures != null && message.hasOwnProperty("signatures")) {
                            if (!Array.isArray(message.signatures))
                                return "signatures: array expected";
                            for (var i = 0; i < message.signatures.length; ++i) {
                                var error = $root.grafeas.v1beta1.Signature.verify(message.signatures[i]);
                                if (error)
                                    return "signatures." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GenericSignedAttestation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.attestation.GenericSignedAttestation} GenericSignedAttestation
                     */
                    GenericSignedAttestation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.attestation.GenericSignedAttestation)
                            return object;
                        var message = new $root.grafeas.v1beta1.attestation.GenericSignedAttestation();
                        switch (object.contentType) {
                        default:
                            if (typeof object.contentType === "number") {
                                message.contentType = object.contentType;
                                break;
                            }
                            break;
                        case "CONTENT_TYPE_UNSPECIFIED":
                        case 0:
                            message.contentType = 0;
                            break;
                        case "SIMPLE_SIGNING_JSON":
                        case 1:
                            message.contentType = 1;
                            break;
                        }
                        if (object.serializedPayload != null)
                            if (typeof object.serializedPayload === "string")
                                $util.base64.decode(object.serializedPayload, message.serializedPayload = $util.newBuffer($util.base64.length(object.serializedPayload)), 0);
                            else if (object.serializedPayload.length >= 0)
                                message.serializedPayload = object.serializedPayload;
                        if (object.signatures) {
                            if (!Array.isArray(object.signatures))
                                throw TypeError(".grafeas.v1beta1.attestation.GenericSignedAttestation.signatures: array expected");
                            message.signatures = [];
                            for (var i = 0; i < object.signatures.length; ++i) {
                                if (typeof object.signatures[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.attestation.GenericSignedAttestation.signatures: object expected");
                                message.signatures[i] = $root.grafeas.v1beta1.Signature.fromObject(object.signatures[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GenericSignedAttestation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.GenericSignedAttestation} message GenericSignedAttestation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenericSignedAttestation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.signatures = [];
                        if (options.defaults) {
                            object.contentType = options.enums === String ? "CONTENT_TYPE_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.serializedPayload = "";
                            else {
                                object.serializedPayload = [];
                                if (options.bytes !== Array)
                                    object.serializedPayload = $util.newBuffer(object.serializedPayload);
                            }
                        }
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            object.contentType = options.enums === String ? $root.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType[message.contentType] === undefined ? message.contentType : $root.grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType[message.contentType] : message.contentType;
                        if (message.serializedPayload != null && message.hasOwnProperty("serializedPayload"))
                            object.serializedPayload = options.bytes === String ? $util.base64.encode(message.serializedPayload, 0, message.serializedPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.serializedPayload) : message.serializedPayload;
                        if (message.signatures && message.signatures.length) {
                            object.signatures = [];
                            for (var j = 0; j < message.signatures.length; ++j)
                                object.signatures[j] = $root.grafeas.v1beta1.Signature.toObject(message.signatures[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GenericSignedAttestation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenericSignedAttestation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GenericSignedAttestation
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.attestation.GenericSignedAttestation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GenericSignedAttestation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.attestation.GenericSignedAttestation";
                    };
    
                    /**
                     * ContentType enum.
                     * @name grafeas.v1beta1.attestation.GenericSignedAttestation.ContentType
                     * @enum {number}
                     * @property {number} CONTENT_TYPE_UNSPECIFIED=0 CONTENT_TYPE_UNSPECIFIED value
                     * @property {number} SIMPLE_SIGNING_JSON=1 SIMPLE_SIGNING_JSON value
                     */
                    GenericSignedAttestation.ContentType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CONTENT_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SIMPLE_SIGNING_JSON"] = 1;
                        return values;
                    })();
    
                    return GenericSignedAttestation;
                })();
    
                attestation.Authority = (function() {
    
                    /**
                     * Properties of an Authority.
                     * @memberof grafeas.v1beta1.attestation
                     * @interface IAuthority
                     * @property {grafeas.v1beta1.attestation.Authority.IHint|null} [hint] Authority hint
                     */
    
                    /**
                     * Constructs a new Authority.
                     * @memberof grafeas.v1beta1.attestation
                     * @classdesc Represents an Authority.
                     * @implements IAuthority
                     * @constructor
                     * @param {grafeas.v1beta1.attestation.IAuthority=} [properties] Properties to set
                     */
                    function Authority(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Authority hint.
                     * @member {grafeas.v1beta1.attestation.Authority.IHint|null|undefined} hint
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @instance
                     */
                    Authority.prototype.hint = null;
    
                    /**
                     * Creates a new Authority instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAuthority=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.attestation.Authority} Authority instance
                     */
                    Authority.create = function create(properties) {
                        return new Authority(properties);
                    };
    
                    /**
                     * Encodes the specified Authority message. Does not implicitly {@link grafeas.v1beta1.attestation.Authority.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAuthority} message Authority message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Authority.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hint != null && Object.hasOwnProperty.call(message, "hint"))
                            $root.grafeas.v1beta1.attestation.Authority.Hint.encode(message.hint, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Authority message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.Authority.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAuthority} message Authority message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Authority.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Authority message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.attestation.Authority} Authority
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Authority.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.Authority();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.hint = $root.grafeas.v1beta1.attestation.Authority.Hint.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Authority message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.attestation.Authority} Authority
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Authority.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Authority message.
                     * @function verify
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Authority.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hint != null && message.hasOwnProperty("hint")) {
                            var error = $root.grafeas.v1beta1.attestation.Authority.Hint.verify(message.hint);
                            if (error)
                                return "hint." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Authority message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.attestation.Authority} Authority
                     */
                    Authority.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.attestation.Authority)
                            return object;
                        var message = new $root.grafeas.v1beta1.attestation.Authority();
                        if (object.hint != null) {
                            if (typeof object.hint !== "object")
                                throw TypeError(".grafeas.v1beta1.attestation.Authority.hint: object expected");
                            message.hint = $root.grafeas.v1beta1.attestation.Authority.Hint.fromObject(object.hint);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Authority message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {grafeas.v1beta1.attestation.Authority} message Authority
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Authority.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.hint = null;
                        if (message.hint != null && message.hasOwnProperty("hint"))
                            object.hint = $root.grafeas.v1beta1.attestation.Authority.Hint.toObject(message.hint, options);
                        return object;
                    };
    
                    /**
                     * Converts this Authority to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Authority.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Authority
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.attestation.Authority
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Authority.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.attestation.Authority";
                    };
    
                    Authority.Hint = (function() {
    
                        /**
                         * Properties of a Hint.
                         * @memberof grafeas.v1beta1.attestation.Authority
                         * @interface IHint
                         * @property {string|null} [humanReadableName] Hint humanReadableName
                         */
    
                        /**
                         * Constructs a new Hint.
                         * @memberof grafeas.v1beta1.attestation.Authority
                         * @classdesc Represents a Hint.
                         * @implements IHint
                         * @constructor
                         * @param {grafeas.v1beta1.attestation.Authority.IHint=} [properties] Properties to set
                         */
                        function Hint(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Hint humanReadableName.
                         * @member {string} humanReadableName
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @instance
                         */
                        Hint.prototype.humanReadableName = "";
    
                        /**
                         * Creates a new Hint instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {grafeas.v1beta1.attestation.Authority.IHint=} [properties] Properties to set
                         * @returns {grafeas.v1beta1.attestation.Authority.Hint} Hint instance
                         */
                        Hint.create = function create(properties) {
                            return new Hint(properties);
                        };
    
                        /**
                         * Encodes the specified Hint message. Does not implicitly {@link grafeas.v1beta1.attestation.Authority.Hint.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {grafeas.v1beta1.attestation.Authority.IHint} message Hint message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Hint.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.humanReadableName != null && Object.hasOwnProperty.call(message, "humanReadableName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.humanReadableName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Hint message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.Authority.Hint.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {grafeas.v1beta1.attestation.Authority.IHint} message Hint message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Hint.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Hint message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1beta1.attestation.Authority.Hint} Hint
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Hint.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.Authority.Hint();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.humanReadableName = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Hint message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1beta1.attestation.Authority.Hint} Hint
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Hint.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Hint message.
                         * @function verify
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Hint.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                                if (!$util.isString(message.humanReadableName))
                                    return "humanReadableName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Hint message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1beta1.attestation.Authority.Hint} Hint
                         */
                        Hint.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1beta1.attestation.Authority.Hint)
                                return object;
                            var message = new $root.grafeas.v1beta1.attestation.Authority.Hint();
                            if (object.humanReadableName != null)
                                message.humanReadableName = String(object.humanReadableName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Hint message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {grafeas.v1beta1.attestation.Authority.Hint} message Hint
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Hint.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.humanReadableName = "";
                            if (message.humanReadableName != null && message.hasOwnProperty("humanReadableName"))
                                object.humanReadableName = message.humanReadableName;
                            return object;
                        };
    
                        /**
                         * Converts this Hint to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Hint.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Hint
                         * @function getTypeUrl
                         * @memberof grafeas.v1beta1.attestation.Authority.Hint
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Hint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1beta1.attestation.Authority.Hint";
                        };
    
                        return Hint;
                    })();
    
                    return Authority;
                })();
    
                attestation.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.attestation
                     * @interface IDetails
                     * @property {grafeas.v1beta1.attestation.IAttestation|null} [attestation] Details attestation
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.attestation
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.attestation.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details attestation.
                     * @member {grafeas.v1beta1.attestation.IAttestation|null|undefined} attestation
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @instance
                     */
                    Details.prototype.attestation = null;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {grafeas.v1beta1.attestation.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.attestation.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.attestation.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {grafeas.v1beta1.attestation.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
                            $root.grafeas.v1beta1.attestation.Attestation.encode(message.attestation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {grafeas.v1beta1.attestation.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.attestation.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.attestation = $root.grafeas.v1beta1.attestation.Attestation.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.attestation.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.attestation != null && message.hasOwnProperty("attestation")) {
                            var error = $root.grafeas.v1beta1.attestation.Attestation.verify(message.attestation);
                            if (error)
                                return "attestation." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.attestation.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.attestation.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.attestation.Details();
                        if (object.attestation != null) {
                            if (typeof object.attestation !== "object")
                                throw TypeError(".grafeas.v1beta1.attestation.Details.attestation: object expected");
                            message.attestation = $root.grafeas.v1beta1.attestation.Attestation.fromObject(object.attestation);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {grafeas.v1beta1.attestation.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.attestation = null;
                        if (message.attestation != null && message.hasOwnProperty("attestation"))
                            object.attestation = $root.grafeas.v1beta1.attestation.Attestation.toObject(message.attestation, options);
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.attestation.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.attestation.Details";
                    };
    
                    return Details;
                })();
    
                attestation.Attestation = (function() {
    
                    /**
                     * Properties of an Attestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @interface IAttestation
                     * @property {grafeas.v1beta1.attestation.IPgpSignedAttestation|null} [pgpSignedAttestation] Attestation pgpSignedAttestation
                     * @property {grafeas.v1beta1.attestation.IGenericSignedAttestation|null} [genericSignedAttestation] Attestation genericSignedAttestation
                     */
    
                    /**
                     * Constructs a new Attestation.
                     * @memberof grafeas.v1beta1.attestation
                     * @classdesc Represents an Attestation.
                     * @implements IAttestation
                     * @constructor
                     * @param {grafeas.v1beta1.attestation.IAttestation=} [properties] Properties to set
                     */
                    function Attestation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Attestation pgpSignedAttestation.
                     * @member {grafeas.v1beta1.attestation.IPgpSignedAttestation|null|undefined} pgpSignedAttestation
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @instance
                     */
                    Attestation.prototype.pgpSignedAttestation = null;
    
                    /**
                     * Attestation genericSignedAttestation.
                     * @member {grafeas.v1beta1.attestation.IGenericSignedAttestation|null|undefined} genericSignedAttestation
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @instance
                     */
                    Attestation.prototype.genericSignedAttestation = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Attestation signature.
                     * @member {"pgpSignedAttestation"|"genericSignedAttestation"|undefined} signature
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @instance
                     */
                    Object.defineProperty(Attestation.prototype, "signature", {
                        get: $util.oneOfGetter($oneOfFields = ["pgpSignedAttestation", "genericSignedAttestation"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Attestation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAttestation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.attestation.Attestation} Attestation instance
                     */
                    Attestation.create = function create(properties) {
                        return new Attestation(properties);
                    };
    
                    /**
                     * Encodes the specified Attestation message. Does not implicitly {@link grafeas.v1beta1.attestation.Attestation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAttestation} message Attestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Attestation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pgpSignedAttestation != null && Object.hasOwnProperty.call(message, "pgpSignedAttestation"))
                            $root.grafeas.v1beta1.attestation.PgpSignedAttestation.encode(message.pgpSignedAttestation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.genericSignedAttestation != null && Object.hasOwnProperty.call(message, "genericSignedAttestation"))
                            $root.grafeas.v1beta1.attestation.GenericSignedAttestation.encode(message.genericSignedAttestation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Attestation message, length delimited. Does not implicitly {@link grafeas.v1beta1.attestation.Attestation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.IAttestation} message Attestation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Attestation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Attestation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.attestation.Attestation} Attestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Attestation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.attestation.Attestation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.pgpSignedAttestation = $root.grafeas.v1beta1.attestation.PgpSignedAttestation.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.genericSignedAttestation = $root.grafeas.v1beta1.attestation.GenericSignedAttestation.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Attestation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.attestation.Attestation} Attestation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Attestation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Attestation message.
                     * @function verify
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Attestation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.pgpSignedAttestation != null && message.hasOwnProperty("pgpSignedAttestation")) {
                            properties.signature = 1;
                            {
                                var error = $root.grafeas.v1beta1.attestation.PgpSignedAttestation.verify(message.pgpSignedAttestation);
                                if (error)
                                    return "pgpSignedAttestation." + error;
                            }
                        }
                        if (message.genericSignedAttestation != null && message.hasOwnProperty("genericSignedAttestation")) {
                            if (properties.signature === 1)
                                return "signature: multiple values";
                            properties.signature = 1;
                            {
                                var error = $root.grafeas.v1beta1.attestation.GenericSignedAttestation.verify(message.genericSignedAttestation);
                                if (error)
                                    return "genericSignedAttestation." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Attestation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.attestation.Attestation} Attestation
                     */
                    Attestation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.attestation.Attestation)
                            return object;
                        var message = new $root.grafeas.v1beta1.attestation.Attestation();
                        if (object.pgpSignedAttestation != null) {
                            if (typeof object.pgpSignedAttestation !== "object")
                                throw TypeError(".grafeas.v1beta1.attestation.Attestation.pgpSignedAttestation: object expected");
                            message.pgpSignedAttestation = $root.grafeas.v1beta1.attestation.PgpSignedAttestation.fromObject(object.pgpSignedAttestation);
                        }
                        if (object.genericSignedAttestation != null) {
                            if (typeof object.genericSignedAttestation !== "object")
                                throw TypeError(".grafeas.v1beta1.attestation.Attestation.genericSignedAttestation: object expected");
                            message.genericSignedAttestation = $root.grafeas.v1beta1.attestation.GenericSignedAttestation.fromObject(object.genericSignedAttestation);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Attestation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {grafeas.v1beta1.attestation.Attestation} message Attestation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Attestation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.pgpSignedAttestation != null && message.hasOwnProperty("pgpSignedAttestation")) {
                            object.pgpSignedAttestation = $root.grafeas.v1beta1.attestation.PgpSignedAttestation.toObject(message.pgpSignedAttestation, options);
                            if (options.oneofs)
                                object.signature = "pgpSignedAttestation";
                        }
                        if (message.genericSignedAttestation != null && message.hasOwnProperty("genericSignedAttestation")) {
                            object.genericSignedAttestation = $root.grafeas.v1beta1.attestation.GenericSignedAttestation.toObject(message.genericSignedAttestation, options);
                            if (options.oneofs)
                                object.signature = "genericSignedAttestation";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Attestation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Attestation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Attestation
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.attestation.Attestation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Attestation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.attestation.Attestation";
                    };
    
                    return Attestation;
                })();
    
                return attestation;
            })();
    
            /**
             * NoteKind enum.
             * @name grafeas.v1beta1.NoteKind
             * @enum {number}
             * @property {number} NOTE_KIND_UNSPECIFIED=0 NOTE_KIND_UNSPECIFIED value
             * @property {number} VULNERABILITY=1 VULNERABILITY value
             * @property {number} BUILD=2 BUILD value
             * @property {number} IMAGE=3 IMAGE value
             * @property {number} PACKAGE=4 PACKAGE value
             * @property {number} DEPLOYMENT=5 DEPLOYMENT value
             * @property {number} DISCOVERY=6 DISCOVERY value
             * @property {number} ATTESTATION=7 ATTESTATION value
             */
            v1beta1.NoteKind = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NOTE_KIND_UNSPECIFIED"] = 0;
                values[valuesById[1] = "VULNERABILITY"] = 1;
                values[valuesById[2] = "BUILD"] = 2;
                values[valuesById[3] = "IMAGE"] = 3;
                values[valuesById[4] = "PACKAGE"] = 4;
                values[valuesById[5] = "DEPLOYMENT"] = 5;
                values[valuesById[6] = "DISCOVERY"] = 6;
                values[valuesById[7] = "ATTESTATION"] = 7;
                return values;
            })();
    
            v1beta1.RelatedUrl = (function() {
    
                /**
                 * Properties of a RelatedUrl.
                 * @memberof grafeas.v1beta1
                 * @interface IRelatedUrl
                 * @property {string|null} [url] RelatedUrl url
                 * @property {string|null} [label] RelatedUrl label
                 */
    
                /**
                 * Constructs a new RelatedUrl.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a RelatedUrl.
                 * @implements IRelatedUrl
                 * @constructor
                 * @param {grafeas.v1beta1.IRelatedUrl=} [properties] Properties to set
                 */
                function RelatedUrl(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RelatedUrl url.
                 * @member {string} url
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @instance
                 */
                RelatedUrl.prototype.url = "";
    
                /**
                 * RelatedUrl label.
                 * @member {string} label
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @instance
                 */
                RelatedUrl.prototype.label = "";
    
                /**
                 * Creates a new RelatedUrl instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {grafeas.v1beta1.IRelatedUrl=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.RelatedUrl} RelatedUrl instance
                 */
                RelatedUrl.create = function create(properties) {
                    return new RelatedUrl(properties);
                };
    
                /**
                 * Encodes the specified RelatedUrl message. Does not implicitly {@link grafeas.v1beta1.RelatedUrl.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {grafeas.v1beta1.IRelatedUrl} message RelatedUrl message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RelatedUrl.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);
                    return writer;
                };
    
                /**
                 * Encodes the specified RelatedUrl message, length delimited. Does not implicitly {@link grafeas.v1beta1.RelatedUrl.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {grafeas.v1beta1.IRelatedUrl} message RelatedUrl message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RelatedUrl.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RelatedUrl message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.RelatedUrl} RelatedUrl
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RelatedUrl.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.RelatedUrl();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.url = reader.string();
                                break;
                            }
                        case 2: {
                                message.label = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RelatedUrl message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.RelatedUrl} RelatedUrl
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RelatedUrl.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RelatedUrl message.
                 * @function verify
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RelatedUrl.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.url != null && message.hasOwnProperty("url"))
                        if (!$util.isString(message.url))
                            return "url: string expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    return null;
                };
    
                /**
                 * Creates a RelatedUrl message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.RelatedUrl} RelatedUrl
                 */
                RelatedUrl.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.RelatedUrl)
                        return object;
                    var message = new $root.grafeas.v1beta1.RelatedUrl();
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.label != null)
                        message.label = String(object.label);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RelatedUrl message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {grafeas.v1beta1.RelatedUrl} message RelatedUrl
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RelatedUrl.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.url = "";
                        object.label = "";
                    }
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    return object;
                };
    
                /**
                 * Converts this RelatedUrl to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RelatedUrl.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RelatedUrl
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.RelatedUrl
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RelatedUrl.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.RelatedUrl";
                };
    
                return RelatedUrl;
            })();
    
            v1beta1.Signature = (function() {
    
                /**
                 * Properties of a Signature.
                 * @memberof grafeas.v1beta1
                 * @interface ISignature
                 * @property {Uint8Array|null} [signature] Signature signature
                 * @property {string|null} [publicKeyId] Signature publicKeyId
                 */
    
                /**
                 * Constructs a new Signature.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a Signature.
                 * @implements ISignature
                 * @constructor
                 * @param {grafeas.v1beta1.ISignature=} [properties] Properties to set
                 */
                function Signature(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Signature signature.
                 * @member {Uint8Array} signature
                 * @memberof grafeas.v1beta1.Signature
                 * @instance
                 */
                Signature.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Signature publicKeyId.
                 * @member {string} publicKeyId
                 * @memberof grafeas.v1beta1.Signature
                 * @instance
                 */
                Signature.prototype.publicKeyId = "";
    
                /**
                 * Creates a new Signature instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {grafeas.v1beta1.ISignature=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.Signature} Signature instance
                 */
                Signature.create = function create(properties) {
                    return new Signature(properties);
                };
    
                /**
                 * Encodes the specified Signature message. Does not implicitly {@link grafeas.v1beta1.Signature.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {grafeas.v1beta1.ISignature} message Signature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Signature.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                    if (message.publicKeyId != null && Object.hasOwnProperty.call(message, "publicKeyId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.publicKeyId);
                    return writer;
                };
    
                /**
                 * Encodes the specified Signature message, length delimited. Does not implicitly {@link grafeas.v1beta1.Signature.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {grafeas.v1beta1.ISignature} message Signature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Signature.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Signature message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.Signature} Signature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Signature.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.Signature();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.signature = reader.bytes();
                                break;
                            }
                        case 2: {
                                message.publicKeyId = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Signature message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.Signature} Signature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Signature.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Signature message.
                 * @function verify
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Signature.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    if (message.publicKeyId != null && message.hasOwnProperty("publicKeyId"))
                        if (!$util.isString(message.publicKeyId))
                            return "publicKeyId: string expected";
                    return null;
                };
    
                /**
                 * Creates a Signature message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.Signature} Signature
                 */
                Signature.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.Signature)
                        return object;
                    var message = new $root.grafeas.v1beta1.Signature();
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length >= 0)
                            message.signature = object.signature;
                    if (object.publicKeyId != null)
                        message.publicKeyId = String(object.publicKeyId);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Signature message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {grafeas.v1beta1.Signature} message Signature
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Signature.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                        object.publicKeyId = "";
                    }
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    if (message.publicKeyId != null && message.hasOwnProperty("publicKeyId"))
                        object.publicKeyId = message.publicKeyId;
                    return object;
                };
    
                /**
                 * Converts this Signature to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.Signature
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Signature.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Signature
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.Signature
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Signature.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.Signature";
                };
    
                return Signature;
            })();
    
            v1beta1.build = (function() {
    
                /**
                 * Namespace build.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var build = {};
    
                build.Build = (function() {
    
                    /**
                     * Properties of a Build.
                     * @memberof grafeas.v1beta1.build
                     * @interface IBuild
                     * @property {string|null} [builderVersion] Build builderVersion
                     * @property {grafeas.v1beta1.build.IBuildSignature|null} [signature] Build signature
                     */
    
                    /**
                     * Constructs a new Build.
                     * @memberof grafeas.v1beta1.build
                     * @classdesc Represents a Build.
                     * @implements IBuild
                     * @constructor
                     * @param {grafeas.v1beta1.build.IBuild=} [properties] Properties to set
                     */
                    function Build(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Build builderVersion.
                     * @member {string} builderVersion
                     * @memberof grafeas.v1beta1.build.Build
                     * @instance
                     */
                    Build.prototype.builderVersion = "";
    
                    /**
                     * Build signature.
                     * @member {grafeas.v1beta1.build.IBuildSignature|null|undefined} signature
                     * @memberof grafeas.v1beta1.build.Build
                     * @instance
                     */
                    Build.prototype.signature = null;
    
                    /**
                     * Creates a new Build instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {grafeas.v1beta1.build.IBuild=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.build.Build} Build instance
                     */
                    Build.create = function create(properties) {
                        return new Build(properties);
                    };
    
                    /**
                     * Encodes the specified Build message. Does not implicitly {@link grafeas.v1beta1.build.Build.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {grafeas.v1beta1.build.IBuild} message Build message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Build.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.builderVersion != null && Object.hasOwnProperty.call(message, "builderVersion"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.builderVersion);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            $root.grafeas.v1beta1.build.BuildSignature.encode(message.signature, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Build message, length delimited. Does not implicitly {@link grafeas.v1beta1.build.Build.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {grafeas.v1beta1.build.IBuild} message Build message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Build.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Build message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.build.Build} Build
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Build.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.build.Build();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.builderVersion = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.signature = $root.grafeas.v1beta1.build.BuildSignature.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Build message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.build.Build} Build
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Build.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Build message.
                     * @function verify
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Build.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                            if (!$util.isString(message.builderVersion))
                                return "builderVersion: string expected";
                        if (message.signature != null && message.hasOwnProperty("signature")) {
                            var error = $root.grafeas.v1beta1.build.BuildSignature.verify(message.signature);
                            if (error)
                                return "signature." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Build message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.build.Build} Build
                     */
                    Build.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.build.Build)
                            return object;
                        var message = new $root.grafeas.v1beta1.build.Build();
                        if (object.builderVersion != null)
                            message.builderVersion = String(object.builderVersion);
                        if (object.signature != null) {
                            if (typeof object.signature !== "object")
                                throw TypeError(".grafeas.v1beta1.build.Build.signature: object expected");
                            message.signature = $root.grafeas.v1beta1.build.BuildSignature.fromObject(object.signature);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Build message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {grafeas.v1beta1.build.Build} message Build
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Build.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.builderVersion = "";
                            object.signature = null;
                        }
                        if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                            object.builderVersion = message.builderVersion;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = $root.grafeas.v1beta1.build.BuildSignature.toObject(message.signature, options);
                        return object;
                    };
    
                    /**
                     * Converts this Build to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.build.Build
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Build.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Build
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.build.Build
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Build.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.build.Build";
                    };
    
                    return Build;
                })();
    
                build.BuildSignature = (function() {
    
                    /**
                     * Properties of a BuildSignature.
                     * @memberof grafeas.v1beta1.build
                     * @interface IBuildSignature
                     * @property {string|null} [publicKey] BuildSignature publicKey
                     * @property {Uint8Array|null} [signature] BuildSignature signature
                     * @property {string|null} [keyId] BuildSignature keyId
                     * @property {grafeas.v1beta1.build.BuildSignature.KeyType|null} [keyType] BuildSignature keyType
                     */
    
                    /**
                     * Constructs a new BuildSignature.
                     * @memberof grafeas.v1beta1.build
                     * @classdesc Represents a BuildSignature.
                     * @implements IBuildSignature
                     * @constructor
                     * @param {grafeas.v1beta1.build.IBuildSignature=} [properties] Properties to set
                     */
                    function BuildSignature(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BuildSignature publicKey.
                     * @member {string} publicKey
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @instance
                     */
                    BuildSignature.prototype.publicKey = "";
    
                    /**
                     * BuildSignature signature.
                     * @member {Uint8Array} signature
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @instance
                     */
                    BuildSignature.prototype.signature = $util.newBuffer([]);
    
                    /**
                     * BuildSignature keyId.
                     * @member {string} keyId
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @instance
                     */
                    BuildSignature.prototype.keyId = "";
    
                    /**
                     * BuildSignature keyType.
                     * @member {grafeas.v1beta1.build.BuildSignature.KeyType} keyType
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @instance
                     */
                    BuildSignature.prototype.keyType = 0;
    
                    /**
                     * Creates a new BuildSignature instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {grafeas.v1beta1.build.IBuildSignature=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.build.BuildSignature} BuildSignature instance
                     */
                    BuildSignature.create = function create(properties) {
                        return new BuildSignature(properties);
                    };
    
                    /**
                     * Encodes the specified BuildSignature message. Does not implicitly {@link grafeas.v1beta1.build.BuildSignature.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {grafeas.v1beta1.build.IBuildSignature} message BuildSignature message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BuildSignature.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.publicKey != null && Object.hasOwnProperty.call(message, "publicKey"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.publicKey);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.signature);
                        if (message.keyId != null && Object.hasOwnProperty.call(message, "keyId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.keyId);
                        if (message.keyType != null && Object.hasOwnProperty.call(message, "keyType"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.keyType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BuildSignature message, length delimited. Does not implicitly {@link grafeas.v1beta1.build.BuildSignature.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {grafeas.v1beta1.build.IBuildSignature} message BuildSignature message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BuildSignature.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BuildSignature message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.build.BuildSignature} BuildSignature
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BuildSignature.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.build.BuildSignature();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.publicKey = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.signature = reader.bytes();
                                    break;
                                }
                            case 3: {
                                    message.keyId = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.keyType = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BuildSignature message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.build.BuildSignature} BuildSignature
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BuildSignature.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BuildSignature message.
                     * @function verify
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BuildSignature.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                            if (!$util.isString(message.publicKey))
                                return "publicKey: string expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.keyId != null && message.hasOwnProperty("keyId"))
                            if (!$util.isString(message.keyId))
                                return "keyId: string expected";
                        if (message.keyType != null && message.hasOwnProperty("keyType"))
                            switch (message.keyType) {
                            default:
                                return "keyType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a BuildSignature message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.build.BuildSignature} BuildSignature
                     */
                    BuildSignature.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.build.BuildSignature)
                            return object;
                        var message = new $root.grafeas.v1beta1.build.BuildSignature();
                        if (object.publicKey != null)
                            message.publicKey = String(object.publicKey);
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length >= 0)
                                message.signature = object.signature;
                        if (object.keyId != null)
                            message.keyId = String(object.keyId);
                        switch (object.keyType) {
                        default:
                            if (typeof object.keyType === "number") {
                                message.keyType = object.keyType;
                                break;
                            }
                            break;
                        case "KEY_TYPE_UNSPECIFIED":
                        case 0:
                            message.keyType = 0;
                            break;
                        case "PGP_ASCII_ARMORED":
                        case 1:
                            message.keyType = 1;
                            break;
                        case "PKIX_PEM":
                        case 2:
                            message.keyType = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BuildSignature message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {grafeas.v1beta1.build.BuildSignature} message BuildSignature
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BuildSignature.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.publicKey = "";
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.keyId = "";
                            object.keyType = options.enums === String ? "KEY_TYPE_UNSPECIFIED" : 0;
                        }
                        if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                            object.publicKey = message.publicKey;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.keyId != null && message.hasOwnProperty("keyId"))
                            object.keyId = message.keyId;
                        if (message.keyType != null && message.hasOwnProperty("keyType"))
                            object.keyType = options.enums === String ? $root.grafeas.v1beta1.build.BuildSignature.KeyType[message.keyType] === undefined ? message.keyType : $root.grafeas.v1beta1.build.BuildSignature.KeyType[message.keyType] : message.keyType;
                        return object;
                    };
    
                    /**
                     * Converts this BuildSignature to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BuildSignature.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BuildSignature
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.build.BuildSignature
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BuildSignature.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.build.BuildSignature";
                    };
    
                    /**
                     * KeyType enum.
                     * @name grafeas.v1beta1.build.BuildSignature.KeyType
                     * @enum {number}
                     * @property {number} KEY_TYPE_UNSPECIFIED=0 KEY_TYPE_UNSPECIFIED value
                     * @property {number} PGP_ASCII_ARMORED=1 PGP_ASCII_ARMORED value
                     * @property {number} PKIX_PEM=2 PKIX_PEM value
                     */
                    BuildSignature.KeyType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "KEY_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PGP_ASCII_ARMORED"] = 1;
                        values[valuesById[2] = "PKIX_PEM"] = 2;
                        return values;
                    })();
    
                    return BuildSignature;
                })();
    
                build.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.build
                     * @interface IDetails
                     * @property {grafeas.v1beta1.provenance.IBuildProvenance|null} [provenance] Details provenance
                     * @property {string|null} [provenanceBytes] Details provenanceBytes
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.build
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.build.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details provenance.
                     * @member {grafeas.v1beta1.provenance.IBuildProvenance|null|undefined} provenance
                     * @memberof grafeas.v1beta1.build.Details
                     * @instance
                     */
                    Details.prototype.provenance = null;
    
                    /**
                     * Details provenanceBytes.
                     * @member {string} provenanceBytes
                     * @memberof grafeas.v1beta1.build.Details
                     * @instance
                     */
                    Details.prototype.provenanceBytes = "";
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {grafeas.v1beta1.build.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.build.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.build.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {grafeas.v1beta1.build.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.provenance != null && Object.hasOwnProperty.call(message, "provenance"))
                            $root.grafeas.v1beta1.provenance.BuildProvenance.encode(message.provenance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.provenanceBytes != null && Object.hasOwnProperty.call(message, "provenanceBytes"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.provenanceBytes);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.build.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {grafeas.v1beta1.build.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.build.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.build.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.provenance = $root.grafeas.v1beta1.provenance.BuildProvenance.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.provenanceBytes = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.build.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.provenance != null && message.hasOwnProperty("provenance")) {
                            var error = $root.grafeas.v1beta1.provenance.BuildProvenance.verify(message.provenance);
                            if (error)
                                return "provenance." + error;
                        }
                        if (message.provenanceBytes != null && message.hasOwnProperty("provenanceBytes"))
                            if (!$util.isString(message.provenanceBytes))
                                return "provenanceBytes: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.build.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.build.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.build.Details();
                        if (object.provenance != null) {
                            if (typeof object.provenance !== "object")
                                throw TypeError(".grafeas.v1beta1.build.Details.provenance: object expected");
                            message.provenance = $root.grafeas.v1beta1.provenance.BuildProvenance.fromObject(object.provenance);
                        }
                        if (object.provenanceBytes != null)
                            message.provenanceBytes = String(object.provenanceBytes);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {grafeas.v1beta1.build.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.provenance = null;
                            object.provenanceBytes = "";
                        }
                        if (message.provenance != null && message.hasOwnProperty("provenance"))
                            object.provenance = $root.grafeas.v1beta1.provenance.BuildProvenance.toObject(message.provenance, options);
                        if (message.provenanceBytes != null && message.hasOwnProperty("provenanceBytes"))
                            object.provenanceBytes = message.provenanceBytes;
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.build.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.build.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.build.Details";
                    };
    
                    return Details;
                })();
    
                return build;
            })();
    
            v1beta1.provenance = (function() {
    
                /**
                 * Namespace provenance.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var provenance = {};
    
                provenance.BuildProvenance = (function() {
    
                    /**
                     * Properties of a BuildProvenance.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface IBuildProvenance
                     * @property {string|null} [id] BuildProvenance id
                     * @property {string|null} [projectId] BuildProvenance projectId
                     * @property {Array.<grafeas.v1beta1.provenance.ICommand>|null} [commands] BuildProvenance commands
                     * @property {Array.<grafeas.v1beta1.provenance.IArtifact>|null} [builtArtifacts] BuildProvenance builtArtifacts
                     * @property {google.protobuf.ITimestamp|null} [createTime] BuildProvenance createTime
                     * @property {google.protobuf.ITimestamp|null} [startTime] BuildProvenance startTime
                     * @property {google.protobuf.ITimestamp|null} [endTime] BuildProvenance endTime
                     * @property {string|null} [creator] BuildProvenance creator
                     * @property {string|null} [logsUri] BuildProvenance logsUri
                     * @property {grafeas.v1beta1.provenance.ISource|null} [sourceProvenance] BuildProvenance sourceProvenance
                     * @property {string|null} [triggerId] BuildProvenance triggerId
                     * @property {Object.<string,string>|null} [buildOptions] BuildProvenance buildOptions
                     * @property {string|null} [builderVersion] BuildProvenance builderVersion
                     */
    
                    /**
                     * Constructs a new BuildProvenance.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents a BuildProvenance.
                     * @implements IBuildProvenance
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.IBuildProvenance=} [properties] Properties to set
                     */
                    function BuildProvenance(properties) {
                        this.commands = [];
                        this.builtArtifacts = [];
                        this.buildOptions = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BuildProvenance id.
                     * @member {string} id
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.id = "";
    
                    /**
                     * BuildProvenance projectId.
                     * @member {string} projectId
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.projectId = "";
    
                    /**
                     * BuildProvenance commands.
                     * @member {Array.<grafeas.v1beta1.provenance.ICommand>} commands
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.commands = $util.emptyArray;
    
                    /**
                     * BuildProvenance builtArtifacts.
                     * @member {Array.<grafeas.v1beta1.provenance.IArtifact>} builtArtifacts
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.builtArtifacts = $util.emptyArray;
    
                    /**
                     * BuildProvenance createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.createTime = null;
    
                    /**
                     * BuildProvenance startTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} startTime
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.startTime = null;
    
                    /**
                     * BuildProvenance endTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} endTime
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.endTime = null;
    
                    /**
                     * BuildProvenance creator.
                     * @member {string} creator
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.creator = "";
    
                    /**
                     * BuildProvenance logsUri.
                     * @member {string} logsUri
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.logsUri = "";
    
                    /**
                     * BuildProvenance sourceProvenance.
                     * @member {grafeas.v1beta1.provenance.ISource|null|undefined} sourceProvenance
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.sourceProvenance = null;
    
                    /**
                     * BuildProvenance triggerId.
                     * @member {string} triggerId
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.triggerId = "";
    
                    /**
                     * BuildProvenance buildOptions.
                     * @member {Object.<string,string>} buildOptions
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.buildOptions = $util.emptyObject;
    
                    /**
                     * BuildProvenance builderVersion.
                     * @member {string} builderVersion
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     */
                    BuildProvenance.prototype.builderVersion = "";
    
                    /**
                     * Creates a new BuildProvenance instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {grafeas.v1beta1.provenance.IBuildProvenance=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.BuildProvenance} BuildProvenance instance
                     */
                    BuildProvenance.create = function create(properties) {
                        return new BuildProvenance(properties);
                    };
    
                    /**
                     * Encodes the specified BuildProvenance message. Does not implicitly {@link grafeas.v1beta1.provenance.BuildProvenance.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {grafeas.v1beta1.provenance.IBuildProvenance} message BuildProvenance message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BuildProvenance.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.projectId);
                        if (message.commands != null && message.commands.length)
                            for (var i = 0; i < message.commands.length; ++i)
                                $root.grafeas.v1beta1.provenance.Command.encode(message.commands[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.builtArtifacts != null && message.builtArtifacts.length)
                            for (var i = 0; i < message.builtArtifacts.length; ++i)
                                $root.grafeas.v1beta1.provenance.Artifact.encode(message.builtArtifacts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.creator);
                        if (message.logsUri != null && Object.hasOwnProperty.call(message, "logsUri"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.logsUri);
                        if (message.sourceProvenance != null && Object.hasOwnProperty.call(message, "sourceProvenance"))
                            $root.grafeas.v1beta1.provenance.Source.encode(message.sourceProvenance, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.triggerId != null && Object.hasOwnProperty.call(message, "triggerId"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.triggerId);
                        if (message.buildOptions != null && Object.hasOwnProperty.call(message, "buildOptions"))
                            for (var keys = Object.keys(message.buildOptions), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 12, wireType 2 =*/98).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.buildOptions[keys[i]]).ldelim();
                        if (message.builderVersion != null && Object.hasOwnProperty.call(message, "builderVersion"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.builderVersion);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BuildProvenance message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.BuildProvenance.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {grafeas.v1beta1.provenance.IBuildProvenance} message BuildProvenance message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BuildProvenance.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BuildProvenance message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.BuildProvenance} BuildProvenance
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BuildProvenance.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.BuildProvenance(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.projectId = reader.string();
                                    break;
                                }
                            case 3: {
                                    if (!(message.commands && message.commands.length))
                                        message.commands = [];
                                    message.commands.push($root.grafeas.v1beta1.provenance.Command.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 4: {
                                    if (!(message.builtArtifacts && message.builtArtifacts.length))
                                        message.builtArtifacts = [];
                                    message.builtArtifacts.push($root.grafeas.v1beta1.provenance.Artifact.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 5: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    message.creator = reader.string();
                                    break;
                                }
                            case 9: {
                                    message.logsUri = reader.string();
                                    break;
                                }
                            case 10: {
                                    message.sourceProvenance = $root.grafeas.v1beta1.provenance.Source.decode(reader, reader.uint32());
                                    break;
                                }
                            case 11: {
                                    message.triggerId = reader.string();
                                    break;
                                }
                            case 12: {
                                    if (message.buildOptions === $util.emptyObject)
                                        message.buildOptions = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.buildOptions[key] = value;
                                    break;
                                }
                            case 13: {
                                    message.builderVersion = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BuildProvenance message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.BuildProvenance} BuildProvenance
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BuildProvenance.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BuildProvenance message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BuildProvenance.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.projectId != null && message.hasOwnProperty("projectId"))
                            if (!$util.isString(message.projectId))
                                return "projectId: string expected";
                        if (message.commands != null && message.hasOwnProperty("commands")) {
                            if (!Array.isArray(message.commands))
                                return "commands: array expected";
                            for (var i = 0; i < message.commands.length; ++i) {
                                var error = $root.grafeas.v1beta1.provenance.Command.verify(message.commands[i]);
                                if (error)
                                    return "commands." + error;
                            }
                        }
                        if (message.builtArtifacts != null && message.hasOwnProperty("builtArtifacts")) {
                            if (!Array.isArray(message.builtArtifacts))
                                return "builtArtifacts: array expected";
                            for (var i = 0; i < message.builtArtifacts.length; ++i) {
                                var error = $root.grafeas.v1beta1.provenance.Artifact.verify(message.builtArtifacts[i]);
                                if (error)
                                    return "builtArtifacts." + error;
                            }
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.startTime != null && message.hasOwnProperty("startTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                            if (error)
                                return "startTime." + error;
                        }
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                            if (error)
                                return "endTime." + error;
                        }
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            if (!$util.isString(message.creator))
                                return "creator: string expected";
                        if (message.logsUri != null && message.hasOwnProperty("logsUri"))
                            if (!$util.isString(message.logsUri))
                                return "logsUri: string expected";
                        if (message.sourceProvenance != null && message.hasOwnProperty("sourceProvenance")) {
                            var error = $root.grafeas.v1beta1.provenance.Source.verify(message.sourceProvenance);
                            if (error)
                                return "sourceProvenance." + error;
                        }
                        if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                            if (!$util.isString(message.triggerId))
                                return "triggerId: string expected";
                        if (message.buildOptions != null && message.hasOwnProperty("buildOptions")) {
                            if (!$util.isObject(message.buildOptions))
                                return "buildOptions: object expected";
                            var key = Object.keys(message.buildOptions);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.buildOptions[key[i]]))
                                    return "buildOptions: string{k:string} expected";
                        }
                        if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                            if (!$util.isString(message.builderVersion))
                                return "builderVersion: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a BuildProvenance message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.BuildProvenance} BuildProvenance
                     */
                    BuildProvenance.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.BuildProvenance)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.BuildProvenance();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.projectId != null)
                            message.projectId = String(object.projectId);
                        if (object.commands) {
                            if (!Array.isArray(object.commands))
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.commands: array expected");
                            message.commands = [];
                            for (var i = 0; i < object.commands.length; ++i) {
                                if (typeof object.commands[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.commands: object expected");
                                message.commands[i] = $root.grafeas.v1beta1.provenance.Command.fromObject(object.commands[i]);
                            }
                        }
                        if (object.builtArtifacts) {
                            if (!Array.isArray(object.builtArtifacts))
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.builtArtifacts: array expected");
                            message.builtArtifacts = [];
                            for (var i = 0; i < object.builtArtifacts.length; ++i) {
                                if (typeof object.builtArtifacts[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.builtArtifacts: object expected");
                                message.builtArtifacts[i] = $root.grafeas.v1beta1.provenance.Artifact.fromObject(object.builtArtifacts[i]);
                            }
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.startTime != null) {
                            if (typeof object.startTime !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.startTime: object expected");
                            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                        }
                        if (object.endTime != null) {
                            if (typeof object.endTime !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.endTime: object expected");
                            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                        }
                        if (object.creator != null)
                            message.creator = String(object.creator);
                        if (object.logsUri != null)
                            message.logsUri = String(object.logsUri);
                        if (object.sourceProvenance != null) {
                            if (typeof object.sourceProvenance !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.sourceProvenance: object expected");
                            message.sourceProvenance = $root.grafeas.v1beta1.provenance.Source.fromObject(object.sourceProvenance);
                        }
                        if (object.triggerId != null)
                            message.triggerId = String(object.triggerId);
                        if (object.buildOptions) {
                            if (typeof object.buildOptions !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.BuildProvenance.buildOptions: object expected");
                            message.buildOptions = {};
                            for (var keys = Object.keys(object.buildOptions), i = 0; i < keys.length; ++i)
                                message.buildOptions[keys[i]] = String(object.buildOptions[keys[i]]);
                        }
                        if (object.builderVersion != null)
                            message.builderVersion = String(object.builderVersion);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BuildProvenance message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {grafeas.v1beta1.provenance.BuildProvenance} message BuildProvenance
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BuildProvenance.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.commands = [];
                            object.builtArtifacts = [];
                        }
                        if (options.objects || options.defaults)
                            object.buildOptions = {};
                        if (options.defaults) {
                            object.id = "";
                            object.projectId = "";
                            object.createTime = null;
                            object.startTime = null;
                            object.endTime = null;
                            object.creator = "";
                            object.logsUri = "";
                            object.sourceProvenance = null;
                            object.triggerId = "";
                            object.builderVersion = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.projectId != null && message.hasOwnProperty("projectId"))
                            object.projectId = message.projectId;
                        if (message.commands && message.commands.length) {
                            object.commands = [];
                            for (var j = 0; j < message.commands.length; ++j)
                                object.commands[j] = $root.grafeas.v1beta1.provenance.Command.toObject(message.commands[j], options);
                        }
                        if (message.builtArtifacts && message.builtArtifacts.length) {
                            object.builtArtifacts = [];
                            for (var j = 0; j < message.builtArtifacts.length; ++j)
                                object.builtArtifacts[j] = $root.grafeas.v1beta1.provenance.Artifact.toObject(message.builtArtifacts[j], options);
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.startTime != null && message.hasOwnProperty("startTime"))
                            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                        if (message.endTime != null && message.hasOwnProperty("endTime"))
                            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            object.creator = message.creator;
                        if (message.logsUri != null && message.hasOwnProperty("logsUri"))
                            object.logsUri = message.logsUri;
                        if (message.sourceProvenance != null && message.hasOwnProperty("sourceProvenance"))
                            object.sourceProvenance = $root.grafeas.v1beta1.provenance.Source.toObject(message.sourceProvenance, options);
                        if (message.triggerId != null && message.hasOwnProperty("triggerId"))
                            object.triggerId = message.triggerId;
                        var keys2;
                        if (message.buildOptions && (keys2 = Object.keys(message.buildOptions)).length) {
                            object.buildOptions = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.buildOptions[keys2[j]] = message.buildOptions[keys2[j]];
                        }
                        if (message.builderVersion != null && message.hasOwnProperty("builderVersion"))
                            object.builderVersion = message.builderVersion;
                        return object;
                    };
    
                    /**
                     * Converts this BuildProvenance to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BuildProvenance.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BuildProvenance
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.BuildProvenance
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BuildProvenance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.BuildProvenance";
                    };
    
                    return BuildProvenance;
                })();
    
                provenance.Source = (function() {
    
                    /**
                     * Properties of a Source.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface ISource
                     * @property {string|null} [artifactStorageSourceUri] Source artifactStorageSourceUri
                     * @property {Object.<string,grafeas.v1beta1.provenance.IFileHashes>|null} [fileHashes] Source fileHashes
                     * @property {grafeas.v1beta1.source.ISourceContext|null} [context] Source context
                     * @property {Array.<grafeas.v1beta1.source.ISourceContext>|null} [additionalContexts] Source additionalContexts
                     */
    
                    /**
                     * Constructs a new Source.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents a Source.
                     * @implements ISource
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.ISource=} [properties] Properties to set
                     */
                    function Source(properties) {
                        this.fileHashes = {};
                        this.additionalContexts = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Source artifactStorageSourceUri.
                     * @member {string} artifactStorageSourceUri
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @instance
                     */
                    Source.prototype.artifactStorageSourceUri = "";
    
                    /**
                     * Source fileHashes.
                     * @member {Object.<string,grafeas.v1beta1.provenance.IFileHashes>} fileHashes
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @instance
                     */
                    Source.prototype.fileHashes = $util.emptyObject;
    
                    /**
                     * Source context.
                     * @member {grafeas.v1beta1.source.ISourceContext|null|undefined} context
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @instance
                     */
                    Source.prototype.context = null;
    
                    /**
                     * Source additionalContexts.
                     * @member {Array.<grafeas.v1beta1.source.ISourceContext>} additionalContexts
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @instance
                     */
                    Source.prototype.additionalContexts = $util.emptyArray;
    
                    /**
                     * Creates a new Source instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {grafeas.v1beta1.provenance.ISource=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.Source} Source instance
                     */
                    Source.create = function create(properties) {
                        return new Source(properties);
                    };
    
                    /**
                     * Encodes the specified Source message. Does not implicitly {@link grafeas.v1beta1.provenance.Source.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {grafeas.v1beta1.provenance.ISource} message Source message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Source.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.artifactStorageSourceUri != null && Object.hasOwnProperty.call(message, "artifactStorageSourceUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.artifactStorageSourceUri);
                        if (message.fileHashes != null && Object.hasOwnProperty.call(message, "fileHashes"))
                            for (var keys = Object.keys(message.fileHashes), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.grafeas.v1beta1.provenance.FileHashes.encode(message.fileHashes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.context != null && Object.hasOwnProperty.call(message, "context"))
                            $root.grafeas.v1beta1.source.SourceContext.encode(message.context, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.additionalContexts != null && message.additionalContexts.length)
                            for (var i = 0; i < message.additionalContexts.length; ++i)
                                $root.grafeas.v1beta1.source.SourceContext.encode(message.additionalContexts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Source message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.Source.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {grafeas.v1beta1.provenance.ISource} message Source message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Source.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Source message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.Source} Source
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Source.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.Source(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.artifactStorageSourceUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (message.fileHashes === $util.emptyObject)
                                        message.fileHashes = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = null;
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = $root.grafeas.v1beta1.provenance.FileHashes.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.fileHashes[key] = value;
                                    break;
                                }
                            case 3: {
                                    message.context = $root.grafeas.v1beta1.source.SourceContext.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    if (!(message.additionalContexts && message.additionalContexts.length))
                                        message.additionalContexts = [];
                                    message.additionalContexts.push($root.grafeas.v1beta1.source.SourceContext.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Source message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.Source} Source
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Source.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Source message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Source.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.artifactStorageSourceUri != null && message.hasOwnProperty("artifactStorageSourceUri"))
                            if (!$util.isString(message.artifactStorageSourceUri))
                                return "artifactStorageSourceUri: string expected";
                        if (message.fileHashes != null && message.hasOwnProperty("fileHashes")) {
                            if (!$util.isObject(message.fileHashes))
                                return "fileHashes: object expected";
                            var key = Object.keys(message.fileHashes);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.grafeas.v1beta1.provenance.FileHashes.verify(message.fileHashes[key[i]]);
                                if (error)
                                    return "fileHashes." + error;
                            }
                        }
                        if (message.context != null && message.hasOwnProperty("context")) {
                            var error = $root.grafeas.v1beta1.source.SourceContext.verify(message.context);
                            if (error)
                                return "context." + error;
                        }
                        if (message.additionalContexts != null && message.hasOwnProperty("additionalContexts")) {
                            if (!Array.isArray(message.additionalContexts))
                                return "additionalContexts: array expected";
                            for (var i = 0; i < message.additionalContexts.length; ++i) {
                                var error = $root.grafeas.v1beta1.source.SourceContext.verify(message.additionalContexts[i]);
                                if (error)
                                    return "additionalContexts." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Source message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.Source} Source
                     */
                    Source.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.Source)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.Source();
                        if (object.artifactStorageSourceUri != null)
                            message.artifactStorageSourceUri = String(object.artifactStorageSourceUri);
                        if (object.fileHashes) {
                            if (typeof object.fileHashes !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.Source.fileHashes: object expected");
                            message.fileHashes = {};
                            for (var keys = Object.keys(object.fileHashes), i = 0; i < keys.length; ++i) {
                                if (typeof object.fileHashes[keys[i]] !== "object")
                                    throw TypeError(".grafeas.v1beta1.provenance.Source.fileHashes: object expected");
                                message.fileHashes[keys[i]] = $root.grafeas.v1beta1.provenance.FileHashes.fromObject(object.fileHashes[keys[i]]);
                            }
                        }
                        if (object.context != null) {
                            if (typeof object.context !== "object")
                                throw TypeError(".grafeas.v1beta1.provenance.Source.context: object expected");
                            message.context = $root.grafeas.v1beta1.source.SourceContext.fromObject(object.context);
                        }
                        if (object.additionalContexts) {
                            if (!Array.isArray(object.additionalContexts))
                                throw TypeError(".grafeas.v1beta1.provenance.Source.additionalContexts: array expected");
                            message.additionalContexts = [];
                            for (var i = 0; i < object.additionalContexts.length; ++i) {
                                if (typeof object.additionalContexts[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.provenance.Source.additionalContexts: object expected");
                                message.additionalContexts[i] = $root.grafeas.v1beta1.source.SourceContext.fromObject(object.additionalContexts[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Source message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {grafeas.v1beta1.provenance.Source} message Source
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Source.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.additionalContexts = [];
                        if (options.objects || options.defaults)
                            object.fileHashes = {};
                        if (options.defaults) {
                            object.artifactStorageSourceUri = "";
                            object.context = null;
                        }
                        if (message.artifactStorageSourceUri != null && message.hasOwnProperty("artifactStorageSourceUri"))
                            object.artifactStorageSourceUri = message.artifactStorageSourceUri;
                        var keys2;
                        if (message.fileHashes && (keys2 = Object.keys(message.fileHashes)).length) {
                            object.fileHashes = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.fileHashes[keys2[j]] = $root.grafeas.v1beta1.provenance.FileHashes.toObject(message.fileHashes[keys2[j]], options);
                        }
                        if (message.context != null && message.hasOwnProperty("context"))
                            object.context = $root.grafeas.v1beta1.source.SourceContext.toObject(message.context, options);
                        if (message.additionalContexts && message.additionalContexts.length) {
                            object.additionalContexts = [];
                            for (var j = 0; j < message.additionalContexts.length; ++j)
                                object.additionalContexts[j] = $root.grafeas.v1beta1.source.SourceContext.toObject(message.additionalContexts[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Source to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Source.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Source
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.Source
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Source.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.Source";
                    };
    
                    return Source;
                })();
    
                provenance.FileHashes = (function() {
    
                    /**
                     * Properties of a FileHashes.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface IFileHashes
                     * @property {Array.<grafeas.v1beta1.provenance.IHash>|null} [fileHash] FileHashes fileHash
                     */
    
                    /**
                     * Constructs a new FileHashes.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents a FileHashes.
                     * @implements IFileHashes
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.IFileHashes=} [properties] Properties to set
                     */
                    function FileHashes(properties) {
                        this.fileHash = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FileHashes fileHash.
                     * @member {Array.<grafeas.v1beta1.provenance.IHash>} fileHash
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @instance
                     */
                    FileHashes.prototype.fileHash = $util.emptyArray;
    
                    /**
                     * Creates a new FileHashes instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {grafeas.v1beta1.provenance.IFileHashes=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.FileHashes} FileHashes instance
                     */
                    FileHashes.create = function create(properties) {
                        return new FileHashes(properties);
                    };
    
                    /**
                     * Encodes the specified FileHashes message. Does not implicitly {@link grafeas.v1beta1.provenance.FileHashes.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {grafeas.v1beta1.provenance.IFileHashes} message FileHashes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileHashes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.fileHash != null && message.fileHash.length)
                            for (var i = 0; i < message.fileHash.length; ++i)
                                $root.grafeas.v1beta1.provenance.Hash.encode(message.fileHash[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FileHashes message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.FileHashes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {grafeas.v1beta1.provenance.IFileHashes} message FileHashes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileHashes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FileHashes message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.FileHashes} FileHashes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileHashes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.FileHashes();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.fileHash && message.fileHash.length))
                                        message.fileHash = [];
                                    message.fileHash.push($root.grafeas.v1beta1.provenance.Hash.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FileHashes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.FileHashes} FileHashes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileHashes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FileHashes message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FileHashes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.fileHash != null && message.hasOwnProperty("fileHash")) {
                            if (!Array.isArray(message.fileHash))
                                return "fileHash: array expected";
                            for (var i = 0; i < message.fileHash.length; ++i) {
                                var error = $root.grafeas.v1beta1.provenance.Hash.verify(message.fileHash[i]);
                                if (error)
                                    return "fileHash." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a FileHashes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.FileHashes} FileHashes
                     */
                    FileHashes.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.FileHashes)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.FileHashes();
                        if (object.fileHash) {
                            if (!Array.isArray(object.fileHash))
                                throw TypeError(".grafeas.v1beta1.provenance.FileHashes.fileHash: array expected");
                            message.fileHash = [];
                            for (var i = 0; i < object.fileHash.length; ++i) {
                                if (typeof object.fileHash[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.provenance.FileHashes.fileHash: object expected");
                                message.fileHash[i] = $root.grafeas.v1beta1.provenance.Hash.fromObject(object.fileHash[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FileHashes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {grafeas.v1beta1.provenance.FileHashes} message FileHashes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FileHashes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.fileHash = [];
                        if (message.fileHash && message.fileHash.length) {
                            object.fileHash = [];
                            for (var j = 0; j < message.fileHash.length; ++j)
                                object.fileHash[j] = $root.grafeas.v1beta1.provenance.Hash.toObject(message.fileHash[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this FileHashes to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FileHashes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for FileHashes
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.FileHashes
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    FileHashes.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.FileHashes";
                    };
    
                    return FileHashes;
                })();
    
                provenance.Hash = (function() {
    
                    /**
                     * Properties of a Hash.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface IHash
                     * @property {grafeas.v1beta1.provenance.Hash.HashType|null} [type] Hash type
                     * @property {Uint8Array|null} [value] Hash value
                     */
    
                    /**
                     * Constructs a new Hash.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents a Hash.
                     * @implements IHash
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.IHash=} [properties] Properties to set
                     */
                    function Hash(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hash type.
                     * @member {grafeas.v1beta1.provenance.Hash.HashType} type
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @instance
                     */
                    Hash.prototype.type = 0;
    
                    /**
                     * Hash value.
                     * @member {Uint8Array} value
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @instance
                     */
                    Hash.prototype.value = $util.newBuffer([]);
    
                    /**
                     * Creates a new Hash instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {grafeas.v1beta1.provenance.IHash=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.Hash} Hash instance
                     */
                    Hash.create = function create(properties) {
                        return new Hash(properties);
                    };
    
                    /**
                     * Encodes the specified Hash message. Does not implicitly {@link grafeas.v1beta1.provenance.Hash.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {grafeas.v1beta1.provenance.IHash} message Hash message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hash.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hash message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.Hash.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {grafeas.v1beta1.provenance.IHash} message Hash message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hash.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hash message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.Hash} Hash
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hash.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.Hash();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.value = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Hash message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.Hash} Hash
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hash.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hash message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hash.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                return "value: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hash message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.Hash} Hash
                     */
                    Hash.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.Hash)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.Hash();
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "HASH_TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "SHA256":
                        case 1:
                            message.type = 1;
                            break;
                        }
                        if (object.value != null)
                            if (typeof object.value === "string")
                                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                            else if (object.value.length >= 0)
                                message.value = object.value;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hash message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {grafeas.v1beta1.provenance.Hash} message Hash
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hash.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "HASH_TYPE_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.value = "";
                            else {
                                object.value = [];
                                if (options.bytes !== Array)
                                    object.value = $util.newBuffer(object.value);
                            }
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.grafeas.v1beta1.provenance.Hash.HashType[message.type] === undefined ? message.type : $root.grafeas.v1beta1.provenance.Hash.HashType[message.type] : message.type;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                        return object;
                    };
    
                    /**
                     * Converts this Hash to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hash.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Hash
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.Hash
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Hash.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.Hash";
                    };
    
                    /**
                     * HashType enum.
                     * @name grafeas.v1beta1.provenance.Hash.HashType
                     * @enum {number}
                     * @property {number} HASH_TYPE_UNSPECIFIED=0 HASH_TYPE_UNSPECIFIED value
                     * @property {number} SHA256=1 SHA256 value
                     */
                    Hash.HashType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "HASH_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHA256"] = 1;
                        return values;
                    })();
    
                    return Hash;
                })();
    
                provenance.Command = (function() {
    
                    /**
                     * Properties of a Command.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface ICommand
                     * @property {string|null} [name] Command name
                     * @property {Array.<string>|null} [env] Command env
                     * @property {Array.<string>|null} [args] Command args
                     * @property {string|null} [dir] Command dir
                     * @property {string|null} [id] Command id
                     * @property {Array.<string>|null} [waitFor] Command waitFor
                     */
    
                    /**
                     * Constructs a new Command.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents a Command.
                     * @implements ICommand
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.ICommand=} [properties] Properties to set
                     */
                    function Command(properties) {
                        this.env = [];
                        this.args = [];
                        this.waitFor = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Command name.
                     * @member {string} name
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.name = "";
    
                    /**
                     * Command env.
                     * @member {Array.<string>} env
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.env = $util.emptyArray;
    
                    /**
                     * Command args.
                     * @member {Array.<string>} args
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.args = $util.emptyArray;
    
                    /**
                     * Command dir.
                     * @member {string} dir
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.dir = "";
    
                    /**
                     * Command id.
                     * @member {string} id
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.id = "";
    
                    /**
                     * Command waitFor.
                     * @member {Array.<string>} waitFor
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     */
                    Command.prototype.waitFor = $util.emptyArray;
    
                    /**
                     * Creates a new Command instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {grafeas.v1beta1.provenance.ICommand=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.Command} Command instance
                     */
                    Command.create = function create(properties) {
                        return new Command(properties);
                    };
    
                    /**
                     * Encodes the specified Command message. Does not implicitly {@link grafeas.v1beta1.provenance.Command.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {grafeas.v1beta1.provenance.ICommand} message Command message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Command.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.env != null && message.env.length)
                            for (var i = 0; i < message.env.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.env[i]);
                        if (message.args != null && message.args.length)
                            for (var i = 0; i < message.args.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.args[i]);
                        if (message.dir != null && Object.hasOwnProperty.call(message, "dir"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.dir);
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);
                        if (message.waitFor != null && message.waitFor.length)
                            for (var i = 0; i < message.waitFor.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.waitFor[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Command message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.Command.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {grafeas.v1beta1.provenance.ICommand} message Command message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Command.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Command message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.Command} Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Command.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.Command();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.env && message.env.length))
                                        message.env = [];
                                    message.env.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    if (!(message.args && message.args.length))
                                        message.args = [];
                                    message.args.push(reader.string());
                                    break;
                                }
                            case 4: {
                                    message.dir = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.id = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.waitFor && message.waitFor.length))
                                        message.waitFor = [];
                                    message.waitFor.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Command message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.Command} Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Command.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Command message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Command.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.env != null && message.hasOwnProperty("env")) {
                            if (!Array.isArray(message.env))
                                return "env: array expected";
                            for (var i = 0; i < message.env.length; ++i)
                                if (!$util.isString(message.env[i]))
                                    return "env: string[] expected";
                        }
                        if (message.args != null && message.hasOwnProperty("args")) {
                            if (!Array.isArray(message.args))
                                return "args: array expected";
                            for (var i = 0; i < message.args.length; ++i)
                                if (!$util.isString(message.args[i]))
                                    return "args: string[] expected";
                        }
                        if (message.dir != null && message.hasOwnProperty("dir"))
                            if (!$util.isString(message.dir))
                                return "dir: string expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.waitFor != null && message.hasOwnProperty("waitFor")) {
                            if (!Array.isArray(message.waitFor))
                                return "waitFor: array expected";
                            for (var i = 0; i < message.waitFor.length; ++i)
                                if (!$util.isString(message.waitFor[i]))
                                    return "waitFor: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Command message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.Command} Command
                     */
                    Command.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.Command)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.Command();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.env) {
                            if (!Array.isArray(object.env))
                                throw TypeError(".grafeas.v1beta1.provenance.Command.env: array expected");
                            message.env = [];
                            for (var i = 0; i < object.env.length; ++i)
                                message.env[i] = String(object.env[i]);
                        }
                        if (object.args) {
                            if (!Array.isArray(object.args))
                                throw TypeError(".grafeas.v1beta1.provenance.Command.args: array expected");
                            message.args = [];
                            for (var i = 0; i < object.args.length; ++i)
                                message.args[i] = String(object.args[i]);
                        }
                        if (object.dir != null)
                            message.dir = String(object.dir);
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.waitFor) {
                            if (!Array.isArray(object.waitFor))
                                throw TypeError(".grafeas.v1beta1.provenance.Command.waitFor: array expected");
                            message.waitFor = [];
                            for (var i = 0; i < object.waitFor.length; ++i)
                                message.waitFor[i] = String(object.waitFor[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Command message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {grafeas.v1beta1.provenance.Command} message Command
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Command.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.env = [];
                            object.args = [];
                            object.waitFor = [];
                        }
                        if (options.defaults) {
                            object.name = "";
                            object.dir = "";
                            object.id = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.env && message.env.length) {
                            object.env = [];
                            for (var j = 0; j < message.env.length; ++j)
                                object.env[j] = message.env[j];
                        }
                        if (message.args && message.args.length) {
                            object.args = [];
                            for (var j = 0; j < message.args.length; ++j)
                                object.args[j] = message.args[j];
                        }
                        if (message.dir != null && message.hasOwnProperty("dir"))
                            object.dir = message.dir;
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.waitFor && message.waitFor.length) {
                            object.waitFor = [];
                            for (var j = 0; j < message.waitFor.length; ++j)
                                object.waitFor[j] = message.waitFor[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Command to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Command.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Command
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.Command
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Command.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.Command";
                    };
    
                    return Command;
                })();
    
                provenance.Artifact = (function() {
    
                    /**
                     * Properties of an Artifact.
                     * @memberof grafeas.v1beta1.provenance
                     * @interface IArtifact
                     * @property {string|null} [checksum] Artifact checksum
                     * @property {string|null} [id] Artifact id
                     * @property {Array.<string>|null} [names] Artifact names
                     */
    
                    /**
                     * Constructs a new Artifact.
                     * @memberof grafeas.v1beta1.provenance
                     * @classdesc Represents an Artifact.
                     * @implements IArtifact
                     * @constructor
                     * @param {grafeas.v1beta1.provenance.IArtifact=} [properties] Properties to set
                     */
                    function Artifact(properties) {
                        this.names = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Artifact checksum.
                     * @member {string} checksum
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @instance
                     */
                    Artifact.prototype.checksum = "";
    
                    /**
                     * Artifact id.
                     * @member {string} id
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @instance
                     */
                    Artifact.prototype.id = "";
    
                    /**
                     * Artifact names.
                     * @member {Array.<string>} names
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @instance
                     */
                    Artifact.prototype.names = $util.emptyArray;
    
                    /**
                     * Creates a new Artifact instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {grafeas.v1beta1.provenance.IArtifact=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.provenance.Artifact} Artifact instance
                     */
                    Artifact.create = function create(properties) {
                        return new Artifact(properties);
                    };
    
                    /**
                     * Encodes the specified Artifact message. Does not implicitly {@link grafeas.v1beta1.provenance.Artifact.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {grafeas.v1beta1.provenance.IArtifact} message Artifact message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Artifact.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.checksum != null && Object.hasOwnProperty.call(message, "checksum"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.checksum);
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);
                        if (message.names != null && message.names.length)
                            for (var i = 0; i < message.names.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.names[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Artifact message, length delimited. Does not implicitly {@link grafeas.v1beta1.provenance.Artifact.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {grafeas.v1beta1.provenance.IArtifact} message Artifact message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Artifact.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Artifact message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.provenance.Artifact} Artifact
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Artifact.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.provenance.Artifact();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.checksum = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.id = reader.string();
                                    break;
                                }
                            case 3: {
                                    if (!(message.names && message.names.length))
                                        message.names = [];
                                    message.names.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Artifact message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.provenance.Artifact} Artifact
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Artifact.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Artifact message.
                     * @function verify
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Artifact.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.checksum != null && message.hasOwnProperty("checksum"))
                            if (!$util.isString(message.checksum))
                                return "checksum: string expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.names != null && message.hasOwnProperty("names")) {
                            if (!Array.isArray(message.names))
                                return "names: array expected";
                            for (var i = 0; i < message.names.length; ++i)
                                if (!$util.isString(message.names[i]))
                                    return "names: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Artifact message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.provenance.Artifact} Artifact
                     */
                    Artifact.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.provenance.Artifact)
                            return object;
                        var message = new $root.grafeas.v1beta1.provenance.Artifact();
                        if (object.checksum != null)
                            message.checksum = String(object.checksum);
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.names) {
                            if (!Array.isArray(object.names))
                                throw TypeError(".grafeas.v1beta1.provenance.Artifact.names: array expected");
                            message.names = [];
                            for (var i = 0; i < object.names.length; ++i)
                                message.names[i] = String(object.names[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Artifact message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {grafeas.v1beta1.provenance.Artifact} message Artifact
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Artifact.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.names = [];
                        if (options.defaults) {
                            object.checksum = "";
                            object.id = "";
                        }
                        if (message.checksum != null && message.hasOwnProperty("checksum"))
                            object.checksum = message.checksum;
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.names && message.names.length) {
                            object.names = [];
                            for (var j = 0; j < message.names.length; ++j)
                                object.names[j] = message.names[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Artifact to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Artifact.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Artifact
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.provenance.Artifact
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Artifact.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.provenance.Artifact";
                    };
    
                    return Artifact;
                })();
    
                return provenance;
            })();
    
            v1beta1.source = (function() {
    
                /**
                 * Namespace source.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var source = {};
    
                source.SourceContext = (function() {
    
                    /**
                     * Properties of a SourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @interface ISourceContext
                     * @property {grafeas.v1beta1.source.ICloudRepoSourceContext|null} [cloudRepo] SourceContext cloudRepo
                     * @property {grafeas.v1beta1.source.IGerritSourceContext|null} [gerrit] SourceContext gerrit
                     * @property {grafeas.v1beta1.source.IGitSourceContext|null} [git] SourceContext git
                     * @property {Object.<string,string>|null} [labels] SourceContext labels
                     */
    
                    /**
                     * Constructs a new SourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a SourceContext.
                     * @implements ISourceContext
                     * @constructor
                     * @param {grafeas.v1beta1.source.ISourceContext=} [properties] Properties to set
                     */
                    function SourceContext(properties) {
                        this.labels = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SourceContext cloudRepo.
                     * @member {grafeas.v1beta1.source.ICloudRepoSourceContext|null|undefined} cloudRepo
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     */
                    SourceContext.prototype.cloudRepo = null;
    
                    /**
                     * SourceContext gerrit.
                     * @member {grafeas.v1beta1.source.IGerritSourceContext|null|undefined} gerrit
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     */
                    SourceContext.prototype.gerrit = null;
    
                    /**
                     * SourceContext git.
                     * @member {grafeas.v1beta1.source.IGitSourceContext|null|undefined} git
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     */
                    SourceContext.prototype.git = null;
    
                    /**
                     * SourceContext labels.
                     * @member {Object.<string,string>} labels
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     */
                    SourceContext.prototype.labels = $util.emptyObject;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * SourceContext context.
                     * @member {"cloudRepo"|"gerrit"|"git"|undefined} context
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     */
                    Object.defineProperty(SourceContext.prototype, "context", {
                        get: $util.oneOfGetter($oneOfFields = ["cloudRepo", "gerrit", "git"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new SourceContext instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ISourceContext=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.SourceContext} SourceContext instance
                     */
                    SourceContext.create = function create(properties) {
                        return new SourceContext(properties);
                    };
    
                    /**
                     * Encodes the specified SourceContext message. Does not implicitly {@link grafeas.v1beta1.source.SourceContext.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ISourceContext} message SourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SourceContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cloudRepo != null && Object.hasOwnProperty.call(message, "cloudRepo"))
                            $root.grafeas.v1beta1.source.CloudRepoSourceContext.encode(message.cloudRepo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.gerrit != null && Object.hasOwnProperty.call(message, "gerrit"))
                            $root.grafeas.v1beta1.source.GerritSourceContext.encode(message.gerrit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.git != null && Object.hasOwnProperty.call(message, "git"))
                            $root.grafeas.v1beta1.source.GitSourceContext.encode(message.git, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                            for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SourceContext message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.SourceContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ISourceContext} message SourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SourceContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.SourceContext} SourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SourceContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.SourceContext(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cloudRepo = $root.grafeas.v1beta1.source.CloudRepoSourceContext.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.gerrit = $root.grafeas.v1beta1.source.GerritSourceContext.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.git = $root.grafeas.v1beta1.source.GitSourceContext.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.labels[key] = value;
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SourceContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.SourceContext} SourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SourceContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SourceContext message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SourceContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.cloudRepo != null && message.hasOwnProperty("cloudRepo")) {
                            properties.context = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.CloudRepoSourceContext.verify(message.cloudRepo);
                                if (error)
                                    return "cloudRepo." + error;
                            }
                        }
                        if (message.gerrit != null && message.hasOwnProperty("gerrit")) {
                            if (properties.context === 1)
                                return "context: multiple values";
                            properties.context = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.GerritSourceContext.verify(message.gerrit);
                                if (error)
                                    return "gerrit." + error;
                            }
                        }
                        if (message.git != null && message.hasOwnProperty("git")) {
                            if (properties.context === 1)
                                return "context: multiple values";
                            properties.context = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.GitSourceContext.verify(message.git);
                                if (error)
                                    return "git." + error;
                            }
                        }
                        if (message.labels != null && message.hasOwnProperty("labels")) {
                            if (!$util.isObject(message.labels))
                                return "labels: object expected";
                            var key = Object.keys(message.labels);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.labels[key[i]]))
                                    return "labels: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SourceContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.SourceContext} SourceContext
                     */
                    SourceContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.SourceContext)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.SourceContext();
                        if (object.cloudRepo != null) {
                            if (typeof object.cloudRepo !== "object")
                                throw TypeError(".grafeas.v1beta1.source.SourceContext.cloudRepo: object expected");
                            message.cloudRepo = $root.grafeas.v1beta1.source.CloudRepoSourceContext.fromObject(object.cloudRepo);
                        }
                        if (object.gerrit != null) {
                            if (typeof object.gerrit !== "object")
                                throw TypeError(".grafeas.v1beta1.source.SourceContext.gerrit: object expected");
                            message.gerrit = $root.grafeas.v1beta1.source.GerritSourceContext.fromObject(object.gerrit);
                        }
                        if (object.git != null) {
                            if (typeof object.git !== "object")
                                throw TypeError(".grafeas.v1beta1.source.SourceContext.git: object expected");
                            message.git = $root.grafeas.v1beta1.source.GitSourceContext.fromObject(object.git);
                        }
                        if (object.labels) {
                            if (typeof object.labels !== "object")
                                throw TypeError(".grafeas.v1beta1.source.SourceContext.labels: object expected");
                            message.labels = {};
                            for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                message.labels[keys[i]] = String(object.labels[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SourceContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.SourceContext} message SourceContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SourceContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.labels = {};
                        if (message.cloudRepo != null && message.hasOwnProperty("cloudRepo")) {
                            object.cloudRepo = $root.grafeas.v1beta1.source.CloudRepoSourceContext.toObject(message.cloudRepo, options);
                            if (options.oneofs)
                                object.context = "cloudRepo";
                        }
                        if (message.gerrit != null && message.hasOwnProperty("gerrit")) {
                            object.gerrit = $root.grafeas.v1beta1.source.GerritSourceContext.toObject(message.gerrit, options);
                            if (options.oneofs)
                                object.context = "gerrit";
                        }
                        if (message.git != null && message.hasOwnProperty("git")) {
                            object.git = $root.grafeas.v1beta1.source.GitSourceContext.toObject(message.git, options);
                            if (options.oneofs)
                                object.context = "git";
                        }
                        var keys2;
                        if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                            object.labels = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.labels[keys2[j]] = message.labels[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SourceContext to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SourceContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SourceContext
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.SourceContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.SourceContext";
                    };
    
                    return SourceContext;
                })();
    
                source.AliasContext = (function() {
    
                    /**
                     * Properties of an AliasContext.
                     * @memberof grafeas.v1beta1.source
                     * @interface IAliasContext
                     * @property {grafeas.v1beta1.source.AliasContext.Kind|null} [kind] AliasContext kind
                     * @property {string|null} [name] AliasContext name
                     */
    
                    /**
                     * Constructs a new AliasContext.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents an AliasContext.
                     * @implements IAliasContext
                     * @constructor
                     * @param {grafeas.v1beta1.source.IAliasContext=} [properties] Properties to set
                     */
                    function AliasContext(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AliasContext kind.
                     * @member {grafeas.v1beta1.source.AliasContext.Kind} kind
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @instance
                     */
                    AliasContext.prototype.kind = 0;
    
                    /**
                     * AliasContext name.
                     * @member {string} name
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @instance
                     */
                    AliasContext.prototype.name = "";
    
                    /**
                     * Creates a new AliasContext instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {grafeas.v1beta1.source.IAliasContext=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.AliasContext} AliasContext instance
                     */
                    AliasContext.create = function create(properties) {
                        return new AliasContext(properties);
                    };
    
                    /**
                     * Encodes the specified AliasContext message. Does not implicitly {@link grafeas.v1beta1.source.AliasContext.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {grafeas.v1beta1.source.IAliasContext} message AliasContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AliasContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.kind);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AliasContext message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.AliasContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {grafeas.v1beta1.source.IAliasContext} message AliasContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AliasContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AliasContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.AliasContext} AliasContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AliasContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.AliasContext();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.kind = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AliasContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.AliasContext} AliasContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AliasContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AliasContext message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AliasContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            switch (message.kind) {
                            default:
                                return "kind: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 4:
                                break;
                            }
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AliasContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.AliasContext} AliasContext
                     */
                    AliasContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.AliasContext)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.AliasContext();
                        switch (object.kind) {
                        default:
                            if (typeof object.kind === "number") {
                                message.kind = object.kind;
                                break;
                            }
                            break;
                        case "KIND_UNSPECIFIED":
                        case 0:
                            message.kind = 0;
                            break;
                        case "FIXED":
                        case 1:
                            message.kind = 1;
                            break;
                        case "MOVABLE":
                        case 2:
                            message.kind = 2;
                            break;
                        case "OTHER":
                        case 4:
                            message.kind = 4;
                            break;
                        }
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AliasContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {grafeas.v1beta1.source.AliasContext} message AliasContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AliasContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.kind = options.enums === String ? "KIND_UNSPECIFIED" : 0;
                            object.name = "";
                        }
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            object.kind = options.enums === String ? $root.grafeas.v1beta1.source.AliasContext.Kind[message.kind] === undefined ? message.kind : $root.grafeas.v1beta1.source.AliasContext.Kind[message.kind] : message.kind;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this AliasContext to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AliasContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AliasContext
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.AliasContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AliasContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.AliasContext";
                    };
    
                    /**
                     * Kind enum.
                     * @name grafeas.v1beta1.source.AliasContext.Kind
                     * @enum {number}
                     * @property {number} KIND_UNSPECIFIED=0 KIND_UNSPECIFIED value
                     * @property {number} FIXED=1 FIXED value
                     * @property {number} MOVABLE=2 MOVABLE value
                     * @property {number} OTHER=4 OTHER value
                     */
                    AliasContext.Kind = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "KIND_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "FIXED"] = 1;
                        values[valuesById[2] = "MOVABLE"] = 2;
                        values[valuesById[4] = "OTHER"] = 4;
                        return values;
                    })();
    
                    return AliasContext;
                })();
    
                source.CloudRepoSourceContext = (function() {
    
                    /**
                     * Properties of a CloudRepoSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @interface ICloudRepoSourceContext
                     * @property {grafeas.v1beta1.source.IRepoId|null} [repoId] CloudRepoSourceContext repoId
                     * @property {string|null} [revisionId] CloudRepoSourceContext revisionId
                     * @property {grafeas.v1beta1.source.IAliasContext|null} [aliasContext] CloudRepoSourceContext aliasContext
                     */
    
                    /**
                     * Constructs a new CloudRepoSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a CloudRepoSourceContext.
                     * @implements ICloudRepoSourceContext
                     * @constructor
                     * @param {grafeas.v1beta1.source.ICloudRepoSourceContext=} [properties] Properties to set
                     */
                    function CloudRepoSourceContext(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CloudRepoSourceContext repoId.
                     * @member {grafeas.v1beta1.source.IRepoId|null|undefined} repoId
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @instance
                     */
                    CloudRepoSourceContext.prototype.repoId = null;
    
                    /**
                     * CloudRepoSourceContext revisionId.
                     * @member {string|null|undefined} revisionId
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @instance
                     */
                    CloudRepoSourceContext.prototype.revisionId = null;
    
                    /**
                     * CloudRepoSourceContext aliasContext.
                     * @member {grafeas.v1beta1.source.IAliasContext|null|undefined} aliasContext
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @instance
                     */
                    CloudRepoSourceContext.prototype.aliasContext = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * CloudRepoSourceContext revision.
                     * @member {"revisionId"|"aliasContext"|undefined} revision
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @instance
                     */
                    Object.defineProperty(CloudRepoSourceContext.prototype, "revision", {
                        get: $util.oneOfGetter($oneOfFields = ["revisionId", "aliasContext"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new CloudRepoSourceContext instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ICloudRepoSourceContext=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.CloudRepoSourceContext} CloudRepoSourceContext instance
                     */
                    CloudRepoSourceContext.create = function create(properties) {
                        return new CloudRepoSourceContext(properties);
                    };
    
                    /**
                     * Encodes the specified CloudRepoSourceContext message. Does not implicitly {@link grafeas.v1beta1.source.CloudRepoSourceContext.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ICloudRepoSourceContext} message CloudRepoSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloudRepoSourceContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.repoId != null && Object.hasOwnProperty.call(message, "repoId"))
                            $root.grafeas.v1beta1.source.RepoId.encode(message.repoId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.revisionId);
                        if (message.aliasContext != null && Object.hasOwnProperty.call(message, "aliasContext"))
                            $root.grafeas.v1beta1.source.AliasContext.encode(message.aliasContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CloudRepoSourceContext message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.CloudRepoSourceContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.ICloudRepoSourceContext} message CloudRepoSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloudRepoSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CloudRepoSourceContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.CloudRepoSourceContext} CloudRepoSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloudRepoSourceContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.CloudRepoSourceContext();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.repoId = $root.grafeas.v1beta1.source.RepoId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.revisionId = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.aliasContext = $root.grafeas.v1beta1.source.AliasContext.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CloudRepoSourceContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.CloudRepoSourceContext} CloudRepoSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloudRepoSourceContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CloudRepoSourceContext message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CloudRepoSourceContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.repoId != null && message.hasOwnProperty("repoId")) {
                            var error = $root.grafeas.v1beta1.source.RepoId.verify(message.repoId);
                            if (error)
                                return "repoId." + error;
                        }
                        if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                            properties.revision = 1;
                            if (!$util.isString(message.revisionId))
                                return "revisionId: string expected";
                        }
                        if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                            if (properties.revision === 1)
                                return "revision: multiple values";
                            properties.revision = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.AliasContext.verify(message.aliasContext);
                                if (error)
                                    return "aliasContext." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CloudRepoSourceContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.CloudRepoSourceContext} CloudRepoSourceContext
                     */
                    CloudRepoSourceContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.CloudRepoSourceContext)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.CloudRepoSourceContext();
                        if (object.repoId != null) {
                            if (typeof object.repoId !== "object")
                                throw TypeError(".grafeas.v1beta1.source.CloudRepoSourceContext.repoId: object expected");
                            message.repoId = $root.grafeas.v1beta1.source.RepoId.fromObject(object.repoId);
                        }
                        if (object.revisionId != null)
                            message.revisionId = String(object.revisionId);
                        if (object.aliasContext != null) {
                            if (typeof object.aliasContext !== "object")
                                throw TypeError(".grafeas.v1beta1.source.CloudRepoSourceContext.aliasContext: object expected");
                            message.aliasContext = $root.grafeas.v1beta1.source.AliasContext.fromObject(object.aliasContext);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CloudRepoSourceContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.CloudRepoSourceContext} message CloudRepoSourceContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CloudRepoSourceContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.repoId = null;
                        if (message.repoId != null && message.hasOwnProperty("repoId"))
                            object.repoId = $root.grafeas.v1beta1.source.RepoId.toObject(message.repoId, options);
                        if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                            object.revisionId = message.revisionId;
                            if (options.oneofs)
                                object.revision = "revisionId";
                        }
                        if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                            object.aliasContext = $root.grafeas.v1beta1.source.AliasContext.toObject(message.aliasContext, options);
                            if (options.oneofs)
                                object.revision = "aliasContext";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CloudRepoSourceContext to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CloudRepoSourceContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CloudRepoSourceContext
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.CloudRepoSourceContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CloudRepoSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.CloudRepoSourceContext";
                    };
    
                    return CloudRepoSourceContext;
                })();
    
                source.GerritSourceContext = (function() {
    
                    /**
                     * Properties of a GerritSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @interface IGerritSourceContext
                     * @property {string|null} [hostUri] GerritSourceContext hostUri
                     * @property {string|null} [gerritProject] GerritSourceContext gerritProject
                     * @property {string|null} [revisionId] GerritSourceContext revisionId
                     * @property {grafeas.v1beta1.source.IAliasContext|null} [aliasContext] GerritSourceContext aliasContext
                     */
    
                    /**
                     * Constructs a new GerritSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a GerritSourceContext.
                     * @implements IGerritSourceContext
                     * @constructor
                     * @param {grafeas.v1beta1.source.IGerritSourceContext=} [properties] Properties to set
                     */
                    function GerritSourceContext(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GerritSourceContext hostUri.
                     * @member {string} hostUri
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     */
                    GerritSourceContext.prototype.hostUri = "";
    
                    /**
                     * GerritSourceContext gerritProject.
                     * @member {string} gerritProject
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     */
                    GerritSourceContext.prototype.gerritProject = "";
    
                    /**
                     * GerritSourceContext revisionId.
                     * @member {string|null|undefined} revisionId
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     */
                    GerritSourceContext.prototype.revisionId = null;
    
                    /**
                     * GerritSourceContext aliasContext.
                     * @member {grafeas.v1beta1.source.IAliasContext|null|undefined} aliasContext
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     */
                    GerritSourceContext.prototype.aliasContext = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * GerritSourceContext revision.
                     * @member {"revisionId"|"aliasContext"|undefined} revision
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     */
                    Object.defineProperty(GerritSourceContext.prototype, "revision", {
                        get: $util.oneOfGetter($oneOfFields = ["revisionId", "aliasContext"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new GerritSourceContext instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGerritSourceContext=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.GerritSourceContext} GerritSourceContext instance
                     */
                    GerritSourceContext.create = function create(properties) {
                        return new GerritSourceContext(properties);
                    };
    
                    /**
                     * Encodes the specified GerritSourceContext message. Does not implicitly {@link grafeas.v1beta1.source.GerritSourceContext.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGerritSourceContext} message GerritSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GerritSourceContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hostUri != null && Object.hasOwnProperty.call(message, "hostUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hostUri);
                        if (message.gerritProject != null && Object.hasOwnProperty.call(message, "gerritProject"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gerritProject);
                        if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.revisionId);
                        if (message.aliasContext != null && Object.hasOwnProperty.call(message, "aliasContext"))
                            $root.grafeas.v1beta1.source.AliasContext.encode(message.aliasContext, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GerritSourceContext message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.GerritSourceContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGerritSourceContext} message GerritSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GerritSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GerritSourceContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.GerritSourceContext} GerritSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GerritSourceContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.GerritSourceContext();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.hostUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.gerritProject = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.revisionId = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.aliasContext = $root.grafeas.v1beta1.source.AliasContext.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GerritSourceContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.GerritSourceContext} GerritSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GerritSourceContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GerritSourceContext message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GerritSourceContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.hostUri != null && message.hasOwnProperty("hostUri"))
                            if (!$util.isString(message.hostUri))
                                return "hostUri: string expected";
                        if (message.gerritProject != null && message.hasOwnProperty("gerritProject"))
                            if (!$util.isString(message.gerritProject))
                                return "gerritProject: string expected";
                        if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                            properties.revision = 1;
                            if (!$util.isString(message.revisionId))
                                return "revisionId: string expected";
                        }
                        if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                            if (properties.revision === 1)
                                return "revision: multiple values";
                            properties.revision = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.AliasContext.verify(message.aliasContext);
                                if (error)
                                    return "aliasContext." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GerritSourceContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.GerritSourceContext} GerritSourceContext
                     */
                    GerritSourceContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.GerritSourceContext)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.GerritSourceContext();
                        if (object.hostUri != null)
                            message.hostUri = String(object.hostUri);
                        if (object.gerritProject != null)
                            message.gerritProject = String(object.gerritProject);
                        if (object.revisionId != null)
                            message.revisionId = String(object.revisionId);
                        if (object.aliasContext != null) {
                            if (typeof object.aliasContext !== "object")
                                throw TypeError(".grafeas.v1beta1.source.GerritSourceContext.aliasContext: object expected");
                            message.aliasContext = $root.grafeas.v1beta1.source.AliasContext.fromObject(object.aliasContext);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GerritSourceContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.GerritSourceContext} message GerritSourceContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GerritSourceContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.hostUri = "";
                            object.gerritProject = "";
                        }
                        if (message.hostUri != null && message.hasOwnProperty("hostUri"))
                            object.hostUri = message.hostUri;
                        if (message.gerritProject != null && message.hasOwnProperty("gerritProject"))
                            object.gerritProject = message.gerritProject;
                        if (message.revisionId != null && message.hasOwnProperty("revisionId")) {
                            object.revisionId = message.revisionId;
                            if (options.oneofs)
                                object.revision = "revisionId";
                        }
                        if (message.aliasContext != null && message.hasOwnProperty("aliasContext")) {
                            object.aliasContext = $root.grafeas.v1beta1.source.AliasContext.toObject(message.aliasContext, options);
                            if (options.oneofs)
                                object.revision = "aliasContext";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GerritSourceContext to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GerritSourceContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GerritSourceContext
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.GerritSourceContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GerritSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.GerritSourceContext";
                    };
    
                    return GerritSourceContext;
                })();
    
                source.GitSourceContext = (function() {
    
                    /**
                     * Properties of a GitSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @interface IGitSourceContext
                     * @property {string|null} [url] GitSourceContext url
                     * @property {string|null} [revisionId] GitSourceContext revisionId
                     */
    
                    /**
                     * Constructs a new GitSourceContext.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a GitSourceContext.
                     * @implements IGitSourceContext
                     * @constructor
                     * @param {grafeas.v1beta1.source.IGitSourceContext=} [properties] Properties to set
                     */
                    function GitSourceContext(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GitSourceContext url.
                     * @member {string} url
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @instance
                     */
                    GitSourceContext.prototype.url = "";
    
                    /**
                     * GitSourceContext revisionId.
                     * @member {string} revisionId
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @instance
                     */
                    GitSourceContext.prototype.revisionId = "";
    
                    /**
                     * Creates a new GitSourceContext instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGitSourceContext=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.GitSourceContext} GitSourceContext instance
                     */
                    GitSourceContext.create = function create(properties) {
                        return new GitSourceContext(properties);
                    };
    
                    /**
                     * Encodes the specified GitSourceContext message. Does not implicitly {@link grafeas.v1beta1.source.GitSourceContext.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGitSourceContext} message GitSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GitSourceContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        if (message.revisionId != null && Object.hasOwnProperty.call(message, "revisionId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.revisionId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GitSourceContext message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.GitSourceContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.IGitSourceContext} message GitSourceContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GitSourceContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GitSourceContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.GitSourceContext} GitSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GitSourceContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.GitSourceContext();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.url = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.revisionId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GitSourceContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.GitSourceContext} GitSourceContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GitSourceContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GitSourceContext message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GitSourceContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        if (message.revisionId != null && message.hasOwnProperty("revisionId"))
                            if (!$util.isString(message.revisionId))
                                return "revisionId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GitSourceContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.GitSourceContext} GitSourceContext
                     */
                    GitSourceContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.GitSourceContext)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.GitSourceContext();
                        if (object.url != null)
                            message.url = String(object.url);
                        if (object.revisionId != null)
                            message.revisionId = String(object.revisionId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GitSourceContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {grafeas.v1beta1.source.GitSourceContext} message GitSourceContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GitSourceContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.url = "";
                            object.revisionId = "";
                        }
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        if (message.revisionId != null && message.hasOwnProperty("revisionId"))
                            object.revisionId = message.revisionId;
                        return object;
                    };
    
                    /**
                     * Converts this GitSourceContext to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GitSourceContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GitSourceContext
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.GitSourceContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GitSourceContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.GitSourceContext";
                    };
    
                    return GitSourceContext;
                })();
    
                source.RepoId = (function() {
    
                    /**
                     * Properties of a RepoId.
                     * @memberof grafeas.v1beta1.source
                     * @interface IRepoId
                     * @property {grafeas.v1beta1.source.IProjectRepoId|null} [projectRepoId] RepoId projectRepoId
                     * @property {string|null} [uid] RepoId uid
                     */
    
                    /**
                     * Constructs a new RepoId.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a RepoId.
                     * @implements IRepoId
                     * @constructor
                     * @param {grafeas.v1beta1.source.IRepoId=} [properties] Properties to set
                     */
                    function RepoId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RepoId projectRepoId.
                     * @member {grafeas.v1beta1.source.IProjectRepoId|null|undefined} projectRepoId
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @instance
                     */
                    RepoId.prototype.projectRepoId = null;
    
                    /**
                     * RepoId uid.
                     * @member {string|null|undefined} uid
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @instance
                     */
                    RepoId.prototype.uid = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * RepoId id.
                     * @member {"projectRepoId"|"uid"|undefined} id
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @instance
                     */
                    Object.defineProperty(RepoId.prototype, "id", {
                        get: $util.oneOfGetter($oneOfFields = ["projectRepoId", "uid"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new RepoId instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IRepoId=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.RepoId} RepoId instance
                     */
                    RepoId.create = function create(properties) {
                        return new RepoId(properties);
                    };
    
                    /**
                     * Encodes the specified RepoId message. Does not implicitly {@link grafeas.v1beta1.source.RepoId.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IRepoId} message RepoId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RepoId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.projectRepoId != null && Object.hasOwnProperty.call(message, "projectRepoId"))
                            $root.grafeas.v1beta1.source.ProjectRepoId.encode(message.projectRepoId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RepoId message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.RepoId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IRepoId} message RepoId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RepoId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RepoId message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.RepoId} RepoId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RepoId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.RepoId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.projectRepoId = $root.grafeas.v1beta1.source.ProjectRepoId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.uid = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RepoId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.RepoId} RepoId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RepoId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RepoId message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RepoId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.projectRepoId != null && message.hasOwnProperty("projectRepoId")) {
                            properties.id = 1;
                            {
                                var error = $root.grafeas.v1beta1.source.ProjectRepoId.verify(message.projectRepoId);
                                if (error)
                                    return "projectRepoId." + error;
                            }
                        }
                        if (message.uid != null && message.hasOwnProperty("uid")) {
                            if (properties.id === 1)
                                return "id: multiple values";
                            properties.id = 1;
                            if (!$util.isString(message.uid))
                                return "uid: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RepoId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.RepoId} RepoId
                     */
                    RepoId.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.RepoId)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.RepoId();
                        if (object.projectRepoId != null) {
                            if (typeof object.projectRepoId !== "object")
                                throw TypeError(".grafeas.v1beta1.source.RepoId.projectRepoId: object expected");
                            message.projectRepoId = $root.grafeas.v1beta1.source.ProjectRepoId.fromObject(object.projectRepoId);
                        }
                        if (object.uid != null)
                            message.uid = String(object.uid);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RepoId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {grafeas.v1beta1.source.RepoId} message RepoId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RepoId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.projectRepoId != null && message.hasOwnProperty("projectRepoId")) {
                            object.projectRepoId = $root.grafeas.v1beta1.source.ProjectRepoId.toObject(message.projectRepoId, options);
                            if (options.oneofs)
                                object.id = "projectRepoId";
                        }
                        if (message.uid != null && message.hasOwnProperty("uid")) {
                            object.uid = message.uid;
                            if (options.oneofs)
                                object.id = "uid";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RepoId to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RepoId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for RepoId
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.RepoId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    RepoId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.RepoId";
                    };
    
                    return RepoId;
                })();
    
                source.ProjectRepoId = (function() {
    
                    /**
                     * Properties of a ProjectRepoId.
                     * @memberof grafeas.v1beta1.source
                     * @interface IProjectRepoId
                     * @property {string|null} [projectId] ProjectRepoId projectId
                     * @property {string|null} [repoName] ProjectRepoId repoName
                     */
    
                    /**
                     * Constructs a new ProjectRepoId.
                     * @memberof grafeas.v1beta1.source
                     * @classdesc Represents a ProjectRepoId.
                     * @implements IProjectRepoId
                     * @constructor
                     * @param {grafeas.v1beta1.source.IProjectRepoId=} [properties] Properties to set
                     */
                    function ProjectRepoId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ProjectRepoId projectId.
                     * @member {string} projectId
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @instance
                     */
                    ProjectRepoId.prototype.projectId = "";
    
                    /**
                     * ProjectRepoId repoName.
                     * @member {string} repoName
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @instance
                     */
                    ProjectRepoId.prototype.repoName = "";
    
                    /**
                     * Creates a new ProjectRepoId instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IProjectRepoId=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.source.ProjectRepoId} ProjectRepoId instance
                     */
                    ProjectRepoId.create = function create(properties) {
                        return new ProjectRepoId(properties);
                    };
    
                    /**
                     * Encodes the specified ProjectRepoId message. Does not implicitly {@link grafeas.v1beta1.source.ProjectRepoId.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IProjectRepoId} message ProjectRepoId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProjectRepoId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.projectId != null && Object.hasOwnProperty.call(message, "projectId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.projectId);
                        if (message.repoName != null && Object.hasOwnProperty.call(message, "repoName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.repoName);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ProjectRepoId message, length delimited. Does not implicitly {@link grafeas.v1beta1.source.ProjectRepoId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {grafeas.v1beta1.source.IProjectRepoId} message ProjectRepoId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProjectRepoId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ProjectRepoId message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.source.ProjectRepoId} ProjectRepoId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProjectRepoId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.source.ProjectRepoId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.projectId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.repoName = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ProjectRepoId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.source.ProjectRepoId} ProjectRepoId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProjectRepoId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ProjectRepoId message.
                     * @function verify
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProjectRepoId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.projectId != null && message.hasOwnProperty("projectId"))
                            if (!$util.isString(message.projectId))
                                return "projectId: string expected";
                        if (message.repoName != null && message.hasOwnProperty("repoName"))
                            if (!$util.isString(message.repoName))
                                return "repoName: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ProjectRepoId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.source.ProjectRepoId} ProjectRepoId
                     */
                    ProjectRepoId.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.source.ProjectRepoId)
                            return object;
                        var message = new $root.grafeas.v1beta1.source.ProjectRepoId();
                        if (object.projectId != null)
                            message.projectId = String(object.projectId);
                        if (object.repoName != null)
                            message.repoName = String(object.repoName);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ProjectRepoId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {grafeas.v1beta1.source.ProjectRepoId} message ProjectRepoId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProjectRepoId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.projectId = "";
                            object.repoName = "";
                        }
                        if (message.projectId != null && message.hasOwnProperty("projectId"))
                            object.projectId = message.projectId;
                        if (message.repoName != null && message.hasOwnProperty("repoName"))
                            object.repoName = message.repoName;
                        return object;
                    };
    
                    /**
                     * Converts this ProjectRepoId to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProjectRepoId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ProjectRepoId
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.source.ProjectRepoId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ProjectRepoId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.source.ProjectRepoId";
                    };
    
                    return ProjectRepoId;
                })();
    
                return source;
            })();
    
            v1beta1.vulnerability = (function() {
    
                /**
                 * Namespace vulnerability.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var vulnerability = {};
    
                vulnerability.CVSSv3 = (function() {
    
                    /**
                     * Properties of a CVSSv3.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @interface ICVSSv3
                     * @property {number|null} [baseScore] CVSSv3 baseScore
                     * @property {number|null} [exploitabilityScore] CVSSv3 exploitabilityScore
                     * @property {number|null} [impactScore] CVSSv3 impactScore
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.AttackVector|null} [attackVector] CVSSv3 attackVector
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity|null} [attackComplexity] CVSSv3 attackComplexity
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired|null} [privilegesRequired] CVSSv3 privilegesRequired
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction|null} [userInteraction] CVSSv3 userInteraction
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.Scope|null} [scope] CVSSv3 scope
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.Impact|null} [confidentialityImpact] CVSSv3 confidentialityImpact
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.Impact|null} [integrityImpact] CVSSv3 integrityImpact
                     * @property {grafeas.v1beta1.vulnerability.CVSSv3.Impact|null} [availabilityImpact] CVSSv3 availabilityImpact
                     */
    
                    /**
                     * Constructs a new CVSSv3.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @classdesc Represents a CVSSv3.
                     * @implements ICVSSv3
                     * @constructor
                     * @param {grafeas.v1beta1.vulnerability.ICVSSv3=} [properties] Properties to set
                     */
                    function CVSSv3(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CVSSv3 baseScore.
                     * @member {number} baseScore
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.baseScore = 0;
    
                    /**
                     * CVSSv3 exploitabilityScore.
                     * @member {number} exploitabilityScore
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.exploitabilityScore = 0;
    
                    /**
                     * CVSSv3 impactScore.
                     * @member {number} impactScore
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.impactScore = 0;
    
                    /**
                     * CVSSv3 attackVector.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.AttackVector} attackVector
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.attackVector = 0;
    
                    /**
                     * CVSSv3 attackComplexity.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity} attackComplexity
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.attackComplexity = 0;
    
                    /**
                     * CVSSv3 privilegesRequired.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired} privilegesRequired
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.privilegesRequired = 0;
    
                    /**
                     * CVSSv3 userInteraction.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction} userInteraction
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.userInteraction = 0;
    
                    /**
                     * CVSSv3 scope.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.Scope} scope
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.scope = 0;
    
                    /**
                     * CVSSv3 confidentialityImpact.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.Impact} confidentialityImpact
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.confidentialityImpact = 0;
    
                    /**
                     * CVSSv3 integrityImpact.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.Impact} integrityImpact
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.integrityImpact = 0;
    
                    /**
                     * CVSSv3 availabilityImpact.
                     * @member {grafeas.v1beta1.vulnerability.CVSSv3.Impact} availabilityImpact
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     */
                    CVSSv3.prototype.availabilityImpact = 0;
    
                    /**
                     * Creates a new CVSSv3 instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.ICVSSv3=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.vulnerability.CVSSv3} CVSSv3 instance
                     */
                    CVSSv3.create = function create(properties) {
                        return new CVSSv3(properties);
                    };
    
                    /**
                     * Encodes the specified CVSSv3 message. Does not implicitly {@link grafeas.v1beta1.vulnerability.CVSSv3.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.ICVSSv3} message CVSSv3 message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CVSSv3.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.baseScore != null && Object.hasOwnProperty.call(message, "baseScore"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.baseScore);
                        if (message.exploitabilityScore != null && Object.hasOwnProperty.call(message, "exploitabilityScore"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.exploitabilityScore);
                        if (message.impactScore != null && Object.hasOwnProperty.call(message, "impactScore"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.impactScore);
                        if (message.attackVector != null && Object.hasOwnProperty.call(message, "attackVector"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.attackVector);
                        if (message.attackComplexity != null && Object.hasOwnProperty.call(message, "attackComplexity"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.attackComplexity);
                        if (message.privilegesRequired != null && Object.hasOwnProperty.call(message, "privilegesRequired"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.privilegesRequired);
                        if (message.userInteraction != null && Object.hasOwnProperty.call(message, "userInteraction"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.userInteraction);
                        if (message.scope != null && Object.hasOwnProperty.call(message, "scope"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.scope);
                        if (message.confidentialityImpact != null && Object.hasOwnProperty.call(message, "confidentialityImpact"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.confidentialityImpact);
                        if (message.integrityImpact != null && Object.hasOwnProperty.call(message, "integrityImpact"))
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.integrityImpact);
                        if (message.availabilityImpact != null && Object.hasOwnProperty.call(message, "availabilityImpact"))
                            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.availabilityImpact);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CVSSv3 message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.CVSSv3.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.ICVSSv3} message CVSSv3 message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CVSSv3.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CVSSv3 message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.vulnerability.CVSSv3} CVSSv3
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CVSSv3.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.CVSSv3();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.baseScore = reader.float();
                                    break;
                                }
                            case 2: {
                                    message.exploitabilityScore = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.impactScore = reader.float();
                                    break;
                                }
                            case 5: {
                                    message.attackVector = reader.int32();
                                    break;
                                }
                            case 6: {
                                    message.attackComplexity = reader.int32();
                                    break;
                                }
                            case 7: {
                                    message.privilegesRequired = reader.int32();
                                    break;
                                }
                            case 8: {
                                    message.userInteraction = reader.int32();
                                    break;
                                }
                            case 9: {
                                    message.scope = reader.int32();
                                    break;
                                }
                            case 10: {
                                    message.confidentialityImpact = reader.int32();
                                    break;
                                }
                            case 11: {
                                    message.integrityImpact = reader.int32();
                                    break;
                                }
                            case 12: {
                                    message.availabilityImpact = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CVSSv3 message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.vulnerability.CVSSv3} CVSSv3
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CVSSv3.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CVSSv3 message.
                     * @function verify
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CVSSv3.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                            if (typeof message.baseScore !== "number")
                                return "baseScore: number expected";
                        if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                            if (typeof message.exploitabilityScore !== "number")
                                return "exploitabilityScore: number expected";
                        if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                            if (typeof message.impactScore !== "number")
                                return "impactScore: number expected";
                        if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                            switch (message.attackVector) {
                            default:
                                return "attackVector: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                            switch (message.attackComplexity) {
                            default:
                                return "attackComplexity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                            switch (message.privilegesRequired) {
                            default:
                                return "privilegesRequired: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                            switch (message.userInteraction) {
                            default:
                                return "userInteraction: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.scope != null && message.hasOwnProperty("scope"))
                            switch (message.scope) {
                            default:
                                return "scope: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                            switch (message.confidentialityImpact) {
                            default:
                                return "confidentialityImpact: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                            switch (message.integrityImpact) {
                            default:
                                return "integrityImpact: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                            switch (message.availabilityImpact) {
                            default:
                                return "availabilityImpact: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a CVSSv3 message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.vulnerability.CVSSv3} CVSSv3
                     */
                    CVSSv3.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.vulnerability.CVSSv3)
                            return object;
                        var message = new $root.grafeas.v1beta1.vulnerability.CVSSv3();
                        if (object.baseScore != null)
                            message.baseScore = Number(object.baseScore);
                        if (object.exploitabilityScore != null)
                            message.exploitabilityScore = Number(object.exploitabilityScore);
                        if (object.impactScore != null)
                            message.impactScore = Number(object.impactScore);
                        switch (object.attackVector) {
                        default:
                            if (typeof object.attackVector === "number") {
                                message.attackVector = object.attackVector;
                                break;
                            }
                            break;
                        case "ATTACK_VECTOR_UNSPECIFIED":
                        case 0:
                            message.attackVector = 0;
                            break;
                        case "ATTACK_VECTOR_NETWORK":
                        case 1:
                            message.attackVector = 1;
                            break;
                        case "ATTACK_VECTOR_ADJACENT":
                        case 2:
                            message.attackVector = 2;
                            break;
                        case "ATTACK_VECTOR_LOCAL":
                        case 3:
                            message.attackVector = 3;
                            break;
                        case "ATTACK_VECTOR_PHYSICAL":
                        case 4:
                            message.attackVector = 4;
                            break;
                        }
                        switch (object.attackComplexity) {
                        default:
                            if (typeof object.attackComplexity === "number") {
                                message.attackComplexity = object.attackComplexity;
                                break;
                            }
                            break;
                        case "ATTACK_COMPLEXITY_UNSPECIFIED":
                        case 0:
                            message.attackComplexity = 0;
                            break;
                        case "ATTACK_COMPLEXITY_LOW":
                        case 1:
                            message.attackComplexity = 1;
                            break;
                        case "ATTACK_COMPLEXITY_HIGH":
                        case 2:
                            message.attackComplexity = 2;
                            break;
                        }
                        switch (object.privilegesRequired) {
                        default:
                            if (typeof object.privilegesRequired === "number") {
                                message.privilegesRequired = object.privilegesRequired;
                                break;
                            }
                            break;
                        case "PRIVILEGES_REQUIRED_UNSPECIFIED":
                        case 0:
                            message.privilegesRequired = 0;
                            break;
                        case "PRIVILEGES_REQUIRED_NONE":
                        case 1:
                            message.privilegesRequired = 1;
                            break;
                        case "PRIVILEGES_REQUIRED_LOW":
                        case 2:
                            message.privilegesRequired = 2;
                            break;
                        case "PRIVILEGES_REQUIRED_HIGH":
                        case 3:
                            message.privilegesRequired = 3;
                            break;
                        }
                        switch (object.userInteraction) {
                        default:
                            if (typeof object.userInteraction === "number") {
                                message.userInteraction = object.userInteraction;
                                break;
                            }
                            break;
                        case "USER_INTERACTION_UNSPECIFIED":
                        case 0:
                            message.userInteraction = 0;
                            break;
                        case "USER_INTERACTION_NONE":
                        case 1:
                            message.userInteraction = 1;
                            break;
                        case "USER_INTERACTION_REQUIRED":
                        case 2:
                            message.userInteraction = 2;
                            break;
                        }
                        switch (object.scope) {
                        default:
                            if (typeof object.scope === "number") {
                                message.scope = object.scope;
                                break;
                            }
                            break;
                        case "SCOPE_UNSPECIFIED":
                        case 0:
                            message.scope = 0;
                            break;
                        case "SCOPE_UNCHANGED":
                        case 1:
                            message.scope = 1;
                            break;
                        case "SCOPE_CHANGED":
                        case 2:
                            message.scope = 2;
                            break;
                        }
                        switch (object.confidentialityImpact) {
                        default:
                            if (typeof object.confidentialityImpact === "number") {
                                message.confidentialityImpact = object.confidentialityImpact;
                                break;
                            }
                            break;
                        case "IMPACT_UNSPECIFIED":
                        case 0:
                            message.confidentialityImpact = 0;
                            break;
                        case "IMPACT_HIGH":
                        case 1:
                            message.confidentialityImpact = 1;
                            break;
                        case "IMPACT_LOW":
                        case 2:
                            message.confidentialityImpact = 2;
                            break;
                        case "IMPACT_NONE":
                        case 3:
                            message.confidentialityImpact = 3;
                            break;
                        }
                        switch (object.integrityImpact) {
                        default:
                            if (typeof object.integrityImpact === "number") {
                                message.integrityImpact = object.integrityImpact;
                                break;
                            }
                            break;
                        case "IMPACT_UNSPECIFIED":
                        case 0:
                            message.integrityImpact = 0;
                            break;
                        case "IMPACT_HIGH":
                        case 1:
                            message.integrityImpact = 1;
                            break;
                        case "IMPACT_LOW":
                        case 2:
                            message.integrityImpact = 2;
                            break;
                        case "IMPACT_NONE":
                        case 3:
                            message.integrityImpact = 3;
                            break;
                        }
                        switch (object.availabilityImpact) {
                        default:
                            if (typeof object.availabilityImpact === "number") {
                                message.availabilityImpact = object.availabilityImpact;
                                break;
                            }
                            break;
                        case "IMPACT_UNSPECIFIED":
                        case 0:
                            message.availabilityImpact = 0;
                            break;
                        case "IMPACT_HIGH":
                        case 1:
                            message.availabilityImpact = 1;
                            break;
                        case "IMPACT_LOW":
                        case 2:
                            message.availabilityImpact = 2;
                            break;
                        case "IMPACT_NONE":
                        case 3:
                            message.availabilityImpact = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CVSSv3 message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.CVSSv3} message CVSSv3
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CVSSv3.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.baseScore = 0;
                            object.exploitabilityScore = 0;
                            object.impactScore = 0;
                            object.attackVector = options.enums === String ? "ATTACK_VECTOR_UNSPECIFIED" : 0;
                            object.attackComplexity = options.enums === String ? "ATTACK_COMPLEXITY_UNSPECIFIED" : 0;
                            object.privilegesRequired = options.enums === String ? "PRIVILEGES_REQUIRED_UNSPECIFIED" : 0;
                            object.userInteraction = options.enums === String ? "USER_INTERACTION_UNSPECIFIED" : 0;
                            object.scope = options.enums === String ? "SCOPE_UNSPECIFIED" : 0;
                            object.confidentialityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                            object.integrityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                            object.availabilityImpact = options.enums === String ? "IMPACT_UNSPECIFIED" : 0;
                        }
                        if (message.baseScore != null && message.hasOwnProperty("baseScore"))
                            object.baseScore = options.json && !isFinite(message.baseScore) ? String(message.baseScore) : message.baseScore;
                        if (message.exploitabilityScore != null && message.hasOwnProperty("exploitabilityScore"))
                            object.exploitabilityScore = options.json && !isFinite(message.exploitabilityScore) ? String(message.exploitabilityScore) : message.exploitabilityScore;
                        if (message.impactScore != null && message.hasOwnProperty("impactScore"))
                            object.impactScore = options.json && !isFinite(message.impactScore) ? String(message.impactScore) : message.impactScore;
                        if (message.attackVector != null && message.hasOwnProperty("attackVector"))
                            object.attackVector = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.AttackVector[message.attackVector] === undefined ? message.attackVector : $root.grafeas.v1beta1.vulnerability.CVSSv3.AttackVector[message.attackVector] : message.attackVector;
                        if (message.attackComplexity != null && message.hasOwnProperty("attackComplexity"))
                            object.attackComplexity = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity[message.attackComplexity] === undefined ? message.attackComplexity : $root.grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity[message.attackComplexity] : message.attackComplexity;
                        if (message.privilegesRequired != null && message.hasOwnProperty("privilegesRequired"))
                            object.privilegesRequired = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired[message.privilegesRequired] === undefined ? message.privilegesRequired : $root.grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired[message.privilegesRequired] : message.privilegesRequired;
                        if (message.userInteraction != null && message.hasOwnProperty("userInteraction"))
                            object.userInteraction = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction[message.userInteraction] === undefined ? message.userInteraction : $root.grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction[message.userInteraction] : message.userInteraction;
                        if (message.scope != null && message.hasOwnProperty("scope"))
                            object.scope = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.Scope[message.scope] === undefined ? message.scope : $root.grafeas.v1beta1.vulnerability.CVSSv3.Scope[message.scope] : message.scope;
                        if (message.confidentialityImpact != null && message.hasOwnProperty("confidentialityImpact"))
                            object.confidentialityImpact = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.confidentialityImpact] === undefined ? message.confidentialityImpact : $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.confidentialityImpact] : message.confidentialityImpact;
                        if (message.integrityImpact != null && message.hasOwnProperty("integrityImpact"))
                            object.integrityImpact = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.integrityImpact] === undefined ? message.integrityImpact : $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.integrityImpact] : message.integrityImpact;
                        if (message.availabilityImpact != null && message.hasOwnProperty("availabilityImpact"))
                            object.availabilityImpact = options.enums === String ? $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.availabilityImpact] === undefined ? message.availabilityImpact : $root.grafeas.v1beta1.vulnerability.CVSSv3.Impact[message.availabilityImpact] : message.availabilityImpact;
                        return object;
                    };
    
                    /**
                     * Converts this CVSSv3 to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CVSSv3.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CVSSv3
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.vulnerability.CVSSv3
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CVSSv3.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.CVSSv3";
                    };
    
                    /**
                     * AttackVector enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.AttackVector
                     * @enum {number}
                     * @property {number} ATTACK_VECTOR_UNSPECIFIED=0 ATTACK_VECTOR_UNSPECIFIED value
                     * @property {number} ATTACK_VECTOR_NETWORK=1 ATTACK_VECTOR_NETWORK value
                     * @property {number} ATTACK_VECTOR_ADJACENT=2 ATTACK_VECTOR_ADJACENT value
                     * @property {number} ATTACK_VECTOR_LOCAL=3 ATTACK_VECTOR_LOCAL value
                     * @property {number} ATTACK_VECTOR_PHYSICAL=4 ATTACK_VECTOR_PHYSICAL value
                     */
                    CVSSv3.AttackVector = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ATTACK_VECTOR_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ATTACK_VECTOR_NETWORK"] = 1;
                        values[valuesById[2] = "ATTACK_VECTOR_ADJACENT"] = 2;
                        values[valuesById[3] = "ATTACK_VECTOR_LOCAL"] = 3;
                        values[valuesById[4] = "ATTACK_VECTOR_PHYSICAL"] = 4;
                        return values;
                    })();
    
                    /**
                     * AttackComplexity enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.AttackComplexity
                     * @enum {number}
                     * @property {number} ATTACK_COMPLEXITY_UNSPECIFIED=0 ATTACK_COMPLEXITY_UNSPECIFIED value
                     * @property {number} ATTACK_COMPLEXITY_LOW=1 ATTACK_COMPLEXITY_LOW value
                     * @property {number} ATTACK_COMPLEXITY_HIGH=2 ATTACK_COMPLEXITY_HIGH value
                     */
                    CVSSv3.AttackComplexity = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ATTACK_COMPLEXITY_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ATTACK_COMPLEXITY_LOW"] = 1;
                        values[valuesById[2] = "ATTACK_COMPLEXITY_HIGH"] = 2;
                        return values;
                    })();
    
                    /**
                     * PrivilegesRequired enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.PrivilegesRequired
                     * @enum {number}
                     * @property {number} PRIVILEGES_REQUIRED_UNSPECIFIED=0 PRIVILEGES_REQUIRED_UNSPECIFIED value
                     * @property {number} PRIVILEGES_REQUIRED_NONE=1 PRIVILEGES_REQUIRED_NONE value
                     * @property {number} PRIVILEGES_REQUIRED_LOW=2 PRIVILEGES_REQUIRED_LOW value
                     * @property {number} PRIVILEGES_REQUIRED_HIGH=3 PRIVILEGES_REQUIRED_HIGH value
                     */
                    CVSSv3.PrivilegesRequired = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PRIVILEGES_REQUIRED_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PRIVILEGES_REQUIRED_NONE"] = 1;
                        values[valuesById[2] = "PRIVILEGES_REQUIRED_LOW"] = 2;
                        values[valuesById[3] = "PRIVILEGES_REQUIRED_HIGH"] = 3;
                        return values;
                    })();
    
                    /**
                     * UserInteraction enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.UserInteraction
                     * @enum {number}
                     * @property {number} USER_INTERACTION_UNSPECIFIED=0 USER_INTERACTION_UNSPECIFIED value
                     * @property {number} USER_INTERACTION_NONE=1 USER_INTERACTION_NONE value
                     * @property {number} USER_INTERACTION_REQUIRED=2 USER_INTERACTION_REQUIRED value
                     */
                    CVSSv3.UserInteraction = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "USER_INTERACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "USER_INTERACTION_NONE"] = 1;
                        values[valuesById[2] = "USER_INTERACTION_REQUIRED"] = 2;
                        return values;
                    })();
    
                    /**
                     * Scope enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.Scope
                     * @enum {number}
                     * @property {number} SCOPE_UNSPECIFIED=0 SCOPE_UNSPECIFIED value
                     * @property {number} SCOPE_UNCHANGED=1 SCOPE_UNCHANGED value
                     * @property {number} SCOPE_CHANGED=2 SCOPE_CHANGED value
                     */
                    CVSSv3.Scope = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SCOPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SCOPE_UNCHANGED"] = 1;
                        values[valuesById[2] = "SCOPE_CHANGED"] = 2;
                        return values;
                    })();
    
                    /**
                     * Impact enum.
                     * @name grafeas.v1beta1.vulnerability.CVSSv3.Impact
                     * @enum {number}
                     * @property {number} IMPACT_UNSPECIFIED=0 IMPACT_UNSPECIFIED value
                     * @property {number} IMPACT_HIGH=1 IMPACT_HIGH value
                     * @property {number} IMPACT_LOW=2 IMPACT_LOW value
                     * @property {number} IMPACT_NONE=3 IMPACT_NONE value
                     */
                    CVSSv3.Impact = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "IMPACT_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "IMPACT_HIGH"] = 1;
                        values[valuesById[2] = "IMPACT_LOW"] = 2;
                        values[valuesById[3] = "IMPACT_NONE"] = 3;
                        return values;
                    })();
    
                    return CVSSv3;
                })();
    
                /**
                 * Severity enum.
                 * @name grafeas.v1beta1.vulnerability.Severity
                 * @enum {number}
                 * @property {number} SEVERITY_UNSPECIFIED=0 SEVERITY_UNSPECIFIED value
                 * @property {number} MINIMAL=1 MINIMAL value
                 * @property {number} LOW=2 LOW value
                 * @property {number} MEDIUM=3 MEDIUM value
                 * @property {number} HIGH=4 HIGH value
                 * @property {number} CRITICAL=5 CRITICAL value
                 */
                vulnerability.Severity = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "SEVERITY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "MINIMAL"] = 1;
                    values[valuesById[2] = "LOW"] = 2;
                    values[valuesById[3] = "MEDIUM"] = 3;
                    values[valuesById[4] = "HIGH"] = 4;
                    values[valuesById[5] = "CRITICAL"] = 5;
                    return values;
                })();
    
                vulnerability.Vulnerability = (function() {
    
                    /**
                     * Properties of a Vulnerability.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @interface IVulnerability
                     * @property {number|null} [cvssScore] Vulnerability cvssScore
                     * @property {grafeas.v1beta1.vulnerability.Severity|null} [severity] Vulnerability severity
                     * @property {Array.<grafeas.v1beta1.vulnerability.Vulnerability.IDetail>|null} [details] Vulnerability details
                     * @property {grafeas.v1beta1.vulnerability.ICVSSv3|null} [cvssV3] Vulnerability cvssV3
                     * @property {Array.<grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail>|null} [windowsDetails] Vulnerability windowsDetails
                     * @property {google.protobuf.ITimestamp|null} [sourceUpdateTime] Vulnerability sourceUpdateTime
                     */
    
                    /**
                     * Constructs a new Vulnerability.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @classdesc Represents a Vulnerability.
                     * @implements IVulnerability
                     * @constructor
                     * @param {grafeas.v1beta1.vulnerability.IVulnerability=} [properties] Properties to set
                     */
                    function Vulnerability(properties) {
                        this.details = [];
                        this.windowsDetails = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Vulnerability cvssScore.
                     * @member {number} cvssScore
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.cvssScore = 0;
    
                    /**
                     * Vulnerability severity.
                     * @member {grafeas.v1beta1.vulnerability.Severity} severity
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.severity = 0;
    
                    /**
                     * Vulnerability details.
                     * @member {Array.<grafeas.v1beta1.vulnerability.Vulnerability.IDetail>} details
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.details = $util.emptyArray;
    
                    /**
                     * Vulnerability cvssV3.
                     * @member {grafeas.v1beta1.vulnerability.ICVSSv3|null|undefined} cvssV3
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.cvssV3 = null;
    
                    /**
                     * Vulnerability windowsDetails.
                     * @member {Array.<grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail>} windowsDetails
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.windowsDetails = $util.emptyArray;
    
                    /**
                     * Vulnerability sourceUpdateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} sourceUpdateTime
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     */
                    Vulnerability.prototype.sourceUpdateTime = null;
    
                    /**
                     * Creates a new Vulnerability instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerability=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.vulnerability.Vulnerability} Vulnerability instance
                     */
                    Vulnerability.create = function create(properties) {
                        return new Vulnerability(properties);
                    };
    
                    /**
                     * Encodes the specified Vulnerability message. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerability} message Vulnerability message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Vulnerability.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cvssScore != null && Object.hasOwnProperty.call(message, "cvssScore"))
                            writer.uint32(/* id 1, wireType 5 =*/13).float(message.cvssScore);
                        if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                        if (message.details != null && message.details.length)
                            for (var i = 0; i < message.details.length; ++i)
                                $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.cvssV3 != null && Object.hasOwnProperty.call(message, "cvssV3"))
                            $root.grafeas.v1beta1.vulnerability.CVSSv3.encode(message.cvssV3, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.windowsDetails != null && message.windowsDetails.length)
                            for (var i = 0; i < message.windowsDetails.length; ++i)
                                $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.encode(message.windowsDetails[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.sourceUpdateTime != null && Object.hasOwnProperty.call(message, "sourceUpdateTime"))
                            $root.google.protobuf.Timestamp.encode(message.sourceUpdateTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Vulnerability message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerability} message Vulnerability message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Vulnerability.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Vulnerability message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.vulnerability.Vulnerability} Vulnerability
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Vulnerability.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.Vulnerability();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cvssScore = reader.float();
                                    break;
                                }
                            case 2: {
                                    message.severity = reader.int32();
                                    break;
                                }
                            case 3: {
                                    if (!(message.details && message.details.length))
                                        message.details = [];
                                    message.details.push($root.grafeas.v1beta1.vulnerability.Vulnerability.Detail.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 4: {
                                    message.cvssV3 = $root.grafeas.v1beta1.vulnerability.CVSSv3.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    if (!(message.windowsDetails && message.windowsDetails.length))
                                        message.windowsDetails = [];
                                    message.windowsDetails.push($root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 6: {
                                    message.sourceUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Vulnerability message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.vulnerability.Vulnerability} Vulnerability
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Vulnerability.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Vulnerability message.
                     * @function verify
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Vulnerability.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                            if (typeof message.cvssScore !== "number")
                                return "cvssScore: number expected";
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            switch (message.severity) {
                            default:
                                return "severity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.details != null && message.hasOwnProperty("details")) {
                            if (!Array.isArray(message.details))
                                return "details: array expected";
                            for (var i = 0; i < message.details.length; ++i) {
                                var error = $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail.verify(message.details[i]);
                                if (error)
                                    return "details." + error;
                            }
                        }
                        if (message.cvssV3 != null && message.hasOwnProperty("cvssV3")) {
                            var error = $root.grafeas.v1beta1.vulnerability.CVSSv3.verify(message.cvssV3);
                            if (error)
                                return "cvssV3." + error;
                        }
                        if (message.windowsDetails != null && message.hasOwnProperty("windowsDetails")) {
                            if (!Array.isArray(message.windowsDetails))
                                return "windowsDetails: array expected";
                            for (var i = 0; i < message.windowsDetails.length; ++i) {
                                var error = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.verify(message.windowsDetails[i]);
                                if (error)
                                    return "windowsDetails." + error;
                            }
                        }
                        if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.sourceUpdateTime);
                            if (error)
                                return "sourceUpdateTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Vulnerability message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.vulnerability.Vulnerability} Vulnerability
                     */
                    Vulnerability.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.vulnerability.Vulnerability)
                            return object;
                        var message = new $root.grafeas.v1beta1.vulnerability.Vulnerability();
                        if (object.cvssScore != null)
                            message.cvssScore = Number(object.cvssScore);
                        switch (object.severity) {
                        default:
                            if (typeof object.severity === "number") {
                                message.severity = object.severity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.severity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.severity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.severity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.severity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.severity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.severity = 5;
                            break;
                        }
                        if (object.details) {
                            if (!Array.isArray(object.details))
                                throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.details: array expected");
                            message.details = [];
                            for (var i = 0; i < object.details.length; ++i) {
                                if (typeof object.details[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.details: object expected");
                                message.details[i] = $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail.fromObject(object.details[i]);
                            }
                        }
                        if (object.cvssV3 != null) {
                            if (typeof object.cvssV3 !== "object")
                                throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.cvssV3: object expected");
                            message.cvssV3 = $root.grafeas.v1beta1.vulnerability.CVSSv3.fromObject(object.cvssV3);
                        }
                        if (object.windowsDetails) {
                            if (!Array.isArray(object.windowsDetails))
                                throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.windowsDetails: array expected");
                            message.windowsDetails = [];
                            for (var i = 0; i < object.windowsDetails.length; ++i) {
                                if (typeof object.windowsDetails[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.windowsDetails: object expected");
                                message.windowsDetails[i] = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.fromObject(object.windowsDetails[i]);
                            }
                        }
                        if (object.sourceUpdateTime != null) {
                            if (typeof object.sourceUpdateTime !== "object")
                                throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.sourceUpdateTime: object expected");
                            message.sourceUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.sourceUpdateTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Vulnerability message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.Vulnerability} message Vulnerability
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Vulnerability.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.details = [];
                            object.windowsDetails = [];
                        }
                        if (options.defaults) {
                            object.cvssScore = 0;
                            object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                            object.cvssV3 = null;
                            object.sourceUpdateTime = null;
                        }
                        if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                            object.cvssScore = options.json && !isFinite(message.cvssScore) ? String(message.cvssScore) : message.cvssScore;
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            object.severity = options.enums === String ? $root.grafeas.v1beta1.vulnerability.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1beta1.vulnerability.Severity[message.severity] : message.severity;
                        if (message.details && message.details.length) {
                            object.details = [];
                            for (var j = 0; j < message.details.length; ++j)
                                object.details[j] = $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail.toObject(message.details[j], options);
                        }
                        if (message.cvssV3 != null && message.hasOwnProperty("cvssV3"))
                            object.cvssV3 = $root.grafeas.v1beta1.vulnerability.CVSSv3.toObject(message.cvssV3, options);
                        if (message.windowsDetails && message.windowsDetails.length) {
                            object.windowsDetails = [];
                            for (var j = 0; j < message.windowsDetails.length; ++j)
                                object.windowsDetails[j] = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.toObject(message.windowsDetails[j], options);
                        }
                        if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime"))
                            object.sourceUpdateTime = $root.google.protobuf.Timestamp.toObject(message.sourceUpdateTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Vulnerability to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Vulnerability.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Vulnerability
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Vulnerability.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.Vulnerability";
                    };
    
                    Vulnerability.Detail = (function() {
    
                        /**
                         * Properties of a Detail.
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                         * @interface IDetail
                         * @property {string|null} [cpeUri] Detail cpeUri
                         * @property {string|null} ["package"] Detail package
                         * @property {grafeas.v1beta1.package_.IVersion|null} [minAffectedVersion] Detail minAffectedVersion
                         * @property {grafeas.v1beta1.package_.IVersion|null} [maxAffectedVersion] Detail maxAffectedVersion
                         * @property {string|null} [severityName] Detail severityName
                         * @property {string|null} [description] Detail description
                         * @property {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null} [fixedLocation] Detail fixedLocation
                         * @property {string|null} [packageType] Detail packageType
                         * @property {boolean|null} [isObsolete] Detail isObsolete
                         * @property {google.protobuf.ITimestamp|null} [sourceUpdateTime] Detail sourceUpdateTime
                         */
    
                        /**
                         * Constructs a new Detail.
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                         * @classdesc Represents a Detail.
                         * @implements IDetail
                         * @constructor
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IDetail=} [properties] Properties to set
                         */
                        function Detail(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Detail cpeUri.
                         * @member {string} cpeUri
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.cpeUri = "";
    
                        /**
                         * Detail package.
                         * @member {string} package
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype["package"] = "";
    
                        /**
                         * Detail minAffectedVersion.
                         * @member {grafeas.v1beta1.package_.IVersion|null|undefined} minAffectedVersion
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.minAffectedVersion = null;
    
                        /**
                         * Detail maxAffectedVersion.
                         * @member {grafeas.v1beta1.package_.IVersion|null|undefined} maxAffectedVersion
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.maxAffectedVersion = null;
    
                        /**
                         * Detail severityName.
                         * @member {string} severityName
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.severityName = "";
    
                        /**
                         * Detail description.
                         * @member {string} description
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.description = "";
    
                        /**
                         * Detail fixedLocation.
                         * @member {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null|undefined} fixedLocation
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.fixedLocation = null;
    
                        /**
                         * Detail packageType.
                         * @member {string} packageType
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.packageType = "";
    
                        /**
                         * Detail isObsolete.
                         * @member {boolean} isObsolete
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.isObsolete = false;
    
                        /**
                         * Detail sourceUpdateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} sourceUpdateTime
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         */
                        Detail.prototype.sourceUpdateTime = null;
    
                        /**
                         * Creates a new Detail instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IDetail=} [properties] Properties to set
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.Detail} Detail instance
                         */
                        Detail.create = function create(properties) {
                            return new Detail(properties);
                        };
    
                        /**
                         * Encodes the specified Detail message. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.Detail.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IDetail} message Detail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Detail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                            if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                            if (message.minAffectedVersion != null && Object.hasOwnProperty.call(message, "minAffectedVersion"))
                                $root.grafeas.v1beta1.package.Version.encode(message.minAffectedVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.maxAffectedVersion != null && Object.hasOwnProperty.call(message, "maxAffectedVersion"))
                                $root.grafeas.v1beta1.package.Version.encode(message.maxAffectedVersion, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.severityName != null && Object.hasOwnProperty.call(message, "severityName"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.severityName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);
                            if (message.fixedLocation != null && Object.hasOwnProperty.call(message, "fixedLocation"))
                                $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.encode(message.fixedLocation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.packageType != null && Object.hasOwnProperty.call(message, "packageType"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.packageType);
                            if (message.isObsolete != null && Object.hasOwnProperty.call(message, "isObsolete"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isObsolete);
                            if (message.sourceUpdateTime != null && Object.hasOwnProperty.call(message, "sourceUpdateTime"))
                                $root.google.protobuf.Timestamp.encode(message.sourceUpdateTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Detail message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.Detail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IDetail} message Detail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Detail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Detail message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.Detail} Detail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Detail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.cpeUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message["package"] = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.minAffectedVersion = $root.grafeas.v1beta1.package.Version.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.maxAffectedVersion = $root.grafeas.v1beta1.package.Version.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.severityName = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.packageType = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.isObsolete = reader.bool();
                                        break;
                                    }
                                case 10: {
                                        message.sourceUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Detail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.Detail} Detail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Detail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Detail message.
                         * @function verify
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Detail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                                if (!$util.isString(message.cpeUri))
                                    return "cpeUri: string expected";
                            if (message["package"] != null && message.hasOwnProperty("package"))
                                if (!$util.isString(message["package"]))
                                    return "package: string expected";
                            if (message.minAffectedVersion != null && message.hasOwnProperty("minAffectedVersion")) {
                                var error = $root.grafeas.v1beta1.package.Version.verify(message.minAffectedVersion);
                                if (error)
                                    return "minAffectedVersion." + error;
                            }
                            if (message.maxAffectedVersion != null && message.hasOwnProperty("maxAffectedVersion")) {
                                var error = $root.grafeas.v1beta1.package.Version.verify(message.maxAffectedVersion);
                                if (error)
                                    return "maxAffectedVersion." + error;
                            }
                            if (message.severityName != null && message.hasOwnProperty("severityName"))
                                if (!$util.isString(message.severityName))
                                    return "severityName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.fixedLocation != null && message.hasOwnProperty("fixedLocation")) {
                                var error = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.verify(message.fixedLocation);
                                if (error)
                                    return "fixedLocation." + error;
                            }
                            if (message.packageType != null && message.hasOwnProperty("packageType"))
                                if (!$util.isString(message.packageType))
                                    return "packageType: string expected";
                            if (message.isObsolete != null && message.hasOwnProperty("isObsolete"))
                                if (typeof message.isObsolete !== "boolean")
                                    return "isObsolete: boolean expected";
                            if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.sourceUpdateTime);
                                if (error)
                                    return "sourceUpdateTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Detail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.Detail} Detail
                         */
                        Detail.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail)
                                return object;
                            var message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.Detail();
                            if (object.cpeUri != null)
                                message.cpeUri = String(object.cpeUri);
                            if (object["package"] != null)
                                message["package"] = String(object["package"]);
                            if (object.minAffectedVersion != null) {
                                if (typeof object.minAffectedVersion !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.Detail.minAffectedVersion: object expected");
                                message.minAffectedVersion = $root.grafeas.v1beta1.package.Version.fromObject(object.minAffectedVersion);
                            }
                            if (object.maxAffectedVersion != null) {
                                if (typeof object.maxAffectedVersion !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.Detail.maxAffectedVersion: object expected");
                                message.maxAffectedVersion = $root.grafeas.v1beta1.package.Version.fromObject(object.maxAffectedVersion);
                            }
                            if (object.severityName != null)
                                message.severityName = String(object.severityName);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.fixedLocation != null) {
                                if (typeof object.fixedLocation !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.Detail.fixedLocation: object expected");
                                message.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.fromObject(object.fixedLocation);
                            }
                            if (object.packageType != null)
                                message.packageType = String(object.packageType);
                            if (object.isObsolete != null)
                                message.isObsolete = Boolean(object.isObsolete);
                            if (object.sourceUpdateTime != null) {
                                if (typeof object.sourceUpdateTime !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.Detail.sourceUpdateTime: object expected");
                                message.sourceUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.sourceUpdateTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Detail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.Detail} message Detail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Detail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.cpeUri = "";
                                object["package"] = "";
                                object.minAffectedVersion = null;
                                object.maxAffectedVersion = null;
                                object.severityName = "";
                                object.description = "";
                                object.fixedLocation = null;
                                object.packageType = "";
                                object.isObsolete = false;
                                object.sourceUpdateTime = null;
                            }
                            if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                                object.cpeUri = message.cpeUri;
                            if (message["package"] != null && message.hasOwnProperty("package"))
                                object["package"] = message["package"];
                            if (message.minAffectedVersion != null && message.hasOwnProperty("minAffectedVersion"))
                                object.minAffectedVersion = $root.grafeas.v1beta1.package.Version.toObject(message.minAffectedVersion, options);
                            if (message.maxAffectedVersion != null && message.hasOwnProperty("maxAffectedVersion"))
                                object.maxAffectedVersion = $root.grafeas.v1beta1.package.Version.toObject(message.maxAffectedVersion, options);
                            if (message.severityName != null && message.hasOwnProperty("severityName"))
                                object.severityName = message.severityName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.fixedLocation != null && message.hasOwnProperty("fixedLocation"))
                                object.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.toObject(message.fixedLocation, options);
                            if (message.packageType != null && message.hasOwnProperty("packageType"))
                                object.packageType = message.packageType;
                            if (message.isObsolete != null && message.hasOwnProperty("isObsolete"))
                                object.isObsolete = message.isObsolete;
                            if (message.sourceUpdateTime != null && message.hasOwnProperty("sourceUpdateTime"))
                                object.sourceUpdateTime = $root.google.protobuf.Timestamp.toObject(message.sourceUpdateTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this Detail to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Detail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Detail
                         * @function getTypeUrl
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.Detail
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Detail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.Vulnerability.Detail";
                        };
    
                        return Detail;
                    })();
    
                    Vulnerability.WindowsDetail = (function() {
    
                        /**
                         * Properties of a WindowsDetail.
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                         * @interface IWindowsDetail
                         * @property {string|null} [cpeUri] WindowsDetail cpeUri
                         * @property {string|null} [name] WindowsDetail name
                         * @property {string|null} [description] WindowsDetail description
                         * @property {Array.<grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase>|null} [fixingKbs] WindowsDetail fixingKbs
                         */
    
                        /**
                         * Constructs a new WindowsDetail.
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability
                         * @classdesc Represents a WindowsDetail.
                         * @implements IWindowsDetail
                         * @constructor
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail=} [properties] Properties to set
                         */
                        function WindowsDetail(properties) {
                            this.fixingKbs = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WindowsDetail cpeUri.
                         * @member {string} cpeUri
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @instance
                         */
                        WindowsDetail.prototype.cpeUri = "";
    
                        /**
                         * WindowsDetail name.
                         * @member {string} name
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @instance
                         */
                        WindowsDetail.prototype.name = "";
    
                        /**
                         * WindowsDetail description.
                         * @member {string} description
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @instance
                         */
                        WindowsDetail.prototype.description = "";
    
                        /**
                         * WindowsDetail fixingKbs.
                         * @member {Array.<grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase>} fixingKbs
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @instance
                         */
                        WindowsDetail.prototype.fixingKbs = $util.emptyArray;
    
                        /**
                         * Creates a new WindowsDetail instance using the specified properties.
                         * @function create
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail=} [properties] Properties to set
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail} WindowsDetail instance
                         */
                        WindowsDetail.create = function create(properties) {
                            return new WindowsDetail(properties);
                        };
    
                        /**
                         * Encodes the specified WindowsDetail message. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.verify|verify} messages.
                         * @function encode
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail} message WindowsDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WindowsDetail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.fixingKbs != null && message.fixingKbs.length)
                                for (var i = 0; i < message.fixingKbs.length; ++i)
                                    $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.encode(message.fixingKbs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WindowsDetail message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.IWindowsDetail} message WindowsDetail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WindowsDetail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WindowsDetail message from the specified reader or buffer.
                         * @function decode
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail} WindowsDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WindowsDetail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.cpeUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.fixingKbs && message.fixingKbs.length))
                                            message.fixingKbs = [];
                                        message.fixingKbs.push($root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WindowsDetail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail} WindowsDetail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WindowsDetail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WindowsDetail message.
                         * @function verify
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WindowsDetail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                                if (!$util.isString(message.cpeUri))
                                    return "cpeUri: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.fixingKbs != null && message.hasOwnProperty("fixingKbs")) {
                                if (!Array.isArray(message.fixingKbs))
                                    return "fixingKbs: array expected";
                                for (var i = 0; i < message.fixingKbs.length; ++i) {
                                    var error = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.verify(message.fixingKbs[i]);
                                    if (error)
                                        return "fixingKbs." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a WindowsDetail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail} WindowsDetail
                         */
                        WindowsDetail.fromObject = function fromObject(object) {
                            if (object instanceof $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail)
                                return object;
                            var message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail();
                            if (object.cpeUri != null)
                                message.cpeUri = String(object.cpeUri);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.fixingKbs) {
                                if (!Array.isArray(object.fixingKbs))
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.fixingKbs: array expected");
                                message.fixingKbs = [];
                                for (var i = 0; i < object.fixingKbs.length; ++i) {
                                    if (typeof object.fixingKbs[i] !== "object")
                                        throw TypeError(".grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.fixingKbs: object expected");
                                    message.fixingKbs[i] = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.fromObject(object.fixingKbs[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WindowsDetail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail} message WindowsDetail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WindowsDetail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.fixingKbs = [];
                            if (options.defaults) {
                                object.cpeUri = "";
                                object.name = "";
                                object.description = "";
                            }
                            if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                                object.cpeUri = message.cpeUri;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.fixingKbs && message.fixingKbs.length) {
                                object.fixingKbs = [];
                                for (var j = 0; j < message.fixingKbs.length; ++j)
                                    object.fixingKbs[j] = $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.toObject(message.fixingKbs[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this WindowsDetail to JSON.
                         * @function toJSON
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WindowsDetail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WindowsDetail
                         * @function getTypeUrl
                         * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WindowsDetail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail";
                        };
    
                        WindowsDetail.KnowledgeBase = (function() {
    
                            /**
                             * Properties of a KnowledgeBase.
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                             * @interface IKnowledgeBase
                             * @property {string|null} [name] KnowledgeBase name
                             * @property {string|null} [url] KnowledgeBase url
                             */
    
                            /**
                             * Constructs a new KnowledgeBase.
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail
                             * @classdesc Represents a KnowledgeBase.
                             * @implements IKnowledgeBase
                             * @constructor
                             * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase=} [properties] Properties to set
                             */
                            function KnowledgeBase(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KnowledgeBase name.
                             * @member {string} name
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @instance
                             */
                            KnowledgeBase.prototype.name = "";
    
                            /**
                             * KnowledgeBase url.
                             * @member {string} url
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @instance
                             */
                            KnowledgeBase.prototype.url = "";
    
                            /**
                             * Creates a new KnowledgeBase instance using the specified properties.
                             * @function create
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase=} [properties] Properties to set
                             * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase} KnowledgeBase instance
                             */
                            KnowledgeBase.create = function create(properties) {
                                return new KnowledgeBase(properties);
                            };
    
                            /**
                             * Encodes the specified KnowledgeBase message. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.verify|verify} messages.
                             * @function encode
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase} message KnowledgeBase message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KnowledgeBase.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KnowledgeBase message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.IKnowledgeBase} message KnowledgeBase message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KnowledgeBase.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KnowledgeBase message from the specified reader or buffer.
                             * @function decode
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase} KnowledgeBase
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KnowledgeBase.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.url = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KnowledgeBase message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase} KnowledgeBase
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KnowledgeBase.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KnowledgeBase message.
                             * @function verify
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KnowledgeBase.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.url != null && message.hasOwnProperty("url"))
                                    if (!$util.isString(message.url))
                                        return "url: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a KnowledgeBase message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase} KnowledgeBase
                             */
                            KnowledgeBase.fromObject = function fromObject(object) {
                                if (object instanceof $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase)
                                    return object;
                                var message = new $root.grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.url != null)
                                    message.url = String(object.url);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KnowledgeBase message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase} message KnowledgeBase
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KnowledgeBase.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.url = "";
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.url != null && message.hasOwnProperty("url"))
                                    object.url = message.url;
                                return object;
                            };
    
                            /**
                             * Converts this KnowledgeBase to JSON.
                             * @function toJSON
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KnowledgeBase.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for KnowledgeBase
                             * @function getTypeUrl
                             * @memberof grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            KnowledgeBase.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.Vulnerability.WindowsDetail.KnowledgeBase";
                            };
    
                            return KnowledgeBase;
                        })();
    
                        return WindowsDetail;
                    })();
    
                    return Vulnerability;
                })();
    
                vulnerability.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @interface IDetails
                     * @property {string|null} [type] Details type
                     * @property {grafeas.v1beta1.vulnerability.Severity|null} [severity] Details severity
                     * @property {number|null} [cvssScore] Details cvssScore
                     * @property {Array.<grafeas.v1beta1.vulnerability.IPackageIssue>|null} [packageIssue] Details packageIssue
                     * @property {string|null} [shortDescription] Details shortDescription
                     * @property {string|null} [longDescription] Details longDescription
                     * @property {Array.<grafeas.v1beta1.IRelatedUrl>|null} [relatedUrls] Details relatedUrls
                     * @property {grafeas.v1beta1.vulnerability.Severity|null} [effectiveSeverity] Details effectiveSeverity
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.vulnerability.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        this.packageIssue = [];
                        this.relatedUrls = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details type.
                     * @member {string} type
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.type = "";
    
                    /**
                     * Details severity.
                     * @member {grafeas.v1beta1.vulnerability.Severity} severity
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.severity = 0;
    
                    /**
                     * Details cvssScore.
                     * @member {number} cvssScore
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.cvssScore = 0;
    
                    /**
                     * Details packageIssue.
                     * @member {Array.<grafeas.v1beta1.vulnerability.IPackageIssue>} packageIssue
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.packageIssue = $util.emptyArray;
    
                    /**
                     * Details shortDescription.
                     * @member {string} shortDescription
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.shortDescription = "";
    
                    /**
                     * Details longDescription.
                     * @member {string} longDescription
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.longDescription = "";
    
                    /**
                     * Details relatedUrls.
                     * @member {Array.<grafeas.v1beta1.IRelatedUrl>} relatedUrls
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.relatedUrls = $util.emptyArray;
    
                    /**
                     * Details effectiveSeverity.
                     * @member {grafeas.v1beta1.vulnerability.Severity} effectiveSeverity
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     */
                    Details.prototype.effectiveSeverity = 0;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.vulnerability.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.vulnerability.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                        if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                        if (message.cvssScore != null && Object.hasOwnProperty.call(message, "cvssScore"))
                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.cvssScore);
                        if (message.packageIssue != null && message.packageIssue.length)
                            for (var i = 0; i < message.packageIssue.length; ++i)
                                $root.grafeas.v1beta1.vulnerability.PackageIssue.encode(message.packageIssue[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.shortDescription);
                        if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.longDescription);
                        if (message.relatedUrls != null && message.relatedUrls.length)
                            for (var i = 0; i < message.relatedUrls.length; ++i)
                                $root.grafeas.v1beta1.RelatedUrl.encode(message.relatedUrls[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.effectiveSeverity != null && Object.hasOwnProperty.call(message, "effectiveSeverity"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.effectiveSeverity);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.vulnerability.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.type = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.severity = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.cvssScore = reader.float();
                                    break;
                                }
                            case 4: {
                                    if (!(message.packageIssue && message.packageIssue.length))
                                        message.packageIssue = [];
                                    message.packageIssue.push($root.grafeas.v1beta1.vulnerability.PackageIssue.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 5: {
                                    message.shortDescription = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.longDescription = reader.string();
                                    break;
                                }
                            case 7: {
                                    if (!(message.relatedUrls && message.relatedUrls.length))
                                        message.relatedUrls = [];
                                    message.relatedUrls.push($root.grafeas.v1beta1.RelatedUrl.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 8: {
                                    message.effectiveSeverity = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.vulnerability.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            switch (message.severity) {
                            default:
                                return "severity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                            if (typeof message.cvssScore !== "number")
                                return "cvssScore: number expected";
                        if (message.packageIssue != null && message.hasOwnProperty("packageIssue")) {
                            if (!Array.isArray(message.packageIssue))
                                return "packageIssue: array expected";
                            for (var i = 0; i < message.packageIssue.length; ++i) {
                                var error = $root.grafeas.v1beta1.vulnerability.PackageIssue.verify(message.packageIssue[i]);
                                if (error)
                                    return "packageIssue." + error;
                            }
                        }
                        if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                            if (!$util.isString(message.shortDescription))
                                return "shortDescription: string expected";
                        if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                            if (!$util.isString(message.longDescription))
                                return "longDescription: string expected";
                        if (message.relatedUrls != null && message.hasOwnProperty("relatedUrls")) {
                            if (!Array.isArray(message.relatedUrls))
                                return "relatedUrls: array expected";
                            for (var i = 0; i < message.relatedUrls.length; ++i) {
                                var error = $root.grafeas.v1beta1.RelatedUrl.verify(message.relatedUrls[i]);
                                if (error)
                                    return "relatedUrls." + error;
                            }
                        }
                        if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                            switch (message.effectiveSeverity) {
                            default:
                                return "effectiveSeverity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.vulnerability.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.vulnerability.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.vulnerability.Details();
                        if (object.type != null)
                            message.type = String(object.type);
                        switch (object.severity) {
                        default:
                            if (typeof object.severity === "number") {
                                message.severity = object.severity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.severity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.severity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.severity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.severity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.severity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.severity = 5;
                            break;
                        }
                        if (object.cvssScore != null)
                            message.cvssScore = Number(object.cvssScore);
                        if (object.packageIssue) {
                            if (!Array.isArray(object.packageIssue))
                                throw TypeError(".grafeas.v1beta1.vulnerability.Details.packageIssue: array expected");
                            message.packageIssue = [];
                            for (var i = 0; i < object.packageIssue.length; ++i) {
                                if (typeof object.packageIssue[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Details.packageIssue: object expected");
                                message.packageIssue[i] = $root.grafeas.v1beta1.vulnerability.PackageIssue.fromObject(object.packageIssue[i]);
                            }
                        }
                        if (object.shortDescription != null)
                            message.shortDescription = String(object.shortDescription);
                        if (object.longDescription != null)
                            message.longDescription = String(object.longDescription);
                        if (object.relatedUrls) {
                            if (!Array.isArray(object.relatedUrls))
                                throw TypeError(".grafeas.v1beta1.vulnerability.Details.relatedUrls: array expected");
                            message.relatedUrls = [];
                            for (var i = 0; i < object.relatedUrls.length; ++i) {
                                if (typeof object.relatedUrls[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.vulnerability.Details.relatedUrls: object expected");
                                message.relatedUrls[i] = $root.grafeas.v1beta1.RelatedUrl.fromObject(object.relatedUrls[i]);
                            }
                        }
                        switch (object.effectiveSeverity) {
                        default:
                            if (typeof object.effectiveSeverity === "number") {
                                message.effectiveSeverity = object.effectiveSeverity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.effectiveSeverity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.effectiveSeverity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.effectiveSeverity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.effectiveSeverity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.effectiveSeverity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.effectiveSeverity = 5;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.packageIssue = [];
                            object.relatedUrls = [];
                        }
                        if (options.defaults) {
                            object.type = "";
                            object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                            object.cvssScore = 0;
                            object.shortDescription = "";
                            object.longDescription = "";
                            object.effectiveSeverity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            object.severity = options.enums === String ? $root.grafeas.v1beta1.vulnerability.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1beta1.vulnerability.Severity[message.severity] : message.severity;
                        if (message.cvssScore != null && message.hasOwnProperty("cvssScore"))
                            object.cvssScore = options.json && !isFinite(message.cvssScore) ? String(message.cvssScore) : message.cvssScore;
                        if (message.packageIssue && message.packageIssue.length) {
                            object.packageIssue = [];
                            for (var j = 0; j < message.packageIssue.length; ++j)
                                object.packageIssue[j] = $root.grafeas.v1beta1.vulnerability.PackageIssue.toObject(message.packageIssue[j], options);
                        }
                        if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                            object.shortDescription = message.shortDescription;
                        if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                            object.longDescription = message.longDescription;
                        if (message.relatedUrls && message.relatedUrls.length) {
                            object.relatedUrls = [];
                            for (var j = 0; j < message.relatedUrls.length; ++j)
                                object.relatedUrls[j] = $root.grafeas.v1beta1.RelatedUrl.toObject(message.relatedUrls[j], options);
                        }
                        if (message.effectiveSeverity != null && message.hasOwnProperty("effectiveSeverity"))
                            object.effectiveSeverity = options.enums === String ? $root.grafeas.v1beta1.vulnerability.Severity[message.effectiveSeverity] === undefined ? message.effectiveSeverity : $root.grafeas.v1beta1.vulnerability.Severity[message.effectiveSeverity] : message.effectiveSeverity;
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.vulnerability.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.Details";
                    };
    
                    return Details;
                })();
    
                vulnerability.PackageIssue = (function() {
    
                    /**
                     * Properties of a PackageIssue.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @interface IPackageIssue
                     * @property {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null} [affectedLocation] PackageIssue affectedLocation
                     * @property {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null} [fixedLocation] PackageIssue fixedLocation
                     * @property {string|null} [severityName] PackageIssue severityName
                     */
    
                    /**
                     * Constructs a new PackageIssue.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @classdesc Represents a PackageIssue.
                     * @implements IPackageIssue
                     * @constructor
                     * @param {grafeas.v1beta1.vulnerability.IPackageIssue=} [properties] Properties to set
                     */
                    function PackageIssue(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageIssue affectedLocation.
                     * @member {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null|undefined} affectedLocation
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.affectedLocation = null;
    
                    /**
                     * PackageIssue fixedLocation.
                     * @member {grafeas.v1beta1.vulnerability.IVulnerabilityLocation|null|undefined} fixedLocation
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.fixedLocation = null;
    
                    /**
                     * PackageIssue severityName.
                     * @member {string} severityName
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @instance
                     */
                    PackageIssue.prototype.severityName = "";
    
                    /**
                     * Creates a new PackageIssue instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IPackageIssue=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.vulnerability.PackageIssue} PackageIssue instance
                     */
                    PackageIssue.create = function create(properties) {
                        return new PackageIssue(properties);
                    };
    
                    /**
                     * Encodes the specified PackageIssue message. Does not implicitly {@link grafeas.v1beta1.vulnerability.PackageIssue.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IPackageIssue} message PackageIssue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageIssue.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.affectedLocation != null && Object.hasOwnProperty.call(message, "affectedLocation"))
                            $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.encode(message.affectedLocation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.fixedLocation != null && Object.hasOwnProperty.call(message, "fixedLocation"))
                            $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.encode(message.fixedLocation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.severityName != null && Object.hasOwnProperty.call(message, "severityName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.severityName);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageIssue message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.PackageIssue.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IPackageIssue} message PackageIssue message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageIssue.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageIssue message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.vulnerability.PackageIssue} PackageIssue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageIssue.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.PackageIssue();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.affectedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.severityName = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageIssue message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.vulnerability.PackageIssue} PackageIssue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageIssue.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageIssue message.
                     * @function verify
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageIssue.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.affectedLocation != null && message.hasOwnProperty("affectedLocation")) {
                            var error = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.verify(message.affectedLocation);
                            if (error)
                                return "affectedLocation." + error;
                        }
                        if (message.fixedLocation != null && message.hasOwnProperty("fixedLocation")) {
                            var error = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.verify(message.fixedLocation);
                            if (error)
                                return "fixedLocation." + error;
                        }
                        if (message.severityName != null && message.hasOwnProperty("severityName"))
                            if (!$util.isString(message.severityName))
                                return "severityName: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a PackageIssue message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.vulnerability.PackageIssue} PackageIssue
                     */
                    PackageIssue.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.vulnerability.PackageIssue)
                            return object;
                        var message = new $root.grafeas.v1beta1.vulnerability.PackageIssue();
                        if (object.affectedLocation != null) {
                            if (typeof object.affectedLocation !== "object")
                                throw TypeError(".grafeas.v1beta1.vulnerability.PackageIssue.affectedLocation: object expected");
                            message.affectedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.fromObject(object.affectedLocation);
                        }
                        if (object.fixedLocation != null) {
                            if (typeof object.fixedLocation !== "object")
                                throw TypeError(".grafeas.v1beta1.vulnerability.PackageIssue.fixedLocation: object expected");
                            message.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.fromObject(object.fixedLocation);
                        }
                        if (object.severityName != null)
                            message.severityName = String(object.severityName);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageIssue message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.PackageIssue} message PackageIssue
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageIssue.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.affectedLocation = null;
                            object.fixedLocation = null;
                            object.severityName = "";
                        }
                        if (message.affectedLocation != null && message.hasOwnProperty("affectedLocation"))
                            object.affectedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.toObject(message.affectedLocation, options);
                        if (message.fixedLocation != null && message.hasOwnProperty("fixedLocation"))
                            object.fixedLocation = $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation.toObject(message.fixedLocation, options);
                        if (message.severityName != null && message.hasOwnProperty("severityName"))
                            object.severityName = message.severityName;
                        return object;
                    };
    
                    /**
                     * Converts this PackageIssue to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageIssue.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PackageIssue
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.vulnerability.PackageIssue
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PackageIssue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.PackageIssue";
                    };
    
                    return PackageIssue;
                })();
    
                vulnerability.VulnerabilityLocation = (function() {
    
                    /**
                     * Properties of a VulnerabilityLocation.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @interface IVulnerabilityLocation
                     * @property {string|null} [cpeUri] VulnerabilityLocation cpeUri
                     * @property {string|null} ["package"] VulnerabilityLocation package
                     * @property {grafeas.v1beta1.package_.IVersion|null} [version] VulnerabilityLocation version
                     */
    
                    /**
                     * Constructs a new VulnerabilityLocation.
                     * @memberof grafeas.v1beta1.vulnerability
                     * @classdesc Represents a VulnerabilityLocation.
                     * @implements IVulnerabilityLocation
                     * @constructor
                     * @param {grafeas.v1beta1.vulnerability.IVulnerabilityLocation=} [properties] Properties to set
                     */
                    function VulnerabilityLocation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VulnerabilityLocation cpeUri.
                     * @member {string} cpeUri
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @instance
                     */
                    VulnerabilityLocation.prototype.cpeUri = "";
    
                    /**
                     * VulnerabilityLocation package.
                     * @member {string} package
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @instance
                     */
                    VulnerabilityLocation.prototype["package"] = "";
    
                    /**
                     * VulnerabilityLocation version.
                     * @member {grafeas.v1beta1.package_.IVersion|null|undefined} version
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @instance
                     */
                    VulnerabilityLocation.prototype.version = null;
    
                    /**
                     * Creates a new VulnerabilityLocation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerabilityLocation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.vulnerability.VulnerabilityLocation} VulnerabilityLocation instance
                     */
                    VulnerabilityLocation.create = function create(properties) {
                        return new VulnerabilityLocation(properties);
                    };
    
                    /**
                     * Encodes the specified VulnerabilityLocation message. Does not implicitly {@link grafeas.v1beta1.vulnerability.VulnerabilityLocation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerabilityLocation} message VulnerabilityLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VulnerabilityLocation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                        if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.grafeas.v1beta1.package.Version.encode(message.version, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VulnerabilityLocation message, length delimited. Does not implicitly {@link grafeas.v1beta1.vulnerability.VulnerabilityLocation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.IVulnerabilityLocation} message VulnerabilityLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VulnerabilityLocation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VulnerabilityLocation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.vulnerability.VulnerabilityLocation} VulnerabilityLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VulnerabilityLocation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cpeUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message["package"] = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.version = $root.grafeas.v1beta1.package.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VulnerabilityLocation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.vulnerability.VulnerabilityLocation} VulnerabilityLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VulnerabilityLocation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VulnerabilityLocation message.
                     * @function verify
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VulnerabilityLocation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            if (!$util.isString(message.cpeUri))
                                return "cpeUri: string expected";
                        if (message["package"] != null && message.hasOwnProperty("package"))
                            if (!$util.isString(message["package"]))
                                return "package: string expected";
                        if (message.version != null && message.hasOwnProperty("version")) {
                            var error = $root.grafeas.v1beta1.package.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a VulnerabilityLocation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.vulnerability.VulnerabilityLocation} VulnerabilityLocation
                     */
                    VulnerabilityLocation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation)
                            return object;
                        var message = new $root.grafeas.v1beta1.vulnerability.VulnerabilityLocation();
                        if (object.cpeUri != null)
                            message.cpeUri = String(object.cpeUri);
                        if (object["package"] != null)
                            message["package"] = String(object["package"]);
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".grafeas.v1beta1.vulnerability.VulnerabilityLocation.version: object expected");
                            message.version = $root.grafeas.v1beta1.package.Version.fromObject(object.version);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VulnerabilityLocation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {grafeas.v1beta1.vulnerability.VulnerabilityLocation} message VulnerabilityLocation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VulnerabilityLocation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cpeUri = "";
                            object["package"] = "";
                            object.version = null;
                        }
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            object.cpeUri = message.cpeUri;
                        if (message["package"] != null && message.hasOwnProperty("package"))
                            object["package"] = message["package"];
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.grafeas.v1beta1.package.Version.toObject(message.version, options);
                        return object;
                    };
    
                    /**
                     * Converts this VulnerabilityLocation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VulnerabilityLocation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for VulnerabilityLocation
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.vulnerability.VulnerabilityLocation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    VulnerabilityLocation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.vulnerability.VulnerabilityLocation";
                    };
    
                    return VulnerabilityLocation;
                })();
    
                return vulnerability;
            })();
    
            v1beta1.deployment = (function() {
    
                /**
                 * Namespace deployment.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var deployment = {};
    
                deployment.Deployable = (function() {
    
                    /**
                     * Properties of a Deployable.
                     * @memberof grafeas.v1beta1.deployment
                     * @interface IDeployable
                     * @property {Array.<string>|null} [resourceUri] Deployable resourceUri
                     */
    
                    /**
                     * Constructs a new Deployable.
                     * @memberof grafeas.v1beta1.deployment
                     * @classdesc Represents a Deployable.
                     * @implements IDeployable
                     * @constructor
                     * @param {grafeas.v1beta1.deployment.IDeployable=} [properties] Properties to set
                     */
                    function Deployable(properties) {
                        this.resourceUri = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Deployable resourceUri.
                     * @member {Array.<string>} resourceUri
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @instance
                     */
                    Deployable.prototype.resourceUri = $util.emptyArray;
    
                    /**
                     * Creates a new Deployable instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployable=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.deployment.Deployable} Deployable instance
                     */
                    Deployable.create = function create(properties) {
                        return new Deployable(properties);
                    };
    
                    /**
                     * Encodes the specified Deployable message. Does not implicitly {@link grafeas.v1beta1.deployment.Deployable.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployable} message Deployable message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Deployable.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resourceUri != null && message.resourceUri.length)
                            for (var i = 0; i < message.resourceUri.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceUri[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Deployable message, length delimited. Does not implicitly {@link grafeas.v1beta1.deployment.Deployable.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployable} message Deployable message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Deployable.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Deployable message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.deployment.Deployable} Deployable
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Deployable.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.deployment.Deployable();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.resourceUri && message.resourceUri.length))
                                        message.resourceUri = [];
                                    message.resourceUri.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Deployable message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.deployment.Deployable} Deployable
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Deployable.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Deployable message.
                     * @function verify
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Deployable.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resourceUri != null && message.hasOwnProperty("resourceUri")) {
                            if (!Array.isArray(message.resourceUri))
                                return "resourceUri: array expected";
                            for (var i = 0; i < message.resourceUri.length; ++i)
                                if (!$util.isString(message.resourceUri[i]))
                                    return "resourceUri: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Deployable message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.deployment.Deployable} Deployable
                     */
                    Deployable.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.deployment.Deployable)
                            return object;
                        var message = new $root.grafeas.v1beta1.deployment.Deployable();
                        if (object.resourceUri) {
                            if (!Array.isArray(object.resourceUri))
                                throw TypeError(".grafeas.v1beta1.deployment.Deployable.resourceUri: array expected");
                            message.resourceUri = [];
                            for (var i = 0; i < object.resourceUri.length; ++i)
                                message.resourceUri[i] = String(object.resourceUri[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Deployable message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {grafeas.v1beta1.deployment.Deployable} message Deployable
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Deployable.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.resourceUri = [];
                        if (message.resourceUri && message.resourceUri.length) {
                            object.resourceUri = [];
                            for (var j = 0; j < message.resourceUri.length; ++j)
                                object.resourceUri[j] = message.resourceUri[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Deployable to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Deployable.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Deployable
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.deployment.Deployable
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Deployable.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.deployment.Deployable";
                    };
    
                    return Deployable;
                })();
    
                deployment.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.deployment
                     * @interface IDetails
                     * @property {grafeas.v1beta1.deployment.IDeployment|null} [deployment] Details deployment
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.deployment
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.deployment.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details deployment.
                     * @member {grafeas.v1beta1.deployment.IDeployment|null|undefined} deployment
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @instance
                     */
                    Details.prototype.deployment = null;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.deployment.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.deployment.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.deployment != null && Object.hasOwnProperty.call(message, "deployment"))
                            $root.grafeas.v1beta1.deployment.Deployment.encode(message.deployment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.deployment.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.deployment.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.deployment.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.deployment = $root.grafeas.v1beta1.deployment.Deployment.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.deployment.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.deployment != null && message.hasOwnProperty("deployment")) {
                            var error = $root.grafeas.v1beta1.deployment.Deployment.verify(message.deployment);
                            if (error)
                                return "deployment." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.deployment.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.deployment.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.deployment.Details();
                        if (object.deployment != null) {
                            if (typeof object.deployment !== "object")
                                throw TypeError(".grafeas.v1beta1.deployment.Details.deployment: object expected");
                            message.deployment = $root.grafeas.v1beta1.deployment.Deployment.fromObject(object.deployment);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {grafeas.v1beta1.deployment.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.deployment = null;
                        if (message.deployment != null && message.hasOwnProperty("deployment"))
                            object.deployment = $root.grafeas.v1beta1.deployment.Deployment.toObject(message.deployment, options);
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.deployment.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.deployment.Details";
                    };
    
                    return Details;
                })();
    
                deployment.Deployment = (function() {
    
                    /**
                     * Properties of a Deployment.
                     * @memberof grafeas.v1beta1.deployment
                     * @interface IDeployment
                     * @property {string|null} [userEmail] Deployment userEmail
                     * @property {google.protobuf.ITimestamp|null} [deployTime] Deployment deployTime
                     * @property {google.protobuf.ITimestamp|null} [undeployTime] Deployment undeployTime
                     * @property {string|null} [config] Deployment config
                     * @property {string|null} [address] Deployment address
                     * @property {Array.<string>|null} [resourceUri] Deployment resourceUri
                     * @property {grafeas.v1beta1.deployment.Deployment.Platform|null} [platform] Deployment platform
                     */
    
                    /**
                     * Constructs a new Deployment.
                     * @memberof grafeas.v1beta1.deployment
                     * @classdesc Represents a Deployment.
                     * @implements IDeployment
                     * @constructor
                     * @param {grafeas.v1beta1.deployment.IDeployment=} [properties] Properties to set
                     */
                    function Deployment(properties) {
                        this.resourceUri = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Deployment userEmail.
                     * @member {string} userEmail
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.userEmail = "";
    
                    /**
                     * Deployment deployTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} deployTime
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.deployTime = null;
    
                    /**
                     * Deployment undeployTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} undeployTime
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.undeployTime = null;
    
                    /**
                     * Deployment config.
                     * @member {string} config
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.config = "";
    
                    /**
                     * Deployment address.
                     * @member {string} address
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.address = "";
    
                    /**
                     * Deployment resourceUri.
                     * @member {Array.<string>} resourceUri
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.resourceUri = $util.emptyArray;
    
                    /**
                     * Deployment platform.
                     * @member {grafeas.v1beta1.deployment.Deployment.Platform} platform
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     */
                    Deployment.prototype.platform = 0;
    
                    /**
                     * Creates a new Deployment instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployment=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.deployment.Deployment} Deployment instance
                     */
                    Deployment.create = function create(properties) {
                        return new Deployment(properties);
                    };
    
                    /**
                     * Encodes the specified Deployment message. Does not implicitly {@link grafeas.v1beta1.deployment.Deployment.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployment} message Deployment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Deployment.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.userEmail != null && Object.hasOwnProperty.call(message, "userEmail"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userEmail);
                        if (message.deployTime != null && Object.hasOwnProperty.call(message, "deployTime"))
                            $root.google.protobuf.Timestamp.encode(message.deployTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.undeployTime != null && Object.hasOwnProperty.call(message, "undeployTime"))
                            $root.google.protobuf.Timestamp.encode(message.undeployTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.config);
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.address);
                        if (message.resourceUri != null && message.resourceUri.length)
                            for (var i = 0; i < message.resourceUri.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.resourceUri[i]);
                        if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.platform);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Deployment message, length delimited. Does not implicitly {@link grafeas.v1beta1.deployment.Deployment.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {grafeas.v1beta1.deployment.IDeployment} message Deployment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Deployment.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Deployment message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.deployment.Deployment} Deployment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Deployment.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.deployment.Deployment();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.userEmail = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.deployTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.undeployTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.config = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.address = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.resourceUri && message.resourceUri.length))
                                        message.resourceUri = [];
                                    message.resourceUri.push(reader.string());
                                    break;
                                }
                            case 7: {
                                    message.platform = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Deployment message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.deployment.Deployment} Deployment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Deployment.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Deployment message.
                     * @function verify
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Deployment.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.userEmail != null && message.hasOwnProperty("userEmail"))
                            if (!$util.isString(message.userEmail))
                                return "userEmail: string expected";
                        if (message.deployTime != null && message.hasOwnProperty("deployTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.deployTime);
                            if (error)
                                return "deployTime." + error;
                        }
                        if (message.undeployTime != null && message.hasOwnProperty("undeployTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.undeployTime);
                            if (error)
                                return "undeployTime." + error;
                        }
                        if (message.config != null && message.hasOwnProperty("config"))
                            if (!$util.isString(message.config))
                                return "config: string expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.resourceUri != null && message.hasOwnProperty("resourceUri")) {
                            if (!Array.isArray(message.resourceUri))
                                return "resourceUri: array expected";
                            for (var i = 0; i < message.resourceUri.length; ++i)
                                if (!$util.isString(message.resourceUri[i]))
                                    return "resourceUri: string[] expected";
                        }
                        if (message.platform != null && message.hasOwnProperty("platform"))
                            switch (message.platform) {
                            default:
                                return "platform: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Deployment message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.deployment.Deployment} Deployment
                     */
                    Deployment.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.deployment.Deployment)
                            return object;
                        var message = new $root.grafeas.v1beta1.deployment.Deployment();
                        if (object.userEmail != null)
                            message.userEmail = String(object.userEmail);
                        if (object.deployTime != null) {
                            if (typeof object.deployTime !== "object")
                                throw TypeError(".grafeas.v1beta1.deployment.Deployment.deployTime: object expected");
                            message.deployTime = $root.google.protobuf.Timestamp.fromObject(object.deployTime);
                        }
                        if (object.undeployTime != null) {
                            if (typeof object.undeployTime !== "object")
                                throw TypeError(".grafeas.v1beta1.deployment.Deployment.undeployTime: object expected");
                            message.undeployTime = $root.google.protobuf.Timestamp.fromObject(object.undeployTime);
                        }
                        if (object.config != null)
                            message.config = String(object.config);
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.resourceUri) {
                            if (!Array.isArray(object.resourceUri))
                                throw TypeError(".grafeas.v1beta1.deployment.Deployment.resourceUri: array expected");
                            message.resourceUri = [];
                            for (var i = 0; i < object.resourceUri.length; ++i)
                                message.resourceUri[i] = String(object.resourceUri[i]);
                        }
                        switch (object.platform) {
                        default:
                            if (typeof object.platform === "number") {
                                message.platform = object.platform;
                                break;
                            }
                            break;
                        case "PLATFORM_UNSPECIFIED":
                        case 0:
                            message.platform = 0;
                            break;
                        case "GKE":
                        case 1:
                            message.platform = 1;
                            break;
                        case "FLEX":
                        case 2:
                            message.platform = 2;
                            break;
                        case "CUSTOM":
                        case 3:
                            message.platform = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Deployment message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {grafeas.v1beta1.deployment.Deployment} message Deployment
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Deployment.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.resourceUri = [];
                        if (options.defaults) {
                            object.userEmail = "";
                            object.deployTime = null;
                            object.undeployTime = null;
                            object.config = "";
                            object.address = "";
                            object.platform = options.enums === String ? "PLATFORM_UNSPECIFIED" : 0;
                        }
                        if (message.userEmail != null && message.hasOwnProperty("userEmail"))
                            object.userEmail = message.userEmail;
                        if (message.deployTime != null && message.hasOwnProperty("deployTime"))
                            object.deployTime = $root.google.protobuf.Timestamp.toObject(message.deployTime, options);
                        if (message.undeployTime != null && message.hasOwnProperty("undeployTime"))
                            object.undeployTime = $root.google.protobuf.Timestamp.toObject(message.undeployTime, options);
                        if (message.config != null && message.hasOwnProperty("config"))
                            object.config = message.config;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.resourceUri && message.resourceUri.length) {
                            object.resourceUri = [];
                            for (var j = 0; j < message.resourceUri.length; ++j)
                                object.resourceUri[j] = message.resourceUri[j];
                        }
                        if (message.platform != null && message.hasOwnProperty("platform"))
                            object.platform = options.enums === String ? $root.grafeas.v1beta1.deployment.Deployment.Platform[message.platform] === undefined ? message.platform : $root.grafeas.v1beta1.deployment.Deployment.Platform[message.platform] : message.platform;
                        return object;
                    };
    
                    /**
                     * Converts this Deployment to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Deployment.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Deployment
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.deployment.Deployment
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Deployment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.deployment.Deployment";
                    };
    
                    /**
                     * Platform enum.
                     * @name grafeas.v1beta1.deployment.Deployment.Platform
                     * @enum {number}
                     * @property {number} PLATFORM_UNSPECIFIED=0 PLATFORM_UNSPECIFIED value
                     * @property {number} GKE=1 GKE value
                     * @property {number} FLEX=2 FLEX value
                     * @property {number} CUSTOM=3 CUSTOM value
                     */
                    Deployment.Platform = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PLATFORM_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "GKE"] = 1;
                        values[valuesById[2] = "FLEX"] = 2;
                        values[valuesById[3] = "CUSTOM"] = 3;
                        return values;
                    })();
    
                    return Deployment;
                })();
    
                return deployment;
            })();
    
            v1beta1.discovery = (function() {
    
                /**
                 * Namespace discovery.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var discovery = {};
    
                discovery.Discovery = (function() {
    
                    /**
                     * Properties of a Discovery.
                     * @memberof grafeas.v1beta1.discovery
                     * @interface IDiscovery
                     * @property {grafeas.v1beta1.NoteKind|null} [analysisKind] Discovery analysisKind
                     */
    
                    /**
                     * Constructs a new Discovery.
                     * @memberof grafeas.v1beta1.discovery
                     * @classdesc Represents a Discovery.
                     * @implements IDiscovery
                     * @constructor
                     * @param {grafeas.v1beta1.discovery.IDiscovery=} [properties] Properties to set
                     */
                    function Discovery(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Discovery analysisKind.
                     * @member {grafeas.v1beta1.NoteKind} analysisKind
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @instance
                     */
                    Discovery.prototype.analysisKind = 0;
    
                    /**
                     * Creates a new Discovery instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovery=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.discovery.Discovery} Discovery instance
                     */
                    Discovery.create = function create(properties) {
                        return new Discovery(properties);
                    };
    
                    /**
                     * Encodes the specified Discovery message. Does not implicitly {@link grafeas.v1beta1.discovery.Discovery.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovery} message Discovery message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Discovery.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.analysisKind != null && Object.hasOwnProperty.call(message, "analysisKind"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.analysisKind);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Discovery message, length delimited. Does not implicitly {@link grafeas.v1beta1.discovery.Discovery.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovery} message Discovery message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Discovery.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Discovery message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.discovery.Discovery} Discovery
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Discovery.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.discovery.Discovery();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.analysisKind = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Discovery message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.discovery.Discovery} Discovery
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Discovery.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Discovery message.
                     * @function verify
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Discovery.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.analysisKind != null && message.hasOwnProperty("analysisKind"))
                            switch (message.analysisKind) {
                            default:
                                return "analysisKind: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Discovery message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.discovery.Discovery} Discovery
                     */
                    Discovery.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.discovery.Discovery)
                            return object;
                        var message = new $root.grafeas.v1beta1.discovery.Discovery();
                        switch (object.analysisKind) {
                        default:
                            if (typeof object.analysisKind === "number") {
                                message.analysisKind = object.analysisKind;
                                break;
                            }
                            break;
                        case "NOTE_KIND_UNSPECIFIED":
                        case 0:
                            message.analysisKind = 0;
                            break;
                        case "VULNERABILITY":
                        case 1:
                            message.analysisKind = 1;
                            break;
                        case "BUILD":
                        case 2:
                            message.analysisKind = 2;
                            break;
                        case "IMAGE":
                        case 3:
                            message.analysisKind = 3;
                            break;
                        case "PACKAGE":
                        case 4:
                            message.analysisKind = 4;
                            break;
                        case "DEPLOYMENT":
                        case 5:
                            message.analysisKind = 5;
                            break;
                        case "DISCOVERY":
                        case 6:
                            message.analysisKind = 6;
                            break;
                        case "ATTESTATION":
                        case 7:
                            message.analysisKind = 7;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Discovery message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {grafeas.v1beta1.discovery.Discovery} message Discovery
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Discovery.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.analysisKind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                        if (message.analysisKind != null && message.hasOwnProperty("analysisKind"))
                            object.analysisKind = options.enums === String ? $root.grafeas.v1beta1.NoteKind[message.analysisKind] === undefined ? message.analysisKind : $root.grafeas.v1beta1.NoteKind[message.analysisKind] : message.analysisKind;
                        return object;
                    };
    
                    /**
                     * Converts this Discovery to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Discovery.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Discovery
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.discovery.Discovery
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Discovery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.discovery.Discovery";
                    };
    
                    return Discovery;
                })();
    
                discovery.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.discovery
                     * @interface IDetails
                     * @property {grafeas.v1beta1.discovery.IDiscovered|null} [discovered] Details discovered
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.discovery
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.discovery.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details discovered.
                     * @member {grafeas.v1beta1.discovery.IDiscovered|null|undefined} discovered
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @instance
                     */
                    Details.prototype.discovered = null;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.discovery.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.discovery.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.discovered != null && Object.hasOwnProperty.call(message, "discovered"))
                            $root.grafeas.v1beta1.discovery.Discovered.encode(message.discovered, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.discovery.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.discovery.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.discovery.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.discovered = $root.grafeas.v1beta1.discovery.Discovered.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.discovery.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.discovered != null && message.hasOwnProperty("discovered")) {
                            var error = $root.grafeas.v1beta1.discovery.Discovered.verify(message.discovered);
                            if (error)
                                return "discovered." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.discovery.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.discovery.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.discovery.Details();
                        if (object.discovered != null) {
                            if (typeof object.discovered !== "object")
                                throw TypeError(".grafeas.v1beta1.discovery.Details.discovered: object expected");
                            message.discovered = $root.grafeas.v1beta1.discovery.Discovered.fromObject(object.discovered);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {grafeas.v1beta1.discovery.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.discovered = null;
                        if (message.discovered != null && message.hasOwnProperty("discovered"))
                            object.discovered = $root.grafeas.v1beta1.discovery.Discovered.toObject(message.discovered, options);
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.discovery.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.discovery.Details";
                    };
    
                    return Details;
                })();
    
                discovery.Discovered = (function() {
    
                    /**
                     * Properties of a Discovered.
                     * @memberof grafeas.v1beta1.discovery
                     * @interface IDiscovered
                     * @property {grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis|null} [continuousAnalysis] Discovered continuousAnalysis
                     * @property {google.protobuf.ITimestamp|null} [lastAnalysisTime] Discovered lastAnalysisTime
                     * @property {grafeas.v1beta1.discovery.Discovered.AnalysisStatus|null} [analysisStatus] Discovered analysisStatus
                     * @property {google.rpc.IStatus|null} [analysisStatusError] Discovered analysisStatusError
                     */
    
                    /**
                     * Constructs a new Discovered.
                     * @memberof grafeas.v1beta1.discovery
                     * @classdesc Represents a Discovered.
                     * @implements IDiscovered
                     * @constructor
                     * @param {grafeas.v1beta1.discovery.IDiscovered=} [properties] Properties to set
                     */
                    function Discovered(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Discovered continuousAnalysis.
                     * @member {grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis} continuousAnalysis
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @instance
                     */
                    Discovered.prototype.continuousAnalysis = 0;
    
                    /**
                     * Discovered lastAnalysisTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} lastAnalysisTime
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @instance
                     */
                    Discovered.prototype.lastAnalysisTime = null;
    
                    /**
                     * Discovered analysisStatus.
                     * @member {grafeas.v1beta1.discovery.Discovered.AnalysisStatus} analysisStatus
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @instance
                     */
                    Discovered.prototype.analysisStatus = 0;
    
                    /**
                     * Discovered analysisStatusError.
                     * @member {google.rpc.IStatus|null|undefined} analysisStatusError
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @instance
                     */
                    Discovered.prototype.analysisStatusError = null;
    
                    /**
                     * Creates a new Discovered instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovered=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.discovery.Discovered} Discovered instance
                     */
                    Discovered.create = function create(properties) {
                        return new Discovered(properties);
                    };
    
                    /**
                     * Encodes the specified Discovered message. Does not implicitly {@link grafeas.v1beta1.discovery.Discovered.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovered} message Discovered message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Discovered.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.continuousAnalysis != null && Object.hasOwnProperty.call(message, "continuousAnalysis"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.continuousAnalysis);
                        if (message.lastAnalysisTime != null && Object.hasOwnProperty.call(message, "lastAnalysisTime"))
                            $root.google.protobuf.Timestamp.encode(message.lastAnalysisTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.analysisStatus != null && Object.hasOwnProperty.call(message, "analysisStatus"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.analysisStatus);
                        if (message.analysisStatusError != null && Object.hasOwnProperty.call(message, "analysisStatusError"))
                            $root.google.rpc.Status.encode(message.analysisStatusError, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Discovered message, length delimited. Does not implicitly {@link grafeas.v1beta1.discovery.Discovered.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {grafeas.v1beta1.discovery.IDiscovered} message Discovered message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Discovered.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Discovered message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.discovery.Discovered} Discovered
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Discovered.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.discovery.Discovered();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.continuousAnalysis = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.lastAnalysisTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.analysisStatus = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.analysisStatusError = $root.google.rpc.Status.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Discovered message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.discovery.Discovered} Discovered
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Discovered.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Discovered message.
                     * @function verify
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Discovered.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.continuousAnalysis != null && message.hasOwnProperty("continuousAnalysis"))
                            switch (message.continuousAnalysis) {
                            default:
                                return "continuousAnalysis: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.lastAnalysisTime != null && message.hasOwnProperty("lastAnalysisTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.lastAnalysisTime);
                            if (error)
                                return "lastAnalysisTime." + error;
                        }
                        if (message.analysisStatus != null && message.hasOwnProperty("analysisStatus"))
                            switch (message.analysisStatus) {
                            default:
                                return "analysisStatus: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.analysisStatusError != null && message.hasOwnProperty("analysisStatusError")) {
                            var error = $root.google.rpc.Status.verify(message.analysisStatusError);
                            if (error)
                                return "analysisStatusError." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Discovered message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.discovery.Discovered} Discovered
                     */
                    Discovered.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.discovery.Discovered)
                            return object;
                        var message = new $root.grafeas.v1beta1.discovery.Discovered();
                        switch (object.continuousAnalysis) {
                        default:
                            if (typeof object.continuousAnalysis === "number") {
                                message.continuousAnalysis = object.continuousAnalysis;
                                break;
                            }
                            break;
                        case "CONTINUOUS_ANALYSIS_UNSPECIFIED":
                        case 0:
                            message.continuousAnalysis = 0;
                            break;
                        case "ACTIVE":
                        case 1:
                            message.continuousAnalysis = 1;
                            break;
                        case "INACTIVE":
                        case 2:
                            message.continuousAnalysis = 2;
                            break;
                        }
                        if (object.lastAnalysisTime != null) {
                            if (typeof object.lastAnalysisTime !== "object")
                                throw TypeError(".grafeas.v1beta1.discovery.Discovered.lastAnalysisTime: object expected");
                            message.lastAnalysisTime = $root.google.protobuf.Timestamp.fromObject(object.lastAnalysisTime);
                        }
                        switch (object.analysisStatus) {
                        default:
                            if (typeof object.analysisStatus === "number") {
                                message.analysisStatus = object.analysisStatus;
                                break;
                            }
                            break;
                        case "ANALYSIS_STATUS_UNSPECIFIED":
                        case 0:
                            message.analysisStatus = 0;
                            break;
                        case "PENDING":
                        case 1:
                            message.analysisStatus = 1;
                            break;
                        case "SCANNING":
                        case 2:
                            message.analysisStatus = 2;
                            break;
                        case "FINISHED_SUCCESS":
                        case 3:
                            message.analysisStatus = 3;
                            break;
                        case "FINISHED_FAILED":
                        case 4:
                            message.analysisStatus = 4;
                            break;
                        case "FINISHED_UNSUPPORTED":
                        case 5:
                            message.analysisStatus = 5;
                            break;
                        }
                        if (object.analysisStatusError != null) {
                            if (typeof object.analysisStatusError !== "object")
                                throw TypeError(".grafeas.v1beta1.discovery.Discovered.analysisStatusError: object expected");
                            message.analysisStatusError = $root.google.rpc.Status.fromObject(object.analysisStatusError);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Discovered message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {grafeas.v1beta1.discovery.Discovered} message Discovered
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Discovered.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.continuousAnalysis = options.enums === String ? "CONTINUOUS_ANALYSIS_UNSPECIFIED" : 0;
                            object.lastAnalysisTime = null;
                            object.analysisStatus = options.enums === String ? "ANALYSIS_STATUS_UNSPECIFIED" : 0;
                            object.analysisStatusError = null;
                        }
                        if (message.continuousAnalysis != null && message.hasOwnProperty("continuousAnalysis"))
                            object.continuousAnalysis = options.enums === String ? $root.grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis[message.continuousAnalysis] === undefined ? message.continuousAnalysis : $root.grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis[message.continuousAnalysis] : message.continuousAnalysis;
                        if (message.lastAnalysisTime != null && message.hasOwnProperty("lastAnalysisTime"))
                            object.lastAnalysisTime = $root.google.protobuf.Timestamp.toObject(message.lastAnalysisTime, options);
                        if (message.analysisStatus != null && message.hasOwnProperty("analysisStatus"))
                            object.analysisStatus = options.enums === String ? $root.grafeas.v1beta1.discovery.Discovered.AnalysisStatus[message.analysisStatus] === undefined ? message.analysisStatus : $root.grafeas.v1beta1.discovery.Discovered.AnalysisStatus[message.analysisStatus] : message.analysisStatus;
                        if (message.analysisStatusError != null && message.hasOwnProperty("analysisStatusError"))
                            object.analysisStatusError = $root.google.rpc.Status.toObject(message.analysisStatusError, options);
                        return object;
                    };
    
                    /**
                     * Converts this Discovered to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Discovered.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Discovered
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.discovery.Discovered
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Discovered.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.discovery.Discovered";
                    };
    
                    /**
                     * ContinuousAnalysis enum.
                     * @name grafeas.v1beta1.discovery.Discovered.ContinuousAnalysis
                     * @enum {number}
                     * @property {number} CONTINUOUS_ANALYSIS_UNSPECIFIED=0 CONTINUOUS_ANALYSIS_UNSPECIFIED value
                     * @property {number} ACTIVE=1 ACTIVE value
                     * @property {number} INACTIVE=2 INACTIVE value
                     */
                    Discovered.ContinuousAnalysis = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CONTINUOUS_ANALYSIS_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ACTIVE"] = 1;
                        values[valuesById[2] = "INACTIVE"] = 2;
                        return values;
                    })();
    
                    /**
                     * AnalysisStatus enum.
                     * @name grafeas.v1beta1.discovery.Discovered.AnalysisStatus
                     * @enum {number}
                     * @property {number} ANALYSIS_STATUS_UNSPECIFIED=0 ANALYSIS_STATUS_UNSPECIFIED value
                     * @property {number} PENDING=1 PENDING value
                     * @property {number} SCANNING=2 SCANNING value
                     * @property {number} FINISHED_SUCCESS=3 FINISHED_SUCCESS value
                     * @property {number} FINISHED_FAILED=4 FINISHED_FAILED value
                     * @property {number} FINISHED_UNSUPPORTED=5 FINISHED_UNSUPPORTED value
                     */
                    Discovered.AnalysisStatus = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ANALYSIS_STATUS_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PENDING"] = 1;
                        values[valuesById[2] = "SCANNING"] = 2;
                        values[valuesById[3] = "FINISHED_SUCCESS"] = 3;
                        values[valuesById[4] = "FINISHED_FAILED"] = 4;
                        values[valuesById[5] = "FINISHED_UNSUPPORTED"] = 5;
                        return values;
                    })();
    
                    return Discovered;
                })();
    
                return discovery;
            })();
    
            v1beta1.GrafeasV1Beta1 = (function() {
    
                /**
                 * Constructs a new GrafeasV1Beta1 service.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a GrafeasV1Beta1
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function GrafeasV1Beta1(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (GrafeasV1Beta1.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = GrafeasV1Beta1;
    
                /**
                 * Creates new GrafeasV1Beta1 service using the specified rpc implementation.
                 * @function create
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {GrafeasV1Beta1} RPC service. Useful where requests and/or responses are streamed.
                 */
                GrafeasV1Beta1.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|getOccurrence}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef GetOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls GetOccurrence.
                 * @function getOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest} request GetOccurrenceRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.GetOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.getOccurrence = function getOccurrence(request, callback) {
                    return this.rpcCall(getOccurrence, $root.grafeas.v1beta1.GetOccurrenceRequest, $root.grafeas.v1beta1.Occurrence, request, callback);
                }, "name", { value: "GetOccurrence" });
    
                /**
                 * Calls GetOccurrence.
                 * @function getOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest} request GetOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|listOccurrences}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef ListOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.ListOccurrencesResponse} [response] ListOccurrencesResponse
                 */
    
                /**
                 * Calls ListOccurrences.
                 * @function listOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListOccurrencesRequest} request ListOccurrencesRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.ListOccurrencesCallback} callback Node-style callback called with the error, if any, and ListOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.listOccurrences = function listOccurrences(request, callback) {
                    return this.rpcCall(listOccurrences, $root.grafeas.v1beta1.ListOccurrencesRequest, $root.grafeas.v1beta1.ListOccurrencesResponse, request, callback);
                }, "name", { value: "ListOccurrences" });
    
                /**
                 * Calls ListOccurrences.
                 * @function listOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListOccurrencesRequest} request ListOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.ListOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|deleteOccurrence}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef DeleteOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOccurrence.
                 * @function deleteOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest} request DeleteOccurrenceRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.DeleteOccurrenceCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.deleteOccurrence = function deleteOccurrence(request, callback) {
                    return this.rpcCall(deleteOccurrence, $root.grafeas.v1beta1.DeleteOccurrenceRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOccurrence" });
    
                /**
                 * Calls DeleteOccurrence.
                 * @function deleteOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest} request DeleteOccurrenceRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|createOccurrence}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef CreateOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls CreateOccurrence.
                 * @function createOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest} request CreateOccurrenceRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.CreateOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.createOccurrence = function createOccurrence(request, callback) {
                    return this.rpcCall(createOccurrence, $root.grafeas.v1beta1.CreateOccurrenceRequest, $root.grafeas.v1beta1.Occurrence, request, callback);
                }, "name", { value: "CreateOccurrence" });
    
                /**
                 * Calls CreateOccurrence.
                 * @function createOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest} request CreateOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|batchCreateOccurrences}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef BatchCreateOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.BatchCreateOccurrencesResponse} [response] BatchCreateOccurrencesResponse
                 */
    
                /**
                 * Calls BatchCreateOccurrences.
                 * @function batchCreateOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest} request BatchCreateOccurrencesRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.BatchCreateOccurrencesCallback} callback Node-style callback called with the error, if any, and BatchCreateOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.batchCreateOccurrences = function batchCreateOccurrences(request, callback) {
                    return this.rpcCall(batchCreateOccurrences, $root.grafeas.v1beta1.BatchCreateOccurrencesRequest, $root.grafeas.v1beta1.BatchCreateOccurrencesResponse, request, callback);
                }, "name", { value: "BatchCreateOccurrences" });
    
                /**
                 * Calls BatchCreateOccurrences.
                 * @function batchCreateOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest} request BatchCreateOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.BatchCreateOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|updateOccurrence}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef UpdateOccurrenceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Occurrence} [response] Occurrence
                 */
    
                /**
                 * Calls UpdateOccurrence.
                 * @function updateOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest} request UpdateOccurrenceRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.UpdateOccurrenceCallback} callback Node-style callback called with the error, if any, and Occurrence
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.updateOccurrence = function updateOccurrence(request, callback) {
                    return this.rpcCall(updateOccurrence, $root.grafeas.v1beta1.UpdateOccurrenceRequest, $root.grafeas.v1beta1.Occurrence, request, callback);
                }, "name", { value: "UpdateOccurrence" });
    
                /**
                 * Calls UpdateOccurrence.
                 * @function updateOccurrence
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest} request UpdateOccurrenceRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Occurrence>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|getOccurrenceNote}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef GetOccurrenceNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Note} [response] Note
                 */
    
                /**
                 * Calls GetOccurrenceNote.
                 * @function getOccurrenceNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest} request GetOccurrenceNoteRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.GetOccurrenceNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.getOccurrenceNote = function getOccurrenceNote(request, callback) {
                    return this.rpcCall(getOccurrenceNote, $root.grafeas.v1beta1.GetOccurrenceNoteRequest, $root.grafeas.v1beta1.Note, request, callback);
                }, "name", { value: "GetOccurrenceNote" });
    
                /**
                 * Calls GetOccurrenceNote.
                 * @function getOccurrenceNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest} request GetOccurrenceNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|getNote}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef GetNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Note} [response] Note
                 */
    
                /**
                 * Calls GetNote.
                 * @function getNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetNoteRequest} request GetNoteRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.GetNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.getNote = function getNote(request, callback) {
                    return this.rpcCall(getNote, $root.grafeas.v1beta1.GetNoteRequest, $root.grafeas.v1beta1.Note, request, callback);
                }, "name", { value: "GetNote" });
    
                /**
                 * Calls GetNote.
                 * @function getNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetNoteRequest} request GetNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|listNotes}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef ListNotesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.ListNotesResponse} [response] ListNotesResponse
                 */
    
                /**
                 * Calls ListNotes.
                 * @function listNotes
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListNotesRequest} request ListNotesRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.ListNotesCallback} callback Node-style callback called with the error, if any, and ListNotesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.listNotes = function listNotes(request, callback) {
                    return this.rpcCall(listNotes, $root.grafeas.v1beta1.ListNotesRequest, $root.grafeas.v1beta1.ListNotesResponse, request, callback);
                }, "name", { value: "ListNotes" });
    
                /**
                 * Calls ListNotes.
                 * @function listNotes
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListNotesRequest} request ListNotesRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.ListNotesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|deleteNote}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef DeleteNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteNote.
                 * @function deleteNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IDeleteNoteRequest} request DeleteNoteRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.DeleteNoteCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.deleteNote = function deleteNote(request, callback) {
                    return this.rpcCall(deleteNote, $root.grafeas.v1beta1.DeleteNoteRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteNote" });
    
                /**
                 * Calls DeleteNote.
                 * @function deleteNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IDeleteNoteRequest} request DeleteNoteRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|createNote}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef CreateNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Note} [response] Note
                 */
    
                /**
                 * Calls CreateNote.
                 * @function createNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.ICreateNoteRequest} request CreateNoteRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.CreateNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.createNote = function createNote(request, callback) {
                    return this.rpcCall(createNote, $root.grafeas.v1beta1.CreateNoteRequest, $root.grafeas.v1beta1.Note, request, callback);
                }, "name", { value: "CreateNote" });
    
                /**
                 * Calls CreateNote.
                 * @function createNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.ICreateNoteRequest} request CreateNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|batchCreateNotes}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef BatchCreateNotesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.BatchCreateNotesResponse} [response] BatchCreateNotesResponse
                 */
    
                /**
                 * Calls BatchCreateNotes.
                 * @function batchCreateNotes
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest} request BatchCreateNotesRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.BatchCreateNotesCallback} callback Node-style callback called with the error, if any, and BatchCreateNotesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.batchCreateNotes = function batchCreateNotes(request, callback) {
                    return this.rpcCall(batchCreateNotes, $root.grafeas.v1beta1.BatchCreateNotesRequest, $root.grafeas.v1beta1.BatchCreateNotesResponse, request, callback);
                }, "name", { value: "BatchCreateNotes" });
    
                /**
                 * Calls BatchCreateNotes.
                 * @function batchCreateNotes
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest} request BatchCreateNotesRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.BatchCreateNotesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|updateNote}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef UpdateNoteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.Note} [response] Note
                 */
    
                /**
                 * Calls UpdateNote.
                 * @function updateNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IUpdateNoteRequest} request UpdateNoteRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.UpdateNoteCallback} callback Node-style callback called with the error, if any, and Note
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.updateNote = function updateNote(request, callback) {
                    return this.rpcCall(updateNote, $root.grafeas.v1beta1.UpdateNoteRequest, $root.grafeas.v1beta1.Note, request, callback);
                }, "name", { value: "UpdateNote" });
    
                /**
                 * Calls UpdateNote.
                 * @function updateNote
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IUpdateNoteRequest} request UpdateNoteRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.Note>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|listNoteOccurrences}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef ListNoteOccurrencesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.ListNoteOccurrencesResponse} [response] ListNoteOccurrencesResponse
                 */
    
                /**
                 * Calls ListNoteOccurrences.
                 * @function listNoteOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest} request ListNoteOccurrencesRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.ListNoteOccurrencesCallback} callback Node-style callback called with the error, if any, and ListNoteOccurrencesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.listNoteOccurrences = function listNoteOccurrences(request, callback) {
                    return this.rpcCall(listNoteOccurrences, $root.grafeas.v1beta1.ListNoteOccurrencesRequest, $root.grafeas.v1beta1.ListNoteOccurrencesResponse, request, callback);
                }, "name", { value: "ListNoteOccurrences" });
    
                /**
                 * Calls ListNoteOccurrences.
                 * @function listNoteOccurrences
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest} request ListNoteOccurrencesRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.ListNoteOccurrencesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link grafeas.v1beta1.GrafeasV1Beta1|getVulnerabilityOccurrencesSummary}.
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @typedef GetVulnerabilityOccurrencesSummaryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary} [response] VulnerabilityOccurrencesSummary
                 */
    
                /**
                 * Calls GetVulnerabilityOccurrencesSummary.
                 * @function getVulnerabilityOccurrencesSummary
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest} request GetVulnerabilityOccurrencesSummaryRequest message or plain object
                 * @param {grafeas.v1beta1.GrafeasV1Beta1.GetVulnerabilityOccurrencesSummaryCallback} callback Node-style callback called with the error, if any, and VulnerabilityOccurrencesSummary
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(GrafeasV1Beta1.prototype.getVulnerabilityOccurrencesSummary = function getVulnerabilityOccurrencesSummary(request, callback) {
                    return this.rpcCall(getVulnerabilityOccurrencesSummary, $root.grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest, $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary, request, callback);
                }, "name", { value: "GetVulnerabilityOccurrencesSummary" });
    
                /**
                 * Calls GetVulnerabilityOccurrencesSummary.
                 * @function getVulnerabilityOccurrencesSummary
                 * @memberof grafeas.v1beta1.GrafeasV1Beta1
                 * @instance
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest} request GetVulnerabilityOccurrencesSummaryRequest message or plain object
                 * @returns {Promise<grafeas.v1beta1.VulnerabilityOccurrencesSummary>} Promise
                 * @variation 2
                 */
    
                return GrafeasV1Beta1;
            })();
    
            v1beta1.Occurrence = (function() {
    
                /**
                 * Properties of an Occurrence.
                 * @memberof grafeas.v1beta1
                 * @interface IOccurrence
                 * @property {string|null} [name] Occurrence name
                 * @property {grafeas.v1beta1.IResource|null} [resource] Occurrence resource
                 * @property {string|null} [noteName] Occurrence noteName
                 * @property {grafeas.v1beta1.NoteKind|null} [kind] Occurrence kind
                 * @property {string|null} [remediation] Occurrence remediation
                 * @property {google.protobuf.ITimestamp|null} [createTime] Occurrence createTime
                 * @property {google.protobuf.ITimestamp|null} [updateTime] Occurrence updateTime
                 * @property {grafeas.v1beta1.vulnerability.IDetails|null} [vulnerability] Occurrence vulnerability
                 * @property {grafeas.v1beta1.build.IDetails|null} [build] Occurrence build
                 * @property {grafeas.v1beta1.image.IDetails|null} [derivedImage] Occurrence derivedImage
                 * @property {grafeas.v1beta1.package_.IDetails|null} [installation] Occurrence installation
                 * @property {grafeas.v1beta1.deployment.IDetails|null} [deployment] Occurrence deployment
                 * @property {grafeas.v1beta1.discovery.IDetails|null} [discovered] Occurrence discovered
                 * @property {grafeas.v1beta1.attestation.IDetails|null} [attestation] Occurrence attestation
                 */
    
                /**
                 * Constructs a new Occurrence.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents an Occurrence.
                 * @implements IOccurrence
                 * @constructor
                 * @param {grafeas.v1beta1.IOccurrence=} [properties] Properties to set
                 */
                function Occurrence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Occurrence name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.name = "";
    
                /**
                 * Occurrence resource.
                 * @member {grafeas.v1beta1.IResource|null|undefined} resource
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.resource = null;
    
                /**
                 * Occurrence noteName.
                 * @member {string} noteName
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.noteName = "";
    
                /**
                 * Occurrence kind.
                 * @member {grafeas.v1beta1.NoteKind} kind
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.kind = 0;
    
                /**
                 * Occurrence remediation.
                 * @member {string} remediation
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.remediation = "";
    
                /**
                 * Occurrence createTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} createTime
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.createTime = null;
    
                /**
                 * Occurrence updateTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.updateTime = null;
    
                /**
                 * Occurrence vulnerability.
                 * @member {grafeas.v1beta1.vulnerability.IDetails|null|undefined} vulnerability
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.vulnerability = null;
    
                /**
                 * Occurrence build.
                 * @member {grafeas.v1beta1.build.IDetails|null|undefined} build
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.build = null;
    
                /**
                 * Occurrence derivedImage.
                 * @member {grafeas.v1beta1.image.IDetails|null|undefined} derivedImage
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.derivedImage = null;
    
                /**
                 * Occurrence installation.
                 * @member {grafeas.v1beta1.package_.IDetails|null|undefined} installation
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.installation = null;
    
                /**
                 * Occurrence deployment.
                 * @member {grafeas.v1beta1.deployment.IDetails|null|undefined} deployment
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.deployment = null;
    
                /**
                 * Occurrence discovered.
                 * @member {grafeas.v1beta1.discovery.IDetails|null|undefined} discovered
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.discovered = null;
    
                /**
                 * Occurrence attestation.
                 * @member {grafeas.v1beta1.attestation.IDetails|null|undefined} attestation
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Occurrence.prototype.attestation = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Occurrence details.
                 * @member {"vulnerability"|"build"|"derivedImage"|"installation"|"deployment"|"discovered"|"attestation"|undefined} details
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 */
                Object.defineProperty(Occurrence.prototype, "details", {
                    get: $util.oneOfGetter($oneOfFields = ["vulnerability", "build", "derivedImage", "installation", "deployment", "discovered", "attestation"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Occurrence instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {grafeas.v1beta1.IOccurrence=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.Occurrence} Occurrence instance
                 */
                Occurrence.create = function create(properties) {
                    return new Occurrence(properties);
                };
    
                /**
                 * Encodes the specified Occurrence message. Does not implicitly {@link grafeas.v1beta1.Occurrence.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {grafeas.v1beta1.IOccurrence} message Occurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Occurrence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                        $root.grafeas.v1beta1.Resource.encode(message.resource, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.noteName != null && Object.hasOwnProperty.call(message, "noteName"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.noteName);
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                    if (message.remediation != null && Object.hasOwnProperty.call(message, "remediation"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.remediation);
                    if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                        $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                        $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.vulnerability != null && Object.hasOwnProperty.call(message, "vulnerability"))
                        $root.grafeas.v1beta1.vulnerability.Details.encode(message.vulnerability, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                        $root.grafeas.v1beta1.build.Details.encode(message.build, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.derivedImage != null && Object.hasOwnProperty.call(message, "derivedImage"))
                        $root.grafeas.v1beta1.image.Details.encode(message.derivedImage, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.installation != null && Object.hasOwnProperty.call(message, "installation"))
                        $root.grafeas.v1beta1.package.Details.encode(message.installation, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.deployment != null && Object.hasOwnProperty.call(message, "deployment"))
                        $root.grafeas.v1beta1.deployment.Details.encode(message.deployment, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.discovered != null && Object.hasOwnProperty.call(message, "discovered"))
                        $root.grafeas.v1beta1.discovery.Details.encode(message.discovered, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.attestation != null && Object.hasOwnProperty.call(message, "attestation"))
                        $root.grafeas.v1beta1.attestation.Details.encode(message.attestation, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Occurrence message, length delimited. Does not implicitly {@link grafeas.v1beta1.Occurrence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {grafeas.v1beta1.IOccurrence} message Occurrence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Occurrence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Occurrence message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.Occurrence} Occurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Occurrence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.Occurrence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.resource = $root.grafeas.v1beta1.Resource.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.noteName = reader.string();
                                break;
                            }
                        case 4: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 5: {
                                message.remediation = reader.string();
                                break;
                            }
                        case 6: {
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.vulnerability = $root.grafeas.v1beta1.vulnerability.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.build = $root.grafeas.v1beta1.build.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 10: {
                                message.derivedImage = $root.grafeas.v1beta1.image.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 11: {
                                message.installation = $root.grafeas.v1beta1.package.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.deployment = $root.grafeas.v1beta1.deployment.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 13: {
                                message.discovered = $root.grafeas.v1beta1.discovery.Details.decode(reader, reader.uint32());
                                break;
                            }
                        case 14: {
                                message.attestation = $root.grafeas.v1beta1.attestation.Details.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Occurrence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.Occurrence} Occurrence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Occurrence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Occurrence message.
                 * @function verify
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Occurrence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.resource != null && message.hasOwnProperty("resource")) {
                        var error = $root.grafeas.v1beta1.Resource.verify(message.resource);
                        if (error)
                            return "resource." + error;
                    }
                    if (message.noteName != null && message.hasOwnProperty("noteName"))
                        if (!$util.isString(message.noteName))
                            return "noteName: string expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        if (!$util.isString(message.remediation))
                            return "remediation: string expected";
                    if (message.createTime != null && message.hasOwnProperty("createTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                        if (error)
                            return "createTime." + error;
                    }
                    if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                        if (error)
                            return "updateTime." + error;
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.vulnerability.Details.verify(message.vulnerability);
                            if (error)
                                return "vulnerability." + error;
                        }
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.build.Details.verify(message.build);
                            if (error)
                                return "build." + error;
                        }
                    }
                    if (message.derivedImage != null && message.hasOwnProperty("derivedImage")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.image.Details.verify(message.derivedImage);
                            if (error)
                                return "derivedImage." + error;
                        }
                    }
                    if (message.installation != null && message.hasOwnProperty("installation")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.package.Details.verify(message.installation);
                            if (error)
                                return "installation." + error;
                        }
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.deployment.Details.verify(message.deployment);
                            if (error)
                                return "deployment." + error;
                        }
                    }
                    if (message.discovered != null && message.hasOwnProperty("discovered")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.discovery.Details.verify(message.discovered);
                            if (error)
                                return "discovered." + error;
                        }
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        if (properties.details === 1)
                            return "details: multiple values";
                        properties.details = 1;
                        {
                            var error = $root.grafeas.v1beta1.attestation.Details.verify(message.attestation);
                            if (error)
                                return "attestation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Occurrence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.Occurrence} Occurrence
                 */
                Occurrence.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.Occurrence)
                        return object;
                    var message = new $root.grafeas.v1beta1.Occurrence();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.resource != null) {
                        if (typeof object.resource !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.resource: object expected");
                        message.resource = $root.grafeas.v1beta1.Resource.fromObject(object.resource);
                    }
                    if (object.noteName != null)
                        message.noteName = String(object.noteName);
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "NOTE_KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "VULNERABILITY":
                    case 1:
                        message.kind = 1;
                        break;
                    case "BUILD":
                    case 2:
                        message.kind = 2;
                        break;
                    case "IMAGE":
                    case 3:
                        message.kind = 3;
                        break;
                    case "PACKAGE":
                    case 4:
                        message.kind = 4;
                        break;
                    case "DEPLOYMENT":
                    case 5:
                        message.kind = 5;
                        break;
                    case "DISCOVERY":
                    case 6:
                        message.kind = 6;
                        break;
                    case "ATTESTATION":
                    case 7:
                        message.kind = 7;
                        break;
                    }
                    if (object.remediation != null)
                        message.remediation = String(object.remediation);
                    if (object.createTime != null) {
                        if (typeof object.createTime !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.createTime: object expected");
                        message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                    }
                    if (object.updateTime != null) {
                        if (typeof object.updateTime !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.updateTime: object expected");
                        message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                    }
                    if (object.vulnerability != null) {
                        if (typeof object.vulnerability !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.vulnerability: object expected");
                        message.vulnerability = $root.grafeas.v1beta1.vulnerability.Details.fromObject(object.vulnerability);
                    }
                    if (object.build != null) {
                        if (typeof object.build !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.build: object expected");
                        message.build = $root.grafeas.v1beta1.build.Details.fromObject(object.build);
                    }
                    if (object.derivedImage != null) {
                        if (typeof object.derivedImage !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.derivedImage: object expected");
                        message.derivedImage = $root.grafeas.v1beta1.image.Details.fromObject(object.derivedImage);
                    }
                    if (object.installation != null) {
                        if (typeof object.installation !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.installation: object expected");
                        message.installation = $root.grafeas.v1beta1.package.Details.fromObject(object.installation);
                    }
                    if (object.deployment != null) {
                        if (typeof object.deployment !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.deployment: object expected");
                        message.deployment = $root.grafeas.v1beta1.deployment.Details.fromObject(object.deployment);
                    }
                    if (object.discovered != null) {
                        if (typeof object.discovered !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.discovered: object expected");
                        message.discovered = $root.grafeas.v1beta1.discovery.Details.fromObject(object.discovered);
                    }
                    if (object.attestation != null) {
                        if (typeof object.attestation !== "object")
                            throw TypeError(".grafeas.v1beta1.Occurrence.attestation: object expected");
                        message.attestation = $root.grafeas.v1beta1.attestation.Details.fromObject(object.attestation);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Occurrence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {grafeas.v1beta1.Occurrence} message Occurrence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Occurrence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.resource = null;
                        object.noteName = "";
                        object.kind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                        object.remediation = "";
                        object.createTime = null;
                        object.updateTime = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.resource != null && message.hasOwnProperty("resource"))
                        object.resource = $root.grafeas.v1beta1.Resource.toObject(message.resource, options);
                    if (message.noteName != null && message.hasOwnProperty("noteName"))
                        object.noteName = message.noteName;
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1beta1.NoteKind[message.kind] === undefined ? message.kind : $root.grafeas.v1beta1.NoteKind[message.kind] : message.kind;
                    if (message.remediation != null && message.hasOwnProperty("remediation"))
                        object.remediation = message.remediation;
                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                        object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        object.vulnerability = $root.grafeas.v1beta1.vulnerability.Details.toObject(message.vulnerability, options);
                        if (options.oneofs)
                            object.details = "vulnerability";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        object.build = $root.grafeas.v1beta1.build.Details.toObject(message.build, options);
                        if (options.oneofs)
                            object.details = "build";
                    }
                    if (message.derivedImage != null && message.hasOwnProperty("derivedImage")) {
                        object.derivedImage = $root.grafeas.v1beta1.image.Details.toObject(message.derivedImage, options);
                        if (options.oneofs)
                            object.details = "derivedImage";
                    }
                    if (message.installation != null && message.hasOwnProperty("installation")) {
                        object.installation = $root.grafeas.v1beta1.package.Details.toObject(message.installation, options);
                        if (options.oneofs)
                            object.details = "installation";
                    }
                    if (message.deployment != null && message.hasOwnProperty("deployment")) {
                        object.deployment = $root.grafeas.v1beta1.deployment.Details.toObject(message.deployment, options);
                        if (options.oneofs)
                            object.details = "deployment";
                    }
                    if (message.discovered != null && message.hasOwnProperty("discovered")) {
                        object.discovered = $root.grafeas.v1beta1.discovery.Details.toObject(message.discovered, options);
                        if (options.oneofs)
                            object.details = "discovered";
                    }
                    if (message.attestation != null && message.hasOwnProperty("attestation")) {
                        object.attestation = $root.grafeas.v1beta1.attestation.Details.toObject(message.attestation, options);
                        if (options.oneofs)
                            object.details = "attestation";
                    }
                    return object;
                };
    
                /**
                 * Converts this Occurrence to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.Occurrence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Occurrence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Occurrence
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.Occurrence
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Occurrence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.Occurrence";
                };
    
                return Occurrence;
            })();
    
            v1beta1.Resource = (function() {
    
                /**
                 * Properties of a Resource.
                 * @memberof grafeas.v1beta1
                 * @interface IResource
                 * @property {string|null} [name] Resource name
                 * @property {string|null} [uri] Resource uri
                 * @property {grafeas.v1beta1.provenance.IHash|null} [contentHash] Resource contentHash
                 */
    
                /**
                 * Constructs a new Resource.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a Resource.
                 * @implements IResource
                 * @constructor
                 * @param {grafeas.v1beta1.IResource=} [properties] Properties to set
                 */
                function Resource(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Resource name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.Resource
                 * @instance
                 */
                Resource.prototype.name = "";
    
                /**
                 * Resource uri.
                 * @member {string} uri
                 * @memberof grafeas.v1beta1.Resource
                 * @instance
                 */
                Resource.prototype.uri = "";
    
                /**
                 * Resource contentHash.
                 * @member {grafeas.v1beta1.provenance.IHash|null|undefined} contentHash
                 * @memberof grafeas.v1beta1.Resource
                 * @instance
                 */
                Resource.prototype.contentHash = null;
    
                /**
                 * Creates a new Resource instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {grafeas.v1beta1.IResource=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.Resource} Resource instance
                 */
                Resource.create = function create(properties) {
                    return new Resource(properties);
                };
    
                /**
                 * Encodes the specified Resource message. Does not implicitly {@link grafeas.v1beta1.Resource.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {grafeas.v1beta1.IResource} message Resource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Resource.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uri);
                    if (message.contentHash != null && Object.hasOwnProperty.call(message, "contentHash"))
                        $root.grafeas.v1beta1.provenance.Hash.encode(message.contentHash, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Resource message, length delimited. Does not implicitly {@link grafeas.v1beta1.Resource.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {grafeas.v1beta1.IResource} message Resource message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Resource.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Resource message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.Resource} Resource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Resource.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.Resource();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.uri = reader.string();
                                break;
                            }
                        case 3: {
                                message.contentHash = $root.grafeas.v1beta1.provenance.Hash.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Resource message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.Resource} Resource
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Resource.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Resource message.
                 * @function verify
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Resource.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.uri != null && message.hasOwnProperty("uri"))
                        if (!$util.isString(message.uri))
                            return "uri: string expected";
                    if (message.contentHash != null && message.hasOwnProperty("contentHash")) {
                        var error = $root.grafeas.v1beta1.provenance.Hash.verify(message.contentHash);
                        if (error)
                            return "contentHash." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.Resource} Resource
                 */
                Resource.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.Resource)
                        return object;
                    var message = new $root.grafeas.v1beta1.Resource();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.uri != null)
                        message.uri = String(object.uri);
                    if (object.contentHash != null) {
                        if (typeof object.contentHash !== "object")
                            throw TypeError(".grafeas.v1beta1.Resource.contentHash: object expected");
                        message.contentHash = $root.grafeas.v1beta1.provenance.Hash.fromObject(object.contentHash);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Resource message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {grafeas.v1beta1.Resource} message Resource
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Resource.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.uri = "";
                        object.contentHash = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.uri != null && message.hasOwnProperty("uri"))
                        object.uri = message.uri;
                    if (message.contentHash != null && message.hasOwnProperty("contentHash"))
                        object.contentHash = $root.grafeas.v1beta1.provenance.Hash.toObject(message.contentHash, options);
                    return object;
                };
    
                /**
                 * Converts this Resource to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.Resource
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Resource.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Resource
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.Resource
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.Resource";
                };
    
                return Resource;
            })();
    
            v1beta1.Note = (function() {
    
                /**
                 * Properties of a Note.
                 * @memberof grafeas.v1beta1
                 * @interface INote
                 * @property {string|null} [name] Note name
                 * @property {string|null} [shortDescription] Note shortDescription
                 * @property {string|null} [longDescription] Note longDescription
                 * @property {grafeas.v1beta1.NoteKind|null} [kind] Note kind
                 * @property {Array.<grafeas.v1beta1.IRelatedUrl>|null} [relatedUrl] Note relatedUrl
                 * @property {google.protobuf.ITimestamp|null} [expirationTime] Note expirationTime
                 * @property {google.protobuf.ITimestamp|null} [createTime] Note createTime
                 * @property {google.protobuf.ITimestamp|null} [updateTime] Note updateTime
                 * @property {Array.<string>|null} [relatedNoteNames] Note relatedNoteNames
                 * @property {grafeas.v1beta1.vulnerability.IVulnerability|null} [vulnerability] Note vulnerability
                 * @property {grafeas.v1beta1.build.IBuild|null} [build] Note build
                 * @property {grafeas.v1beta1.image.IBasis|null} [baseImage] Note baseImage
                 * @property {grafeas.v1beta1.package_.IPackage|null} ["package"] Note package
                 * @property {grafeas.v1beta1.deployment.IDeployable|null} [deployable] Note deployable
                 * @property {grafeas.v1beta1.discovery.IDiscovery|null} [discovery] Note discovery
                 * @property {grafeas.v1beta1.attestation.IAuthority|null} [attestationAuthority] Note attestationAuthority
                 */
    
                /**
                 * Constructs a new Note.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a Note.
                 * @implements INote
                 * @constructor
                 * @param {grafeas.v1beta1.INote=} [properties] Properties to set
                 */
                function Note(properties) {
                    this.relatedUrl = [];
                    this.relatedNoteNames = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Note name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.name = "";
    
                /**
                 * Note shortDescription.
                 * @member {string} shortDescription
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.shortDescription = "";
    
                /**
                 * Note longDescription.
                 * @member {string} longDescription
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.longDescription = "";
    
                /**
                 * Note kind.
                 * @member {grafeas.v1beta1.NoteKind} kind
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.kind = 0;
    
                /**
                 * Note relatedUrl.
                 * @member {Array.<grafeas.v1beta1.IRelatedUrl>} relatedUrl
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.relatedUrl = $util.emptyArray;
    
                /**
                 * Note expirationTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} expirationTime
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.expirationTime = null;
    
                /**
                 * Note createTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} createTime
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.createTime = null;
    
                /**
                 * Note updateTime.
                 * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.updateTime = null;
    
                /**
                 * Note relatedNoteNames.
                 * @member {Array.<string>} relatedNoteNames
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.relatedNoteNames = $util.emptyArray;
    
                /**
                 * Note vulnerability.
                 * @member {grafeas.v1beta1.vulnerability.IVulnerability|null|undefined} vulnerability
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.vulnerability = null;
    
                /**
                 * Note build.
                 * @member {grafeas.v1beta1.build.IBuild|null|undefined} build
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.build = null;
    
                /**
                 * Note baseImage.
                 * @member {grafeas.v1beta1.image.IBasis|null|undefined} baseImage
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.baseImage = null;
    
                /**
                 * Note package.
                 * @member {grafeas.v1beta1.package_.IPackage|null|undefined} package
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype["package"] = null;
    
                /**
                 * Note deployable.
                 * @member {grafeas.v1beta1.deployment.IDeployable|null|undefined} deployable
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.deployable = null;
    
                /**
                 * Note discovery.
                 * @member {grafeas.v1beta1.discovery.IDiscovery|null|undefined} discovery
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.discovery = null;
    
                /**
                 * Note attestationAuthority.
                 * @member {grafeas.v1beta1.attestation.IAuthority|null|undefined} attestationAuthority
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Note.prototype.attestationAuthority = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Note type.
                 * @member {"vulnerability"|"build"|"baseImage"|"package"|"deployable"|"discovery"|"attestationAuthority"|undefined} type
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 */
                Object.defineProperty(Note.prototype, "type", {
                    get: $util.oneOfGetter($oneOfFields = ["vulnerability", "build", "baseImage", "package", "deployable", "discovery", "attestationAuthority"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Note instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {grafeas.v1beta1.INote=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.Note} Note instance
                 */
                Note.create = function create(properties) {
                    return new Note(properties);
                };
    
                /**
                 * Encodes the specified Note message. Does not implicitly {@link grafeas.v1beta1.Note.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {grafeas.v1beta1.INote} message Note message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Note.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.shortDescription != null && Object.hasOwnProperty.call(message, "shortDescription"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.shortDescription);
                    if (message.longDescription != null && Object.hasOwnProperty.call(message, "longDescription"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.longDescription);
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                    if (message.relatedUrl != null && message.relatedUrl.length)
                        for (var i = 0; i < message.relatedUrl.length; ++i)
                            $root.grafeas.v1beta1.RelatedUrl.encode(message.relatedUrl[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.expirationTime != null && Object.hasOwnProperty.call(message, "expirationTime"))
                        $root.google.protobuf.Timestamp.encode(message.expirationTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                        $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                        $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.relatedNoteNames != null && message.relatedNoteNames.length)
                        for (var i = 0; i < message.relatedNoteNames.length; ++i)
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.relatedNoteNames[i]);
                    if (message.vulnerability != null && Object.hasOwnProperty.call(message, "vulnerability"))
                        $root.grafeas.v1beta1.vulnerability.Vulnerability.encode(message.vulnerability, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                        $root.grafeas.v1beta1.build.Build.encode(message.build, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.baseImage != null && Object.hasOwnProperty.call(message, "baseImage"))
                        $root.grafeas.v1beta1.image.Basis.encode(message.baseImage, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        $root.grafeas.v1beta1.package.Package.encode(message["package"], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.deployable != null && Object.hasOwnProperty.call(message, "deployable"))
                        $root.grafeas.v1beta1.deployment.Deployable.encode(message.deployable, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.discovery != null && Object.hasOwnProperty.call(message, "discovery"))
                        $root.grafeas.v1beta1.discovery.Discovery.encode(message.discovery, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    if (message.attestationAuthority != null && Object.hasOwnProperty.call(message, "attestationAuthority"))
                        $root.grafeas.v1beta1.attestation.Authority.encode(message.attestationAuthority, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Note message, length delimited. Does not implicitly {@link grafeas.v1beta1.Note.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {grafeas.v1beta1.INote} message Note message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Note.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Note message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.Note} Note
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Note.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.Note();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.shortDescription = reader.string();
                                break;
                            }
                        case 3: {
                                message.longDescription = reader.string();
                                break;
                            }
                        case 4: {
                                message.kind = reader.int32();
                                break;
                            }
                        case 5: {
                                if (!(message.relatedUrl && message.relatedUrl.length))
                                    message.relatedUrl = [];
                                message.relatedUrl.push($root.grafeas.v1beta1.RelatedUrl.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                message.expirationTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.relatedNoteNames && message.relatedNoteNames.length))
                                    message.relatedNoteNames = [];
                                message.relatedNoteNames.push(reader.string());
                                break;
                            }
                        case 10: {
                                message.vulnerability = $root.grafeas.v1beta1.vulnerability.Vulnerability.decode(reader, reader.uint32());
                                break;
                            }
                        case 11: {
                                message.build = $root.grafeas.v1beta1.build.Build.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.baseImage = $root.grafeas.v1beta1.image.Basis.decode(reader, reader.uint32());
                                break;
                            }
                        case 13: {
                                message["package"] = $root.grafeas.v1beta1.package.Package.decode(reader, reader.uint32());
                                break;
                            }
                        case 14: {
                                message.deployable = $root.grafeas.v1beta1.deployment.Deployable.decode(reader, reader.uint32());
                                break;
                            }
                        case 15: {
                                message.discovery = $root.grafeas.v1beta1.discovery.Discovery.decode(reader, reader.uint32());
                                break;
                            }
                        case 16: {
                                message.attestationAuthority = $root.grafeas.v1beta1.attestation.Authority.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Note message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.Note} Note
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Note.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Note message.
                 * @function verify
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Note.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        if (!$util.isString(message.shortDescription))
                            return "shortDescription: string expected";
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        if (!$util.isString(message.longDescription))
                            return "longDescription: string expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        switch (message.kind) {
                        default:
                            return "kind: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.relatedUrl != null && message.hasOwnProperty("relatedUrl")) {
                        if (!Array.isArray(message.relatedUrl))
                            return "relatedUrl: array expected";
                        for (var i = 0; i < message.relatedUrl.length; ++i) {
                            var error = $root.grafeas.v1beta1.RelatedUrl.verify(message.relatedUrl[i]);
                            if (error)
                                return "relatedUrl." + error;
                        }
                    }
                    if (message.expirationTime != null && message.hasOwnProperty("expirationTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expirationTime);
                        if (error)
                            return "expirationTime." + error;
                    }
                    if (message.createTime != null && message.hasOwnProperty("createTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                        if (error)
                            return "createTime." + error;
                    }
                    if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                        if (error)
                            return "updateTime." + error;
                    }
                    if (message.relatedNoteNames != null && message.hasOwnProperty("relatedNoteNames")) {
                        if (!Array.isArray(message.relatedNoteNames))
                            return "relatedNoteNames: array expected";
                        for (var i = 0; i < message.relatedNoteNames.length; ++i)
                            if (!$util.isString(message.relatedNoteNames[i]))
                                return "relatedNoteNames: string[] expected";
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.vulnerability.Vulnerability.verify(message.vulnerability);
                            if (error)
                                return "vulnerability." + error;
                        }
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.build.Build.verify(message.build);
                            if (error)
                                return "build." + error;
                        }
                    }
                    if (message.baseImage != null && message.hasOwnProperty("baseImage")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.image.Basis.verify(message.baseImage);
                            if (error)
                                return "baseImage." + error;
                        }
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.package.Package.verify(message["package"]);
                            if (error)
                                return "package." + error;
                        }
                    }
                    if (message.deployable != null && message.hasOwnProperty("deployable")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.deployment.Deployable.verify(message.deployable);
                            if (error)
                                return "deployable." + error;
                        }
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.discovery.Discovery.verify(message.discovery);
                            if (error)
                                return "discovery." + error;
                        }
                    }
                    if (message.attestationAuthority != null && message.hasOwnProperty("attestationAuthority")) {
                        if (properties.type === 1)
                            return "type: multiple values";
                        properties.type = 1;
                        {
                            var error = $root.grafeas.v1beta1.attestation.Authority.verify(message.attestationAuthority);
                            if (error)
                                return "attestationAuthority." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Note message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.Note} Note
                 */
                Note.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.Note)
                        return object;
                    var message = new $root.grafeas.v1beta1.Note();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.shortDescription != null)
                        message.shortDescription = String(object.shortDescription);
                    if (object.longDescription != null)
                        message.longDescription = String(object.longDescription);
                    switch (object.kind) {
                    default:
                        if (typeof object.kind === "number") {
                            message.kind = object.kind;
                            break;
                        }
                        break;
                    case "NOTE_KIND_UNSPECIFIED":
                    case 0:
                        message.kind = 0;
                        break;
                    case "VULNERABILITY":
                    case 1:
                        message.kind = 1;
                        break;
                    case "BUILD":
                    case 2:
                        message.kind = 2;
                        break;
                    case "IMAGE":
                    case 3:
                        message.kind = 3;
                        break;
                    case "PACKAGE":
                    case 4:
                        message.kind = 4;
                        break;
                    case "DEPLOYMENT":
                    case 5:
                        message.kind = 5;
                        break;
                    case "DISCOVERY":
                    case 6:
                        message.kind = 6;
                        break;
                    case "ATTESTATION":
                    case 7:
                        message.kind = 7;
                        break;
                    }
                    if (object.relatedUrl) {
                        if (!Array.isArray(object.relatedUrl))
                            throw TypeError(".grafeas.v1beta1.Note.relatedUrl: array expected");
                        message.relatedUrl = [];
                        for (var i = 0; i < object.relatedUrl.length; ++i) {
                            if (typeof object.relatedUrl[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.Note.relatedUrl: object expected");
                            message.relatedUrl[i] = $root.grafeas.v1beta1.RelatedUrl.fromObject(object.relatedUrl[i]);
                        }
                    }
                    if (object.expirationTime != null) {
                        if (typeof object.expirationTime !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.expirationTime: object expected");
                        message.expirationTime = $root.google.protobuf.Timestamp.fromObject(object.expirationTime);
                    }
                    if (object.createTime != null) {
                        if (typeof object.createTime !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.createTime: object expected");
                        message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                    }
                    if (object.updateTime != null) {
                        if (typeof object.updateTime !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.updateTime: object expected");
                        message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                    }
                    if (object.relatedNoteNames) {
                        if (!Array.isArray(object.relatedNoteNames))
                            throw TypeError(".grafeas.v1beta1.Note.relatedNoteNames: array expected");
                        message.relatedNoteNames = [];
                        for (var i = 0; i < object.relatedNoteNames.length; ++i)
                            message.relatedNoteNames[i] = String(object.relatedNoteNames[i]);
                    }
                    if (object.vulnerability != null) {
                        if (typeof object.vulnerability !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.vulnerability: object expected");
                        message.vulnerability = $root.grafeas.v1beta1.vulnerability.Vulnerability.fromObject(object.vulnerability);
                    }
                    if (object.build != null) {
                        if (typeof object.build !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.build: object expected");
                        message.build = $root.grafeas.v1beta1.build.Build.fromObject(object.build);
                    }
                    if (object.baseImage != null) {
                        if (typeof object.baseImage !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.baseImage: object expected");
                        message.baseImage = $root.grafeas.v1beta1.image.Basis.fromObject(object.baseImage);
                    }
                    if (object["package"] != null) {
                        if (typeof object["package"] !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.package: object expected");
                        message["package"] = $root.grafeas.v1beta1.package.Package.fromObject(object["package"]);
                    }
                    if (object.deployable != null) {
                        if (typeof object.deployable !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.deployable: object expected");
                        message.deployable = $root.grafeas.v1beta1.deployment.Deployable.fromObject(object.deployable);
                    }
                    if (object.discovery != null) {
                        if (typeof object.discovery !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.discovery: object expected");
                        message.discovery = $root.grafeas.v1beta1.discovery.Discovery.fromObject(object.discovery);
                    }
                    if (object.attestationAuthority != null) {
                        if (typeof object.attestationAuthority !== "object")
                            throw TypeError(".grafeas.v1beta1.Note.attestationAuthority: object expected");
                        message.attestationAuthority = $root.grafeas.v1beta1.attestation.Authority.fromObject(object.attestationAuthority);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Note message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {grafeas.v1beta1.Note} message Note
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Note.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.relatedUrl = [];
                        object.relatedNoteNames = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.shortDescription = "";
                        object.longDescription = "";
                        object.kind = options.enums === String ? "NOTE_KIND_UNSPECIFIED" : 0;
                        object.expirationTime = null;
                        object.createTime = null;
                        object.updateTime = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.shortDescription != null && message.hasOwnProperty("shortDescription"))
                        object.shortDescription = message.shortDescription;
                    if (message.longDescription != null && message.hasOwnProperty("longDescription"))
                        object.longDescription = message.longDescription;
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = options.enums === String ? $root.grafeas.v1beta1.NoteKind[message.kind] === undefined ? message.kind : $root.grafeas.v1beta1.NoteKind[message.kind] : message.kind;
                    if (message.relatedUrl && message.relatedUrl.length) {
                        object.relatedUrl = [];
                        for (var j = 0; j < message.relatedUrl.length; ++j)
                            object.relatedUrl[j] = $root.grafeas.v1beta1.RelatedUrl.toObject(message.relatedUrl[j], options);
                    }
                    if (message.expirationTime != null && message.hasOwnProperty("expirationTime"))
                        object.expirationTime = $root.google.protobuf.Timestamp.toObject(message.expirationTime, options);
                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                        object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                    if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                        object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                    if (message.relatedNoteNames && message.relatedNoteNames.length) {
                        object.relatedNoteNames = [];
                        for (var j = 0; j < message.relatedNoteNames.length; ++j)
                            object.relatedNoteNames[j] = message.relatedNoteNames[j];
                    }
                    if (message.vulnerability != null && message.hasOwnProperty("vulnerability")) {
                        object.vulnerability = $root.grafeas.v1beta1.vulnerability.Vulnerability.toObject(message.vulnerability, options);
                        if (options.oneofs)
                            object.type = "vulnerability";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                        object.build = $root.grafeas.v1beta1.build.Build.toObject(message.build, options);
                        if (options.oneofs)
                            object.type = "build";
                    }
                    if (message.baseImage != null && message.hasOwnProperty("baseImage")) {
                        object.baseImage = $root.grafeas.v1beta1.image.Basis.toObject(message.baseImage, options);
                        if (options.oneofs)
                            object.type = "baseImage";
                    }
                    if (message["package"] != null && message.hasOwnProperty("package")) {
                        object["package"] = $root.grafeas.v1beta1.package.Package.toObject(message["package"], options);
                        if (options.oneofs)
                            object.type = "package";
                    }
                    if (message.deployable != null && message.hasOwnProperty("deployable")) {
                        object.deployable = $root.grafeas.v1beta1.deployment.Deployable.toObject(message.deployable, options);
                        if (options.oneofs)
                            object.type = "deployable";
                    }
                    if (message.discovery != null && message.hasOwnProperty("discovery")) {
                        object.discovery = $root.grafeas.v1beta1.discovery.Discovery.toObject(message.discovery, options);
                        if (options.oneofs)
                            object.type = "discovery";
                    }
                    if (message.attestationAuthority != null && message.hasOwnProperty("attestationAuthority")) {
                        object.attestationAuthority = $root.grafeas.v1beta1.attestation.Authority.toObject(message.attestationAuthority, options);
                        if (options.oneofs)
                            object.type = "attestationAuthority";
                    }
                    return object;
                };
    
                /**
                 * Converts this Note to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.Note
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Note.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Note
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.Note
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Note.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.Note";
                };
    
                return Note;
            })();
    
            v1beta1.GetOccurrenceRequest = (function() {
    
                /**
                 * Properties of a GetOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IGetOccurrenceRequest
                 * @property {string|null} [name] GetOccurrenceRequest name
                 */
    
                /**
                 * Constructs a new GetOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a GetOccurrenceRequest.
                 * @implements IGetOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest=} [properties] Properties to set
                 */
                function GetOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @instance
                 */
                GetOccurrenceRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.GetOccurrenceRequest} GetOccurrenceRequest instance
                 */
                GetOccurrenceRequest.create = function create(properties) {
                    return new GetOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOccurrenceRequest message. Does not implicitly {@link grafeas.v1beta1.GetOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest} message GetOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.GetOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceRequest} message GetOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.GetOccurrenceRequest} GetOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.GetOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.GetOccurrenceRequest} GetOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.GetOccurrenceRequest} GetOccurrenceRequest
                 */
                GetOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.GetOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.GetOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.GetOccurrenceRequest} message GetOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.GetOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.GetOccurrenceRequest";
                };
    
                return GetOccurrenceRequest;
            })();
    
            v1beta1.ListOccurrencesRequest = (function() {
    
                /**
                 * Properties of a ListOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IListOccurrencesRequest
                 * @property {string|null} [parent] ListOccurrencesRequest parent
                 * @property {string|null} [filter] ListOccurrencesRequest filter
                 * @property {number|null} [pageSize] ListOccurrencesRequest pageSize
                 * @property {string|null} [pageToken] ListOccurrencesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListOccurrencesRequest.
                 * @implements IListOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IListOccurrencesRequest=} [properties] Properties to set
                 */
                function ListOccurrencesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOccurrencesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.parent = "";
    
                /**
                 * ListOccurrencesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.filter = "";
    
                /**
                 * ListOccurrencesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.pageSize = 0;
    
                /**
                 * ListOccurrencesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @instance
                 */
                ListOccurrencesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListOccurrencesRequest} ListOccurrencesRequest instance
                 */
                ListOccurrencesRequest.create = function create(properties) {
                    return new ListOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOccurrencesRequest message. Does not implicitly {@link grafeas.v1beta1.ListOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesRequest} message ListOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesRequest} message ListOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListOccurrencesRequest} ListOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListOccurrencesRequest} ListOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListOccurrencesRequest} ListOccurrencesRequest
                 */
                ListOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListOccurrencesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.ListOccurrencesRequest} message ListOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListOccurrencesRequest";
                };
    
                return ListOccurrencesRequest;
            })();
    
            v1beta1.ListOccurrencesResponse = (function() {
    
                /**
                 * Properties of a ListOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @interface IListOccurrencesResponse
                 * @property {Array.<grafeas.v1beta1.IOccurrence>|null} [occurrences] ListOccurrencesResponse occurrences
                 * @property {string|null} [nextPageToken] ListOccurrencesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListOccurrencesResponse.
                 * @implements IListOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1beta1.IListOccurrencesResponse=} [properties] Properties to set
                 */
                function ListOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1beta1.IOccurrence>} occurrences
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @instance
                 */
                ListOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * ListOccurrencesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @instance
                 */
                ListOccurrencesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListOccurrencesResponse} ListOccurrencesResponse instance
                 */
                ListOccurrencesResponse.create = function create(properties) {
                    return new ListOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOccurrencesResponse message. Does not implicitly {@link grafeas.v1beta1.ListOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesResponse} message ListOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1beta1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListOccurrencesResponse} message ListOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListOccurrencesResponse} ListOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListOccurrencesResponse} ListOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListOccurrencesResponse} ListOccurrencesResponse
                 */
                ListOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1beta1.ListOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.ListOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.ListOccurrencesResponse} message ListOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListOccurrencesResponse";
                };
    
                return ListOccurrencesResponse;
            })();
    
            v1beta1.DeleteOccurrenceRequest = (function() {
    
                /**
                 * Properties of a DeleteOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IDeleteOccurrenceRequest
                 * @property {string|null} [name] DeleteOccurrenceRequest name
                 */
    
                /**
                 * Constructs a new DeleteOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a DeleteOccurrenceRequest.
                 * @implements IDeleteOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest=} [properties] Properties to set
                 */
                function DeleteOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @instance
                 */
                DeleteOccurrenceRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.DeleteOccurrenceRequest} DeleteOccurrenceRequest instance
                 */
                DeleteOccurrenceRequest.create = function create(properties) {
                    return new DeleteOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOccurrenceRequest message. Does not implicitly {@link grafeas.v1beta1.DeleteOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest} message DeleteOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.DeleteOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteOccurrenceRequest} message DeleteOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.DeleteOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.DeleteOccurrenceRequest} DeleteOccurrenceRequest
                 */
                DeleteOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.DeleteOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.DeleteOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.DeleteOccurrenceRequest} message DeleteOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.DeleteOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.DeleteOccurrenceRequest";
                };
    
                return DeleteOccurrenceRequest;
            })();
    
            v1beta1.CreateOccurrenceRequest = (function() {
    
                /**
                 * Properties of a CreateOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @interface ICreateOccurrenceRequest
                 * @property {string|null} [parent] CreateOccurrenceRequest parent
                 * @property {grafeas.v1beta1.IOccurrence|null} [occurrence] CreateOccurrenceRequest occurrence
                 */
    
                /**
                 * Constructs a new CreateOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a CreateOccurrenceRequest.
                 * @implements ICreateOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest=} [properties] Properties to set
                 */
                function CreateOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CreateOccurrenceRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @instance
                 */
                CreateOccurrenceRequest.prototype.parent = "";
    
                /**
                 * CreateOccurrenceRequest occurrence.
                 * @member {grafeas.v1beta1.IOccurrence|null|undefined} occurrence
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @instance
                 */
                CreateOccurrenceRequest.prototype.occurrence = null;
    
                /**
                 * Creates a new CreateOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.CreateOccurrenceRequest} CreateOccurrenceRequest instance
                 */
                CreateOccurrenceRequest.create = function create(properties) {
                    return new CreateOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified CreateOccurrenceRequest message. Does not implicitly {@link grafeas.v1beta1.CreateOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest} message CreateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.occurrence != null && Object.hasOwnProperty.call(message, "occurrence"))
                        $root.grafeas.v1beta1.Occurrence.encode(message.occurrence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CreateOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.CreateOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateOccurrenceRequest} message CreateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CreateOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.CreateOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.occurrence = $root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CreateOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CreateOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.occurrence != null && message.hasOwnProperty("occurrence")) {
                        var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrence);
                        if (error)
                            return "occurrence." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CreateOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.CreateOccurrenceRequest} CreateOccurrenceRequest
                 */
                CreateOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.CreateOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.CreateOccurrenceRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.occurrence != null) {
                        if (typeof object.occurrence !== "object")
                            throw TypeError(".grafeas.v1beta1.CreateOccurrenceRequest.occurrence: object expected");
                        message.occurrence = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrence);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CreateOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.CreateOccurrenceRequest} message CreateOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.occurrence = null;
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.occurrence != null && message.hasOwnProperty("occurrence"))
                        object.occurrence = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrence, options);
                    return object;
                };
    
                /**
                 * Converts this CreateOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CreateOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.CreateOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CreateOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.CreateOccurrenceRequest";
                };
    
                return CreateOccurrenceRequest;
            })();
    
            v1beta1.UpdateOccurrenceRequest = (function() {
    
                /**
                 * Properties of an UpdateOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IUpdateOccurrenceRequest
                 * @property {string|null} [name] UpdateOccurrenceRequest name
                 * @property {grafeas.v1beta1.IOccurrence|null} [occurrence] UpdateOccurrenceRequest occurrence
                 * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateOccurrenceRequest updateMask
                 */
    
                /**
                 * Constructs a new UpdateOccurrenceRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents an UpdateOccurrenceRequest.
                 * @implements IUpdateOccurrenceRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest=} [properties] Properties to set
                 */
                function UpdateOccurrenceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpdateOccurrenceRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.name = "";
    
                /**
                 * UpdateOccurrenceRequest occurrence.
                 * @member {grafeas.v1beta1.IOccurrence|null|undefined} occurrence
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.occurrence = null;
    
                /**
                 * UpdateOccurrenceRequest updateMask.
                 * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @instance
                 */
                UpdateOccurrenceRequest.prototype.updateMask = null;
    
                /**
                 * Creates a new UpdateOccurrenceRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.UpdateOccurrenceRequest} UpdateOccurrenceRequest instance
                 */
                UpdateOccurrenceRequest.create = function create(properties) {
                    return new UpdateOccurrenceRequest(properties);
                };
    
                /**
                 * Encodes the specified UpdateOccurrenceRequest message. Does not implicitly {@link grafeas.v1beta1.UpdateOccurrenceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest} message UpdateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateOccurrenceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.occurrence != null && Object.hasOwnProperty.call(message, "occurrence"))
                        $root.grafeas.v1beta1.Occurrence.encode(message.occurrence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                        $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpdateOccurrenceRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.UpdateOccurrenceRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateOccurrenceRequest} message UpdateOccurrenceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateOccurrenceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpdateOccurrenceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateOccurrenceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.UpdateOccurrenceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.occurrence = $root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpdateOccurrenceRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateOccurrenceRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpdateOccurrenceRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateOccurrenceRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.occurrence != null && message.hasOwnProperty("occurrence")) {
                        var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrence);
                        if (error)
                            return "occurrence." + error;
                    }
                    if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                        var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                        if (error)
                            return "updateMask." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpdateOccurrenceRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.UpdateOccurrenceRequest} UpdateOccurrenceRequest
                 */
                UpdateOccurrenceRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.UpdateOccurrenceRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.UpdateOccurrenceRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.occurrence != null) {
                        if (typeof object.occurrence !== "object")
                            throw TypeError(".grafeas.v1beta1.UpdateOccurrenceRequest.occurrence: object expected");
                        message.occurrence = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrence);
                    }
                    if (object.updateMask != null) {
                        if (typeof object.updateMask !== "object")
                            throw TypeError(".grafeas.v1beta1.UpdateOccurrenceRequest.updateMask: object expected");
                        message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpdateOccurrenceRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {grafeas.v1beta1.UpdateOccurrenceRequest} message UpdateOccurrenceRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateOccurrenceRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.occurrence = null;
                        object.updateMask = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.occurrence != null && message.hasOwnProperty("occurrence"))
                        object.occurrence = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrence, options);
                    if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                        object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                    return object;
                };
    
                /**
                 * Converts this UpdateOccurrenceRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateOccurrenceRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpdateOccurrenceRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.UpdateOccurrenceRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpdateOccurrenceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.UpdateOccurrenceRequest";
                };
    
                return UpdateOccurrenceRequest;
            })();
    
            v1beta1.GetNoteRequest = (function() {
    
                /**
                 * Properties of a GetNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IGetNoteRequest
                 * @property {string|null} [name] GetNoteRequest name
                 */
    
                /**
                 * Constructs a new GetNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a GetNoteRequest.
                 * @implements IGetNoteRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IGetNoteRequest=} [properties] Properties to set
                 */
                function GetNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @instance
                 */
                GetNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new GetNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.GetNoteRequest} GetNoteRequest instance
                 */
                GetNoteRequest.create = function create(properties) {
                    return new GetNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified GetNoteRequest message. Does not implicitly {@link grafeas.v1beta1.GetNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetNoteRequest} message GetNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.GetNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetNoteRequest} message GetNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.GetNoteRequest} GetNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.GetNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.GetNoteRequest} GetNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.GetNoteRequest} GetNoteRequest
                 */
                GetNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.GetNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.GetNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.GetNoteRequest} message GetNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.GetNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.GetNoteRequest";
                };
    
                return GetNoteRequest;
            })();
    
            v1beta1.GetOccurrenceNoteRequest = (function() {
    
                /**
                 * Properties of a GetOccurrenceNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IGetOccurrenceNoteRequest
                 * @property {string|null} [name] GetOccurrenceNoteRequest name
                 */
    
                /**
                 * Constructs a new GetOccurrenceNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a GetOccurrenceNoteRequest.
                 * @implements IGetOccurrenceNoteRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest=} [properties] Properties to set
                 */
                function GetOccurrenceNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOccurrenceNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @instance
                 */
                GetOccurrenceNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOccurrenceNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest instance
                 */
                GetOccurrenceNoteRequest.create = function create(properties) {
                    return new GetOccurrenceNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOccurrenceNoteRequest message. Does not implicitly {@link grafeas.v1beta1.GetOccurrenceNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest} message GetOccurrenceNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOccurrenceNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.GetOccurrenceNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetOccurrenceNoteRequest} message GetOccurrenceNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOccurrenceNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOccurrenceNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.GetOccurrenceNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOccurrenceNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOccurrenceNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOccurrenceNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOccurrenceNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOccurrenceNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.GetOccurrenceNoteRequest} GetOccurrenceNoteRequest
                 */
                GetOccurrenceNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.GetOccurrenceNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.GetOccurrenceNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOccurrenceNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.GetOccurrenceNoteRequest} message GetOccurrenceNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOccurrenceNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOccurrenceNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOccurrenceNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOccurrenceNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.GetOccurrenceNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOccurrenceNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.GetOccurrenceNoteRequest";
                };
    
                return GetOccurrenceNoteRequest;
            })();
    
            v1beta1.ListNotesRequest = (function() {
    
                /**
                 * Properties of a ListNotesRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IListNotesRequest
                 * @property {string|null} [parent] ListNotesRequest parent
                 * @property {string|null} [filter] ListNotesRequest filter
                 * @property {number|null} [pageSize] ListNotesRequest pageSize
                 * @property {string|null} [pageToken] ListNotesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListNotesRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListNotesRequest.
                 * @implements IListNotesRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IListNotesRequest=} [properties] Properties to set
                 */
                function ListNotesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNotesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.parent = "";
    
                /**
                 * ListNotesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.filter = "";
    
                /**
                 * ListNotesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.pageSize = 0;
    
                /**
                 * ListNotesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @instance
                 */
                ListNotesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListNotesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNotesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListNotesRequest} ListNotesRequest instance
                 */
                ListNotesRequest.create = function create(properties) {
                    return new ListNotesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListNotesRequest message. Does not implicitly {@link grafeas.v1beta1.ListNotesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNotesRequest} message ListNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNotesRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListNotesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNotesRequest} message ListNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNotesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListNotesRequest} ListNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListNotesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNotesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListNotesRequest} ListNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNotesRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNotesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNotesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListNotesRequest} ListNotesRequest
                 */
                ListNotesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListNotesRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListNotesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNotesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.ListNotesRequest} message ListNotesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNotesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNotesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNotesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNotesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListNotesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNotesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListNotesRequest";
                };
    
                return ListNotesRequest;
            })();
    
            v1beta1.ListNotesResponse = (function() {
    
                /**
                 * Properties of a ListNotesResponse.
                 * @memberof grafeas.v1beta1
                 * @interface IListNotesResponse
                 * @property {Array.<grafeas.v1beta1.INote>|null} [notes] ListNotesResponse notes
                 * @property {string|null} [nextPageToken] ListNotesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListNotesResponse.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListNotesResponse.
                 * @implements IListNotesResponse
                 * @constructor
                 * @param {grafeas.v1beta1.IListNotesResponse=} [properties] Properties to set
                 */
                function ListNotesResponse(properties) {
                    this.notes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNotesResponse notes.
                 * @member {Array.<grafeas.v1beta1.INote>} notes
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @instance
                 */
                ListNotesResponse.prototype.notes = $util.emptyArray;
    
                /**
                 * ListNotesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @instance
                 */
                ListNotesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListNotesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNotesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListNotesResponse} ListNotesResponse instance
                 */
                ListNotesResponse.create = function create(properties) {
                    return new ListNotesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListNotesResponse message. Does not implicitly {@link grafeas.v1beta1.ListNotesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNotesResponse} message ListNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.notes != null && message.notes.length)
                        for (var i = 0; i < message.notes.length; ++i)
                            $root.grafeas.v1beta1.Note.encode(message.notes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNotesResponse message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListNotesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNotesResponse} message ListNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNotesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNotesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListNotesResponse} ListNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListNotesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.notes && message.notes.length))
                                    message.notes = [];
                                message.notes.push($root.grafeas.v1beta1.Note.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNotesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListNotesResponse} ListNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNotesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNotesResponse message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNotesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!Array.isArray(message.notes))
                            return "notes: array expected";
                        for (var i = 0; i < message.notes.length; ++i) {
                            var error = $root.grafeas.v1beta1.Note.verify(message.notes[i]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNotesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListNotesResponse} ListNotesResponse
                 */
                ListNotesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListNotesResponse)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListNotesResponse();
                    if (object.notes) {
                        if (!Array.isArray(object.notes))
                            throw TypeError(".grafeas.v1beta1.ListNotesResponse.notes: array expected");
                        message.notes = [];
                        for (var i = 0; i < object.notes.length; ++i) {
                            if (typeof object.notes[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.ListNotesResponse.notes: object expected");
                            message.notes[i] = $root.grafeas.v1beta1.Note.fromObject(object.notes[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNotesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.ListNotesResponse} message ListNotesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNotesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.notes = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.notes && message.notes.length) {
                        object.notes = [];
                        for (var j = 0; j < message.notes.length; ++j)
                            object.notes[j] = $root.grafeas.v1beta1.Note.toObject(message.notes[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNotesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNotesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNotesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListNotesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNotesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListNotesResponse";
                };
    
                return ListNotesResponse;
            })();
    
            v1beta1.DeleteNoteRequest = (function() {
    
                /**
                 * Properties of a DeleteNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IDeleteNoteRequest
                 * @property {string|null} [name] DeleteNoteRequest name
                 */
    
                /**
                 * Constructs a new DeleteNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a DeleteNoteRequest.
                 * @implements IDeleteNoteRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IDeleteNoteRequest=} [properties] Properties to set
                 */
                function DeleteNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @instance
                 */
                DeleteNoteRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.DeleteNoteRequest} DeleteNoteRequest instance
                 */
                DeleteNoteRequest.create = function create(properties) {
                    return new DeleteNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteNoteRequest message. Does not implicitly {@link grafeas.v1beta1.DeleteNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteNoteRequest} message DeleteNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.DeleteNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IDeleteNoteRequest} message DeleteNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.DeleteNoteRequest} DeleteNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.DeleteNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.DeleteNoteRequest} DeleteNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.DeleteNoteRequest} DeleteNoteRequest
                 */
                DeleteNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.DeleteNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.DeleteNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.DeleteNoteRequest} message DeleteNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.DeleteNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.DeleteNoteRequest";
                };
    
                return DeleteNoteRequest;
            })();
    
            v1beta1.CreateNoteRequest = (function() {
    
                /**
                 * Properties of a CreateNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @interface ICreateNoteRequest
                 * @property {string|null} [parent] CreateNoteRequest parent
                 * @property {string|null} [noteId] CreateNoteRequest noteId
                 * @property {grafeas.v1beta1.INote|null} [note] CreateNoteRequest note
                 */
    
                /**
                 * Constructs a new CreateNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a CreateNoteRequest.
                 * @implements ICreateNoteRequest
                 * @constructor
                 * @param {grafeas.v1beta1.ICreateNoteRequest=} [properties] Properties to set
                 */
                function CreateNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CreateNoteRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.parent = "";
    
                /**
                 * CreateNoteRequest noteId.
                 * @member {string} noteId
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.noteId = "";
    
                /**
                 * CreateNoteRequest note.
                 * @member {grafeas.v1beta1.INote|null|undefined} note
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @instance
                 */
                CreateNoteRequest.prototype.note = null;
    
                /**
                 * Creates a new CreateNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.CreateNoteRequest} CreateNoteRequest instance
                 */
                CreateNoteRequest.create = function create(properties) {
                    return new CreateNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified CreateNoteRequest message. Does not implicitly {@link grafeas.v1beta1.CreateNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateNoteRequest} message CreateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.noteId != null && Object.hasOwnProperty.call(message, "noteId"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.noteId);
                    if (message.note != null && Object.hasOwnProperty.call(message, "note"))
                        $root.grafeas.v1beta1.Note.encode(message.note, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CreateNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.CreateNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.ICreateNoteRequest} message CreateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CreateNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.CreateNoteRequest} CreateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.CreateNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.noteId = reader.string();
                                break;
                            }
                        case 3: {
                                message.note = $root.grafeas.v1beta1.Note.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CreateNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.CreateNoteRequest} CreateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CreateNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CreateNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.noteId != null && message.hasOwnProperty("noteId"))
                        if (!$util.isString(message.noteId))
                            return "noteId: string expected";
                    if (message.note != null && message.hasOwnProperty("note")) {
                        var error = $root.grafeas.v1beta1.Note.verify(message.note);
                        if (error)
                            return "note." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CreateNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.CreateNoteRequest} CreateNoteRequest
                 */
                CreateNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.CreateNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.CreateNoteRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.noteId != null)
                        message.noteId = String(object.noteId);
                    if (object.note != null) {
                        if (typeof object.note !== "object")
                            throw TypeError(".grafeas.v1beta1.CreateNoteRequest.note: object expected");
                        message.note = $root.grafeas.v1beta1.Note.fromObject(object.note);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CreateNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.CreateNoteRequest} message CreateNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CreateNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.noteId = "";
                        object.note = null;
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.noteId != null && message.hasOwnProperty("noteId"))
                        object.noteId = message.noteId;
                    if (message.note != null && message.hasOwnProperty("note"))
                        object.note = $root.grafeas.v1beta1.Note.toObject(message.note, options);
                    return object;
                };
    
                /**
                 * Converts this CreateNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CreateNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CreateNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.CreateNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CreateNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.CreateNoteRequest";
                };
    
                return CreateNoteRequest;
            })();
    
            v1beta1.UpdateNoteRequest = (function() {
    
                /**
                 * Properties of an UpdateNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IUpdateNoteRequest
                 * @property {string|null} [name] UpdateNoteRequest name
                 * @property {grafeas.v1beta1.INote|null} [note] UpdateNoteRequest note
                 * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateNoteRequest updateMask
                 */
    
                /**
                 * Constructs a new UpdateNoteRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents an UpdateNoteRequest.
                 * @implements IUpdateNoteRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IUpdateNoteRequest=} [properties] Properties to set
                 */
                function UpdateNoteRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UpdateNoteRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.name = "";
    
                /**
                 * UpdateNoteRequest note.
                 * @member {grafeas.v1beta1.INote|null|undefined} note
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.note = null;
    
                /**
                 * UpdateNoteRequest updateMask.
                 * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @instance
                 */
                UpdateNoteRequest.prototype.updateMask = null;
    
                /**
                 * Creates a new UpdateNoteRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateNoteRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.UpdateNoteRequest} UpdateNoteRequest instance
                 */
                UpdateNoteRequest.create = function create(properties) {
                    return new UpdateNoteRequest(properties);
                };
    
                /**
                 * Encodes the specified UpdateNoteRequest message. Does not implicitly {@link grafeas.v1beta1.UpdateNoteRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateNoteRequest} message UpdateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateNoteRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.note != null && Object.hasOwnProperty.call(message, "note"))
                        $root.grafeas.v1beta1.Note.encode(message.note, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                        $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UpdateNoteRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.UpdateNoteRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.IUpdateNoteRequest} message UpdateNoteRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateNoteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UpdateNoteRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.UpdateNoteRequest} UpdateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateNoteRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.UpdateNoteRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.note = $root.grafeas.v1beta1.Note.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UpdateNoteRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.UpdateNoteRequest} UpdateNoteRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateNoteRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UpdateNoteRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UpdateNoteRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.note != null && message.hasOwnProperty("note")) {
                        var error = $root.grafeas.v1beta1.Note.verify(message.note);
                        if (error)
                            return "note." + error;
                    }
                    if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                        var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                        if (error)
                            return "updateMask." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an UpdateNoteRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.UpdateNoteRequest} UpdateNoteRequest
                 */
                UpdateNoteRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.UpdateNoteRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.UpdateNoteRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.note != null) {
                        if (typeof object.note !== "object")
                            throw TypeError(".grafeas.v1beta1.UpdateNoteRequest.note: object expected");
                        message.note = $root.grafeas.v1beta1.Note.fromObject(object.note);
                    }
                    if (object.updateMask != null) {
                        if (typeof object.updateMask !== "object")
                            throw TypeError(".grafeas.v1beta1.UpdateNoteRequest.updateMask: object expected");
                        message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an UpdateNoteRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {grafeas.v1beta1.UpdateNoteRequest} message UpdateNoteRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UpdateNoteRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.note = null;
                        object.updateMask = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.note != null && message.hasOwnProperty("note"))
                        object.note = $root.grafeas.v1beta1.Note.toObject(message.note, options);
                    if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                        object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                    return object;
                };
    
                /**
                 * Converts this UpdateNoteRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UpdateNoteRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UpdateNoteRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.UpdateNoteRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UpdateNoteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.UpdateNoteRequest";
                };
    
                return UpdateNoteRequest;
            })();
    
            v1beta1.ListNoteOccurrencesRequest = (function() {
    
                /**
                 * Properties of a ListNoteOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IListNoteOccurrencesRequest
                 * @property {string|null} [name] ListNoteOccurrencesRequest name
                 * @property {string|null} [filter] ListNoteOccurrencesRequest filter
                 * @property {number|null} [pageSize] ListNoteOccurrencesRequest pageSize
                 * @property {string|null} [pageToken] ListNoteOccurrencesRequest pageToken
                 */
    
                /**
                 * Constructs a new ListNoteOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListNoteOccurrencesRequest.
                 * @implements IListNoteOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest=} [properties] Properties to set
                 */
                function ListNoteOccurrencesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNoteOccurrencesRequest name.
                 * @member {string} name
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.name = "";
    
                /**
                 * ListNoteOccurrencesRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.filter = "";
    
                /**
                 * ListNoteOccurrencesRequest pageSize.
                 * @member {number} pageSize
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.pageSize = 0;
    
                /**
                 * ListNoteOccurrencesRequest pageToken.
                 * @member {string} pageToken
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @instance
                 */
                ListNoteOccurrencesRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListNoteOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest instance
                 */
                ListNoteOccurrencesRequest.create = function create(properties) {
                    return new ListNoteOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesRequest message. Does not implicitly {@link grafeas.v1beta1.ListNoteOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest} message ListNoteOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListNoteOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesRequest} message ListNoteOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNoteOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListNoteOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        case 3: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 4: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNoteOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNoteOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNoteOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNoteOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesRequest} ListNoteOccurrencesRequest
                 */
                ListNoteOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListNoteOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListNoteOccurrencesRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNoteOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.ListNoteOccurrencesRequest} message ListNoteOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNoteOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNoteOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNoteOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNoteOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNoteOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListNoteOccurrencesRequest";
                };
    
                return ListNoteOccurrencesRequest;
            })();
    
            v1beta1.ListNoteOccurrencesResponse = (function() {
    
                /**
                 * Properties of a ListNoteOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @interface IListNoteOccurrencesResponse
                 * @property {Array.<grafeas.v1beta1.IOccurrence>|null} [occurrences] ListNoteOccurrencesResponse occurrences
                 * @property {string|null} [nextPageToken] ListNoteOccurrencesResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListNoteOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a ListNoteOccurrencesResponse.
                 * @implements IListNoteOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1beta1.IListNoteOccurrencesResponse=} [properties] Properties to set
                 */
                function ListNoteOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListNoteOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1beta1.IOccurrence>} occurrences
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @instance
                 */
                ListNoteOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * ListNoteOccurrencesResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @instance
                 */
                ListNoteOccurrencesResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListNoteOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse instance
                 */
                ListNoteOccurrencesResponse.create = function create(properties) {
                    return new ListNoteOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesResponse message. Does not implicitly {@link grafeas.v1beta1.ListNoteOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesResponse} message ListNoteOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1beta1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListNoteOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1beta1.ListNoteOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IListNoteOccurrencesResponse} message ListNoteOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListNoteOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListNoteOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.ListNoteOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListNoteOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListNoteOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListNoteOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListNoteOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListNoteOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.ListNoteOccurrencesResponse} ListNoteOccurrencesResponse
                 */
                ListNoteOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.ListNoteOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1beta1.ListNoteOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.ListNoteOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListNoteOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.ListNoteOccurrencesResponse} message ListNoteOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListNoteOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListNoteOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListNoteOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListNoteOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.ListNoteOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListNoteOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.ListNoteOccurrencesResponse";
                };
    
                return ListNoteOccurrencesResponse;
            })();
    
            v1beta1.BatchCreateNotesRequest = (function() {
    
                /**
                 * Properties of a BatchCreateNotesRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IBatchCreateNotesRequest
                 * @property {string|null} [parent] BatchCreateNotesRequest parent
                 * @property {Object.<string,grafeas.v1beta1.INote>|null} [notes] BatchCreateNotesRequest notes
                 */
    
                /**
                 * Constructs a new BatchCreateNotesRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a BatchCreateNotesRequest.
                 * @implements IBatchCreateNotesRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest=} [properties] Properties to set
                 */
                function BatchCreateNotesRequest(properties) {
                    this.notes = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateNotesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @instance
                 */
                BatchCreateNotesRequest.prototype.parent = "";
    
                /**
                 * BatchCreateNotesRequest notes.
                 * @member {Object.<string,grafeas.v1beta1.INote>} notes
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @instance
                 */
                BatchCreateNotesRequest.prototype.notes = $util.emptyObject;
    
                /**
                 * Creates a new BatchCreateNotesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.BatchCreateNotesRequest} BatchCreateNotesRequest instance
                 */
                BatchCreateNotesRequest.create = function create(properties) {
                    return new BatchCreateNotesRequest(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateNotesRequest message. Does not implicitly {@link grafeas.v1beta1.BatchCreateNotesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest} message BatchCreateNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.notes != null && Object.hasOwnProperty.call(message, "notes"))
                        for (var keys = Object.keys(message.notes), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.grafeas.v1beta1.Note.encode(message.notes[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateNotesRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.BatchCreateNotesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesRequest} message BatchCreateNotesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateNotesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.BatchCreateNotesRequest(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.notes === $util.emptyObject)
                                    message.notes = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.grafeas.v1beta1.Note.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.notes[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateNotesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateNotesRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateNotesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!$util.isObject(message.notes))
                            return "notes: object expected";
                        var key = Object.keys(message.notes);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.grafeas.v1beta1.Note.verify(message.notes[key[i]]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateNotesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.BatchCreateNotesRequest} BatchCreateNotesRequest
                 */
                BatchCreateNotesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.BatchCreateNotesRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.BatchCreateNotesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.notes) {
                        if (typeof object.notes !== "object")
                            throw TypeError(".grafeas.v1beta1.BatchCreateNotesRequest.notes: object expected");
                        message.notes = {};
                        for (var keys = Object.keys(object.notes), i = 0; i < keys.length; ++i) {
                            if (typeof object.notes[keys[i]] !== "object")
                                throw TypeError(".grafeas.v1beta1.BatchCreateNotesRequest.notes: object expected");
                            message.notes[keys[i]] = $root.grafeas.v1beta1.Note.fromObject(object.notes[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateNotesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {grafeas.v1beta1.BatchCreateNotesRequest} message BatchCreateNotesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateNotesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.notes = {};
                    if (options.defaults)
                        object.parent = "";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    var keys2;
                    if (message.notes && (keys2 = Object.keys(message.notes)).length) {
                        object.notes = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.notes[keys2[j]] = $root.grafeas.v1beta1.Note.toObject(message.notes[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateNotesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateNotesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateNotesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.BatchCreateNotesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateNotesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.BatchCreateNotesRequest";
                };
    
                return BatchCreateNotesRequest;
            })();
    
            v1beta1.BatchCreateNotesResponse = (function() {
    
                /**
                 * Properties of a BatchCreateNotesResponse.
                 * @memberof grafeas.v1beta1
                 * @interface IBatchCreateNotesResponse
                 * @property {Array.<grafeas.v1beta1.INote>|null} [notes] BatchCreateNotesResponse notes
                 */
    
                /**
                 * Constructs a new BatchCreateNotesResponse.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a BatchCreateNotesResponse.
                 * @implements IBatchCreateNotesResponse
                 * @constructor
                 * @param {grafeas.v1beta1.IBatchCreateNotesResponse=} [properties] Properties to set
                 */
                function BatchCreateNotesResponse(properties) {
                    this.notes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateNotesResponse notes.
                 * @member {Array.<grafeas.v1beta1.INote>} notes
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @instance
                 */
                BatchCreateNotesResponse.prototype.notes = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateNotesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.BatchCreateNotesResponse} BatchCreateNotesResponse instance
                 */
                BatchCreateNotesResponse.create = function create(properties) {
                    return new BatchCreateNotesResponse(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateNotesResponse message. Does not implicitly {@link grafeas.v1beta1.BatchCreateNotesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesResponse} message BatchCreateNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.notes != null && message.notes.length)
                        for (var i = 0; i < message.notes.length; ++i)
                            $root.grafeas.v1beta1.Note.encode(message.notes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateNotesResponse message, length delimited. Does not implicitly {@link grafeas.v1beta1.BatchCreateNotesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateNotesResponse} message BatchCreateNotesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateNotesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateNotesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.BatchCreateNotesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.notes && message.notes.length))
                                    message.notes = [];
                                message.notes.push($root.grafeas.v1beta1.Note.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateNotesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateNotesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateNotesResponse message.
                 * @function verify
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateNotesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.notes != null && message.hasOwnProperty("notes")) {
                        if (!Array.isArray(message.notes))
                            return "notes: array expected";
                        for (var i = 0; i < message.notes.length; ++i) {
                            var error = $root.grafeas.v1beta1.Note.verify(message.notes[i]);
                            if (error)
                                return "notes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateNotesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.BatchCreateNotesResponse} BatchCreateNotesResponse
                 */
                BatchCreateNotesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.BatchCreateNotesResponse)
                        return object;
                    var message = new $root.grafeas.v1beta1.BatchCreateNotesResponse();
                    if (object.notes) {
                        if (!Array.isArray(object.notes))
                            throw TypeError(".grafeas.v1beta1.BatchCreateNotesResponse.notes: array expected");
                        message.notes = [];
                        for (var i = 0; i < object.notes.length; ++i) {
                            if (typeof object.notes[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.BatchCreateNotesResponse.notes: object expected");
                            message.notes[i] = $root.grafeas.v1beta1.Note.fromObject(object.notes[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateNotesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {grafeas.v1beta1.BatchCreateNotesResponse} message BatchCreateNotesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateNotesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.notes = [];
                    if (message.notes && message.notes.length) {
                        object.notes = [];
                        for (var j = 0; j < message.notes.length; ++j)
                            object.notes[j] = $root.grafeas.v1beta1.Note.toObject(message.notes[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateNotesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateNotesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateNotesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.BatchCreateNotesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateNotesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.BatchCreateNotesResponse";
                };
    
                return BatchCreateNotesResponse;
            })();
    
            v1beta1.BatchCreateOccurrencesRequest = (function() {
    
                /**
                 * Properties of a BatchCreateOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IBatchCreateOccurrencesRequest
                 * @property {string|null} [parent] BatchCreateOccurrencesRequest parent
                 * @property {Array.<grafeas.v1beta1.IOccurrence>|null} [occurrences] BatchCreateOccurrencesRequest occurrences
                 */
    
                /**
                 * Constructs a new BatchCreateOccurrencesRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a BatchCreateOccurrencesRequest.
                 * @implements IBatchCreateOccurrencesRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest=} [properties] Properties to set
                 */
                function BatchCreateOccurrencesRequest(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateOccurrencesRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @instance
                 */
                BatchCreateOccurrencesRequest.prototype.parent = "";
    
                /**
                 * BatchCreateOccurrencesRequest occurrences.
                 * @member {Array.<grafeas.v1beta1.IOccurrence>} occurrences
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @instance
                 */
                BatchCreateOccurrencesRequest.prototype.occurrences = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateOccurrencesRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest instance
                 */
                BatchCreateOccurrencesRequest.create = function create(properties) {
                    return new BatchCreateOccurrencesRequest(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesRequest message. Does not implicitly {@link grafeas.v1beta1.BatchCreateOccurrencesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1beta1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.BatchCreateOccurrencesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.BatchCreateOccurrencesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateOccurrencesRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateOccurrencesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateOccurrencesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesRequest} BatchCreateOccurrencesRequest
                 */
                BatchCreateOccurrencesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.BatchCreateOccurrencesRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.BatchCreateOccurrencesRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.BatchCreateOccurrencesRequest.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateOccurrencesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {grafeas.v1beta1.BatchCreateOccurrencesRequest} message BatchCreateOccurrencesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateOccurrencesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (options.defaults)
                        object.parent = "";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateOccurrencesRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateOccurrencesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateOccurrencesRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateOccurrencesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.BatchCreateOccurrencesRequest";
                };
    
                return BatchCreateOccurrencesRequest;
            })();
    
            v1beta1.BatchCreateOccurrencesResponse = (function() {
    
                /**
                 * Properties of a BatchCreateOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @interface IBatchCreateOccurrencesResponse
                 * @property {Array.<grafeas.v1beta1.IOccurrence>|null} [occurrences] BatchCreateOccurrencesResponse occurrences
                 */
    
                /**
                 * Constructs a new BatchCreateOccurrencesResponse.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a BatchCreateOccurrencesResponse.
                 * @implements IBatchCreateOccurrencesResponse
                 * @constructor
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesResponse=} [properties] Properties to set
                 */
                function BatchCreateOccurrencesResponse(properties) {
                    this.occurrences = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BatchCreateOccurrencesResponse occurrences.
                 * @member {Array.<grafeas.v1beta1.IOccurrence>} occurrences
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @instance
                 */
                BatchCreateOccurrencesResponse.prototype.occurrences = $util.emptyArray;
    
                /**
                 * Creates a new BatchCreateOccurrencesResponse instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesResponse=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse instance
                 */
                BatchCreateOccurrencesResponse.create = function create(properties) {
                    return new BatchCreateOccurrencesResponse(properties);
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesResponse message. Does not implicitly {@link grafeas.v1beta1.BatchCreateOccurrencesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.occurrences != null && message.occurrences.length)
                        for (var i = 0; i < message.occurrences.length; ++i)
                            $root.grafeas.v1beta1.Occurrence.encode(message.occurrences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BatchCreateOccurrencesResponse message, length delimited. Does not implicitly {@link grafeas.v1beta1.BatchCreateOccurrencesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.IBatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BatchCreateOccurrencesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.BatchCreateOccurrencesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.occurrences && message.occurrences.length))
                                    message.occurrences = [];
                                message.occurrences.push($root.grafeas.v1beta1.Occurrence.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BatchCreateOccurrencesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BatchCreateOccurrencesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BatchCreateOccurrencesResponse message.
                 * @function verify
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BatchCreateOccurrencesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.occurrences != null && message.hasOwnProperty("occurrences")) {
                        if (!Array.isArray(message.occurrences))
                            return "occurrences: array expected";
                        for (var i = 0; i < message.occurrences.length; ++i) {
                            var error = $root.grafeas.v1beta1.Occurrence.verify(message.occurrences[i]);
                            if (error)
                                return "occurrences." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a BatchCreateOccurrencesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.BatchCreateOccurrencesResponse} BatchCreateOccurrencesResponse
                 */
                BatchCreateOccurrencesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.BatchCreateOccurrencesResponse)
                        return object;
                    var message = new $root.grafeas.v1beta1.BatchCreateOccurrencesResponse();
                    if (object.occurrences) {
                        if (!Array.isArray(object.occurrences))
                            throw TypeError(".grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences: array expected");
                        message.occurrences = [];
                        for (var i = 0; i < object.occurrences.length; ++i) {
                            if (typeof object.occurrences[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.BatchCreateOccurrencesResponse.occurrences: object expected");
                            message.occurrences[i] = $root.grafeas.v1beta1.Occurrence.fromObject(object.occurrences[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BatchCreateOccurrencesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {grafeas.v1beta1.BatchCreateOccurrencesResponse} message BatchCreateOccurrencesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BatchCreateOccurrencesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.occurrences = [];
                    if (message.occurrences && message.occurrences.length) {
                        object.occurrences = [];
                        for (var j = 0; j < message.occurrences.length; ++j)
                            object.occurrences[j] = $root.grafeas.v1beta1.Occurrence.toObject(message.occurrences[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this BatchCreateOccurrencesResponse to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BatchCreateOccurrencesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BatchCreateOccurrencesResponse
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.BatchCreateOccurrencesResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BatchCreateOccurrencesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.BatchCreateOccurrencesResponse";
                };
    
                return BatchCreateOccurrencesResponse;
            })();
    
            v1beta1.GetVulnerabilityOccurrencesSummaryRequest = (function() {
    
                /**
                 * Properties of a GetVulnerabilityOccurrencesSummaryRequest.
                 * @memberof grafeas.v1beta1
                 * @interface IGetVulnerabilityOccurrencesSummaryRequest
                 * @property {string|null} [parent] GetVulnerabilityOccurrencesSummaryRequest parent
                 * @property {string|null} [filter] GetVulnerabilityOccurrencesSummaryRequest filter
                 */
    
                /**
                 * Constructs a new GetVulnerabilityOccurrencesSummaryRequest.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a GetVulnerabilityOccurrencesSummaryRequest.
                 * @implements IGetVulnerabilityOccurrencesSummaryRequest
                 * @constructor
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest=} [properties] Properties to set
                 */
                function GetVulnerabilityOccurrencesSummaryRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetVulnerabilityOccurrencesSummaryRequest parent.
                 * @member {string} parent
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @instance
                 */
                GetVulnerabilityOccurrencesSummaryRequest.prototype.parent = "";
    
                /**
                 * GetVulnerabilityOccurrencesSummaryRequest filter.
                 * @member {string} filter
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @instance
                 */
                GetVulnerabilityOccurrencesSummaryRequest.prototype.filter = "";
    
                /**
                 * Creates a new GetVulnerabilityOccurrencesSummaryRequest instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest} GetVulnerabilityOccurrencesSummaryRequest instance
                 */
                GetVulnerabilityOccurrencesSummaryRequest.create = function create(properties) {
                    return new GetVulnerabilityOccurrencesSummaryRequest(properties);
                };
    
                /**
                 * Encodes the specified GetVulnerabilityOccurrencesSummaryRequest message. Does not implicitly {@link grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest} message GetVulnerabilityOccurrencesSummaryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetVulnerabilityOccurrencesSummaryRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetVulnerabilityOccurrencesSummaryRequest message, length delimited. Does not implicitly {@link grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {grafeas.v1beta1.IGetVulnerabilityOccurrencesSummaryRequest} message GetVulnerabilityOccurrencesSummaryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetVulnerabilityOccurrencesSummaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetVulnerabilityOccurrencesSummaryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest} GetVulnerabilityOccurrencesSummaryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetVulnerabilityOccurrencesSummaryRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.parent = reader.string();
                                break;
                            }
                        case 2: {
                                message.filter = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetVulnerabilityOccurrencesSummaryRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest} GetVulnerabilityOccurrencesSummaryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetVulnerabilityOccurrencesSummaryRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetVulnerabilityOccurrencesSummaryRequest message.
                 * @function verify
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetVulnerabilityOccurrencesSummaryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        if (!$util.isString(message.parent))
                            return "parent: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetVulnerabilityOccurrencesSummaryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest} GetVulnerabilityOccurrencesSummaryRequest
                 */
                GetVulnerabilityOccurrencesSummaryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest)
                        return object;
                    var message = new $root.grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest();
                    if (object.parent != null)
                        message.parent = String(object.parent);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetVulnerabilityOccurrencesSummaryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest} message GetVulnerabilityOccurrencesSummaryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetVulnerabilityOccurrencesSummaryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.parent = "";
                        object.filter = "";
                    }
                    if (message.parent != null && message.hasOwnProperty("parent"))
                        object.parent = message.parent;
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    return object;
                };
    
                /**
                 * Converts this GetVulnerabilityOccurrencesSummaryRequest to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetVulnerabilityOccurrencesSummaryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetVulnerabilityOccurrencesSummaryRequest
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetVulnerabilityOccurrencesSummaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest";
                };
    
                return GetVulnerabilityOccurrencesSummaryRequest;
            })();
    
            v1beta1.VulnerabilityOccurrencesSummary = (function() {
    
                /**
                 * Properties of a VulnerabilityOccurrencesSummary.
                 * @memberof grafeas.v1beta1
                 * @interface IVulnerabilityOccurrencesSummary
                 * @property {Array.<grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest>|null} [counts] VulnerabilityOccurrencesSummary counts
                 */
    
                /**
                 * Constructs a new VulnerabilityOccurrencesSummary.
                 * @memberof grafeas.v1beta1
                 * @classdesc Represents a VulnerabilityOccurrencesSummary.
                 * @implements IVulnerabilityOccurrencesSummary
                 * @constructor
                 * @param {grafeas.v1beta1.IVulnerabilityOccurrencesSummary=} [properties] Properties to set
                 */
                function VulnerabilityOccurrencesSummary(properties) {
                    this.counts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VulnerabilityOccurrencesSummary counts.
                 * @member {Array.<grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest>} counts
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @instance
                 */
                VulnerabilityOccurrencesSummary.prototype.counts = $util.emptyArray;
    
                /**
                 * Creates a new VulnerabilityOccurrencesSummary instance using the specified properties.
                 * @function create
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {grafeas.v1beta1.IVulnerabilityOccurrencesSummary=} [properties] Properties to set
                 * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary} VulnerabilityOccurrencesSummary instance
                 */
                VulnerabilityOccurrencesSummary.create = function create(properties) {
                    return new VulnerabilityOccurrencesSummary(properties);
                };
    
                /**
                 * Encodes the specified VulnerabilityOccurrencesSummary message. Does not implicitly {@link grafeas.v1beta1.VulnerabilityOccurrencesSummary.verify|verify} messages.
                 * @function encode
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {grafeas.v1beta1.IVulnerabilityOccurrencesSummary} message VulnerabilityOccurrencesSummary message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityOccurrencesSummary.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.counts != null && message.counts.length)
                        for (var i = 0; i < message.counts.length; ++i)
                            $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.encode(message.counts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VulnerabilityOccurrencesSummary message, length delimited. Does not implicitly {@link grafeas.v1beta1.VulnerabilityOccurrencesSummary.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {grafeas.v1beta1.IVulnerabilityOccurrencesSummary} message VulnerabilityOccurrencesSummary message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VulnerabilityOccurrencesSummary.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VulnerabilityOccurrencesSummary message from the specified reader or buffer.
                 * @function decode
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary} VulnerabilityOccurrencesSummary
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityOccurrencesSummary.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.counts && message.counts.length))
                                    message.counts = [];
                                message.counts.push($root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VulnerabilityOccurrencesSummary message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary} VulnerabilityOccurrencesSummary
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VulnerabilityOccurrencesSummary.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VulnerabilityOccurrencesSummary message.
                 * @function verify
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VulnerabilityOccurrencesSummary.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.counts != null && message.hasOwnProperty("counts")) {
                        if (!Array.isArray(message.counts))
                            return "counts: array expected";
                        for (var i = 0; i < message.counts.length; ++i) {
                            var error = $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.verify(message.counts[i]);
                            if (error)
                                return "counts." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a VulnerabilityOccurrencesSummary message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary} VulnerabilityOccurrencesSummary
                 */
                VulnerabilityOccurrencesSummary.fromObject = function fromObject(object) {
                    if (object instanceof $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary)
                        return object;
                    var message = new $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary();
                    if (object.counts) {
                        if (!Array.isArray(object.counts))
                            throw TypeError(".grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts: array expected");
                        message.counts = [];
                        for (var i = 0; i < object.counts.length; ++i) {
                            if (typeof object.counts[i] !== "object")
                                throw TypeError(".grafeas.v1beta1.VulnerabilityOccurrencesSummary.counts: object expected");
                            message.counts[i] = $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.fromObject(object.counts[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VulnerabilityOccurrencesSummary message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary} message VulnerabilityOccurrencesSummary
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VulnerabilityOccurrencesSummary.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.counts = [];
                    if (message.counts && message.counts.length) {
                        object.counts = [];
                        for (var j = 0; j < message.counts.length; ++j)
                            object.counts[j] = $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.toObject(message.counts[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this VulnerabilityOccurrencesSummary to JSON.
                 * @function toJSON
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VulnerabilityOccurrencesSummary.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for VulnerabilityOccurrencesSummary
                 * @function getTypeUrl
                 * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VulnerabilityOccurrencesSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/grafeas.v1beta1.VulnerabilityOccurrencesSummary";
                };
    
                VulnerabilityOccurrencesSummary.FixableTotalByDigest = (function() {
    
                    /**
                     * Properties of a FixableTotalByDigest.
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                     * @interface IFixableTotalByDigest
                     * @property {grafeas.v1beta1.IResource|null} [resource] FixableTotalByDigest resource
                     * @property {grafeas.v1beta1.vulnerability.Severity|null} [severity] FixableTotalByDigest severity
                     * @property {number|Long|null} [fixableCount] FixableTotalByDigest fixableCount
                     * @property {number|Long|null} [totalCount] FixableTotalByDigest totalCount
                     */
    
                    /**
                     * Constructs a new FixableTotalByDigest.
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary
                     * @classdesc Represents a FixableTotalByDigest.
                     * @implements IFixableTotalByDigest
                     * @constructor
                     * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest=} [properties] Properties to set
                     */
                    function FixableTotalByDigest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FixableTotalByDigest resource.
                     * @member {grafeas.v1beta1.IResource|null|undefined} resource
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @instance
                     */
                    FixableTotalByDigest.prototype.resource = null;
    
                    /**
                     * FixableTotalByDigest severity.
                     * @member {grafeas.v1beta1.vulnerability.Severity} severity
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @instance
                     */
                    FixableTotalByDigest.prototype.severity = 0;
    
                    /**
                     * FixableTotalByDigest fixableCount.
                     * @member {number|Long} fixableCount
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @instance
                     */
                    FixableTotalByDigest.prototype.fixableCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * FixableTotalByDigest totalCount.
                     * @member {number|Long} totalCount
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @instance
                     */
                    FixableTotalByDigest.prototype.totalCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new FixableTotalByDigest instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest} FixableTotalByDigest instance
                     */
                    FixableTotalByDigest.create = function create(properties) {
                        return new FixableTotalByDigest(properties);
                    };
    
                    /**
                     * Encodes the specified FixableTotalByDigest message. Does not implicitly {@link grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest} message FixableTotalByDigest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FixableTotalByDigest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            $root.grafeas.v1beta1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severity);
                        if (message.fixableCount != null && Object.hasOwnProperty.call(message, "fixableCount"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.fixableCount);
                        if (message.totalCount != null && Object.hasOwnProperty.call(message, "totalCount"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.totalCount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FixableTotalByDigest message, length delimited. Does not implicitly {@link grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary.IFixableTotalByDigest} message FixableTotalByDigest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FixableTotalByDigest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FixableTotalByDigest message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest} FixableTotalByDigest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FixableTotalByDigest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resource = $root.grafeas.v1beta1.Resource.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.severity = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.fixableCount = reader.int64();
                                    break;
                                }
                            case 4: {
                                    message.totalCount = reader.int64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FixableTotalByDigest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest} FixableTotalByDigest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FixableTotalByDigest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FixableTotalByDigest message.
                     * @function verify
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FixableTotalByDigest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource")) {
                            var error = $root.grafeas.v1beta1.Resource.verify(message.resource);
                            if (error)
                                return "resource." + error;
                        }
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            switch (message.severity) {
                            default:
                                return "severity: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.fixableCount != null && message.hasOwnProperty("fixableCount"))
                            if (!$util.isInteger(message.fixableCount) && !(message.fixableCount && $util.isInteger(message.fixableCount.low) && $util.isInteger(message.fixableCount.high)))
                                return "fixableCount: integer|Long expected";
                        if (message.totalCount != null && message.hasOwnProperty("totalCount"))
                            if (!$util.isInteger(message.totalCount) && !(message.totalCount && $util.isInteger(message.totalCount.low) && $util.isInteger(message.totalCount.high)))
                                return "totalCount: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a FixableTotalByDigest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest} FixableTotalByDigest
                     */
                    FixableTotalByDigest.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest)
                            return object;
                        var message = new $root.grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest();
                        if (object.resource != null) {
                            if (typeof object.resource !== "object")
                                throw TypeError(".grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.resource: object expected");
                            message.resource = $root.grafeas.v1beta1.Resource.fromObject(object.resource);
                        }
                        switch (object.severity) {
                        default:
                            if (typeof object.severity === "number") {
                                message.severity = object.severity;
                                break;
                            }
                            break;
                        case "SEVERITY_UNSPECIFIED":
                        case 0:
                            message.severity = 0;
                            break;
                        case "MINIMAL":
                        case 1:
                            message.severity = 1;
                            break;
                        case "LOW":
                        case 2:
                            message.severity = 2;
                            break;
                        case "MEDIUM":
                        case 3:
                            message.severity = 3;
                            break;
                        case "HIGH":
                        case 4:
                            message.severity = 4;
                            break;
                        case "CRITICAL":
                        case 5:
                            message.severity = 5;
                            break;
                        }
                        if (object.fixableCount != null)
                            if ($util.Long)
                                (message.fixableCount = $util.Long.fromValue(object.fixableCount)).unsigned = false;
                            else if (typeof object.fixableCount === "string")
                                message.fixableCount = parseInt(object.fixableCount, 10);
                            else if (typeof object.fixableCount === "number")
                                message.fixableCount = object.fixableCount;
                            else if (typeof object.fixableCount === "object")
                                message.fixableCount = new $util.LongBits(object.fixableCount.low >>> 0, object.fixableCount.high >>> 0).toNumber();
                        if (object.totalCount != null)
                            if ($util.Long)
                                (message.totalCount = $util.Long.fromValue(object.totalCount)).unsigned = false;
                            else if (typeof object.totalCount === "string")
                                message.totalCount = parseInt(object.totalCount, 10);
                            else if (typeof object.totalCount === "number")
                                message.totalCount = object.totalCount;
                            else if (typeof object.totalCount === "object")
                                message.totalCount = new $util.LongBits(object.totalCount.low >>> 0, object.totalCount.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FixableTotalByDigest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest} message FixableTotalByDigest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FixableTotalByDigest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = null;
                            object.severity = options.enums === String ? "SEVERITY_UNSPECIFIED" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.fixableCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.fixableCount = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.totalCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.totalCount = options.longs === String ? "0" : 0;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = $root.grafeas.v1beta1.Resource.toObject(message.resource, options);
                        if (message.severity != null && message.hasOwnProperty("severity"))
                            object.severity = options.enums === String ? $root.grafeas.v1beta1.vulnerability.Severity[message.severity] === undefined ? message.severity : $root.grafeas.v1beta1.vulnerability.Severity[message.severity] : message.severity;
                        if (message.fixableCount != null && message.hasOwnProperty("fixableCount"))
                            if (typeof message.fixableCount === "number")
                                object.fixableCount = options.longs === String ? String(message.fixableCount) : message.fixableCount;
                            else
                                object.fixableCount = options.longs === String ? $util.Long.prototype.toString.call(message.fixableCount) : options.longs === Number ? new $util.LongBits(message.fixableCount.low >>> 0, message.fixableCount.high >>> 0).toNumber() : message.fixableCount;
                        if (message.totalCount != null && message.hasOwnProperty("totalCount"))
                            if (typeof message.totalCount === "number")
                                object.totalCount = options.longs === String ? String(message.totalCount) : message.totalCount;
                            else
                                object.totalCount = options.longs === String ? $util.Long.prototype.toString.call(message.totalCount) : options.longs === Number ? new $util.LongBits(message.totalCount.low >>> 0, message.totalCount.high >>> 0).toNumber() : message.totalCount;
                        return object;
                    };
    
                    /**
                     * Converts this FixableTotalByDigest to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FixableTotalByDigest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for FixableTotalByDigest
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    FixableTotalByDigest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest";
                    };
    
                    return FixableTotalByDigest;
                })();
    
                return VulnerabilityOccurrencesSummary;
            })();
    
            v1beta1.image = (function() {
    
                /**
                 * Namespace image.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var image = {};
    
                image.Layer = (function() {
    
                    /**
                     * Properties of a Layer.
                     * @memberof grafeas.v1beta1.image
                     * @interface ILayer
                     * @property {grafeas.v1beta1.image.Layer.Directive|null} [directive] Layer directive
                     * @property {string|null} ["arguments"] Layer arguments
                     */
    
                    /**
                     * Constructs a new Layer.
                     * @memberof grafeas.v1beta1.image
                     * @classdesc Represents a Layer.
                     * @implements ILayer
                     * @constructor
                     * @param {grafeas.v1beta1.image.ILayer=} [properties] Properties to set
                     */
                    function Layer(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Layer directive.
                     * @member {grafeas.v1beta1.image.Layer.Directive} directive
                     * @memberof grafeas.v1beta1.image.Layer
                     * @instance
                     */
                    Layer.prototype.directive = 0;
    
                    /**
                     * Layer arguments.
                     * @member {string} arguments
                     * @memberof grafeas.v1beta1.image.Layer
                     * @instance
                     */
                    Layer.prototype["arguments"] = "";
    
                    /**
                     * Creates a new Layer instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {grafeas.v1beta1.image.ILayer=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.image.Layer} Layer instance
                     */
                    Layer.create = function create(properties) {
                        return new Layer(properties);
                    };
    
                    /**
                     * Encodes the specified Layer message. Does not implicitly {@link grafeas.v1beta1.image.Layer.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {grafeas.v1beta1.image.ILayer} message Layer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Layer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.directive != null && Object.hasOwnProperty.call(message, "directive"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.directive);
                        if (message["arguments"] != null && Object.hasOwnProperty.call(message, "arguments"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message["arguments"]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Layer message, length delimited. Does not implicitly {@link grafeas.v1beta1.image.Layer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {grafeas.v1beta1.image.ILayer} message Layer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Layer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Layer message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.image.Layer} Layer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Layer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.image.Layer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.directive = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message["arguments"] = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Layer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.image.Layer} Layer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Layer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Layer message.
                     * @function verify
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Layer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.directive != null && message.hasOwnProperty("directive"))
                            switch (message.directive) {
                            default:
                                return "directive: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                                break;
                            }
                        if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                            if (!$util.isString(message["arguments"]))
                                return "arguments: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Layer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.image.Layer} Layer
                     */
                    Layer.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.image.Layer)
                            return object;
                        var message = new $root.grafeas.v1beta1.image.Layer();
                        switch (object.directive) {
                        default:
                            if (typeof object.directive === "number") {
                                message.directive = object.directive;
                                break;
                            }
                            break;
                        case "DIRECTIVE_UNSPECIFIED":
                        case 0:
                            message.directive = 0;
                            break;
                        case "MAINTAINER":
                        case 1:
                            message.directive = 1;
                            break;
                        case "RUN":
                        case 2:
                            message.directive = 2;
                            break;
                        case "CMD":
                        case 3:
                            message.directive = 3;
                            break;
                        case "LABEL":
                        case 4:
                            message.directive = 4;
                            break;
                        case "EXPOSE":
                        case 5:
                            message.directive = 5;
                            break;
                        case "ENV":
                        case 6:
                            message.directive = 6;
                            break;
                        case "ADD":
                        case 7:
                            message.directive = 7;
                            break;
                        case "COPY":
                        case 8:
                            message.directive = 8;
                            break;
                        case "ENTRYPOINT":
                        case 9:
                            message.directive = 9;
                            break;
                        case "VOLUME":
                        case 10:
                            message.directive = 10;
                            break;
                        case "USER":
                        case 11:
                            message.directive = 11;
                            break;
                        case "WORKDIR":
                        case 12:
                            message.directive = 12;
                            break;
                        case "ARG":
                        case 13:
                            message.directive = 13;
                            break;
                        case "ONBUILD":
                        case 14:
                            message.directive = 14;
                            break;
                        case "STOPSIGNAL":
                        case 15:
                            message.directive = 15;
                            break;
                        case "HEALTHCHECK":
                        case 16:
                            message.directive = 16;
                            break;
                        case "SHELL":
                        case 17:
                            message.directive = 17;
                            break;
                        }
                        if (object["arguments"] != null)
                            message["arguments"] = String(object["arguments"]);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Layer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {grafeas.v1beta1.image.Layer} message Layer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Layer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.directive = options.enums === String ? "DIRECTIVE_UNSPECIFIED" : 0;
                            object["arguments"] = "";
                        }
                        if (message.directive != null && message.hasOwnProperty("directive"))
                            object.directive = options.enums === String ? $root.grafeas.v1beta1.image.Layer.Directive[message.directive] === undefined ? message.directive : $root.grafeas.v1beta1.image.Layer.Directive[message.directive] : message.directive;
                        if (message["arguments"] != null && message.hasOwnProperty("arguments"))
                            object["arguments"] = message["arguments"];
                        return object;
                    };
    
                    /**
                     * Converts this Layer to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.image.Layer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Layer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Layer
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.image.Layer
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Layer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.image.Layer";
                    };
    
                    /**
                     * Directive enum.
                     * @name grafeas.v1beta1.image.Layer.Directive
                     * @enum {number}
                     * @property {number} DIRECTIVE_UNSPECIFIED=0 DIRECTIVE_UNSPECIFIED value
                     * @property {number} MAINTAINER=1 MAINTAINER value
                     * @property {number} RUN=2 RUN value
                     * @property {number} CMD=3 CMD value
                     * @property {number} LABEL=4 LABEL value
                     * @property {number} EXPOSE=5 EXPOSE value
                     * @property {number} ENV=6 ENV value
                     * @property {number} ADD=7 ADD value
                     * @property {number} COPY=8 COPY value
                     * @property {number} ENTRYPOINT=9 ENTRYPOINT value
                     * @property {number} VOLUME=10 VOLUME value
                     * @property {number} USER=11 USER value
                     * @property {number} WORKDIR=12 WORKDIR value
                     * @property {number} ARG=13 ARG value
                     * @property {number} ONBUILD=14 ONBUILD value
                     * @property {number} STOPSIGNAL=15 STOPSIGNAL value
                     * @property {number} HEALTHCHECK=16 HEALTHCHECK value
                     * @property {number} SHELL=17 SHELL value
                     */
                    Layer.Directive = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DIRECTIVE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "MAINTAINER"] = 1;
                        values[valuesById[2] = "RUN"] = 2;
                        values[valuesById[3] = "CMD"] = 3;
                        values[valuesById[4] = "LABEL"] = 4;
                        values[valuesById[5] = "EXPOSE"] = 5;
                        values[valuesById[6] = "ENV"] = 6;
                        values[valuesById[7] = "ADD"] = 7;
                        values[valuesById[8] = "COPY"] = 8;
                        values[valuesById[9] = "ENTRYPOINT"] = 9;
                        values[valuesById[10] = "VOLUME"] = 10;
                        values[valuesById[11] = "USER"] = 11;
                        values[valuesById[12] = "WORKDIR"] = 12;
                        values[valuesById[13] = "ARG"] = 13;
                        values[valuesById[14] = "ONBUILD"] = 14;
                        values[valuesById[15] = "STOPSIGNAL"] = 15;
                        values[valuesById[16] = "HEALTHCHECK"] = 16;
                        values[valuesById[17] = "SHELL"] = 17;
                        return values;
                    })();
    
                    return Layer;
                })();
    
                image.Fingerprint = (function() {
    
                    /**
                     * Properties of a Fingerprint.
                     * @memberof grafeas.v1beta1.image
                     * @interface IFingerprint
                     * @property {string|null} [v1Name] Fingerprint v1Name
                     * @property {Array.<string>|null} [v2Blob] Fingerprint v2Blob
                     * @property {string|null} [v2Name] Fingerprint v2Name
                     */
    
                    /**
                     * Constructs a new Fingerprint.
                     * @memberof grafeas.v1beta1.image
                     * @classdesc Represents a Fingerprint.
                     * @implements IFingerprint
                     * @constructor
                     * @param {grafeas.v1beta1.image.IFingerprint=} [properties] Properties to set
                     */
                    function Fingerprint(properties) {
                        this.v2Blob = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Fingerprint v1Name.
                     * @member {string} v1Name
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @instance
                     */
                    Fingerprint.prototype.v1Name = "";
    
                    /**
                     * Fingerprint v2Blob.
                     * @member {Array.<string>} v2Blob
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @instance
                     */
                    Fingerprint.prototype.v2Blob = $util.emptyArray;
    
                    /**
                     * Fingerprint v2Name.
                     * @member {string} v2Name
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @instance
                     */
                    Fingerprint.prototype.v2Name = "";
    
                    /**
                     * Creates a new Fingerprint instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {grafeas.v1beta1.image.IFingerprint=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.image.Fingerprint} Fingerprint instance
                     */
                    Fingerprint.create = function create(properties) {
                        return new Fingerprint(properties);
                    };
    
                    /**
                     * Encodes the specified Fingerprint message. Does not implicitly {@link grafeas.v1beta1.image.Fingerprint.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {grafeas.v1beta1.image.IFingerprint} message Fingerprint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fingerprint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.v1Name != null && Object.hasOwnProperty.call(message, "v1Name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.v1Name);
                        if (message.v2Blob != null && message.v2Blob.length)
                            for (var i = 0; i < message.v2Blob.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.v2Blob[i]);
                        if (message.v2Name != null && Object.hasOwnProperty.call(message, "v2Name"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.v2Name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Fingerprint message, length delimited. Does not implicitly {@link grafeas.v1beta1.image.Fingerprint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {grafeas.v1beta1.image.IFingerprint} message Fingerprint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fingerprint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Fingerprint message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.image.Fingerprint} Fingerprint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fingerprint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.image.Fingerprint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.v1Name = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.v2Blob && message.v2Blob.length))
                                        message.v2Blob = [];
                                    message.v2Blob.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    message.v2Name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Fingerprint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.image.Fingerprint} Fingerprint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fingerprint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Fingerprint message.
                     * @function verify
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Fingerprint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.v1Name != null && message.hasOwnProperty("v1Name"))
                            if (!$util.isString(message.v1Name))
                                return "v1Name: string expected";
                        if (message.v2Blob != null && message.hasOwnProperty("v2Blob")) {
                            if (!Array.isArray(message.v2Blob))
                                return "v2Blob: array expected";
                            for (var i = 0; i < message.v2Blob.length; ++i)
                                if (!$util.isString(message.v2Blob[i]))
                                    return "v2Blob: string[] expected";
                        }
                        if (message.v2Name != null && message.hasOwnProperty("v2Name"))
                            if (!$util.isString(message.v2Name))
                                return "v2Name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Fingerprint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.image.Fingerprint} Fingerprint
                     */
                    Fingerprint.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.image.Fingerprint)
                            return object;
                        var message = new $root.grafeas.v1beta1.image.Fingerprint();
                        if (object.v1Name != null)
                            message.v1Name = String(object.v1Name);
                        if (object.v2Blob) {
                            if (!Array.isArray(object.v2Blob))
                                throw TypeError(".grafeas.v1beta1.image.Fingerprint.v2Blob: array expected");
                            message.v2Blob = [];
                            for (var i = 0; i < object.v2Blob.length; ++i)
                                message.v2Blob[i] = String(object.v2Blob[i]);
                        }
                        if (object.v2Name != null)
                            message.v2Name = String(object.v2Name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Fingerprint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {grafeas.v1beta1.image.Fingerprint} message Fingerprint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Fingerprint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.v2Blob = [];
                        if (options.defaults) {
                            object.v1Name = "";
                            object.v2Name = "";
                        }
                        if (message.v1Name != null && message.hasOwnProperty("v1Name"))
                            object.v1Name = message.v1Name;
                        if (message.v2Blob && message.v2Blob.length) {
                            object.v2Blob = [];
                            for (var j = 0; j < message.v2Blob.length; ++j)
                                object.v2Blob[j] = message.v2Blob[j];
                        }
                        if (message.v2Name != null && message.hasOwnProperty("v2Name"))
                            object.v2Name = message.v2Name;
                        return object;
                    };
    
                    /**
                     * Converts this Fingerprint to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Fingerprint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Fingerprint
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.image.Fingerprint
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Fingerprint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.image.Fingerprint";
                    };
    
                    return Fingerprint;
                })();
    
                image.Basis = (function() {
    
                    /**
                     * Properties of a Basis.
                     * @memberof grafeas.v1beta1.image
                     * @interface IBasis
                     * @property {string|null} [resourceUrl] Basis resourceUrl
                     * @property {grafeas.v1beta1.image.IFingerprint|null} [fingerprint] Basis fingerprint
                     */
    
                    /**
                     * Constructs a new Basis.
                     * @memberof grafeas.v1beta1.image
                     * @classdesc Represents a Basis.
                     * @implements IBasis
                     * @constructor
                     * @param {grafeas.v1beta1.image.IBasis=} [properties] Properties to set
                     */
                    function Basis(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Basis resourceUrl.
                     * @member {string} resourceUrl
                     * @memberof grafeas.v1beta1.image.Basis
                     * @instance
                     */
                    Basis.prototype.resourceUrl = "";
    
                    /**
                     * Basis fingerprint.
                     * @member {grafeas.v1beta1.image.IFingerprint|null|undefined} fingerprint
                     * @memberof grafeas.v1beta1.image.Basis
                     * @instance
                     */
                    Basis.prototype.fingerprint = null;
    
                    /**
                     * Creates a new Basis instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {grafeas.v1beta1.image.IBasis=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.image.Basis} Basis instance
                     */
                    Basis.create = function create(properties) {
                        return new Basis(properties);
                    };
    
                    /**
                     * Encodes the specified Basis message. Does not implicitly {@link grafeas.v1beta1.image.Basis.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {grafeas.v1beta1.image.IBasis} message Basis message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Basis.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resourceUrl != null && Object.hasOwnProperty.call(message, "resourceUrl"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceUrl);
                        if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                            $root.grafeas.v1beta1.image.Fingerprint.encode(message.fingerprint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Basis message, length delimited. Does not implicitly {@link grafeas.v1beta1.image.Basis.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {grafeas.v1beta1.image.IBasis} message Basis message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Basis.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Basis message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.image.Basis} Basis
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Basis.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.image.Basis();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resourceUrl = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Basis message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.image.Basis} Basis
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Basis.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Basis message.
                     * @function verify
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Basis.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                            if (!$util.isString(message.resourceUrl))
                                return "resourceUrl: string expected";
                        if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                            var error = $root.grafeas.v1beta1.image.Fingerprint.verify(message.fingerprint);
                            if (error)
                                return "fingerprint." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Basis message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.image.Basis} Basis
                     */
                    Basis.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.image.Basis)
                            return object;
                        var message = new $root.grafeas.v1beta1.image.Basis();
                        if (object.resourceUrl != null)
                            message.resourceUrl = String(object.resourceUrl);
                        if (object.fingerprint != null) {
                            if (typeof object.fingerprint !== "object")
                                throw TypeError(".grafeas.v1beta1.image.Basis.fingerprint: object expected");
                            message.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.fromObject(object.fingerprint);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Basis message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {grafeas.v1beta1.image.Basis} message Basis
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Basis.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resourceUrl = "";
                            object.fingerprint = null;
                        }
                        if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                            object.resourceUrl = message.resourceUrl;
                        if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                            object.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.toObject(message.fingerprint, options);
                        return object;
                    };
    
                    /**
                     * Converts this Basis to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.image.Basis
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Basis.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Basis
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.image.Basis
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Basis.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.image.Basis";
                    };
    
                    return Basis;
                })();
    
                image.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.image
                     * @interface IDetails
                     * @property {grafeas.v1beta1.image.IDerived|null} [derivedImage] Details derivedImage
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.image
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.image.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details derivedImage.
                     * @member {grafeas.v1beta1.image.IDerived|null|undefined} derivedImage
                     * @memberof grafeas.v1beta1.image.Details
                     * @instance
                     */
                    Details.prototype.derivedImage = null;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {grafeas.v1beta1.image.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.image.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.image.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {grafeas.v1beta1.image.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.derivedImage != null && Object.hasOwnProperty.call(message, "derivedImage"))
                            $root.grafeas.v1beta1.image.Derived.encode(message.derivedImage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.image.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {grafeas.v1beta1.image.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.image.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.image.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.derivedImage = $root.grafeas.v1beta1.image.Derived.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.image.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.derivedImage != null && message.hasOwnProperty("derivedImage")) {
                            var error = $root.grafeas.v1beta1.image.Derived.verify(message.derivedImage);
                            if (error)
                                return "derivedImage." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.image.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.image.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.image.Details();
                        if (object.derivedImage != null) {
                            if (typeof object.derivedImage !== "object")
                                throw TypeError(".grafeas.v1beta1.image.Details.derivedImage: object expected");
                            message.derivedImage = $root.grafeas.v1beta1.image.Derived.fromObject(object.derivedImage);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {grafeas.v1beta1.image.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.derivedImage = null;
                        if (message.derivedImage != null && message.hasOwnProperty("derivedImage"))
                            object.derivedImage = $root.grafeas.v1beta1.image.Derived.toObject(message.derivedImage, options);
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.image.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.image.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.image.Details";
                    };
    
                    return Details;
                })();
    
                image.Derived = (function() {
    
                    /**
                     * Properties of a Derived.
                     * @memberof grafeas.v1beta1.image
                     * @interface IDerived
                     * @property {grafeas.v1beta1.image.IFingerprint|null} [fingerprint] Derived fingerprint
                     * @property {number|null} [distance] Derived distance
                     * @property {Array.<grafeas.v1beta1.image.ILayer>|null} [layerInfo] Derived layerInfo
                     * @property {string|null} [baseResourceUrl] Derived baseResourceUrl
                     */
    
                    /**
                     * Constructs a new Derived.
                     * @memberof grafeas.v1beta1.image
                     * @classdesc Represents a Derived.
                     * @implements IDerived
                     * @constructor
                     * @param {grafeas.v1beta1.image.IDerived=} [properties] Properties to set
                     */
                    function Derived(properties) {
                        this.layerInfo = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Derived fingerprint.
                     * @member {grafeas.v1beta1.image.IFingerprint|null|undefined} fingerprint
                     * @memberof grafeas.v1beta1.image.Derived
                     * @instance
                     */
                    Derived.prototype.fingerprint = null;
    
                    /**
                     * Derived distance.
                     * @member {number} distance
                     * @memberof grafeas.v1beta1.image.Derived
                     * @instance
                     */
                    Derived.prototype.distance = 0;
    
                    /**
                     * Derived layerInfo.
                     * @member {Array.<grafeas.v1beta1.image.ILayer>} layerInfo
                     * @memberof grafeas.v1beta1.image.Derived
                     * @instance
                     */
                    Derived.prototype.layerInfo = $util.emptyArray;
    
                    /**
                     * Derived baseResourceUrl.
                     * @member {string} baseResourceUrl
                     * @memberof grafeas.v1beta1.image.Derived
                     * @instance
                     */
                    Derived.prototype.baseResourceUrl = "";
    
                    /**
                     * Creates a new Derived instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {grafeas.v1beta1.image.IDerived=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.image.Derived} Derived instance
                     */
                    Derived.create = function create(properties) {
                        return new Derived(properties);
                    };
    
                    /**
                     * Encodes the specified Derived message. Does not implicitly {@link grafeas.v1beta1.image.Derived.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {grafeas.v1beta1.image.IDerived} message Derived message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Derived.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                            $root.grafeas.v1beta1.image.Fingerprint.encode(message.fingerprint, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.distance != null && Object.hasOwnProperty.call(message, "distance"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.distance);
                        if (message.layerInfo != null && message.layerInfo.length)
                            for (var i = 0; i < message.layerInfo.length; ++i)
                                $root.grafeas.v1beta1.image.Layer.encode(message.layerInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.baseResourceUrl != null && Object.hasOwnProperty.call(message, "baseResourceUrl"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.baseResourceUrl);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Derived message, length delimited. Does not implicitly {@link grafeas.v1beta1.image.Derived.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {grafeas.v1beta1.image.IDerived} message Derived message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Derived.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Derived message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.image.Derived} Derived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Derived.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.image.Derived();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.distance = reader.int32();
                                    break;
                                }
                            case 3: {
                                    if (!(message.layerInfo && message.layerInfo.length))
                                        message.layerInfo = [];
                                    message.layerInfo.push($root.grafeas.v1beta1.image.Layer.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 4: {
                                    message.baseResourceUrl = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Derived message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.image.Derived} Derived
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Derived.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Derived message.
                     * @function verify
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Derived.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                            var error = $root.grafeas.v1beta1.image.Fingerprint.verify(message.fingerprint);
                            if (error)
                                return "fingerprint." + error;
                        }
                        if (message.distance != null && message.hasOwnProperty("distance"))
                            if (!$util.isInteger(message.distance))
                                return "distance: integer expected";
                        if (message.layerInfo != null && message.hasOwnProperty("layerInfo")) {
                            if (!Array.isArray(message.layerInfo))
                                return "layerInfo: array expected";
                            for (var i = 0; i < message.layerInfo.length; ++i) {
                                var error = $root.grafeas.v1beta1.image.Layer.verify(message.layerInfo[i]);
                                if (error)
                                    return "layerInfo." + error;
                            }
                        }
                        if (message.baseResourceUrl != null && message.hasOwnProperty("baseResourceUrl"))
                            if (!$util.isString(message.baseResourceUrl))
                                return "baseResourceUrl: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Derived message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.image.Derived} Derived
                     */
                    Derived.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.image.Derived)
                            return object;
                        var message = new $root.grafeas.v1beta1.image.Derived();
                        if (object.fingerprint != null) {
                            if (typeof object.fingerprint !== "object")
                                throw TypeError(".grafeas.v1beta1.image.Derived.fingerprint: object expected");
                            message.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.fromObject(object.fingerprint);
                        }
                        if (object.distance != null)
                            message.distance = object.distance | 0;
                        if (object.layerInfo) {
                            if (!Array.isArray(object.layerInfo))
                                throw TypeError(".grafeas.v1beta1.image.Derived.layerInfo: array expected");
                            message.layerInfo = [];
                            for (var i = 0; i < object.layerInfo.length; ++i) {
                                if (typeof object.layerInfo[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.image.Derived.layerInfo: object expected");
                                message.layerInfo[i] = $root.grafeas.v1beta1.image.Layer.fromObject(object.layerInfo[i]);
                            }
                        }
                        if (object.baseResourceUrl != null)
                            message.baseResourceUrl = String(object.baseResourceUrl);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Derived message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {grafeas.v1beta1.image.Derived} message Derived
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Derived.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.layerInfo = [];
                        if (options.defaults) {
                            object.fingerprint = null;
                            object.distance = 0;
                            object.baseResourceUrl = "";
                        }
                        if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                            object.fingerprint = $root.grafeas.v1beta1.image.Fingerprint.toObject(message.fingerprint, options);
                        if (message.distance != null && message.hasOwnProperty("distance"))
                            object.distance = message.distance;
                        if (message.layerInfo && message.layerInfo.length) {
                            object.layerInfo = [];
                            for (var j = 0; j < message.layerInfo.length; ++j)
                                object.layerInfo[j] = $root.grafeas.v1beta1.image.Layer.toObject(message.layerInfo[j], options);
                        }
                        if (message.baseResourceUrl != null && message.hasOwnProperty("baseResourceUrl"))
                            object.baseResourceUrl = message.baseResourceUrl;
                        return object;
                    };
    
                    /**
                     * Converts this Derived to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.image.Derived
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Derived.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Derived
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.image.Derived
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Derived.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.image.Derived";
                    };
    
                    return Derived;
                })();
    
                return image;
            })();
    
            v1beta1.package_ = (function() {
    
                /**
                 * Namespace package.
                 * @memberof grafeas.v1beta1
                 * @namespace
                 */
                var package_ = {};
    
                /**
                 * Architecture enum.
                 * @name grafeas.v1beta1.package_.Architecture
                 * @enum {number}
                 * @property {number} ARCHITECTURE_UNSPECIFIED=0 ARCHITECTURE_UNSPECIFIED value
                 * @property {number} X86=1 X86 value
                 * @property {number} X64=2 X64 value
                 */
                package_.Architecture = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ARCHITECTURE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "X86"] = 1;
                    values[valuesById[2] = "X64"] = 2;
                    return values;
                })();
    
                package_.Distribution = (function() {
    
                    /**
                     * Properties of a Distribution.
                     * @memberof grafeas.v1beta1.package_
                     * @interface IDistribution
                     * @property {string|null} [cpeUri] Distribution cpeUri
                     * @property {grafeas.v1beta1.package_.Architecture|null} [architecture] Distribution architecture
                     * @property {grafeas.v1beta1.package_.IVersion|null} [latestVersion] Distribution latestVersion
                     * @property {string|null} [maintainer] Distribution maintainer
                     * @property {string|null} [url] Distribution url
                     * @property {string|null} [description] Distribution description
                     */
    
                    /**
                     * Constructs a new Distribution.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents a Distribution.
                     * @implements IDistribution
                     * @constructor
                     * @param {grafeas.v1beta1.package_.IDistribution=} [properties] Properties to set
                     */
                    function Distribution(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Distribution cpeUri.
                     * @member {string} cpeUri
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.cpeUri = "";
    
                    /**
                     * Distribution architecture.
                     * @member {grafeas.v1beta1.package_.Architecture} architecture
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.architecture = 0;
    
                    /**
                     * Distribution latestVersion.
                     * @member {grafeas.v1beta1.package_.IVersion|null|undefined} latestVersion
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.latestVersion = null;
    
                    /**
                     * Distribution maintainer.
                     * @member {string} maintainer
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.maintainer = "";
    
                    /**
                     * Distribution url.
                     * @member {string} url
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.url = "";
    
                    /**
                     * Distribution description.
                     * @member {string} description
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     */
                    Distribution.prototype.description = "";
    
                    /**
                     * Creates a new Distribution instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {grafeas.v1beta1.package_.IDistribution=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Distribution} Distribution instance
                     */
                    Distribution.create = function create(properties) {
                        return new Distribution(properties);
                    };
    
                    /**
                     * Encodes the specified Distribution message. Does not implicitly {@link grafeas.v1beta1.package_.Distribution.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {grafeas.v1beta1.package_.IDistribution} message Distribution message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Distribution.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                        if (message.architecture != null && Object.hasOwnProperty.call(message, "architecture"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.architecture);
                        if (message.latestVersion != null && Object.hasOwnProperty.call(message, "latestVersion"))
                            $root.grafeas.v1beta1.package.Version.encode(message.latestVersion, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.maintainer != null && Object.hasOwnProperty.call(message, "maintainer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.maintainer);
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Distribution message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Distribution.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {grafeas.v1beta1.package_.IDistribution} message Distribution message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Distribution.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Distribution message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Distribution} Distribution
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Distribution.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Distribution();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cpeUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.architecture = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.latestVersion = $root.grafeas.v1beta1.package.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.maintainer = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.url = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.description = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Distribution message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Distribution} Distribution
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Distribution.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Distribution message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Distribution.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            if (!$util.isString(message.cpeUri))
                                return "cpeUri: string expected";
                        if (message.architecture != null && message.hasOwnProperty("architecture"))
                            switch (message.architecture) {
                            default:
                                return "architecture: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.latestVersion != null && message.hasOwnProperty("latestVersion")) {
                            var error = $root.grafeas.v1beta1.package.Version.verify(message.latestVersion);
                            if (error)
                                return "latestVersion." + error;
                        }
                        if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                            if (!$util.isString(message.maintainer))
                                return "maintainer: string expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Distribution message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Distribution} Distribution
                     */
                    Distribution.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Distribution)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Distribution();
                        if (object.cpeUri != null)
                            message.cpeUri = String(object.cpeUri);
                        switch (object.architecture) {
                        default:
                            if (typeof object.architecture === "number") {
                                message.architecture = object.architecture;
                                break;
                            }
                            break;
                        case "ARCHITECTURE_UNSPECIFIED":
                        case 0:
                            message.architecture = 0;
                            break;
                        case "X86":
                        case 1:
                            message.architecture = 1;
                            break;
                        case "X64":
                        case 2:
                            message.architecture = 2;
                            break;
                        }
                        if (object.latestVersion != null) {
                            if (typeof object.latestVersion !== "object")
                                throw TypeError(".grafeas.v1beta1.package.Distribution.latestVersion: object expected");
                            message.latestVersion = $root.grafeas.v1beta1.package.Version.fromObject(object.latestVersion);
                        }
                        if (object.maintainer != null)
                            message.maintainer = String(object.maintainer);
                        if (object.url != null)
                            message.url = String(object.url);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Distribution message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {grafeas.v1beta1.package_.Distribution} message Distribution
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Distribution.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cpeUri = "";
                            object.architecture = options.enums === String ? "ARCHITECTURE_UNSPECIFIED" : 0;
                            object.latestVersion = null;
                            object.maintainer = "";
                            object.url = "";
                            object.description = "";
                        }
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            object.cpeUri = message.cpeUri;
                        if (message.architecture != null && message.hasOwnProperty("architecture"))
                            object.architecture = options.enums === String ? $root.grafeas.v1beta1.package.Architecture[message.architecture] === undefined ? message.architecture : $root.grafeas.v1beta1.package.Architecture[message.architecture] : message.architecture;
                        if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                            object.latestVersion = $root.grafeas.v1beta1.package.Version.toObject(message.latestVersion, options);
                        if (message.maintainer != null && message.hasOwnProperty("maintainer"))
                            object.maintainer = message.maintainer;
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this Distribution to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Distribution.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Distribution
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Distribution
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Distribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Distribution";
                    };
    
                    return Distribution;
                })();
    
                package_.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof grafeas.v1beta1.package_
                     * @interface ILocation
                     * @property {string|null} [cpeUri] Location cpeUri
                     * @property {grafeas.v1beta1.package_.IVersion|null} [version] Location version
                     * @property {string|null} [path] Location path
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {grafeas.v1beta1.package_.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location cpeUri.
                     * @member {string} cpeUri
                     * @memberof grafeas.v1beta1.package_.Location
                     * @instance
                     */
                    Location.prototype.cpeUri = "";
    
                    /**
                     * Location version.
                     * @member {grafeas.v1beta1.package_.IVersion|null|undefined} version
                     * @memberof grafeas.v1beta1.package_.Location
                     * @instance
                     */
                    Location.prototype.version = null;
    
                    /**
                     * Location path.
                     * @member {string} path
                     * @memberof grafeas.v1beta1.package_.Location
                     * @instance
                     */
                    Location.prototype.path = "";
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {grafeas.v1beta1.package_.ILocation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link grafeas.v1beta1.package_.Location.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {grafeas.v1beta1.package_.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cpeUri != null && Object.hasOwnProperty.call(message, "cpeUri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpeUri);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.grafeas.v1beta1.package.Version.encode(message.version, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {grafeas.v1beta1.package_.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cpeUri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.version = $root.grafeas.v1beta1.package.Version.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.path = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            if (!$util.isString(message.cpeUri))
                                return "cpeUri: string expected";
                        if (message.version != null && message.hasOwnProperty("version")) {
                            var error = $root.grafeas.v1beta1.package.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Location)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Location();
                        if (object.cpeUri != null)
                            message.cpeUri = String(object.cpeUri);
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".grafeas.v1beta1.package.Location.version: object expected");
                            message.version = $root.grafeas.v1beta1.package.Version.fromObject(object.version);
                        }
                        if (object.path != null)
                            message.path = String(object.path);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {grafeas.v1beta1.package_.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cpeUri = "";
                            object.version = null;
                            object.path = "";
                        }
                        if (message.cpeUri != null && message.hasOwnProperty("cpeUri"))
                            object.cpeUri = message.cpeUri;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.grafeas.v1beta1.package.Version.toObject(message.version, options);
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Location";
                    };
    
                    return Location;
                })();
    
                package_.Package = (function() {
    
                    /**
                     * Properties of a Package.
                     * @memberof grafeas.v1beta1.package_
                     * @interface IPackage
                     * @property {string|null} [name] Package name
                     * @property {Array.<grafeas.v1beta1.package_.IDistribution>|null} [distribution] Package distribution
                     */
    
                    /**
                     * Constructs a new Package.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents a Package.
                     * @implements IPackage
                     * @constructor
                     * @param {grafeas.v1beta1.package_.IPackage=} [properties] Properties to set
                     */
                    function Package(properties) {
                        this.distribution = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Package name.
                     * @member {string} name
                     * @memberof grafeas.v1beta1.package_.Package
                     * @instance
                     */
                    Package.prototype.name = "";
    
                    /**
                     * Package distribution.
                     * @member {Array.<grafeas.v1beta1.package_.IDistribution>} distribution
                     * @memberof grafeas.v1beta1.package_.Package
                     * @instance
                     */
                    Package.prototype.distribution = $util.emptyArray;
    
                    /**
                     * Creates a new Package instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {grafeas.v1beta1.package_.IPackage=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Package} Package instance
                     */
                    Package.create = function create(properties) {
                        return new Package(properties);
                    };
    
                    /**
                     * Encodes the specified Package message. Does not implicitly {@link grafeas.v1beta1.package_.Package.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {grafeas.v1beta1.package_.IPackage} message Package message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Package.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.distribution != null && message.distribution.length)
                            for (var i = 0; i < message.distribution.length; ++i)
                                $root.grafeas.v1beta1.package.Distribution.encode(message.distribution[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Package message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Package.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {grafeas.v1beta1.package_.IPackage} message Package message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Package.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Package message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Package} Package
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Package.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Package();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 10: {
                                    if (!(message.distribution && message.distribution.length))
                                        message.distribution = [];
                                    message.distribution.push($root.grafeas.v1beta1.package.Distribution.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Package message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Package} Package
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Package.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Package message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Package.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.distribution != null && message.hasOwnProperty("distribution")) {
                            if (!Array.isArray(message.distribution))
                                return "distribution: array expected";
                            for (var i = 0; i < message.distribution.length; ++i) {
                                var error = $root.grafeas.v1beta1.package.Distribution.verify(message.distribution[i]);
                                if (error)
                                    return "distribution." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Package message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Package} Package
                     */
                    Package.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Package)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Package();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.distribution) {
                            if (!Array.isArray(object.distribution))
                                throw TypeError(".grafeas.v1beta1.package.Package.distribution: array expected");
                            message.distribution = [];
                            for (var i = 0; i < object.distribution.length; ++i) {
                                if (typeof object.distribution[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.package.Package.distribution: object expected");
                                message.distribution[i] = $root.grafeas.v1beta1.package.Distribution.fromObject(object.distribution[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Package message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {grafeas.v1beta1.package_.Package} message Package
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Package.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.distribution = [];
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.distribution && message.distribution.length) {
                            object.distribution = [];
                            for (var j = 0; j < message.distribution.length; ++j)
                                object.distribution[j] = $root.grafeas.v1beta1.package.Distribution.toObject(message.distribution[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Package to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Package
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Package.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Package
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Package
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Package.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Package";
                    };
    
                    return Package;
                })();
    
                package_.Details = (function() {
    
                    /**
                     * Properties of a Details.
                     * @memberof grafeas.v1beta1.package_
                     * @interface IDetails
                     * @property {grafeas.v1beta1.package_.IInstallation|null} [installation] Details installation
                     */
    
                    /**
                     * Constructs a new Details.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents a Details.
                     * @implements IDetails
                     * @constructor
                     * @param {grafeas.v1beta1.package_.IDetails=} [properties] Properties to set
                     */
                    function Details(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Details installation.
                     * @member {grafeas.v1beta1.package_.IInstallation|null|undefined} installation
                     * @memberof grafeas.v1beta1.package_.Details
                     * @instance
                     */
                    Details.prototype.installation = null;
    
                    /**
                     * Creates a new Details instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {grafeas.v1beta1.package_.IDetails=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Details} Details instance
                     */
                    Details.create = function create(properties) {
                        return new Details(properties);
                    };
    
                    /**
                     * Encodes the specified Details message. Does not implicitly {@link grafeas.v1beta1.package_.Details.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {grafeas.v1beta1.package_.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.installation != null && Object.hasOwnProperty.call(message, "installation"))
                            $root.grafeas.v1beta1.package.Installation.encode(message.installation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Details.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {grafeas.v1beta1.package_.IDetails} message Details message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Details.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Details();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.installation = $root.grafeas.v1beta1.package.Installation.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Details} Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Details.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Details message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Details.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.installation != null && message.hasOwnProperty("installation")) {
                            var error = $root.grafeas.v1beta1.package.Installation.verify(message.installation);
                            if (error)
                                return "installation." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Details} Details
                     */
                    Details.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Details)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Details();
                        if (object.installation != null) {
                            if (typeof object.installation !== "object")
                                throw TypeError(".grafeas.v1beta1.package.Details.installation: object expected");
                            message.installation = $root.grafeas.v1beta1.package.Installation.fromObject(object.installation);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {grafeas.v1beta1.package_.Details} message Details
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Details.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.installation = null;
                        if (message.installation != null && message.hasOwnProperty("installation"))
                            object.installation = $root.grafeas.v1beta1.package.Installation.toObject(message.installation, options);
                        return object;
                    };
    
                    /**
                     * Converts this Details to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Details
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Details.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Details
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Details
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Details.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Details";
                    };
    
                    return Details;
                })();
    
                package_.Installation = (function() {
    
                    /**
                     * Properties of an Installation.
                     * @memberof grafeas.v1beta1.package_
                     * @interface IInstallation
                     * @property {string|null} [name] Installation name
                     * @property {Array.<grafeas.v1beta1.package_.ILocation>|null} [location] Installation location
                     */
    
                    /**
                     * Constructs a new Installation.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents an Installation.
                     * @implements IInstallation
                     * @constructor
                     * @param {grafeas.v1beta1.package_.IInstallation=} [properties] Properties to set
                     */
                    function Installation(properties) {
                        this.location = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Installation name.
                     * @member {string} name
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @instance
                     */
                    Installation.prototype.name = "";
    
                    /**
                     * Installation location.
                     * @member {Array.<grafeas.v1beta1.package_.ILocation>} location
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @instance
                     */
                    Installation.prototype.location = $util.emptyArray;
    
                    /**
                     * Creates a new Installation instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {grafeas.v1beta1.package_.IInstallation=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Installation} Installation instance
                     */
                    Installation.create = function create(properties) {
                        return new Installation(properties);
                    };
    
                    /**
                     * Encodes the specified Installation message. Does not implicitly {@link grafeas.v1beta1.package_.Installation.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {grafeas.v1beta1.package_.IInstallation} message Installation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Installation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.location != null && message.location.length)
                            for (var i = 0; i < message.location.length; ++i)
                                $root.grafeas.v1beta1.package.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Installation message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Installation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {grafeas.v1beta1.package_.IInstallation} message Installation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Installation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Installation message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Installation} Installation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Installation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Installation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.location && message.location.length))
                                        message.location = [];
                                    message.location.push($root.grafeas.v1beta1.package.Location.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Installation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Installation} Installation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Installation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Installation message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Installation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.location != null && message.hasOwnProperty("location")) {
                            if (!Array.isArray(message.location))
                                return "location: array expected";
                            for (var i = 0; i < message.location.length; ++i) {
                                var error = $root.grafeas.v1beta1.package.Location.verify(message.location[i]);
                                if (error)
                                    return "location." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Installation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Installation} Installation
                     */
                    Installation.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Installation)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Installation();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.location) {
                            if (!Array.isArray(object.location))
                                throw TypeError(".grafeas.v1beta1.package.Installation.location: array expected");
                            message.location = [];
                            for (var i = 0; i < object.location.length; ++i) {
                                if (typeof object.location[i] !== "object")
                                    throw TypeError(".grafeas.v1beta1.package.Installation.location: object expected");
                                message.location[i] = $root.grafeas.v1beta1.package.Location.fromObject(object.location[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Installation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {grafeas.v1beta1.package_.Installation} message Installation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Installation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.location = [];
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.location && message.location.length) {
                            object.location = [];
                            for (var j = 0; j < message.location.length; ++j)
                                object.location[j] = $root.grafeas.v1beta1.package.Location.toObject(message.location[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Installation to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Installation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Installation
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Installation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Installation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Installation";
                    };
    
                    return Installation;
                })();
    
                package_.Version = (function() {
    
                    /**
                     * Properties of a Version.
                     * @memberof grafeas.v1beta1.package_
                     * @interface IVersion
                     * @property {number|null} [epoch] Version epoch
                     * @property {string|null} [name] Version name
                     * @property {string|null} [revision] Version revision
                     * @property {grafeas.v1beta1.package_.Version.VersionKind|null} [kind] Version kind
                     */
    
                    /**
                     * Constructs a new Version.
                     * @memberof grafeas.v1beta1.package_
                     * @classdesc Represents a Version.
                     * @implements IVersion
                     * @constructor
                     * @param {grafeas.v1beta1.package_.IVersion=} [properties] Properties to set
                     */
                    function Version(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Version epoch.
                     * @member {number} epoch
                     * @memberof grafeas.v1beta1.package_.Version
                     * @instance
                     */
                    Version.prototype.epoch = 0;
    
                    /**
                     * Version name.
                     * @member {string} name
                     * @memberof grafeas.v1beta1.package_.Version
                     * @instance
                     */
                    Version.prototype.name = "";
    
                    /**
                     * Version revision.
                     * @member {string} revision
                     * @memberof grafeas.v1beta1.package_.Version
                     * @instance
                     */
                    Version.prototype.revision = "";
    
                    /**
                     * Version kind.
                     * @member {grafeas.v1beta1.package_.Version.VersionKind} kind
                     * @memberof grafeas.v1beta1.package_.Version
                     * @instance
                     */
                    Version.prototype.kind = 0;
    
                    /**
                     * Creates a new Version instance using the specified properties.
                     * @function create
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {grafeas.v1beta1.package_.IVersion=} [properties] Properties to set
                     * @returns {grafeas.v1beta1.package_.Version} Version instance
                     */
                    Version.create = function create(properties) {
                        return new Version(properties);
                    };
    
                    /**
                     * Encodes the specified Version message. Does not implicitly {@link grafeas.v1beta1.package_.Version.verify|verify} messages.
                     * @function encode
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {grafeas.v1beta1.package_.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.epoch != null && Object.hasOwnProperty.call(message, "epoch"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.epoch);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.revision);
                        if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kind);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Version message, length delimited. Does not implicitly {@link grafeas.v1beta1.package_.Version.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {grafeas.v1beta1.package_.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Version message from the specified reader or buffer.
                     * @function decode
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {grafeas.v1beta1.package_.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grafeas.v1beta1.package.Version();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.epoch = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.revision = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.kind = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Version message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {grafeas.v1beta1.package_.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Version message.
                     * @function verify
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Version.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.epoch != null && message.hasOwnProperty("epoch"))
                            if (!$util.isInteger(message.epoch))
                                return "epoch: integer expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            if (!$util.isString(message.revision))
                                return "revision: string expected";
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            switch (message.kind) {
                            default:
                                return "kind: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Version message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {grafeas.v1beta1.package_.Version} Version
                     */
                    Version.fromObject = function fromObject(object) {
                        if (object instanceof $root.grafeas.v1beta1.package.Version)
                            return object;
                        var message = new $root.grafeas.v1beta1.package.Version();
                        if (object.epoch != null)
                            message.epoch = object.epoch | 0;
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.revision != null)
                            message.revision = String(object.revision);
                        switch (object.kind) {
                        default:
                            if (typeof object.kind === "number") {
                                message.kind = object.kind;
                                break;
                            }
                            break;
                        case "VERSION_KIND_UNSPECIFIED":
                        case 0:
                            message.kind = 0;
                            break;
                        case "NORMAL":
                        case 1:
                            message.kind = 1;
                            break;
                        case "MINIMUM":
                        case 2:
                            message.kind = 2;
                            break;
                        case "MAXIMUM":
                        case 3:
                            message.kind = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Version message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {grafeas.v1beta1.package_.Version} message Version
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Version.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.epoch = 0;
                            object.name = "";
                            object.revision = "";
                            object.kind = options.enums === String ? "VERSION_KIND_UNSPECIFIED" : 0;
                        }
                        if (message.epoch != null && message.hasOwnProperty("epoch"))
                            object.epoch = message.epoch;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            object.revision = message.revision;
                        if (message.kind != null && message.hasOwnProperty("kind"))
                            object.kind = options.enums === String ? $root.grafeas.v1beta1.package.Version.VersionKind[message.kind] === undefined ? message.kind : $root.grafeas.v1beta1.package.Version.VersionKind[message.kind] : message.kind;
                        return object;
                    };
    
                    /**
                     * Converts this Version to JSON.
                     * @function toJSON
                     * @memberof grafeas.v1beta1.package_.Version
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Version.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Version
                     * @function getTypeUrl
                     * @memberof grafeas.v1beta1.package_.Version
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Version.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/grafeas.v1beta1.package_.Version";
                    };
    
                    /**
                     * VersionKind enum.
                     * @name grafeas.v1beta1.package_.Version.VersionKind
                     * @enum {number}
                     * @property {number} VERSION_KIND_UNSPECIFIED=0 VERSION_KIND_UNSPECIFIED value
                     * @property {number} NORMAL=1 NORMAL value
                     * @property {number} MINIMUM=2 MINIMUM value
                     * @property {number} MAXIMUM=3 MAXIMUM value
                     */
                    Version.VersionKind = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "VERSION_KIND_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "NORMAL"] = 1;
                        values[valuesById[2] = "MINIMUM"] = 2;
                        values[valuesById[3] = "MAXIMUM"] = 3;
                        return values;
                    })();
    
                    return Version;
                })();
    
                return package_;
            })();
    
            return v1beta1;
        })();
    
        return grafeas;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            /**
             * Edition enum.
             * @name google.protobuf.Edition
             * @enum {number}
             * @property {number} EDITION_UNKNOWN=0 EDITION_UNKNOWN value
             * @property {number} EDITION_PROTO2=998 EDITION_PROTO2 value
             * @property {number} EDITION_PROTO3=999 EDITION_PROTO3 value
             * @property {number} EDITION_2023=1000 EDITION_2023 value
             * @property {number} EDITION_2024=1001 EDITION_2024 value
             * @property {number} EDITION_1_TEST_ONLY=1 EDITION_1_TEST_ONLY value
             * @property {number} EDITION_2_TEST_ONLY=2 EDITION_2_TEST_ONLY value
             * @property {number} EDITION_99997_TEST_ONLY=99997 EDITION_99997_TEST_ONLY value
             * @property {number} EDITION_99998_TEST_ONLY=99998 EDITION_99998_TEST_ONLY value
             * @property {number} EDITION_99999_TEST_ONLY=99999 EDITION_99999_TEST_ONLY value
             * @property {number} EDITION_MAX=2147483647 EDITION_MAX value
             */
            protobuf.Edition = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EDITION_UNKNOWN"] = 0;
                values[valuesById[998] = "EDITION_PROTO2"] = 998;
                values[valuesById[999] = "EDITION_PROTO3"] = 999;
                values[valuesById[1000] = "EDITION_2023"] = 1000;
                values[valuesById[1001] = "EDITION_2024"] = 1001;
                values[valuesById[1] = "EDITION_1_TEST_ONLY"] = 1;
                values[valuesById[2] = "EDITION_2_TEST_ONLY"] = 2;
                values[valuesById[99997] = "EDITION_99997_TEST_ONLY"] = 99997;
                values[valuesById[99998] = "EDITION_99998_TEST_ONLY"] = 99998;
                values[valuesById[99999] = "EDITION_99999_TEST_ONLY"] = 99999;
                values[valuesById[2147483647] = "EDITION_MAX"] = 2147483647;
                return values;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {google.protobuf.Edition|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {google.protobuf.Edition} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = 0;
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 14: {
                                message.edition = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        switch (message.edition) {
                        default:
                            return "edition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    switch (object.edition) {
                    default:
                        if (typeof object.edition === "number") {
                            message.edition = object.edition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition = 2147483647;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 * @property {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>|null} [declaration] ExtensionRangeOptions declaration
                 * @property {google.protobuf.IFeatureSet|null} [features] ExtensionRangeOptions features
                 * @property {google.protobuf.ExtensionRangeOptions.VerificationState|null} [verification] ExtensionRangeOptions verification
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    this.declaration = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ExtensionRangeOptions declaration.
                 * @member {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>} declaration
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.declaration = $util.emptyArray;
    
                /**
                 * ExtensionRangeOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.features = null;
    
                /**
                 * ExtensionRangeOptions verification.
                 * @member {google.protobuf.ExtensionRangeOptions.VerificationState} verification
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.verification = 1;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.declaration != null && message.declaration.length)
                        for (var i = 0; i < message.declaration.length; ++i)
                            $root.google.protobuf.ExtensionRangeOptions.Declaration.encode(message.declaration[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.verification != null && Object.hasOwnProperty.call(message, "verification"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.verification);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                if (!(message.declaration && message.declaration.length))
                                    message.declaration = [];
                                message.declaration.push($root.google.protobuf.ExtensionRangeOptions.Declaration.decode(reader, reader.uint32()));
                                break;
                            }
                        case 50: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.verification = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message.declaration != null && message.hasOwnProperty("declaration")) {
                        if (!Array.isArray(message.declaration))
                            return "declaration: array expected";
                        for (var i = 0; i < message.declaration.length; ++i) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.Declaration.verify(message.declaration[i]);
                            if (error)
                                return "declaration." + error;
                        }
                    }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.verification != null && message.hasOwnProperty("verification"))
                        switch (message.verification) {
                        default:
                            return "verification: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object.declaration) {
                        if (!Array.isArray(object.declaration))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: array expected");
                        message.declaration = [];
                        for (var i = 0; i < object.declaration.length; ++i) {
                            if (typeof object.declaration[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: object expected");
                            message.declaration[i] = $root.google.protobuf.ExtensionRangeOptions.Declaration.fromObject(object.declaration[i]);
                        }
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    switch (object.verification) {
                    case "DECLARATION":
                    case 0:
                        message.verification = 0;
                        break;
                    default:
                        if (typeof object.verification === "number") {
                            message.verification = object.verification;
                            break;
                        }
                        break;
                    case "UNVERIFIED":
                    case 1:
                        message.verification = 1;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.declaration = [];
                        object.uninterpretedOption = [];
                    }
                    if (options.defaults) {
                        object.verification = options.enums === String ? "UNVERIFIED" : 1;
                        object.features = null;
                    }
                    if (message.declaration && message.declaration.length) {
                        object.declaration = [];
                        for (var j = 0; j < message.declaration.length; ++j)
                            object.declaration[j] = $root.google.protobuf.ExtensionRangeOptions.Declaration.toObject(message.declaration[j], options);
                    }
                    if (message.verification != null && message.hasOwnProperty("verification"))
                        object.verification = options.enums === String ? $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] === undefined ? message.verification : $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] : message.verification;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                ExtensionRangeOptions.Declaration = (function() {
    
                    /**
                     * Properties of a Declaration.
                     * @memberof google.protobuf.ExtensionRangeOptions
                     * @interface IDeclaration
                     * @property {number|null} [number] Declaration number
                     * @property {string|null} [fullName] Declaration fullName
                     * @property {string|null} [type] Declaration type
                     * @property {boolean|null} [reserved] Declaration reserved
                     * @property {boolean|null} [repeated] Declaration repeated
                     */
    
                    /**
                     * Constructs a new Declaration.
                     * @memberof google.protobuf.ExtensionRangeOptions
                     * @classdesc Represents a Declaration.
                     * @implements IDeclaration
                     * @constructor
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                     */
                    function Declaration(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Declaration number.
                     * @member {number} number
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.number = 0;
    
                    /**
                     * Declaration fullName.
                     * @member {string} fullName
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.fullName = "";
    
                    /**
                     * Declaration type.
                     * @member {string} type
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.type = "";
    
                    /**
                     * Declaration reserved.
                     * @member {boolean} reserved
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.reserved = false;
    
                    /**
                     * Declaration repeated.
                     * @member {boolean} repeated
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.repeated = false;
    
                    /**
                     * Creates a new Declaration instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration instance
                     */
                    Declaration.create = function create(properties) {
                        return new Declaration(properties);
                    };
    
                    /**
                     * Encodes the specified Declaration message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Declaration.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.number);
                        if (message.fullName != null && Object.hasOwnProperty.call(message, "fullName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullName);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                        if (message.reserved != null && Object.hasOwnProperty.call(message, "reserved"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reserved);
                        if (message.repeated != null && Object.hasOwnProperty.call(message, "repeated"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.repeated);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Declaration message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Declaration.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Declaration message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Declaration.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.number = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.fullName = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.type = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.reserved = reader.bool();
                                    break;
                                }
                            case 6: {
                                    message.repeated = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Declaration message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Declaration.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Declaration message.
                     * @function verify
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Declaration.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.number != null && message.hasOwnProperty("number"))
                            if (!$util.isInteger(message.number))
                                return "number: integer expected";
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            if (!$util.isString(message.fullName))
                                return "fullName: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.reserved != null && message.hasOwnProperty("reserved"))
                            if (typeof message.reserved !== "boolean")
                                return "reserved: boolean expected";
                        if (message.repeated != null && message.hasOwnProperty("repeated"))
                            if (typeof message.repeated !== "boolean")
                                return "repeated: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Declaration message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     */
                    Declaration.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.ExtensionRangeOptions.Declaration)
                            return object;
                        var message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                        if (object.number != null)
                            message.number = object.number | 0;
                        if (object.fullName != null)
                            message.fullName = String(object.fullName);
                        if (object.type != null)
                            message.type = String(object.type);
                        if (object.reserved != null)
                            message.reserved = Boolean(object.reserved);
                        if (object.repeated != null)
                            message.repeated = Boolean(object.repeated);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Declaration message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.Declaration} message Declaration
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Declaration.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.number = 0;
                            object.fullName = "";
                            object.type = "";
                            object.reserved = false;
                            object.repeated = false;
                        }
                        if (message.number != null && message.hasOwnProperty("number"))
                            object.number = message.number;
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            object.fullName = message.fullName;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.reserved != null && message.hasOwnProperty("reserved"))
                            object.reserved = message.reserved;
                        if (message.repeated != null && message.hasOwnProperty("repeated"))
                            object.repeated = message.repeated;
                        return object;
                    };
    
                    /**
                     * Converts this Declaration to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Declaration.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Declaration
                     * @function getTypeUrl
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Declaration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions.Declaration";
                    };
    
                    return Declaration;
                })();
    
                /**
                 * VerificationState enum.
                 * @name google.protobuf.ExtensionRangeOptions.VerificationState
                 * @enum {number}
                 * @property {number} DECLARATION=0 DECLARATION value
                 * @property {number} UNVERIFIED=1 UNVERIFIED value
                 */
                ExtensionRangeOptions.VerificationState = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DECLARATION"] = 0;
                    values[valuesById[1] = "UNVERIFIED"] = 1;
                    return values;
                })();
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 3:
                        case 2:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {google.protobuf.IFeatureSet|null} [features] FileOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.features = null;
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 50: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                    message[".google.api.resourceDefinition"] = [];
                                message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.FileOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                        object.features = null;
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {google.protobuf.IFeatureSet|null} [features] MessageOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.features = null;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 12: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object.features = null;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {Array.<google.protobuf.FieldOptions.OptionTargetType>|null} [targets] FieldOptions targets
                 * @property {Array.<google.protobuf.FieldOptions.IEditionDefault>|null} [editionDefaults] FieldOptions editionDefaults
                 * @property {google.protobuf.IFeatureSet|null} [features] FieldOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.targets = [];
                    this.editionDefaults = [];
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions targets.
                 * @member {Array.<google.protobuf.FieldOptions.OptionTargetType>} targets
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.targets = $util.emptyArray;
    
                /**
                 * FieldOptions editionDefaults.
                 * @member {Array.<google.protobuf.FieldOptions.IEditionDefault>} editionDefaults
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.editionDefaults = $util.emptyArray;
    
                /**
                 * FieldOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.features = null;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.targets != null && message.targets.length)
                        for (var i = 0; i < message.targets.length; ++i)
                            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.targets[i]);
                    if (message.editionDefaults != null && message.editionDefaults.length)
                        for (var i = 0; i < message.editionDefaults.length; ++i)
                            $root.google.protobuf.FieldOptions.EditionDefault.encode(message.editionDefaults[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 19: {
                                if (!(message.targets && message.targets.length))
                                    message.targets = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.targets.push(reader.int32());
                                } else
                                    message.targets.push(reader.int32());
                                break;
                            }
                        case 20: {
                                if (!(message.editionDefaults && message.editionDefaults.length))
                                    message.editionDefaults = [];
                                message.editionDefaults.push($root.google.protobuf.FieldOptions.EditionDefault.decode(reader, reader.uint32()));
                                break;
                            }
                        case 21: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        case 1055: {
                                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.targets != null && message.hasOwnProperty("targets")) {
                        if (!Array.isArray(message.targets))
                            return "targets: array expected";
                        for (var i = 0; i < message.targets.length; ++i)
                            switch (message.targets[i]) {
                            default:
                                return "targets: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                    }
                    if (message.editionDefaults != null && message.hasOwnProperty("editionDefaults")) {
                        if (!Array.isArray(message.editionDefaults))
                            return "editionDefaults: array expected";
                        for (var i = 0; i < message.editionDefaults.length; ++i) {
                            var error = $root.google.protobuf.FieldOptions.EditionDefault.verify(message.editionDefaults[i]);
                            if (error)
                                return "editionDefaults." + error;
                        }
                    }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    if (object.targets) {
                        if (!Array.isArray(object.targets))
                            throw TypeError(".google.protobuf.FieldOptions.targets: array expected");
                        message.targets = [];
                        for (var i = 0; i < object.targets.length; ++i)
                            switch (object.targets[i]) {
                            default:
                                if (typeof object.targets[i] === "number") {
                                    message.targets[i] = object.targets[i];
                                    break;
                                }
                            case "TARGET_TYPE_UNKNOWN":
                            case 0:
                                message.targets[i] = 0;
                                break;
                            case "TARGET_TYPE_FILE":
                            case 1:
                                message.targets[i] = 1;
                                break;
                            case "TARGET_TYPE_EXTENSION_RANGE":
                            case 2:
                                message.targets[i] = 2;
                                break;
                            case "TARGET_TYPE_MESSAGE":
                            case 3:
                                message.targets[i] = 3;
                                break;
                            case "TARGET_TYPE_FIELD":
                            case 4:
                                message.targets[i] = 4;
                                break;
                            case "TARGET_TYPE_ONEOF":
                            case 5:
                                message.targets[i] = 5;
                                break;
                            case "TARGET_TYPE_ENUM":
                            case 6:
                                message.targets[i] = 6;
                                break;
                            case "TARGET_TYPE_ENUM_ENTRY":
                            case 7:
                                message.targets[i] = 7;
                                break;
                            case "TARGET_TYPE_SERVICE":
                            case 8:
                                message.targets[i] = 8;
                                break;
                            case "TARGET_TYPE_METHOD":
                            case 9:
                                message.targets[i] = 9;
                                break;
                            }
                    }
                    if (object.editionDefaults) {
                        if (!Array.isArray(object.editionDefaults))
                            throw TypeError(".google.protobuf.FieldOptions.editionDefaults: array expected");
                        message.editionDefaults = [];
                        for (var i = 0; i < object.editionDefaults.length; ++i) {
                            if (typeof object.editionDefaults[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.editionDefaults: object expected");
                            message.editionDefaults[i] = $root.google.protobuf.FieldOptions.EditionDefault.fromObject(object.editionDefaults[i]);
                        }
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            case "IDENTIFIER":
                            case 8:
                                message[".google.api.fieldBehavior"][i] = 8;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.targets = [];
                        object.editionDefaults = [];
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.features = null;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.targets && message.targets.length) {
                        object.targets = [];
                        for (var j = 0; j < message.targets.length; ++j)
                            object.targets[j] = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] === undefined ? message.targets[j] : $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] : message.targets[j];
                    }
                    if (message.editionDefaults && message.editionDefaults.length) {
                        object.editionDefaults = [];
                        for (var j = 0; j < message.editionDefaults.length; ++j)
                            object.editionDefaults[j] = $root.google.protobuf.FieldOptions.EditionDefault.toObject(message.editionDefaults[j], options);
                    }
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                FieldOptions.EditionDefault = (function() {
    
                    /**
                     * Properties of an EditionDefault.
                     * @memberof google.protobuf.FieldOptions
                     * @interface IEditionDefault
                     * @property {google.protobuf.Edition|null} [edition] EditionDefault edition
                     * @property {string|null} [value] EditionDefault value
                     */
    
                    /**
                     * Constructs a new EditionDefault.
                     * @memberof google.protobuf.FieldOptions
                     * @classdesc Represents an EditionDefault.
                     * @implements IEditionDefault
                     * @constructor
                     * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                     */
                    function EditionDefault(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EditionDefault edition.
                     * @member {google.protobuf.Edition} edition
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     */
                    EditionDefault.prototype.edition = 0;
    
                    /**
                     * EditionDefault value.
                     * @member {string} value
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     */
                    EditionDefault.prototype.value = "";
    
                    /**
                     * Creates a new EditionDefault instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault instance
                     */
                    EditionDefault.create = function create(properties) {
                        return new EditionDefault(properties);
                    };
    
                    /**
                     * Encodes the specified EditionDefault message. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EditionDefault.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                        if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EditionDefault message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EditionDefault.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions.EditionDefault();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 3: {
                                    message.edition = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.value = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EditionDefault message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EditionDefault.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EditionDefault message.
                     * @function verify
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EditionDefault.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            switch (message.edition) {
                            default:
                                return "edition: enum value expected";
                            case 0:
                            case 998:
                            case 999:
                            case 1000:
                            case 1001:
                            case 1:
                            case 2:
                            case 99997:
                            case 99998:
                            case 99999:
                            case 2147483647:
                                break;
                            }
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an EditionDefault message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     */
                    EditionDefault.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.FieldOptions.EditionDefault)
                            return object;
                        var message = new $root.google.protobuf.FieldOptions.EditionDefault();
                        switch (object.edition) {
                        default:
                            if (typeof object.edition === "number") {
                                message.edition = object.edition;
                                break;
                            }
                            break;
                        case "EDITION_UNKNOWN":
                        case 0:
                            message.edition = 0;
                            break;
                        case "EDITION_PROTO2":
                        case 998:
                            message.edition = 998;
                            break;
                        case "EDITION_PROTO3":
                        case 999:
                            message.edition = 999;
                            break;
                        case "EDITION_2023":
                        case 1000:
                            message.edition = 1000;
                            break;
                        case "EDITION_2024":
                        case 1001:
                            message.edition = 1001;
                            break;
                        case "EDITION_1_TEST_ONLY":
                        case 1:
                            message.edition = 1;
                            break;
                        case "EDITION_2_TEST_ONLY":
                        case 2:
                            message.edition = 2;
                            break;
                        case "EDITION_99997_TEST_ONLY":
                        case 99997:
                            message.edition = 99997;
                            break;
                        case "EDITION_99998_TEST_ONLY":
                        case 99998:
                            message.edition = 99998;
                            break;
                        case "EDITION_99999_TEST_ONLY":
                        case 99999:
                            message.edition = 99999;
                            break;
                        case "EDITION_MAX":
                        case 2147483647:
                            message.edition = 2147483647;
                            break;
                        }
                        if (object.value != null)
                            message.value = String(object.value);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EditionDefault message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.EditionDefault} message EditionDefault
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EditionDefault.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.value = "";
                            object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        }
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                        return object;
                    };
    
                    /**
                     * Converts this EditionDefault to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EditionDefault.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EditionDefault
                     * @function getTypeUrl
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.FieldOptions.EditionDefault";
                    };
    
                    return EditionDefault;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {google.protobuf.IFeatureSet|null} [features] OneofOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.features = null;
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.features = null;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {google.protobuf.IFeatureSet|null} [features] EnumOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.features = null;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 7: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object.features = null;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {google.protobuf.IFeatureSet|null} [features] EnumValueOptions features
                 * @property {boolean|null} [debugRedact] EnumValueOptions debugRedact
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.features = null;
    
                /**
                 * EnumValueOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.debugRedact = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.debugRedact);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 2: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.features = null;
                        object.debugRedact = false;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {google.protobuf.IFeatureSet|null} [features] ServiceOptions features
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.features = null;
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 34: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.features = null;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {google.protobuf.IFeatureSet|null} [features] MethodOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.features = null;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 35: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object.features = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.FeatureSet = (function() {
    
                /**
                 * Properties of a FeatureSet.
                 * @memberof google.protobuf
                 * @interface IFeatureSet
                 * @property {google.protobuf.FeatureSet.FieldPresence|null} [fieldPresence] FeatureSet fieldPresence
                 * @property {google.protobuf.FeatureSet.EnumType|null} [enumType] FeatureSet enumType
                 * @property {google.protobuf.FeatureSet.RepeatedFieldEncoding|null} [repeatedFieldEncoding] FeatureSet repeatedFieldEncoding
                 * @property {google.protobuf.FeatureSet.Utf8Validation|null} [utf8Validation] FeatureSet utf8Validation
                 * @property {google.protobuf.FeatureSet.MessageEncoding|null} [messageEncoding] FeatureSet messageEncoding
                 * @property {google.protobuf.FeatureSet.JsonFormat|null} [jsonFormat] FeatureSet jsonFormat
                 */
    
                /**
                 * Constructs a new FeatureSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FeatureSet.
                 * @implements IFeatureSet
                 * @constructor
                 * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
                 */
                function FeatureSet(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeatureSet fieldPresence.
                 * @member {google.protobuf.FeatureSet.FieldPresence} fieldPresence
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.fieldPresence = 0;
    
                /**
                 * FeatureSet enumType.
                 * @member {google.protobuf.FeatureSet.EnumType} enumType
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.enumType = 0;
    
                /**
                 * FeatureSet repeatedFieldEncoding.
                 * @member {google.protobuf.FeatureSet.RepeatedFieldEncoding} repeatedFieldEncoding
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.repeatedFieldEncoding = 0;
    
                /**
                 * FeatureSet utf8Validation.
                 * @member {google.protobuf.FeatureSet.Utf8Validation} utf8Validation
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.utf8Validation = 0;
    
                /**
                 * FeatureSet messageEncoding.
                 * @member {google.protobuf.FeatureSet.MessageEncoding} messageEncoding
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.messageEncoding = 0;
    
                /**
                 * FeatureSet jsonFormat.
                 * @member {google.protobuf.FeatureSet.JsonFormat} jsonFormat
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.jsonFormat = 0;
    
                /**
                 * Creates a new FeatureSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSet} FeatureSet instance
                 */
                FeatureSet.create = function create(properties) {
                    return new FeatureSet(properties);
                };
    
                /**
                 * Encodes the specified FeatureSet message. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fieldPresence != null && Object.hasOwnProperty.call(message, "fieldPresence"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.fieldPresence);
                    if (message.enumType != null && Object.hasOwnProperty.call(message, "enumType"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.enumType);
                    if (message.repeatedFieldEncoding != null && Object.hasOwnProperty.call(message, "repeatedFieldEncoding"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.repeatedFieldEncoding);
                    if (message.utf8Validation != null && Object.hasOwnProperty.call(message, "utf8Validation"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.utf8Validation);
                    if (message.messageEncoding != null && Object.hasOwnProperty.call(message, "messageEncoding"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.messageEncoding);
                    if (message.jsonFormat != null && Object.hasOwnProperty.call(message, "jsonFormat"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jsonFormat);
                    return writer;
                };
    
                /**
                 * Encodes the specified FeatureSet message, length delimited. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeatureSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fieldPresence = reader.int32();
                                break;
                            }
                        case 2: {
                                message.enumType = reader.int32();
                                break;
                            }
                        case 3: {
                                message.repeatedFieldEncoding = reader.int32();
                                break;
                            }
                        case 4: {
                                message.utf8Validation = reader.int32();
                                break;
                            }
                        case 5: {
                                message.messageEncoding = reader.int32();
                                break;
                            }
                        case 6: {
                                message.jsonFormat = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeatureSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeatureSet message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fieldPresence != null && message.hasOwnProperty("fieldPresence"))
                        switch (message.fieldPresence) {
                        default:
                            return "fieldPresence: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.enumType != null && message.hasOwnProperty("enumType"))
                        switch (message.enumType) {
                        default:
                            return "enumType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.repeatedFieldEncoding != null && message.hasOwnProperty("repeatedFieldEncoding"))
                        switch (message.repeatedFieldEncoding) {
                        default:
                            return "repeatedFieldEncoding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.utf8Validation != null && message.hasOwnProperty("utf8Validation"))
                        switch (message.utf8Validation) {
                        default:
                            return "utf8Validation: enum value expected";
                        case 0:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.messageEncoding != null && message.hasOwnProperty("messageEncoding"))
                        switch (message.messageEncoding) {
                        default:
                            return "messageEncoding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.jsonFormat != null && message.hasOwnProperty("jsonFormat"))
                        switch (message.jsonFormat) {
                        default:
                            return "jsonFormat: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FeatureSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 */
                FeatureSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSet)
                        return object;
                    var message = new $root.google.protobuf.FeatureSet();
                    switch (object.fieldPresence) {
                    default:
                        if (typeof object.fieldPresence === "number") {
                            message.fieldPresence = object.fieldPresence;
                            break;
                        }
                        break;
                    case "FIELD_PRESENCE_UNKNOWN":
                    case 0:
                        message.fieldPresence = 0;
                        break;
                    case "EXPLICIT":
                    case 1:
                        message.fieldPresence = 1;
                        break;
                    case "IMPLICIT":
                    case 2:
                        message.fieldPresence = 2;
                        break;
                    case "LEGACY_REQUIRED":
                    case 3:
                        message.fieldPresence = 3;
                        break;
                    }
                    switch (object.enumType) {
                    default:
                        if (typeof object.enumType === "number") {
                            message.enumType = object.enumType;
                            break;
                        }
                        break;
                    case "ENUM_TYPE_UNKNOWN":
                    case 0:
                        message.enumType = 0;
                        break;
                    case "OPEN":
                    case 1:
                        message.enumType = 1;
                        break;
                    case "CLOSED":
                    case 2:
                        message.enumType = 2;
                        break;
                    }
                    switch (object.repeatedFieldEncoding) {
                    default:
                        if (typeof object.repeatedFieldEncoding === "number") {
                            message.repeatedFieldEncoding = object.repeatedFieldEncoding;
                            break;
                        }
                        break;
                    case "REPEATED_FIELD_ENCODING_UNKNOWN":
                    case 0:
                        message.repeatedFieldEncoding = 0;
                        break;
                    case "PACKED":
                    case 1:
                        message.repeatedFieldEncoding = 1;
                        break;
                    case "EXPANDED":
                    case 2:
                        message.repeatedFieldEncoding = 2;
                        break;
                    }
                    switch (object.utf8Validation) {
                    default:
                        if (typeof object.utf8Validation === "number") {
                            message.utf8Validation = object.utf8Validation;
                            break;
                        }
                        break;
                    case "UTF8_VALIDATION_UNKNOWN":
                    case 0:
                        message.utf8Validation = 0;
                        break;
                    case "VERIFY":
                    case 2:
                        message.utf8Validation = 2;
                        break;
                    case "NONE":
                    case 3:
                        message.utf8Validation = 3;
                        break;
                    }
                    switch (object.messageEncoding) {
                    default:
                        if (typeof object.messageEncoding === "number") {
                            message.messageEncoding = object.messageEncoding;
                            break;
                        }
                        break;
                    case "MESSAGE_ENCODING_UNKNOWN":
                    case 0:
                        message.messageEncoding = 0;
                        break;
                    case "LENGTH_PREFIXED":
                    case 1:
                        message.messageEncoding = 1;
                        break;
                    case "DELIMITED":
                    case 2:
                        message.messageEncoding = 2;
                        break;
                    }
                    switch (object.jsonFormat) {
                    default:
                        if (typeof object.jsonFormat === "number") {
                            message.jsonFormat = object.jsonFormat;
                            break;
                        }
                        break;
                    case "JSON_FORMAT_UNKNOWN":
                    case 0:
                        message.jsonFormat = 0;
                        break;
                    case "ALLOW":
                    case 1:
                        message.jsonFormat = 1;
                        break;
                    case "LEGACY_BEST_EFFORT":
                    case 2:
                        message.jsonFormat = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeatureSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.FeatureSet} message FeatureSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.fieldPresence = options.enums === String ? "FIELD_PRESENCE_UNKNOWN" : 0;
                        object.enumType = options.enums === String ? "ENUM_TYPE_UNKNOWN" : 0;
                        object.repeatedFieldEncoding = options.enums === String ? "REPEATED_FIELD_ENCODING_UNKNOWN" : 0;
                        object.utf8Validation = options.enums === String ? "UTF8_VALIDATION_UNKNOWN" : 0;
                        object.messageEncoding = options.enums === String ? "MESSAGE_ENCODING_UNKNOWN" : 0;
                        object.jsonFormat = options.enums === String ? "JSON_FORMAT_UNKNOWN" : 0;
                    }
                    if (message.fieldPresence != null && message.hasOwnProperty("fieldPresence"))
                        object.fieldPresence = options.enums === String ? $root.google.protobuf.FeatureSet.FieldPresence[message.fieldPresence] === undefined ? message.fieldPresence : $root.google.protobuf.FeatureSet.FieldPresence[message.fieldPresence] : message.fieldPresence;
                    if (message.enumType != null && message.hasOwnProperty("enumType"))
                        object.enumType = options.enums === String ? $root.google.protobuf.FeatureSet.EnumType[message.enumType] === undefined ? message.enumType : $root.google.protobuf.FeatureSet.EnumType[message.enumType] : message.enumType;
                    if (message.repeatedFieldEncoding != null && message.hasOwnProperty("repeatedFieldEncoding"))
                        object.repeatedFieldEncoding = options.enums === String ? $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeatedFieldEncoding] === undefined ? message.repeatedFieldEncoding : $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeatedFieldEncoding] : message.repeatedFieldEncoding;
                    if (message.utf8Validation != null && message.hasOwnProperty("utf8Validation"))
                        object.utf8Validation = options.enums === String ? $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8Validation] === undefined ? message.utf8Validation : $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8Validation] : message.utf8Validation;
                    if (message.messageEncoding != null && message.hasOwnProperty("messageEncoding"))
                        object.messageEncoding = options.enums === String ? $root.google.protobuf.FeatureSet.MessageEncoding[message.messageEncoding] === undefined ? message.messageEncoding : $root.google.protobuf.FeatureSet.MessageEncoding[message.messageEncoding] : message.messageEncoding;
                    if (message.jsonFormat != null && message.hasOwnProperty("jsonFormat"))
                        object.jsonFormat = options.enums === String ? $root.google.protobuf.FeatureSet.JsonFormat[message.jsonFormat] === undefined ? message.jsonFormat : $root.google.protobuf.FeatureSet.JsonFormat[message.jsonFormat] : message.jsonFormat;
                    return object;
                };
    
                /**
                 * Converts this FeatureSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FeatureSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSet";
                };
    
                /**
                 * FieldPresence enum.
                 * @name google.protobuf.FeatureSet.FieldPresence
                 * @enum {number}
                 * @property {number} FIELD_PRESENCE_UNKNOWN=0 FIELD_PRESENCE_UNKNOWN value
                 * @property {number} EXPLICIT=1 EXPLICIT value
                 * @property {number} IMPLICIT=2 IMPLICIT value
                 * @property {number} LEGACY_REQUIRED=3 LEGACY_REQUIRED value
                 */
                FeatureSet.FieldPresence = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "FIELD_PRESENCE_UNKNOWN"] = 0;
                    values[valuesById[1] = "EXPLICIT"] = 1;
                    values[valuesById[2] = "IMPLICIT"] = 2;
                    values[valuesById[3] = "LEGACY_REQUIRED"] = 3;
                    return values;
                })();
    
                /**
                 * EnumType enum.
                 * @name google.protobuf.FeatureSet.EnumType
                 * @enum {number}
                 * @property {number} ENUM_TYPE_UNKNOWN=0 ENUM_TYPE_UNKNOWN value
                 * @property {number} OPEN=1 OPEN value
                 * @property {number} CLOSED=2 CLOSED value
                 */
                FeatureSet.EnumType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENUM_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "OPEN"] = 1;
                    values[valuesById[2] = "CLOSED"] = 2;
                    return values;
                })();
    
                /**
                 * RepeatedFieldEncoding enum.
                 * @name google.protobuf.FeatureSet.RepeatedFieldEncoding
                 * @enum {number}
                 * @property {number} REPEATED_FIELD_ENCODING_UNKNOWN=0 REPEATED_FIELD_ENCODING_UNKNOWN value
                 * @property {number} PACKED=1 PACKED value
                 * @property {number} EXPANDED=2 EXPANDED value
                 */
                FeatureSet.RepeatedFieldEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "REPEATED_FIELD_ENCODING_UNKNOWN"] = 0;
                    values[valuesById[1] = "PACKED"] = 1;
                    values[valuesById[2] = "EXPANDED"] = 2;
                    return values;
                })();
    
                /**
                 * Utf8Validation enum.
                 * @name google.protobuf.FeatureSet.Utf8Validation
                 * @enum {number}
                 * @property {number} UTF8_VALIDATION_UNKNOWN=0 UTF8_VALIDATION_UNKNOWN value
                 * @property {number} VERIFY=2 VERIFY value
                 * @property {number} NONE=3 NONE value
                 */
                FeatureSet.Utf8Validation = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UTF8_VALIDATION_UNKNOWN"] = 0;
                    values[valuesById[2] = "VERIFY"] = 2;
                    values[valuesById[3] = "NONE"] = 3;
                    return values;
                })();
    
                /**
                 * MessageEncoding enum.
                 * @name google.protobuf.FeatureSet.MessageEncoding
                 * @enum {number}
                 * @property {number} MESSAGE_ENCODING_UNKNOWN=0 MESSAGE_ENCODING_UNKNOWN value
                 * @property {number} LENGTH_PREFIXED=1 LENGTH_PREFIXED value
                 * @property {number} DELIMITED=2 DELIMITED value
                 */
                FeatureSet.MessageEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MESSAGE_ENCODING_UNKNOWN"] = 0;
                    values[valuesById[1] = "LENGTH_PREFIXED"] = 1;
                    values[valuesById[2] = "DELIMITED"] = 2;
                    return values;
                })();
    
                /**
                 * JsonFormat enum.
                 * @name google.protobuf.FeatureSet.JsonFormat
                 * @enum {number}
                 * @property {number} JSON_FORMAT_UNKNOWN=0 JSON_FORMAT_UNKNOWN value
                 * @property {number} ALLOW=1 ALLOW value
                 * @property {number} LEGACY_BEST_EFFORT=2 LEGACY_BEST_EFFORT value
                 */
                FeatureSet.JsonFormat = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JSON_FORMAT_UNKNOWN"] = 0;
                    values[valuesById[1] = "ALLOW"] = 1;
                    values[valuesById[2] = "LEGACY_BEST_EFFORT"] = 2;
                    return values;
                })();
    
                return FeatureSet;
            })();
    
            protobuf.FeatureSetDefaults = (function() {
    
                /**
                 * Properties of a FeatureSetDefaults.
                 * @memberof google.protobuf
                 * @interface IFeatureSetDefaults
                 * @property {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>|null} [defaults] FeatureSetDefaults defaults
                 * @property {google.protobuf.Edition|null} [minimumEdition] FeatureSetDefaults minimumEdition
                 * @property {google.protobuf.Edition|null} [maximumEdition] FeatureSetDefaults maximumEdition
                 */
    
                /**
                 * Constructs a new FeatureSetDefaults.
                 * @memberof google.protobuf
                 * @classdesc Represents a FeatureSetDefaults.
                 * @implements IFeatureSetDefaults
                 * @constructor
                 * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
                 */
                function FeatureSetDefaults(properties) {
                    this.defaults = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeatureSetDefaults defaults.
                 * @member {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>} defaults
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.defaults = $util.emptyArray;
    
                /**
                 * FeatureSetDefaults minimumEdition.
                 * @member {google.protobuf.Edition} minimumEdition
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.minimumEdition = 0;
    
                /**
                 * FeatureSetDefaults maximumEdition.
                 * @member {google.protobuf.Edition} maximumEdition
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.maximumEdition = 0;
    
                /**
                 * Creates a new FeatureSetDefaults instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults instance
                 */
                FeatureSetDefaults.create = function create(properties) {
                    return new FeatureSetDefaults(properties);
                };
    
                /**
                 * Encodes the specified FeatureSetDefaults message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetDefaults.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.defaults != null && message.defaults.length)
                        for (var i = 0; i < message.defaults.length; ++i)
                            $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.encode(message.defaults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.minimumEdition != null && Object.hasOwnProperty.call(message, "minimumEdition"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minimumEdition);
                    if (message.maximumEdition != null && Object.hasOwnProperty.call(message, "maximumEdition"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maximumEdition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FeatureSetDefaults message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetDefaults.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeatureSetDefaults message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetDefaults.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.defaults && message.defaults.length))
                                    message.defaults = [];
                                message.defaults.push($root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.minimumEdition = reader.int32();
                                break;
                            }
                        case 5: {
                                message.maximumEdition = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeatureSetDefaults message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetDefaults.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeatureSetDefaults message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSetDefaults.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.defaults != null && message.hasOwnProperty("defaults")) {
                        if (!Array.isArray(message.defaults))
                            return "defaults: array expected";
                        for (var i = 0; i < message.defaults.length; ++i) {
                            var error = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify(message.defaults[i]);
                            if (error)
                                return "defaults." + error;
                        }
                    }
                    if (message.minimumEdition != null && message.hasOwnProperty("minimumEdition"))
                        switch (message.minimumEdition) {
                        default:
                            return "minimumEdition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.maximumEdition != null && message.hasOwnProperty("maximumEdition"))
                        switch (message.maximumEdition) {
                        default:
                            return "maximumEdition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FeatureSetDefaults message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 */
                FeatureSetDefaults.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSetDefaults)
                        return object;
                    var message = new $root.google.protobuf.FeatureSetDefaults();
                    if (object.defaults) {
                        if (!Array.isArray(object.defaults))
                            throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: array expected");
                        message.defaults = [];
                        for (var i = 0; i < object.defaults.length; ++i) {
                            if (typeof object.defaults[i] !== "object")
                                throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: object expected");
                            message.defaults[i] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.fromObject(object.defaults[i]);
                        }
                    }
                    switch (object.minimumEdition) {
                    default:
                        if (typeof object.minimumEdition === "number") {
                            message.minimumEdition = object.minimumEdition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.minimumEdition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.minimumEdition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.minimumEdition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.minimumEdition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.minimumEdition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.minimumEdition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.minimumEdition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.minimumEdition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.minimumEdition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.minimumEdition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.minimumEdition = 2147483647;
                        break;
                    }
                    switch (object.maximumEdition) {
                    default:
                        if (typeof object.maximumEdition === "number") {
                            message.maximumEdition = object.maximumEdition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.maximumEdition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.maximumEdition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.maximumEdition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.maximumEdition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.maximumEdition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.maximumEdition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.maximumEdition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.maximumEdition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.maximumEdition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.maximumEdition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.maximumEdition = 2147483647;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeatureSetDefaults message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults} message FeatureSetDefaults
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSetDefaults.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.defaults = [];
                    if (options.defaults) {
                        object.minimumEdition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        object.maximumEdition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.defaults && message.defaults.length) {
                        object.defaults = [];
                        for (var j = 0; j < message.defaults.length; ++j)
                            object.defaults[j] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.toObject(message.defaults[j], options);
                    }
                    if (message.minimumEdition != null && message.hasOwnProperty("minimumEdition"))
                        object.minimumEdition = options.enums === String ? $root.google.protobuf.Edition[message.minimumEdition] === undefined ? message.minimumEdition : $root.google.protobuf.Edition[message.minimumEdition] : message.minimumEdition;
                    if (message.maximumEdition != null && message.hasOwnProperty("maximumEdition"))
                        object.maximumEdition = options.enums === String ? $root.google.protobuf.Edition[message.maximumEdition] === undefined ? message.maximumEdition : $root.google.protobuf.Edition[message.maximumEdition] : message.maximumEdition;
                    return object;
                };
    
                /**
                 * Converts this FeatureSetDefaults to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSetDefaults.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FeatureSetDefaults
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSetDefaults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults";
                };
    
                FeatureSetDefaults.FeatureSetEditionDefault = (function() {
    
                    /**
                     * Properties of a FeatureSetEditionDefault.
                     * @memberof google.protobuf.FeatureSetDefaults
                     * @interface IFeatureSetEditionDefault
                     * @property {google.protobuf.Edition|null} [edition] FeatureSetEditionDefault edition
                     * @property {google.protobuf.IFeatureSet|null} [features] FeatureSetEditionDefault features
                     */
    
                    /**
                     * Constructs a new FeatureSetEditionDefault.
                     * @memberof google.protobuf.FeatureSetDefaults
                     * @classdesc Represents a FeatureSetEditionDefault.
                     * @implements IFeatureSetEditionDefault
                     * @constructor
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                     */
                    function FeatureSetEditionDefault(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FeatureSetEditionDefault edition.
                     * @member {google.protobuf.Edition} edition
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     */
                    FeatureSetEditionDefault.prototype.edition = 0;
    
                    /**
                     * FeatureSetEditionDefault features.
                     * @member {google.protobuf.IFeatureSet|null|undefined} features
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     */
                    FeatureSetEditionDefault.prototype.features = null;
    
                    /**
                     * Creates a new FeatureSetEditionDefault instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault instance
                     */
                    FeatureSetEditionDefault.create = function create(properties) {
                        return new FeatureSetEditionDefault(properties);
                    };
    
                    /**
                     * Encodes the specified FeatureSetEditionDefault message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FeatureSetEditionDefault.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                            $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FeatureSetEditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FeatureSetEditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FeatureSetEditionDefault message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FeatureSetEditionDefault.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 3: {
                                    message.edition = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FeatureSetEditionDefault message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FeatureSetEditionDefault.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FeatureSetEditionDefault message.
                     * @function verify
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FeatureSetEditionDefault.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            switch (message.edition) {
                            default:
                                return "edition: enum value expected";
                            case 0:
                            case 998:
                            case 999:
                            case 1000:
                            case 1001:
                            case 1:
                            case 2:
                            case 99997:
                            case 99998:
                            case 99999:
                            case 2147483647:
                                break;
                            }
                        if (message.features != null && message.hasOwnProperty("features")) {
                            var error = $root.google.protobuf.FeatureSet.verify(message.features);
                            if (error)
                                return "features." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a FeatureSetEditionDefault message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     */
                    FeatureSetEditionDefault.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault)
                            return object;
                        var message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                        switch (object.edition) {
                        default:
                            if (typeof object.edition === "number") {
                                message.edition = object.edition;
                                break;
                            }
                            break;
                        case "EDITION_UNKNOWN":
                        case 0:
                            message.edition = 0;
                            break;
                        case "EDITION_PROTO2":
                        case 998:
                            message.edition = 998;
                            break;
                        case "EDITION_PROTO3":
                        case 999:
                            message.edition = 999;
                            break;
                        case "EDITION_2023":
                        case 1000:
                            message.edition = 1000;
                            break;
                        case "EDITION_2024":
                        case 1001:
                            message.edition = 1001;
                            break;
                        case "EDITION_1_TEST_ONLY":
                        case 1:
                            message.edition = 1;
                            break;
                        case "EDITION_2_TEST_ONLY":
                        case 2:
                            message.edition = 2;
                            break;
                        case "EDITION_99997_TEST_ONLY":
                        case 99997:
                            message.edition = 99997;
                            break;
                        case "EDITION_99998_TEST_ONLY":
                        case 99998:
                            message.edition = 99998;
                            break;
                        case "EDITION_99999_TEST_ONLY":
                        case 99999:
                            message.edition = 99999;
                            break;
                        case "EDITION_MAX":
                        case 2147483647:
                            message.edition = 2147483647;
                            break;
                        }
                        if (object.features != null) {
                            if (typeof object.features !== "object")
                                throw TypeError(".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.features: object expected");
                            message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FeatureSetEditionDefault message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} message FeatureSetEditionDefault
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FeatureSetEditionDefault.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.features = null;
                            object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        }
                        if (message.features != null && message.hasOwnProperty("features"))
                            object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                        return object;
                    };
    
                    /**
                     * Converts this FeatureSetEditionDefault to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FeatureSetEditionDefault.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for FeatureSetEditionDefault
                     * @function getTypeUrl
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    FeatureSetEditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
                    };
    
                    return FeatureSetEditionDefault;
                })();
    
                return FeatureSetDefaults;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldMask
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldMask";
                };
    
                return FieldMask;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            return protobuf;
        })();
    
        google.devtools = (function() {
    
            /**
             * Namespace devtools.
             * @memberof google
             * @namespace
             */
            var devtools = {};
    
            devtools.containeranalysis = (function() {
    
                /**
                 * Namespace containeranalysis.
                 * @memberof google.devtools
                 * @namespace
                 */
                var containeranalysis = {};
    
                containeranalysis.v1beta1 = (function() {
    
                    /**
                     * Namespace v1beta1.
                     * @memberof google.devtools.containeranalysis
                     * @namespace
                     */
                    var v1beta1 = {};
    
                    v1beta1.ContainerAnalysisV1Beta1 = (function() {
    
                        /**
                         * Constructs a new ContainerAnalysisV1Beta1 service.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @classdesc Represents a ContainerAnalysisV1Beta1
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function ContainerAnalysisV1Beta1(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (ContainerAnalysisV1Beta1.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ContainerAnalysisV1Beta1;
    
                        /**
                         * Creates new ContainerAnalysisV1Beta1 service using the specified rpc implementation.
                         * @function create
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {ContainerAnalysisV1Beta1} RPC service. Useful where requests and/or responses are streamed.
                         */
                        ContainerAnalysisV1Beta1.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1|setIamPolicy}.
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @typedef SetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @param {google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ContainerAnalysisV1Beta1.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                            return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "SetIamPolicy" });
    
                        /**
                         * Calls SetIamPolicy.
                         * @function setIamPolicy
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1|getIamPolicy}.
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @typedef GetIamPolicyCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.Policy} [response] Policy
                         */
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @param {google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ContainerAnalysisV1Beta1.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                            return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                        }, "name", { value: "GetIamPolicy" });
    
                        /**
                         * Calls GetIamPolicy.
                         * @function getIamPolicy
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                         * @returns {Promise<google.iam.v1.Policy>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1|testIamPermissions}.
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @typedef TestIamPermissionsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                         */
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @param {google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ContainerAnalysisV1Beta1.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                            return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                        }, "name", { value: "TestIamPermissions" });
    
                        /**
                         * Calls TestIamPermissions.
                         * @function testIamPermissions
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                         * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1|generatePackagesSummary}.
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @typedef GeneratePackagesSummaryCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} [response] PackagesSummaryResponse
                         */
    
                        /**
                         * Calls GeneratePackagesSummary.
                         * @function generatePackagesSummary
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest} request GeneratePackagesSummaryRequest message or plain object
                         * @param {google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1.GeneratePackagesSummaryCallback} callback Node-style callback called with the error, if any, and PackagesSummaryResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ContainerAnalysisV1Beta1.prototype.generatePackagesSummary = function generatePackagesSummary(request, callback) {
                            return this.rpcCall(generatePackagesSummary, $root.google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest, $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse, request, callback);
                        }, "name", { value: "GeneratePackagesSummary" });
    
                        /**
                         * Calls GeneratePackagesSummary.
                         * @function generatePackagesSummary
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest} request GeneratePackagesSummaryRequest message or plain object
                         * @returns {Promise<google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1|exportSBOM}.
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @typedef ExportSBOMCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} [response] ExportSBOMResponse
                         */
    
                        /**
                         * Calls ExportSBOM.
                         * @function exportSBOM
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest} request ExportSBOMRequest message or plain object
                         * @param {google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1.ExportSBOMCallback} callback Node-style callback called with the error, if any, and ExportSBOMResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ContainerAnalysisV1Beta1.prototype.exportSBOM = function exportSBOM(request, callback) {
                            return this.rpcCall(exportSBOM, $root.google.devtools.containeranalysis.v1beta1.ExportSBOMRequest, $root.google.devtools.containeranalysis.v1beta1.ExportSBOMResponse, request, callback);
                        }, "name", { value: "ExportSBOM" });
    
                        /**
                         * Calls ExportSBOM.
                         * @function exportSBOM
                         * @memberof google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1
                         * @instance
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest} request ExportSBOMRequest message or plain object
                         * @returns {Promise<google.devtools.containeranalysis.v1beta1.ExportSBOMResponse>} Promise
                         * @variation 2
                         */
    
                        return ContainerAnalysisV1Beta1;
                    })();
    
                    v1beta1.GeneratePackagesSummaryRequest = (function() {
    
                        /**
                         * Properties of a GeneratePackagesSummaryRequest.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @interface IGeneratePackagesSummaryRequest
                         * @property {string|null} [name] GeneratePackagesSummaryRequest name
                         */
    
                        /**
                         * Constructs a new GeneratePackagesSummaryRequest.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @classdesc Represents a GeneratePackagesSummaryRequest.
                         * @implements IGeneratePackagesSummaryRequest
                         * @constructor
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest=} [properties] Properties to set
                         */
                        function GeneratePackagesSummaryRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GeneratePackagesSummaryRequest name.
                         * @member {string} name
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @instance
                         */
                        GeneratePackagesSummaryRequest.prototype.name = "";
    
                        /**
                         * Creates a new GeneratePackagesSummaryRequest instance using the specified properties.
                         * @function create
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest=} [properties] Properties to set
                         * @returns {google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest} GeneratePackagesSummaryRequest instance
                         */
                        GeneratePackagesSummaryRequest.create = function create(properties) {
                            return new GeneratePackagesSummaryRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GeneratePackagesSummaryRequest message. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest} message GeneratePackagesSummaryRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GeneratePackagesSummaryRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GeneratePackagesSummaryRequest message, length delimited. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IGeneratePackagesSummaryRequest} message GeneratePackagesSummaryRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GeneratePackagesSummaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GeneratePackagesSummaryRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest} GeneratePackagesSummaryRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GeneratePackagesSummaryRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GeneratePackagesSummaryRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest} GeneratePackagesSummaryRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GeneratePackagesSummaryRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GeneratePackagesSummaryRequest message.
                         * @function verify
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GeneratePackagesSummaryRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GeneratePackagesSummaryRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest} GeneratePackagesSummaryRequest
                         */
                        GeneratePackagesSummaryRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest)
                                return object;
                            var message = new $root.google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GeneratePackagesSummaryRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest} message GeneratePackagesSummaryRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GeneratePackagesSummaryRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GeneratePackagesSummaryRequest to JSON.
                         * @function toJSON
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GeneratePackagesSummaryRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GeneratePackagesSummaryRequest
                         * @function getTypeUrl
                         * @memberof google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GeneratePackagesSummaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.devtools.containeranalysis.v1beta1.GeneratePackagesSummaryRequest";
                        };
    
                        return GeneratePackagesSummaryRequest;
                    })();
    
                    v1beta1.PackagesSummaryResponse = (function() {
    
                        /**
                         * Properties of a PackagesSummaryResponse.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @interface IPackagesSummaryResponse
                         * @property {string|null} [resourceUrl] PackagesSummaryResponse resourceUrl
                         * @property {Array.<google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary>|null} [licensesSummary] PackagesSummaryResponse licensesSummary
                         */
    
                        /**
                         * Constructs a new PackagesSummaryResponse.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @classdesc Represents a PackagesSummaryResponse.
                         * @implements IPackagesSummaryResponse
                         * @constructor
                         * @param {google.devtools.containeranalysis.v1beta1.IPackagesSummaryResponse=} [properties] Properties to set
                         */
                        function PackagesSummaryResponse(properties) {
                            this.licensesSummary = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PackagesSummaryResponse resourceUrl.
                         * @member {string} resourceUrl
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @instance
                         */
                        PackagesSummaryResponse.prototype.resourceUrl = "";
    
                        /**
                         * PackagesSummaryResponse licensesSummary.
                         * @member {Array.<google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary>} licensesSummary
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @instance
                         */
                        PackagesSummaryResponse.prototype.licensesSummary = $util.emptyArray;
    
                        /**
                         * Creates a new PackagesSummaryResponse instance using the specified properties.
                         * @function create
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IPackagesSummaryResponse=} [properties] Properties to set
                         * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} PackagesSummaryResponse instance
                         */
                        PackagesSummaryResponse.create = function create(properties) {
                            return new PackagesSummaryResponse(properties);
                        };
    
                        /**
                         * Encodes the specified PackagesSummaryResponse message. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IPackagesSummaryResponse} message PackagesSummaryResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PackagesSummaryResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.resourceUrl != null && Object.hasOwnProperty.call(message, "resourceUrl"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceUrl);
                            if (message.licensesSummary != null && message.licensesSummary.length)
                                for (var i = 0; i < message.licensesSummary.length; ++i)
                                    $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.encode(message.licensesSummary[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PackagesSummaryResponse message, length delimited. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IPackagesSummaryResponse} message PackagesSummaryResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PackagesSummaryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PackagesSummaryResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} PackagesSummaryResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PackagesSummaryResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.resourceUrl = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.licensesSummary && message.licensesSummary.length))
                                            message.licensesSummary = [];
                                        message.licensesSummary.push($root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PackagesSummaryResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} PackagesSummaryResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PackagesSummaryResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PackagesSummaryResponse message.
                         * @function verify
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PackagesSummaryResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                                if (!$util.isString(message.resourceUrl))
                                    return "resourceUrl: string expected";
                            if (message.licensesSummary != null && message.hasOwnProperty("licensesSummary")) {
                                if (!Array.isArray(message.licensesSummary))
                                    return "licensesSummary: array expected";
                                for (var i = 0; i < message.licensesSummary.length; ++i) {
                                    var error = $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.verify(message.licensesSummary[i]);
                                    if (error)
                                        return "licensesSummary." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a PackagesSummaryResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} PackagesSummaryResponse
                         */
                        PackagesSummaryResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse)
                                return object;
                            var message = new $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse();
                            if (object.resourceUrl != null)
                                message.resourceUrl = String(object.resourceUrl);
                            if (object.licensesSummary) {
                                if (!Array.isArray(object.licensesSummary))
                                    throw TypeError(".google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.licensesSummary: array expected");
                                message.licensesSummary = [];
                                for (var i = 0; i < object.licensesSummary.length; ++i) {
                                    if (typeof object.licensesSummary[i] !== "object")
                                        throw TypeError(".google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.licensesSummary: object expected");
                                    message.licensesSummary[i] = $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.fromObject(object.licensesSummary[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PackagesSummaryResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse} message PackagesSummaryResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PackagesSummaryResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.licensesSummary = [];
                            if (options.defaults)
                                object.resourceUrl = "";
                            if (message.resourceUrl != null && message.hasOwnProperty("resourceUrl"))
                                object.resourceUrl = message.resourceUrl;
                            if (message.licensesSummary && message.licensesSummary.length) {
                                object.licensesSummary = [];
                                for (var j = 0; j < message.licensesSummary.length; ++j)
                                    object.licensesSummary[j] = $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.toObject(message.licensesSummary[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this PackagesSummaryResponse to JSON.
                         * @function toJSON
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PackagesSummaryResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PackagesSummaryResponse
                         * @function getTypeUrl
                         * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PackagesSummaryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse";
                        };
    
                        PackagesSummaryResponse.LicensesSummary = (function() {
    
                            /**
                             * Properties of a LicensesSummary.
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                             * @interface ILicensesSummary
                             * @property {string|null} [license] LicensesSummary license
                             * @property {number|Long|null} [count] LicensesSummary count
                             */
    
                            /**
                             * Constructs a new LicensesSummary.
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse
                             * @classdesc Represents a LicensesSummary.
                             * @implements ILicensesSummary
                             * @constructor
                             * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary=} [properties] Properties to set
                             */
                            function LicensesSummary(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LicensesSummary license.
                             * @member {string} license
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @instance
                             */
                            LicensesSummary.prototype.license = "";
    
                            /**
                             * LicensesSummary count.
                             * @member {number|Long} count
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @instance
                             */
                            LicensesSummary.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Creates a new LicensesSummary instance using the specified properties.
                             * @function create
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary=} [properties] Properties to set
                             * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary} LicensesSummary instance
                             */
                            LicensesSummary.create = function create(properties) {
                                return new LicensesSummary(properties);
                            };
    
                            /**
                             * Encodes the specified LicensesSummary message. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.verify|verify} messages.
                             * @function encode
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary} message LicensesSummary message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LicensesSummary.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.license != null && Object.hasOwnProperty.call(message, "license"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.license);
                                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LicensesSummary message, length delimited. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.ILicensesSummary} message LicensesSummary message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LicensesSummary.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LicensesSummary message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary} LicensesSummary
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LicensesSummary.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.license = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.count = reader.int64();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LicensesSummary message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary} LicensesSummary
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LicensesSummary.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LicensesSummary message.
                             * @function verify
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LicensesSummary.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.license != null && message.hasOwnProperty("license"))
                                    if (!$util.isString(message.license))
                                        return "license: string expected";
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                        return "count: integer|Long expected";
                                return null;
                            };
    
                            /**
                             * Creates a LicensesSummary message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary} LicensesSummary
                             */
                            LicensesSummary.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary)
                                    return object;
                                var message = new $root.google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary();
                                if (object.license != null)
                                    message.license = String(object.license);
                                if (object.count != null)
                                    if ($util.Long)
                                        (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                    else if (typeof object.count === "string")
                                        message.count = parseInt(object.count, 10);
                                    else if (typeof object.count === "number")
                                        message.count = object.count;
                                    else if (typeof object.count === "object")
                                        message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LicensesSummary message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary} message LicensesSummary
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LicensesSummary.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.license = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.count = options.longs === String ? "0" : 0;
                                }
                                if (message.license != null && message.hasOwnProperty("license"))
                                    object.license = message.license;
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (typeof message.count === "number")
                                        object.count = options.longs === String ? String(message.count) : message.count;
                                    else
                                        object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                                return object;
                            };
    
                            /**
                             * Converts this LicensesSummary to JSON.
                             * @function toJSON
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LicensesSummary.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for LicensesSummary
                             * @function getTypeUrl
                             * @memberof google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            LicensesSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.devtools.containeranalysis.v1beta1.PackagesSummaryResponse.LicensesSummary";
                            };
    
                            return LicensesSummary;
                        })();
    
                        return PackagesSummaryResponse;
                    })();
    
                    v1beta1.ExportSBOMRequest = (function() {
    
                        /**
                         * Properties of an ExportSBOMRequest.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @interface IExportSBOMRequest
                         * @property {string|null} [name] ExportSBOMRequest name
                         */
    
                        /**
                         * Constructs a new ExportSBOMRequest.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @classdesc Represents an ExportSBOMRequest.
                         * @implements IExportSBOMRequest
                         * @constructor
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest=} [properties] Properties to set
                         */
                        function ExportSBOMRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExportSBOMRequest name.
                         * @member {string} name
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @instance
                         */
                        ExportSBOMRequest.prototype.name = "";
    
                        /**
                         * Creates a new ExportSBOMRequest instance using the specified properties.
                         * @function create
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest=} [properties] Properties to set
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMRequest} ExportSBOMRequest instance
                         */
                        ExportSBOMRequest.create = function create(properties) {
                            return new ExportSBOMRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ExportSBOMRequest message. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.ExportSBOMRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest} message ExportSBOMRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExportSBOMRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExportSBOMRequest message, length delimited. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.ExportSBOMRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMRequest} message ExportSBOMRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExportSBOMRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExportSBOMRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMRequest} ExportSBOMRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExportSBOMRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.devtools.containeranalysis.v1beta1.ExportSBOMRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExportSBOMRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMRequest} ExportSBOMRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExportSBOMRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExportSBOMRequest message.
                         * @function verify
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExportSBOMRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExportSBOMRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMRequest} ExportSBOMRequest
                         */
                        ExportSBOMRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.devtools.containeranalysis.v1beta1.ExportSBOMRequest)
                                return object;
                            var message = new $root.google.devtools.containeranalysis.v1beta1.ExportSBOMRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExportSBOMRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.ExportSBOMRequest} message ExportSBOMRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExportSBOMRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this ExportSBOMRequest to JSON.
                         * @function toJSON
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExportSBOMRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExportSBOMRequest
                         * @function getTypeUrl
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExportSBOMRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.devtools.containeranalysis.v1beta1.ExportSBOMRequest";
                        };
    
                        return ExportSBOMRequest;
                    })();
    
                    v1beta1.ExportSBOMResponse = (function() {
    
                        /**
                         * Properties of an ExportSBOMResponse.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @interface IExportSBOMResponse
                         * @property {string|null} [discoveryOccurrenceId] ExportSBOMResponse discoveryOccurrenceId
                         */
    
                        /**
                         * Constructs a new ExportSBOMResponse.
                         * @memberof google.devtools.containeranalysis.v1beta1
                         * @classdesc Represents an ExportSBOMResponse.
                         * @implements IExportSBOMResponse
                         * @constructor
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMResponse=} [properties] Properties to set
                         */
                        function ExportSBOMResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExportSBOMResponse discoveryOccurrenceId.
                         * @member {string} discoveryOccurrenceId
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @instance
                         */
                        ExportSBOMResponse.prototype.discoveryOccurrenceId = "";
    
                        /**
                         * Creates a new ExportSBOMResponse instance using the specified properties.
                         * @function create
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMResponse=} [properties] Properties to set
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} ExportSBOMResponse instance
                         */
                        ExportSBOMResponse.create = function create(properties) {
                            return new ExportSBOMResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ExportSBOMResponse message. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.ExportSBOMResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMResponse} message ExportSBOMResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExportSBOMResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.discoveryOccurrenceId != null && Object.hasOwnProperty.call(message, "discoveryOccurrenceId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.discoveryOccurrenceId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExportSBOMResponse message, length delimited. Does not implicitly {@link google.devtools.containeranalysis.v1beta1.ExportSBOMResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.IExportSBOMResponse} message ExportSBOMResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExportSBOMResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExportSBOMResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} ExportSBOMResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExportSBOMResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.devtools.containeranalysis.v1beta1.ExportSBOMResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.discoveryOccurrenceId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExportSBOMResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} ExportSBOMResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExportSBOMResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExportSBOMResponse message.
                         * @function verify
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExportSBOMResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.discoveryOccurrenceId != null && message.hasOwnProperty("discoveryOccurrenceId"))
                                if (!$util.isString(message.discoveryOccurrenceId))
                                    return "discoveryOccurrenceId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExportSBOMResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} ExportSBOMResponse
                         */
                        ExportSBOMResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.devtools.containeranalysis.v1beta1.ExportSBOMResponse)
                                return object;
                            var message = new $root.google.devtools.containeranalysis.v1beta1.ExportSBOMResponse();
                            if (object.discoveryOccurrenceId != null)
                                message.discoveryOccurrenceId = String(object.discoveryOccurrenceId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExportSBOMResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {google.devtools.containeranalysis.v1beta1.ExportSBOMResponse} message ExportSBOMResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExportSBOMResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.discoveryOccurrenceId = "";
                            if (message.discoveryOccurrenceId != null && message.hasOwnProperty("discoveryOccurrenceId"))
                                object.discoveryOccurrenceId = message.discoveryOccurrenceId;
                            return object;
                        };
    
                        /**
                         * Converts this ExportSBOMResponse to JSON.
                         * @function toJSON
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExportSBOMResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExportSBOMResponse
                         * @function getTypeUrl
                         * @memberof google.devtools.containeranalysis.v1beta1.ExportSBOMResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExportSBOMResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.devtools.containeranalysis.v1beta1.ExportSBOMResponse";
                        };
    
                        return ExportSBOMResponse;
                    })();
    
                    return v1beta1;
                })();
    
                return containeranalysis;
            })();
    
            return devtools;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 * @property {string|null} [protoReferenceDocumentationUri] Publishing protoReferenceDocumentationUri
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Publishing protoReferenceDocumentationUri.
                 * @member {string} protoReferenceDocumentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.protoReferenceDocumentationUri = "";
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    if (message.protoReferenceDocumentationUri != null && Object.hasOwnProperty.call(message, "protoReferenceDocumentationUri"))
                        writer.uint32(/* id 110, wireType 2 =*/882).string(message.protoReferenceDocumentationUri);
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 110: {
                                message.protoReferenceDocumentationUri = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    if (message.protoReferenceDocumentationUri != null && message.hasOwnProperty("protoReferenceDocumentationUri"))
                        if (!$util.isString(message.protoReferenceDocumentationUri))
                            return "protoReferenceDocumentationUri: string expected";
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    case "SHOPPING":
                    case 5:
                        message.organization = 5;
                        break;
                    case "GEO":
                    case 6:
                        message.organization = 6;
                        break;
                    case "GENERATIVE_AI":
                    case 7:
                        message.organization = 7;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    if (object.protoReferenceDocumentationUri != null)
                        message.protoReferenceDocumentationUri = String(object.protoReferenceDocumentationUri);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                        object.protoReferenceDocumentationUri = "";
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    if (message.protoReferenceDocumentationUri != null && message.hasOwnProperty("protoReferenceDocumentationUri"))
                        object.protoReferenceDocumentationUri = message.protoReferenceDocumentationUri;
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 * @property {Object.<string,string>|null} [renamedServices] DotnetSettings renamedServices
                 * @property {Object.<string,string>|null} [renamedResources] DotnetSettings renamedResources
                 * @property {Array.<string>|null} [ignoredResources] DotnetSettings ignoredResources
                 * @property {Array.<string>|null} [forcedNamespaceAliases] DotnetSettings forcedNamespaceAliases
                 * @property {Array.<string>|null} [handwrittenSignatures] DotnetSettings handwrittenSignatures
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    this.renamedServices = {};
                    this.renamedResources = {};
                    this.ignoredResources = [];
                    this.forcedNamespaceAliases = [];
                    this.handwrittenSignatures = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * DotnetSettings renamedServices.
                 * @member {Object.<string,string>} renamedServices
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.renamedServices = $util.emptyObject;
    
                /**
                 * DotnetSettings renamedResources.
                 * @member {Object.<string,string>} renamedResources
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.renamedResources = $util.emptyObject;
    
                /**
                 * DotnetSettings ignoredResources.
                 * @member {Array.<string>} ignoredResources
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.ignoredResources = $util.emptyArray;
    
                /**
                 * DotnetSettings forcedNamespaceAliases.
                 * @member {Array.<string>} forcedNamespaceAliases
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.forcedNamespaceAliases = $util.emptyArray;
    
                /**
                 * DotnetSettings handwrittenSignatures.
                 * @member {Array.<string>} handwrittenSignatures
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.handwrittenSignatures = $util.emptyArray;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.renamedServices != null && Object.hasOwnProperty.call(message, "renamedServices"))
                        for (var keys = Object.keys(message.renamedServices), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.renamedServices[keys[i]]).ldelim();
                    if (message.renamedResources != null && Object.hasOwnProperty.call(message, "renamedResources"))
                        for (var keys = Object.keys(message.renamedResources), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.renamedResources[keys[i]]).ldelim();
                    if (message.ignoredResources != null && message.ignoredResources.length)
                        for (var i = 0; i < message.ignoredResources.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.ignoredResources[i]);
                    if (message.forcedNamespaceAliases != null && message.forcedNamespaceAliases.length)
                        for (var i = 0; i < message.forcedNamespaceAliases.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.forcedNamespaceAliases[i]);
                    if (message.handwrittenSignatures != null && message.handwrittenSignatures.length)
                        for (var i = 0; i < message.handwrittenSignatures.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.handwrittenSignatures[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                if (message.renamedServices === $util.emptyObject)
                                    message.renamedServices = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.renamedServices[key] = value;
                                break;
                            }
                        case 3: {
                                if (message.renamedResources === $util.emptyObject)
                                    message.renamedResources = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.renamedResources[key] = value;
                                break;
                            }
                        case 4: {
                                if (!(message.ignoredResources && message.ignoredResources.length))
                                    message.ignoredResources = [];
                                message.ignoredResources.push(reader.string());
                                break;
                            }
                        case 5: {
                                if (!(message.forcedNamespaceAliases && message.forcedNamespaceAliases.length))
                                    message.forcedNamespaceAliases = [];
                                message.forcedNamespaceAliases.push(reader.string());
                                break;
                            }
                        case 6: {
                                if (!(message.handwrittenSignatures && message.handwrittenSignatures.length))
                                    message.handwrittenSignatures = [];
                                message.handwrittenSignatures.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    if (message.renamedServices != null && message.hasOwnProperty("renamedServices")) {
                        if (!$util.isObject(message.renamedServices))
                            return "renamedServices: object expected";
                        var key = Object.keys(message.renamedServices);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.renamedServices[key[i]]))
                                return "renamedServices: string{k:string} expected";
                    }
                    if (message.renamedResources != null && message.hasOwnProperty("renamedResources")) {
                        if (!$util.isObject(message.renamedResources))
                            return "renamedResources: object expected";
                        var key = Object.keys(message.renamedResources);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.renamedResources[key[i]]))
                                return "renamedResources: string{k:string} expected";
                    }
                    if (message.ignoredResources != null && message.hasOwnProperty("ignoredResources")) {
                        if (!Array.isArray(message.ignoredResources))
                            return "ignoredResources: array expected";
                        for (var i = 0; i < message.ignoredResources.length; ++i)
                            if (!$util.isString(message.ignoredResources[i]))
                                return "ignoredResources: string[] expected";
                    }
                    if (message.forcedNamespaceAliases != null && message.hasOwnProperty("forcedNamespaceAliases")) {
                        if (!Array.isArray(message.forcedNamespaceAliases))
                            return "forcedNamespaceAliases: array expected";
                        for (var i = 0; i < message.forcedNamespaceAliases.length; ++i)
                            if (!$util.isString(message.forcedNamespaceAliases[i]))
                                return "forcedNamespaceAliases: string[] expected";
                    }
                    if (message.handwrittenSignatures != null && message.hasOwnProperty("handwrittenSignatures")) {
                        if (!Array.isArray(message.handwrittenSignatures))
                            return "handwrittenSignatures: array expected";
                        for (var i = 0; i < message.handwrittenSignatures.length; ++i)
                            if (!$util.isString(message.handwrittenSignatures[i]))
                                return "handwrittenSignatures: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    if (object.renamedServices) {
                        if (typeof object.renamedServices !== "object")
                            throw TypeError(".google.api.DotnetSettings.renamedServices: object expected");
                        message.renamedServices = {};
                        for (var keys = Object.keys(object.renamedServices), i = 0; i < keys.length; ++i)
                            message.renamedServices[keys[i]] = String(object.renamedServices[keys[i]]);
                    }
                    if (object.renamedResources) {
                        if (typeof object.renamedResources !== "object")
                            throw TypeError(".google.api.DotnetSettings.renamedResources: object expected");
                        message.renamedResources = {};
                        for (var keys = Object.keys(object.renamedResources), i = 0; i < keys.length; ++i)
                            message.renamedResources[keys[i]] = String(object.renamedResources[keys[i]]);
                    }
                    if (object.ignoredResources) {
                        if (!Array.isArray(object.ignoredResources))
                            throw TypeError(".google.api.DotnetSettings.ignoredResources: array expected");
                        message.ignoredResources = [];
                        for (var i = 0; i < object.ignoredResources.length; ++i)
                            message.ignoredResources[i] = String(object.ignoredResources[i]);
                    }
                    if (object.forcedNamespaceAliases) {
                        if (!Array.isArray(object.forcedNamespaceAliases))
                            throw TypeError(".google.api.DotnetSettings.forcedNamespaceAliases: array expected");
                        message.forcedNamespaceAliases = [];
                        for (var i = 0; i < object.forcedNamespaceAliases.length; ++i)
                            message.forcedNamespaceAliases[i] = String(object.forcedNamespaceAliases[i]);
                    }
                    if (object.handwrittenSignatures) {
                        if (!Array.isArray(object.handwrittenSignatures))
                            throw TypeError(".google.api.DotnetSettings.handwrittenSignatures: array expected");
                        message.handwrittenSignatures = [];
                        for (var i = 0; i < object.handwrittenSignatures.length; ++i)
                            message.handwrittenSignatures[i] = String(object.handwrittenSignatures[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.ignoredResources = [];
                        object.forcedNamespaceAliases = [];
                        object.handwrittenSignatures = [];
                    }
                    if (options.objects || options.defaults) {
                        object.renamedServices = {};
                        object.renamedResources = {};
                    }
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    var keys2;
                    if (message.renamedServices && (keys2 = Object.keys(message.renamedServices)).length) {
                        object.renamedServices = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.renamedServices[keys2[j]] = message.renamedServices[keys2[j]];
                    }
                    if (message.renamedResources && (keys2 = Object.keys(message.renamedResources)).length) {
                        object.renamedResources = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.renamedResources[keys2[j]] = message.renamedResources[keys2[j]];
                    }
                    if (message.ignoredResources && message.ignoredResources.length) {
                        object.ignoredResources = [];
                        for (var j = 0; j < message.ignoredResources.length; ++j)
                            object.ignoredResources[j] = message.ignoredResources[j];
                    }
                    if (message.forcedNamespaceAliases && message.forcedNamespaceAliases.length) {
                        object.forcedNamespaceAliases = [];
                        for (var j = 0; j < message.forcedNamespaceAliases.length; ++j)
                            object.forcedNamespaceAliases[j] = message.forcedNamespaceAliases[j];
                    }
                    if (message.handwrittenSignatures && message.handwrittenSignatures.length) {
                        object.handwrittenSignatures = [];
                        for (var j = 0; j < message.handwrittenSignatures.length; ++j)
                            object.handwrittenSignatures[j] = message.handwrittenSignatures[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 * @property {Array.<string>|null} [autoPopulatedFields] MethodSettings autoPopulatedFields
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    this.autoPopulatedFields = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * MethodSettings autoPopulatedFields.
                 * @member {Array.<string>} autoPopulatedFields
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.autoPopulatedFields = $util.emptyArray;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.autoPopulatedFields != null && message.autoPopulatedFields.length)
                        for (var i = 0; i < message.autoPopulatedFields.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.autoPopulatedFields[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.autoPopulatedFields && message.autoPopulatedFields.length))
                                    message.autoPopulatedFields = [];
                                message.autoPopulatedFields.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    if (message.autoPopulatedFields != null && message.hasOwnProperty("autoPopulatedFields")) {
                        if (!Array.isArray(message.autoPopulatedFields))
                            return "autoPopulatedFields: array expected";
                        for (var i = 0; i < message.autoPopulatedFields.length; ++i)
                            if (!$util.isString(message.autoPopulatedFields[i]))
                                return "autoPopulatedFields: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    if (object.autoPopulatedFields) {
                        if (!Array.isArray(object.autoPopulatedFields))
                            throw TypeError(".google.api.MethodSettings.autoPopulatedFields: array expected");
                        message.autoPopulatedFields = [];
                        for (var i = 0; i < object.autoPopulatedFields.length; ++i)
                            message.autoPopulatedFields[i] = String(object.autoPopulatedFields[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.autoPopulatedFields = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    if (message.autoPopulatedFields && message.autoPopulatedFields.length) {
                        object.autoPopulatedFields = [];
                        for (var j = 0; j < message.autoPopulatedFields.length; ++j)
                            object.autoPopulatedFields[j] = message.autoPopulatedFields[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             * @property {number} SHOPPING=5 SHOPPING value
             * @property {number} GEO=6 GEO value
             * @property {number} GENERATIVE_AI=7 GENERATIVE_AI value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                values[valuesById[5] = "SHOPPING"] = 5;
                values[valuesById[6] = "GEO"] = 6;
                values[valuesById[7] = "GENERATIVE_AI"] = 7;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             * @property {number} IDENTIFIER=8 IDENTIFIER value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                values[valuesById[8] = "IDENTIFIER"] = 8;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.pattern && message.pattern.length))
                                    message.pattern = [];
                                message.pattern.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.nameField = reader.string();
                                break;
                            }
                        case 4: {
                                message.history = reader.int32();
                                break;
                            }
                        case 5: {
                                message.plural = reader.string();
                                break;
                            }
                        case 6: {
                                message.singular = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.style && message.style.length))
                                    message.style = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.style.push(reader.int32());
                                } else
                                    message.style.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    default:
                        if (typeof object.history === "number") {
                            message.history = object.history;
                            break;
                        }
                        break;
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                                if (typeof object.style[i] === "number") {
                                    message.style[i] = object.style[i];
                                    break;
                                }
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === undefined ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === undefined ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceDescriptor
                 * @function getTypeUrl
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceDescriptor";
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.childType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceReference
                 * @function getTypeUrl
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceReference";
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.iam = (function() {
    
            /**
             * Namespace iam.
             * @memberof google
             * @namespace
             */
            var iam = {};
    
            iam.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.iam
                 * @namespace
                 */
                var v1 = {};
    
                v1.IAMPolicy = (function() {
    
                    /**
                     * Constructs a new IAMPolicy service.
                     * @memberof google.iam.v1
                     * @classdesc Represents a IAMPolicy
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function IAMPolicy(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (IAMPolicy.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = IAMPolicy;
    
                    /**
                     * Creates new IAMPolicy service using the specified rpc implementation.
                     * @function create
                     * @memberof google.iam.v1.IAMPolicy
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {IAMPolicy} RPC service. Useful where requests and/or responses are streamed.
                     */
                    IAMPolicy.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy|setIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef SetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.SetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                        return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "SetIamPolicy" });
    
                    /**
                     * Calls SetIamPolicy.
                     * @function setIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ISetIamPolicyRequest} request SetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy|getIamPolicy}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef GetIamPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.Policy} [response] Policy
                     */
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.GetIamPolicyCallback} callback Node-style callback called with the error, if any, and Policy
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                        return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
                    }, "name", { value: "GetIamPolicy" });
    
                    /**
                     * Calls GetIamPolicy.
                     * @function getIamPolicy
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.IGetIamPolicyRequest} request GetIamPolicyRequest message or plain object
                     * @returns {Promise<google.iam.v1.Policy>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.iam.v1.IAMPolicy|testIamPermissions}.
                     * @memberof google.iam.v1.IAMPolicy
                     * @typedef TestIamPermissionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.iam.v1.TestIamPermissionsResponse} [response] TestIamPermissionsResponse
                     */
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @param {google.iam.v1.IAMPolicy.TestIamPermissionsCallback} callback Node-style callback called with the error, if any, and TestIamPermissionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(IAMPolicy.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                        return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
                    }, "name", { value: "TestIamPermissions" });
    
                    /**
                     * Calls TestIamPermissions.
                     * @function testIamPermissions
                     * @memberof google.iam.v1.IAMPolicy
                     * @instance
                     * @param {google.iam.v1.ITestIamPermissionsRequest} request TestIamPermissionsRequest message or plain object
                     * @returns {Promise<google.iam.v1.TestIamPermissionsResponse>} Promise
                     * @variation 2
                     */
    
                    return IAMPolicy;
                })();
    
                v1.SetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface ISetIamPolicyRequest
                     * @property {string|null} [resource] SetIamPolicyRequest resource
                     * @property {google.iam.v1.IPolicy|null} [policy] SetIamPolicyRequest policy
                     * @property {google.protobuf.IFieldMask|null} [updateMask] SetIamPolicyRequest updateMask
                     */
    
                    /**
                     * Constructs a new SetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a SetIamPolicyRequest.
                     * @implements ISetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     */
                    function SetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * SetIamPolicyRequest policy.
                     * @member {google.iam.v1.IPolicy|null|undefined} policy
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.policy = null;
    
                    /**
                     * SetIamPolicyRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     */
                    SetIamPolicyRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new SetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest instance
                     */
                    SetIamPolicyRequest.create = function create(properties) {
                        return new SetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                            $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.SetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.ISetIamPolicyRequest} message SetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.SetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resource = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.policy != null && message.hasOwnProperty("policy")) {
                            var error = $root.google.iam.v1.Policy.verify(message.policy);
                            if (error)
                                return "policy." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.SetIamPolicyRequest} SetIamPolicyRequest
                     */
                    SetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.SetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.SetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.policy != null) {
                            if (typeof object.policy !== "object")
                                throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
                            message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.iam.v1.SetIamPolicyRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.SetIamPolicyRequest} message SetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.policy = null;
                            object.updateMask = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.policy != null && message.hasOwnProperty("policy"))
                            object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this SetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SetIamPolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v1.SetIamPolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SetIamPolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.SetIamPolicyRequest";
                    };
    
                    return SetIamPolicyRequest;
                })();
    
                v1.GetIamPolicyRequest = (function() {
    
                    /**
                     * Properties of a GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @interface IGetIamPolicyRequest
                     * @property {string|null} [resource] GetIamPolicyRequest resource
                     * @property {google.iam.v1.IGetPolicyOptions|null} [options] GetIamPolicyRequest options
                     */
    
                    /**
                     * Constructs a new GetIamPolicyRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetIamPolicyRequest.
                     * @implements IGetIamPolicyRequest
                     * @constructor
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     */
                    function GetIamPolicyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetIamPolicyRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.resource = "";
    
                    /**
                     * GetIamPolicyRequest options.
                     * @member {google.iam.v1.IGetPolicyOptions|null|undefined} options
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     */
                    GetIamPolicyRequest.prototype.options = null;
    
                    /**
                     * Creates a new GetIamPolicyRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest instance
                     */
                    GetIamPolicyRequest.create = function create(properties) {
                        return new GetIamPolicyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.iam.v1.GetPolicyOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetIamPolicyRequest message, length delimited. Does not implicitly {@link google.iam.v1.GetIamPolicyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.IGetIamPolicyRequest} message GetIamPolicyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetIamPolicyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resource = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.options = $root.google.iam.v1.GetPolicyOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetIamPolicyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetIamPolicyRequest message.
                     * @function verify
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetIamPolicyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.iam.v1.GetPolicyOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GetIamPolicyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetIamPolicyRequest} GetIamPolicyRequest
                     */
                    GetIamPolicyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetIamPolicyRequest)
                            return object;
                        var message = new $root.google.iam.v1.GetIamPolicyRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
                            message.options = $root.google.iam.v1.GetPolicyOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetIamPolicyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {google.iam.v1.GetIamPolicyRequest} message GetIamPolicyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetIamPolicyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resource = "";
                            object.options = null;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.iam.v1.GetPolicyOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this GetIamPolicyRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetIamPolicyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetIamPolicyRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v1.GetIamPolicyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetIamPolicyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.GetIamPolicyRequest";
                    };
    
                    return GetIamPolicyRequest;
                })();
    
                v1.TestIamPermissionsRequest = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsRequest
                     * @property {string|null} [resource] TestIamPermissionsRequest resource
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsRequest permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsRequest.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsRequest.
                     * @implements ITestIamPermissionsRequest
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     */
                    function TestIamPermissionsRequest(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsRequest resource.
                     * @member {string} resource
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.resource = "";
    
                    /**
                     * TestIamPermissionsRequest permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     */
                    TestIamPermissionsRequest.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest instance
                     */
                    TestIamPermissionsRequest.create = function create(properties) {
                        return new TestIamPermissionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resource);
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsRequest message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsRequest} message TestIamPermissionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resource = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.permissions && message.permissions.length))
                                        message.permissions = [];
                                    message.permissions.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsRequest message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            if (!$util.isString(message.resource))
                                return "resource: string expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsRequest} TestIamPermissionsRequest
                     */
                    TestIamPermissionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsRequest)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsRequest();
                        if (object.resource != null)
                            message.resource = String(object.resource);
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsRequest} message TestIamPermissionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (options.defaults)
                            object.resource = "";
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = message.resource;
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TestIamPermissionsRequest
                     * @function getTypeUrl
                     * @memberof google.iam.v1.TestIamPermissionsRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TestIamPermissionsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.TestIamPermissionsRequest";
                    };
    
                    return TestIamPermissionsRequest;
                })();
    
                v1.TestIamPermissionsResponse = (function() {
    
                    /**
                     * Properties of a TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @interface ITestIamPermissionsResponse
                     * @property {Array.<string>|null} [permissions] TestIamPermissionsResponse permissions
                     */
    
                    /**
                     * Constructs a new TestIamPermissionsResponse.
                     * @memberof google.iam.v1
                     * @classdesc Represents a TestIamPermissionsResponse.
                     * @implements ITestIamPermissionsResponse
                     * @constructor
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     */
                    function TestIamPermissionsResponse(properties) {
                        this.permissions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestIamPermissionsResponse permissions.
                     * @member {Array.<string>} permissions
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     */
                    TestIamPermissionsResponse.prototype.permissions = $util.emptyArray;
    
                    /**
                     * Creates a new TestIamPermissionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse=} [properties] Properties to set
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse instance
                     */
                    TestIamPermissionsResponse.create = function create(properties) {
                        return new TestIamPermissionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.permissions != null && message.permissions.length)
                            for (var i = 0; i < message.permissions.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.permissions[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestIamPermissionsResponse message, length delimited. Does not implicitly {@link google.iam.v1.TestIamPermissionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.ITestIamPermissionsResponse} message TestIamPermissionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestIamPermissionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.permissions && message.permissions.length))
                                        message.permissions = [];
                                    message.permissions.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestIamPermissionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestIamPermissionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestIamPermissionsResponse message.
                     * @function verify
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestIamPermissionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            if (!Array.isArray(message.permissions))
                                return "permissions: array expected";
                            for (var i = 0; i < message.permissions.length; ++i)
                                if (!$util.isString(message.permissions[i]))
                                    return "permissions: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestIamPermissionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.TestIamPermissionsResponse} TestIamPermissionsResponse
                     */
                    TestIamPermissionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.TestIamPermissionsResponse)
                            return object;
                        var message = new $root.google.iam.v1.TestIamPermissionsResponse();
                        if (object.permissions) {
                            if (!Array.isArray(object.permissions))
                                throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
                            message.permissions = [];
                            for (var i = 0; i < object.permissions.length; ++i)
                                message.permissions[i] = String(object.permissions[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestIamPermissionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {google.iam.v1.TestIamPermissionsResponse} message TestIamPermissionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestIamPermissionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.permissions = [];
                        if (message.permissions && message.permissions.length) {
                            object.permissions = [];
                            for (var j = 0; j < message.permissions.length; ++j)
                                object.permissions[j] = message.permissions[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestIamPermissionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestIamPermissionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TestIamPermissionsResponse
                     * @function getTypeUrl
                     * @memberof google.iam.v1.TestIamPermissionsResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TestIamPermissionsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.TestIamPermissionsResponse";
                    };
    
                    return TestIamPermissionsResponse;
                })();
    
                v1.GetPolicyOptions = (function() {
    
                    /**
                     * Properties of a GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @interface IGetPolicyOptions
                     * @property {number|null} [requestedPolicyVersion] GetPolicyOptions requestedPolicyVersion
                     */
    
                    /**
                     * Constructs a new GetPolicyOptions.
                     * @memberof google.iam.v1
                     * @classdesc Represents a GetPolicyOptions.
                     * @implements IGetPolicyOptions
                     * @constructor
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     */
                    function GetPolicyOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetPolicyOptions requestedPolicyVersion.
                     * @member {number} requestedPolicyVersion
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     */
                    GetPolicyOptions.prototype.requestedPolicyVersion = 0;
    
                    /**
                     * Creates a new GetPolicyOptions instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions=} [properties] Properties to set
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions instance
                     */
                    GetPolicyOptions.create = function create(properties) {
                        return new GetPolicyOptions(properties);
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requestedPolicyVersion != null && Object.hasOwnProperty.call(message, "requestedPolicyVersion"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.requestedPolicyVersion);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetPolicyOptions message, length delimited. Does not implicitly {@link google.iam.v1.GetPolicyOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.IGetPolicyOptions} message GetPolicyOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetPolicyOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetPolicyOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.requestedPolicyVersion = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetPolicyOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetPolicyOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetPolicyOptions message.
                     * @function verify
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetPolicyOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            if (!$util.isInteger(message.requestedPolicyVersion))
                                return "requestedPolicyVersion: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetPolicyOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.GetPolicyOptions} GetPolicyOptions
                     */
                    GetPolicyOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.GetPolicyOptions)
                            return object;
                        var message = new $root.google.iam.v1.GetPolicyOptions();
                        if (object.requestedPolicyVersion != null)
                            message.requestedPolicyVersion = object.requestedPolicyVersion | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetPolicyOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {google.iam.v1.GetPolicyOptions} message GetPolicyOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetPolicyOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.requestedPolicyVersion = 0;
                        if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                            object.requestedPolicyVersion = message.requestedPolicyVersion;
                        return object;
                    };
    
                    /**
                     * Converts this GetPolicyOptions to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetPolicyOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetPolicyOptions
                     * @function getTypeUrl
                     * @memberof google.iam.v1.GetPolicyOptions
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetPolicyOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.GetPolicyOptions";
                    };
    
                    return GetPolicyOptions;
                })();
    
                v1.Policy = (function() {
    
                    /**
                     * Properties of a Policy.
                     * @memberof google.iam.v1
                     * @interface IPolicy
                     * @property {number|null} [version] Policy version
                     * @property {Array.<google.iam.v1.IBinding>|null} [bindings] Policy bindings
                     * @property {Array.<google.iam.v1.IAuditConfig>|null} [auditConfigs] Policy auditConfigs
                     * @property {Uint8Array|null} [etag] Policy etag
                     */
    
                    /**
                     * Constructs a new Policy.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        this.bindings = [];
                        this.auditConfigs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Policy version.
                     * @member {number} version
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.version = 0;
    
                    /**
                     * Policy bindings.
                     * @member {Array.<google.iam.v1.IBinding>} bindings
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.bindings = $util.emptyArray;
    
                    /**
                     * Policy auditConfigs.
                     * @member {Array.<google.iam.v1.IAuditConfig>} auditConfigs
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.auditConfigs = $util.emptyArray;
    
                    /**
                     * Policy etag.
                     * @member {Uint8Array} etag
                     * @memberof google.iam.v1.Policy
                     * @instance
                     */
                    Policy.prototype.etag = $util.newBuffer([]);
    
                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy=} [properties] Properties to set
                     * @returns {google.iam.v1.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };
    
                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.version);
                        if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.etag);
                        if (message.bindings != null && message.bindings.length)
                            for (var i = 0; i < message.bindings.length; ++i)
                                $root.google.iam.v1.Binding.encode(message.bindings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.auditConfigs != null && message.auditConfigs.length)
                            for (var i = 0; i < message.auditConfigs.length; ++i)
                                $root.google.iam.v1.AuditConfig.encode(message.auditConfigs[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link google.iam.v1.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Policy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.version = reader.int32();
                                    break;
                                }
                            case 4: {
                                    if (!(message.bindings && message.bindings.length))
                                        message.bindings = [];
                                    message.bindings.push($root.google.iam.v1.Binding.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 6: {
                                    if (!(message.auditConfigs && message.auditConfigs.length))
                                        message.auditConfigs = [];
                                    message.auditConfigs.push($root.google.iam.v1.AuditConfig.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 3: {
                                    message.etag = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.bindings != null && message.hasOwnProperty("bindings")) {
                            if (!Array.isArray(message.bindings))
                                return "bindings: array expected";
                            for (var i = 0; i < message.bindings.length; ++i) {
                                var error = $root.google.iam.v1.Binding.verify(message.bindings[i]);
                                if (error)
                                    return "bindings." + error;
                            }
                        }
                        if (message.auditConfigs != null && message.hasOwnProperty("auditConfigs")) {
                            if (!Array.isArray(message.auditConfigs))
                                return "auditConfigs: array expected";
                            for (var i = 0; i < message.auditConfigs.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfig.verify(message.auditConfigs[i]);
                                if (error)
                                    return "auditConfigs." + error;
                            }
                        }
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            if (!(message.etag && typeof message.etag.length === "number" || $util.isString(message.etag)))
                                return "etag: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Policy)
                            return object;
                        var message = new $root.google.iam.v1.Policy();
                        if (object.version != null)
                            message.version = object.version | 0;
                        if (object.bindings) {
                            if (!Array.isArray(object.bindings))
                                throw TypeError(".google.iam.v1.Policy.bindings: array expected");
                            message.bindings = [];
                            for (var i = 0; i < object.bindings.length; ++i) {
                                if (typeof object.bindings[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.bindings: object expected");
                                message.bindings[i] = $root.google.iam.v1.Binding.fromObject(object.bindings[i]);
                            }
                        }
                        if (object.auditConfigs) {
                            if (!Array.isArray(object.auditConfigs))
                                throw TypeError(".google.iam.v1.Policy.auditConfigs: array expected");
                            message.auditConfigs = [];
                            for (var i = 0; i < object.auditConfigs.length; ++i) {
                                if (typeof object.auditConfigs[i] !== "object")
                                    throw TypeError(".google.iam.v1.Policy.auditConfigs: object expected");
                                message.auditConfigs[i] = $root.google.iam.v1.AuditConfig.fromObject(object.auditConfigs[i]);
                            }
                        }
                        if (object.etag != null)
                            if (typeof object.etag === "string")
                                $util.base64.decode(object.etag, message.etag = $util.newBuffer($util.base64.length(object.etag)), 0);
                            else if (object.etag.length >= 0)
                                message.etag = object.etag;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {google.iam.v1.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindings = [];
                            object.auditConfigs = [];
                        }
                        if (options.defaults) {
                            object.version = 0;
                            if (options.bytes === String)
                                object.etag = "";
                            else {
                                object.etag = [];
                                if (options.bytes !== Array)
                                    object.etag = $util.newBuffer(object.etag);
                            }
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.etag != null && message.hasOwnProperty("etag"))
                            object.etag = options.bytes === String ? $util.base64.encode(message.etag, 0, message.etag.length) : options.bytes === Array ? Array.prototype.slice.call(message.etag) : message.etag;
                        if (message.bindings && message.bindings.length) {
                            object.bindings = [];
                            for (var j = 0; j < message.bindings.length; ++j)
                                object.bindings[j] = $root.google.iam.v1.Binding.toObject(message.bindings[j], options);
                        }
                        if (message.auditConfigs && message.auditConfigs.length) {
                            object.auditConfigs = [];
                            for (var j = 0; j < message.auditConfigs.length; ++j)
                                object.auditConfigs[j] = $root.google.iam.v1.AuditConfig.toObject(message.auditConfigs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Policy
                     * @function getTypeUrl
                     * @memberof google.iam.v1.Policy
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Policy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.Policy";
                    };
    
                    return Policy;
                })();
    
                v1.Binding = (function() {
    
                    /**
                     * Properties of a Binding.
                     * @memberof google.iam.v1
                     * @interface IBinding
                     * @property {string|null} [role] Binding role
                     * @property {Array.<string>|null} [members] Binding members
                     * @property {google.type.IExpr|null} [condition] Binding condition
                     */
    
                    /**
                     * Constructs a new Binding.
                     * @memberof google.iam.v1
                     * @classdesc Represents a Binding.
                     * @implements IBinding
                     * @constructor
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     */
                    function Binding(properties) {
                        this.members = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Binding role.
                     * @member {string} role
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.role = "";
    
                    /**
                     * Binding members.
                     * @member {Array.<string>} members
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.members = $util.emptyArray;
    
                    /**
                     * Binding condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.Binding
                     * @instance
                     */
                    Binding.prototype.condition = null;
    
                    /**
                     * Creates a new Binding instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding=} [properties] Properties to set
                     * @returns {google.iam.v1.Binding} Binding instance
                     */
                    Binding.create = function create(properties) {
                        return new Binding(properties);
                    };
    
                    /**
                     * Encodes the specified Binding message. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.role);
                        if (message.members != null && message.members.length)
                            for (var i = 0; i < message.members.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.members[i]);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Binding message, length delimited. Does not implicitly {@link google.iam.v1.Binding.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.IBinding} message Binding message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Binding.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Binding();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.role = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.members && message.members.length))
                                        message.members = [];
                                    message.members.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Binding message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.Binding} Binding
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Binding.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Binding message.
                     * @function verify
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Binding.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.members != null && message.hasOwnProperty("members")) {
                            if (!Array.isArray(message.members))
                                return "members: array expected";
                            for (var i = 0; i < message.members.length; ++i)
                                if (!$util.isString(message.members[i]))
                                    return "members: string[] expected";
                        }
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Binding message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.Binding} Binding
                     */
                    Binding.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.Binding)
                            return object;
                        var message = new $root.google.iam.v1.Binding();
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.members) {
                            if (!Array.isArray(object.members))
                                throw TypeError(".google.iam.v1.Binding.members: array expected");
                            message.members = [];
                            for (var i = 0; i < object.members.length; ++i)
                                message.members[i] = String(object.members[i]);
                        }
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.Binding.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Binding message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {google.iam.v1.Binding} message Binding
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Binding.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.members = [];
                        if (options.defaults) {
                            object.role = "";
                            object.condition = null;
                        }
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.members && message.members.length) {
                            object.members = [];
                            for (var j = 0; j < message.members.length; ++j)
                                object.members[j] = message.members[j];
                        }
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this Binding to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.Binding
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Binding.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Binding
                     * @function getTypeUrl
                     * @memberof google.iam.v1.Binding
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Binding.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.Binding";
                    };
    
                    return Binding;
                })();
    
                v1.AuditConfig = (function() {
    
                    /**
                     * Properties of an AuditConfig.
                     * @memberof google.iam.v1
                     * @interface IAuditConfig
                     * @property {string|null} [service] AuditConfig service
                     * @property {Array.<google.iam.v1.IAuditLogConfig>|null} [auditLogConfigs] AuditConfig auditLogConfigs
                     */
    
                    /**
                     * Constructs a new AuditConfig.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfig.
                     * @implements IAuditConfig
                     * @constructor
                     * @param {google.iam.v1.IAuditConfig=} [properties] Properties to set
                     */
                    function AuditConfig(properties) {
                        this.auditLogConfigs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfig service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     */
                    AuditConfig.prototype.service = "";
    
                    /**
                     * AuditConfig auditLogConfigs.
                     * @member {Array.<google.iam.v1.IAuditLogConfig>} auditLogConfigs
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     */
                    AuditConfig.prototype.auditLogConfigs = $util.emptyArray;
    
                    /**
                     * Creates a new AuditConfig instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfig} AuditConfig instance
                     */
                    AuditConfig.create = function create(properties) {
                        return new AuditConfig(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfig message. Does not implicitly {@link google.iam.v1.AuditConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig} message AuditConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                        if (message.auditLogConfigs != null && message.auditLogConfigs.length)
                            for (var i = 0; i < message.auditLogConfigs.length; ++i)
                                $root.google.iam.v1.AuditLogConfig.encode(message.auditLogConfigs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfig message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.IAuditConfig} message AuditConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.service = reader.string();
                                    break;
                                }
                            case 3: {
                                    if (!(message.auditLogConfigs && message.auditLogConfigs.length))
                                        message.auditLogConfigs = [];
                                    message.auditLogConfigs.push($root.google.iam.v1.AuditLogConfig.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfig message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.auditLogConfigs != null && message.hasOwnProperty("auditLogConfigs")) {
                            if (!Array.isArray(message.auditLogConfigs))
                                return "auditLogConfigs: array expected";
                            for (var i = 0; i < message.auditLogConfigs.length; ++i) {
                                var error = $root.google.iam.v1.AuditLogConfig.verify(message.auditLogConfigs[i]);
                                if (error)
                                    return "auditLogConfigs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfig} AuditConfig
                     */
                    AuditConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfig)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfig();
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.auditLogConfigs) {
                            if (!Array.isArray(object.auditLogConfigs))
                                throw TypeError(".google.iam.v1.AuditConfig.auditLogConfigs: array expected");
                            message.auditLogConfigs = [];
                            for (var i = 0; i < object.auditLogConfigs.length; ++i) {
                                if (typeof object.auditLogConfigs[i] !== "object")
                                    throw TypeError(".google.iam.v1.AuditConfig.auditLogConfigs: object expected");
                                message.auditLogConfigs[i] = $root.google.iam.v1.AuditLogConfig.fromObject(object.auditLogConfigs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {google.iam.v1.AuditConfig} message AuditConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.auditLogConfigs = [];
                        if (options.defaults)
                            object.service = "";
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.auditLogConfigs && message.auditLogConfigs.length) {
                            object.auditLogConfigs = [];
                            for (var j = 0; j < message.auditLogConfigs.length; ++j)
                                object.auditLogConfigs[j] = $root.google.iam.v1.AuditLogConfig.toObject(message.auditLogConfigs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfig to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditConfig
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditConfig";
                    };
    
                    return AuditConfig;
                })();
    
                v1.AuditLogConfig = (function() {
    
                    /**
                     * Properties of an AuditLogConfig.
                     * @memberof google.iam.v1
                     * @interface IAuditLogConfig
                     * @property {google.iam.v1.AuditLogConfig.LogType|null} [logType] AuditLogConfig logType
                     * @property {Array.<string>|null} [exemptedMembers] AuditLogConfig exemptedMembers
                     */
    
                    /**
                     * Constructs a new AuditLogConfig.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditLogConfig.
                     * @implements IAuditLogConfig
                     * @constructor
                     * @param {google.iam.v1.IAuditLogConfig=} [properties] Properties to set
                     */
                    function AuditLogConfig(properties) {
                        this.exemptedMembers = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditLogConfig logType.
                     * @member {google.iam.v1.AuditLogConfig.LogType} logType
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     */
                    AuditLogConfig.prototype.logType = 0;
    
                    /**
                     * AuditLogConfig exemptedMembers.
                     * @member {Array.<string>} exemptedMembers
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     */
                    AuditLogConfig.prototype.exemptedMembers = $util.emptyArray;
    
                    /**
                     * Creates a new AuditLogConfig instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig instance
                     */
                    AuditLogConfig.create = function create(properties) {
                        return new AuditLogConfig(properties);
                    };
    
                    /**
                     * Encodes the specified AuditLogConfig message. Does not implicitly {@link google.iam.v1.AuditLogConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig} message AuditLogConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditLogConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.logType);
                        if (message.exemptedMembers != null && message.exemptedMembers.length)
                            for (var i = 0; i < message.exemptedMembers.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.exemptedMembers[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditLogConfig message, length delimited. Does not implicitly {@link google.iam.v1.AuditLogConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.IAuditLogConfig} message AuditLogConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditLogConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditLogConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditLogConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditLogConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.logType = reader.int32();
                                    break;
                                }
                            case 2: {
                                    if (!(message.exemptedMembers && message.exemptedMembers.length))
                                        message.exemptedMembers = [];
                                    message.exemptedMembers.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditLogConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditLogConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditLogConfig message.
                     * @function verify
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditLogConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            switch (message.logType) {
                            default:
                                return "logType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.exemptedMembers != null && message.hasOwnProperty("exemptedMembers")) {
                            if (!Array.isArray(message.exemptedMembers))
                                return "exemptedMembers: array expected";
                            for (var i = 0; i < message.exemptedMembers.length; ++i)
                                if (!$util.isString(message.exemptedMembers[i]))
                                    return "exemptedMembers: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AuditLogConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditLogConfig} AuditLogConfig
                     */
                    AuditLogConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditLogConfig)
                            return object;
                        var message = new $root.google.iam.v1.AuditLogConfig();
                        switch (object.logType) {
                        default:
                            if (typeof object.logType === "number") {
                                message.logType = object.logType;
                                break;
                            }
                            break;
                        case "LOG_TYPE_UNSPECIFIED":
                        case 0:
                            message.logType = 0;
                            break;
                        case "ADMIN_READ":
                        case 1:
                            message.logType = 1;
                            break;
                        case "DATA_WRITE":
                        case 2:
                            message.logType = 2;
                            break;
                        case "DATA_READ":
                        case 3:
                            message.logType = 3;
                            break;
                        }
                        if (object.exemptedMembers) {
                            if (!Array.isArray(object.exemptedMembers))
                                throw TypeError(".google.iam.v1.AuditLogConfig.exemptedMembers: array expected");
                            message.exemptedMembers = [];
                            for (var i = 0; i < object.exemptedMembers.length; ++i)
                                message.exemptedMembers[i] = String(object.exemptedMembers[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditLogConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {google.iam.v1.AuditLogConfig} message AuditLogConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditLogConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.exemptedMembers = [];
                        if (options.defaults)
                            object.logType = options.enums === String ? "LOG_TYPE_UNSPECIFIED" : 0;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = options.enums === String ? $root.google.iam.v1.AuditLogConfig.LogType[message.logType] === undefined ? message.logType : $root.google.iam.v1.AuditLogConfig.LogType[message.logType] : message.logType;
                        if (message.exemptedMembers && message.exemptedMembers.length) {
                            object.exemptedMembers = [];
                            for (var j = 0; j < message.exemptedMembers.length; ++j)
                                object.exemptedMembers[j] = message.exemptedMembers[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AuditLogConfig to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditLogConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditLogConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditLogConfig
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditLogConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditLogConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditLogConfig";
                    };
    
                    /**
                     * LogType enum.
                     * @name google.iam.v1.AuditLogConfig.LogType
                     * @enum {number}
                     * @property {number} LOG_TYPE_UNSPECIFIED=0 LOG_TYPE_UNSPECIFIED value
                     * @property {number} ADMIN_READ=1 ADMIN_READ value
                     * @property {number} DATA_WRITE=2 DATA_WRITE value
                     * @property {number} DATA_READ=3 DATA_READ value
                     */
                    AuditLogConfig.LogType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LOG_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADMIN_READ"] = 1;
                        values[valuesById[2] = "DATA_WRITE"] = 2;
                        values[valuesById[3] = "DATA_READ"] = 3;
                        return values;
                    })();
    
                    return AuditLogConfig;
                })();
    
                v1.PolicyDelta = (function() {
    
                    /**
                     * Properties of a PolicyDelta.
                     * @memberof google.iam.v1
                     * @interface IPolicyDelta
                     * @property {Array.<google.iam.v1.IBindingDelta>|null} [bindingDeltas] PolicyDelta bindingDeltas
                     * @property {Array.<google.iam.v1.IAuditConfigDelta>|null} [auditConfigDeltas] PolicyDelta auditConfigDeltas
                     */
    
                    /**
                     * Constructs a new PolicyDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a PolicyDelta.
                     * @implements IPolicyDelta
                     * @constructor
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     */
                    function PolicyDelta(properties) {
                        this.bindingDeltas = [];
                        this.auditConfigDeltas = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PolicyDelta bindingDeltas.
                     * @member {Array.<google.iam.v1.IBindingDelta>} bindingDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.bindingDeltas = $util.emptyArray;
    
                    /**
                     * PolicyDelta auditConfigDeltas.
                     * @member {Array.<google.iam.v1.IAuditConfigDelta>} auditConfigDeltas
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     */
                    PolicyDelta.prototype.auditConfigDeltas = $util.emptyArray;
    
                    /**
                     * Creates a new PolicyDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta instance
                     */
                    PolicyDelta.create = function create(properties) {
                        return new PolicyDelta(properties);
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bindingDeltas != null && message.bindingDeltas.length)
                            for (var i = 0; i < message.bindingDeltas.length; ++i)
                                $root.google.iam.v1.BindingDelta.encode(message.bindingDeltas[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.auditConfigDeltas != null && message.auditConfigDeltas.length)
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i)
                                $root.google.iam.v1.AuditConfigDelta.encode(message.auditConfigDeltas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PolicyDelta message, length delimited. Does not implicitly {@link google.iam.v1.PolicyDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.IPolicyDelta} message PolicyDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PolicyDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.PolicyDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.bindingDeltas && message.bindingDeltas.length))
                                        message.bindingDeltas = [];
                                    message.bindingDeltas.push($root.google.iam.v1.BindingDelta.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    if (!(message.auditConfigDeltas && message.auditConfigDeltas.length))
                                        message.auditConfigDeltas = [];
                                    message.auditConfigDeltas.push($root.google.iam.v1.AuditConfigDelta.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PolicyDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PolicyDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PolicyDelta message.
                     * @function verify
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PolicyDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bindingDeltas != null && message.hasOwnProperty("bindingDeltas")) {
                            if (!Array.isArray(message.bindingDeltas))
                                return "bindingDeltas: array expected";
                            for (var i = 0; i < message.bindingDeltas.length; ++i) {
                                var error = $root.google.iam.v1.BindingDelta.verify(message.bindingDeltas[i]);
                                if (error)
                                    return "bindingDeltas." + error;
                            }
                        }
                        if (message.auditConfigDeltas != null && message.hasOwnProperty("auditConfigDeltas")) {
                            if (!Array.isArray(message.auditConfigDeltas))
                                return "auditConfigDeltas: array expected";
                            for (var i = 0; i < message.auditConfigDeltas.length; ++i) {
                                var error = $root.google.iam.v1.AuditConfigDelta.verify(message.auditConfigDeltas[i]);
                                if (error)
                                    return "auditConfigDeltas." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PolicyDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.PolicyDelta} PolicyDelta
                     */
                    PolicyDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.PolicyDelta)
                            return object;
                        var message = new $root.google.iam.v1.PolicyDelta();
                        if (object.bindingDeltas) {
                            if (!Array.isArray(object.bindingDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
                            message.bindingDeltas = [];
                            for (var i = 0; i < object.bindingDeltas.length; ++i) {
                                if (typeof object.bindingDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
                                message.bindingDeltas[i] = $root.google.iam.v1.BindingDelta.fromObject(object.bindingDeltas[i]);
                            }
                        }
                        if (object.auditConfigDeltas) {
                            if (!Array.isArray(object.auditConfigDeltas))
                                throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
                            message.auditConfigDeltas = [];
                            for (var i = 0; i < object.auditConfigDeltas.length; ++i) {
                                if (typeof object.auditConfigDeltas[i] !== "object")
                                    throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
                                message.auditConfigDeltas[i] = $root.google.iam.v1.AuditConfigDelta.fromObject(object.auditConfigDeltas[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PolicyDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {google.iam.v1.PolicyDelta} message PolicyDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PolicyDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bindingDeltas = [];
                            object.auditConfigDeltas = [];
                        }
                        if (message.bindingDeltas && message.bindingDeltas.length) {
                            object.bindingDeltas = [];
                            for (var j = 0; j < message.bindingDeltas.length; ++j)
                                object.bindingDeltas[j] = $root.google.iam.v1.BindingDelta.toObject(message.bindingDeltas[j], options);
                        }
                        if (message.auditConfigDeltas && message.auditConfigDeltas.length) {
                            object.auditConfigDeltas = [];
                            for (var j = 0; j < message.auditConfigDeltas.length; ++j)
                                object.auditConfigDeltas[j] = $root.google.iam.v1.AuditConfigDelta.toObject(message.auditConfigDeltas[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PolicyDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.PolicyDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PolicyDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PolicyDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.PolicyDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PolicyDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.PolicyDelta";
                    };
    
                    return PolicyDelta;
                })();
    
                v1.BindingDelta = (function() {
    
                    /**
                     * Properties of a BindingDelta.
                     * @memberof google.iam.v1
                     * @interface IBindingDelta
                     * @property {google.iam.v1.BindingDelta.Action|null} [action] BindingDelta action
                     * @property {string|null} [role] BindingDelta role
                     * @property {string|null} [member] BindingDelta member
                     * @property {google.type.IExpr|null} [condition] BindingDelta condition
                     */
    
                    /**
                     * Constructs a new BindingDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents a BindingDelta.
                     * @implements IBindingDelta
                     * @constructor
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     */
                    function BindingDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BindingDelta action.
                     * @member {google.iam.v1.BindingDelta.Action} action
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.action = 0;
    
                    /**
                     * BindingDelta role.
                     * @member {string} role
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.role = "";
    
                    /**
                     * BindingDelta member.
                     * @member {string} member
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.member = "";
    
                    /**
                     * BindingDelta condition.
                     * @member {google.type.IExpr|null|undefined} condition
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     */
                    BindingDelta.prototype.condition = null;
    
                    /**
                     * Creates a new BindingDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.BindingDelta} BindingDelta instance
                     */
                    BindingDelta.create = function create(properties) {
                        return new BindingDelta(properties);
                    };
    
                    /**
                     * Encodes the specified BindingDelta message. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.role);
                        if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.member);
                        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                            $root.google.type.Expr.encode(message.condition, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BindingDelta message, length delimited. Does not implicitly {@link google.iam.v1.BindingDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.IBindingDelta} message BindingDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BindingDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.BindingDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.action = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.role = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.member = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BindingDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BindingDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BindingDelta message.
                     * @function verify
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BindingDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.role != null && message.hasOwnProperty("role"))
                            if (!$util.isString(message.role))
                                return "role: string expected";
                        if (message.member != null && message.hasOwnProperty("member"))
                            if (!$util.isString(message.member))
                                return "member: string expected";
                        if (message.condition != null && message.hasOwnProperty("condition")) {
                            var error = $root.google.type.Expr.verify(message.condition);
                            if (error)
                                return "condition." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BindingDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.BindingDelta} BindingDelta
                     */
                    BindingDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.BindingDelta)
                            return object;
                        var message = new $root.google.iam.v1.BindingDelta();
                        switch (object.action) {
                        default:
                            if (typeof object.action === "number") {
                                message.action = object.action;
                                break;
                            }
                            break;
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.role != null)
                            message.role = String(object.role);
                        if (object.member != null)
                            message.member = String(object.member);
                        if (object.condition != null) {
                            if (typeof object.condition !== "object")
                                throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
                            message.condition = $root.google.type.Expr.fromObject(object.condition);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BindingDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {google.iam.v1.BindingDelta} message BindingDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BindingDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.role = "";
                            object.member = "";
                            object.condition = null;
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.BindingDelta.Action[message.action] === undefined ? message.action : $root.google.iam.v1.BindingDelta.Action[message.action] : message.action;
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = message.role;
                        if (message.member != null && message.hasOwnProperty("member"))
                            object.member = message.member;
                        if (message.condition != null && message.hasOwnProperty("condition"))
                            object.condition = $root.google.type.Expr.toObject(message.condition, options);
                        return object;
                    };
    
                    /**
                     * Converts this BindingDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.BindingDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BindingDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BindingDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.BindingDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BindingDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.BindingDelta";
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.BindingDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    BindingDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return BindingDelta;
                })();
    
                v1.AuditConfigDelta = (function() {
    
                    /**
                     * Properties of an AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @interface IAuditConfigDelta
                     * @property {google.iam.v1.AuditConfigDelta.Action|null} [action] AuditConfigDelta action
                     * @property {string|null} [service] AuditConfigDelta service
                     * @property {string|null} [exemptedMember] AuditConfigDelta exemptedMember
                     * @property {string|null} [logType] AuditConfigDelta logType
                     */
    
                    /**
                     * Constructs a new AuditConfigDelta.
                     * @memberof google.iam.v1
                     * @classdesc Represents an AuditConfigDelta.
                     * @implements IAuditConfigDelta
                     * @constructor
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     */
                    function AuditConfigDelta(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuditConfigDelta action.
                     * @member {google.iam.v1.AuditConfigDelta.Action} action
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.action = 0;
    
                    /**
                     * AuditConfigDelta service.
                     * @member {string} service
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.service = "";
    
                    /**
                     * AuditConfigDelta exemptedMember.
                     * @member {string} exemptedMember
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.exemptedMember = "";
    
                    /**
                     * AuditConfigDelta logType.
                     * @member {string} logType
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     */
                    AuditConfigDelta.prototype.logType = "";
    
                    /**
                     * Creates a new AuditConfigDelta instance using the specified properties.
                     * @function create
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta=} [properties] Properties to set
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta instance
                     */
                    AuditConfigDelta.create = function create(properties) {
                        return new AuditConfigDelta(properties);
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.service);
                        if (message.exemptedMember != null && Object.hasOwnProperty.call(message, "exemptedMember"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.exemptedMember);
                        if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.logType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuditConfigDelta message, length delimited. Does not implicitly {@link google.iam.v1.AuditConfigDelta.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.IAuditConfigDelta} message AuditConfigDelta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuditConfigDelta.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfigDelta();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.action = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.service = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.exemptedMember = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.logType = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuditConfigDelta message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuditConfigDelta.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuditConfigDelta message.
                     * @function verify
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuditConfigDelta.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            if (!$util.isString(message.exemptedMember))
                                return "exemptedMember: string expected";
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            if (!$util.isString(message.logType))
                                return "logType: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AuditConfigDelta message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.iam.v1.AuditConfigDelta} AuditConfigDelta
                     */
                    AuditConfigDelta.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.iam.v1.AuditConfigDelta)
                            return object;
                        var message = new $root.google.iam.v1.AuditConfigDelta();
                        switch (object.action) {
                        default:
                            if (typeof object.action === "number") {
                                message.action = object.action;
                                break;
                            }
                            break;
                        case "ACTION_UNSPECIFIED":
                        case 0:
                            message.action = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.action = 1;
                            break;
                        case "REMOVE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.exemptedMember != null)
                            message.exemptedMember = String(object.exemptedMember);
                        if (object.logType != null)
                            message.logType = String(object.logType);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuditConfigDelta message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {google.iam.v1.AuditConfigDelta} message AuditConfigDelta
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuditConfigDelta.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                            object.service = "";
                            object.exemptedMember = "";
                            object.logType = "";
                        }
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.google.iam.v1.AuditConfigDelta.Action[message.action] === undefined ? message.action : $root.google.iam.v1.AuditConfigDelta.Action[message.action] : message.action;
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                            object.exemptedMember = message.exemptedMember;
                        if (message.logType != null && message.hasOwnProperty("logType"))
                            object.logType = message.logType;
                        return object;
                    };
    
                    /**
                     * Converts this AuditConfigDelta to JSON.
                     * @function toJSON
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuditConfigDelta.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AuditConfigDelta
                     * @function getTypeUrl
                     * @memberof google.iam.v1.AuditConfigDelta
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AuditConfigDelta.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.iam.v1.AuditConfigDelta";
                    };
    
                    /**
                     * Action enum.
                     * @name google.iam.v1.AuditConfigDelta.Action
                     * @enum {number}
                     * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} REMOVE=2 REMOVE value
                     */
                    AuditConfigDelta.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "REMOVE"] = 2;
                        return values;
                    })();
    
                    return AuditConfigDelta;
                })();
    
                return v1;
            })();
    
            return iam;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Expr = (function() {
    
                /**
                 * Properties of an Expr.
                 * @memberof google.type
                 * @interface IExpr
                 * @property {string|null} [expression] Expr expression
                 * @property {string|null} [title] Expr title
                 * @property {string|null} [description] Expr description
                 * @property {string|null} [location] Expr location
                 */
    
                /**
                 * Constructs a new Expr.
                 * @memberof google.type
                 * @classdesc Represents an Expr.
                 * @implements IExpr
                 * @constructor
                 * @param {google.type.IExpr=} [properties] Properties to set
                 */
                function Expr(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Expr expression.
                 * @member {string} expression
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.expression = "";
    
                /**
                 * Expr title.
                 * @member {string} title
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.title = "";
    
                /**
                 * Expr description.
                 * @member {string} description
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.description = "";
    
                /**
                 * Expr location.
                 * @member {string} location
                 * @memberof google.type.Expr
                 * @instance
                 */
                Expr.prototype.location = "";
    
                /**
                 * Creates a new Expr instance using the specified properties.
                 * @function create
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr=} [properties] Properties to set
                 * @returns {google.type.Expr} Expr instance
                 */
                Expr.create = function create(properties) {
                    return new Expr(properties);
                };
    
                /**
                 * Encodes the specified Expr message. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.expression);
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.location);
                    return writer;
                };
    
                /**
                 * Encodes the specified Expr message, length delimited. Does not implicitly {@link google.type.Expr.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.IExpr} message Expr message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Expr.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Expr();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.expression = reader.string();
                                break;
                            }
                        case 2: {
                                message.title = reader.string();
                                break;
                            }
                        case 3: {
                                message.description = reader.string();
                                break;
                            }
                        case 4: {
                                message.location = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Expr message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Expr
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Expr} Expr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Expr.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Expr message.
                 * @function verify
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Expr.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    return null;
                };
    
                /**
                 * Creates an Expr message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Expr} Expr
                 */
                Expr.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Expr)
                        return object;
                    var message = new $root.google.type.Expr();
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.location != null)
                        message.location = String(object.location);
                    return message;
                };
    
                /**
                 * Creates a plain object from an Expr message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Expr
                 * @static
                 * @param {google.type.Expr} message Expr
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Expr.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.expression = "";
                        object.title = "";
                        object.description = "";
                        object.location = "";
                    }
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    return object;
                };
    
                /**
                 * Converts this Expr to JSON.
                 * @function toJSON
                 * @memberof google.type.Expr
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Expr.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Expr
                 * @function getTypeUrl
                 * @memberof google.type.Expr
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Expr.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.type.Expr";
                };
    
                return Expr;
            })();
    
            return type;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
