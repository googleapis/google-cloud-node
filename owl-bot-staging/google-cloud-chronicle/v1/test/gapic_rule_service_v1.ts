// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as ruleserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.RuleServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'chronicle.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = ruleserviceModule.v1.RuleServiceClient.servicePath;
                assert.strictEqual(servicePath, 'chronicle.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = ruleserviceModule.v1.RuleServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'chronicle.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'chronicle.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'chronicle.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new ruleserviceModule.v1.RuleServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'chronicle.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new ruleserviceModule.v1.RuleServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'chronicle.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new ruleserviceModule.v1.RuleServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = ruleserviceModule.v1.RuleServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.ruleServiceStub, undefined);
            await client.initialize();
            assert(client.ruleServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.ruleServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.ruleServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('createRule', () => {
        it('invokes createRule without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRuleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.createRule = stubSimpleCall(expectedResponse);
            const [response] = await client.createRule(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRule without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRuleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.createRule = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRule(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRule|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRule with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRuleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRule = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRule(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRule with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRuleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.createRule(request), expectedError);
        });
    });

    describe('getRule', () => {
        it('invokes getRule without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.getRule = stubSimpleCall(expectedResponse);
            const [response] = await client.getRule(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRule without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.getRule = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRule(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRule|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRule with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRule = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRule(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRule with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRule(request), expectedError);
        });
    });

    describe('updateRule', () => {
        it('invokes updateRule without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleRequest()
            );
            request.rule ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleRequest', ['rule', 'name']);
            request.rule.name = defaultValue1;
            const expectedHeaderRequestParams = `rule.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.updateRule = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRule(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRule without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleRequest()
            );
            request.rule ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleRequest', ['rule', 'name']);
            request.rule.name = defaultValue1;
            const expectedHeaderRequestParams = `rule.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Rule()
            );
            client.innerApiCalls.updateRule = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRule(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRule|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRule with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleRequest()
            );
            request.rule ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleRequest', ['rule', 'name']);
            request.rule.name = defaultValue1;
            const expectedHeaderRequestParams = `rule.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRule = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRule(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRule with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleRequest()
            );
            request.rule ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleRequest', ['rule', 'name']);
            request.rule.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateRule(request), expectedError);
        });
    });

    describe('deleteRule', () => {
        it('invokes deleteRule without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.DeleteRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.DeleteRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRule = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRule(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRule without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.DeleteRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.DeleteRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteRule = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRule(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRule with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.DeleteRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.DeleteRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRule = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRule(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteRule as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteRule with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.DeleteRuleRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.DeleteRuleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.deleteRule(request), expectedError);
        });
    });

    describe('getRetrohunt', () => {
        it('invokes getRetrohunt without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRetrohuntRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Retrohunt()
            );
            client.innerApiCalls.getRetrohunt = stubSimpleCall(expectedResponse);
            const [response] = await client.getRetrohunt(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRetrohunt without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRetrohuntRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.Retrohunt()
            );
            client.innerApiCalls.getRetrohunt = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRetrohunt(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRetrohunt|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRetrohunt with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRetrohuntRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRetrohunt = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRetrohunt(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRetrohunt with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRetrohuntRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRetrohunt(request), expectedError);
        });
    });

    describe('getRuleDeployment', () => {
        it('invokes getRuleDeployment without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleDeploymentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleDeploymentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.RuleDeployment()
            );
            client.innerApiCalls.getRuleDeployment = stubSimpleCall(expectedResponse);
            const [response] = await client.getRuleDeployment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRuleDeployment without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleDeploymentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleDeploymentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.RuleDeployment()
            );
            client.innerApiCalls.getRuleDeployment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRuleDeployment(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRuleDeployment|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRuleDeployment with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleDeploymentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleDeploymentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getRuleDeployment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRuleDeployment(request), expectedError);
            const actualRequest = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getRuleDeployment with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.GetRuleDeploymentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.GetRuleDeploymentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getRuleDeployment(request), expectedError);
        });
    });

    describe('updateRuleDeployment', () => {
        it('invokes updateRuleDeployment without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest()
            );
            request.ruleDeployment ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest', ['ruleDeployment', 'name']);
            request.ruleDeployment.name = defaultValue1;
            const expectedHeaderRequestParams = `rule_deployment.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.RuleDeployment()
            );
            client.innerApiCalls.updateRuleDeployment = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRuleDeployment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRuleDeployment without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest()
            );
            request.ruleDeployment ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest', ['ruleDeployment', 'name']);
            request.ruleDeployment.name = defaultValue1;
            const expectedHeaderRequestParams = `rule_deployment.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.RuleDeployment()
            );
            client.innerApiCalls.updateRuleDeployment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRuleDeployment(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRuleDeployment|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRuleDeployment with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest()
            );
            request.ruleDeployment ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest', ['ruleDeployment', 'name']);
            request.ruleDeployment.name = defaultValue1;
            const expectedHeaderRequestParams = `rule_deployment.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRuleDeployment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRuleDeployment(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateRuleDeployment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateRuleDeployment with closed client', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest()
            );
            request.ruleDeployment ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.UpdateRuleDeploymentRequest', ['ruleDeployment', 'name']);
            request.ruleDeployment.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.updateRuleDeployment(request), expectedError);
        });
    });

    describe('createRetrohunt', () => {
        it('invokes createRetrohunt without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRetrohuntRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRetrohunt = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createRetrohunt(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRetrohunt without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRetrohuntRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createRetrohunt = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRetrohunt(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.chronicle.v1.IRetrohunt, protos.google.cloud.chronicle.v1.IRetrohuntMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.chronicle.v1.IRetrohunt, protos.google.cloud.chronicle.v1.IRetrohuntMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRetrohunt with call error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRetrohuntRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRetrohunt = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createRetrohunt(request), expectedError);
            const actualRequest = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createRetrohunt with LRO error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.CreateRetrohuntRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.CreateRetrohuntRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createRetrohunt = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createRetrohunt(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createRetrohunt as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateRetrohuntProgress without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateRetrohuntProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateRetrohuntProgress with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateRetrohuntProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listRules', () => {
        it('invokes listRules without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.innerApiCalls.listRules = stubSimpleCall(expectedResponse);
            const [response] = await client.listRules(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRules without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.innerApiCalls.listRules = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRules(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRule[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRules with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRules = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRules(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRules as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRulesStream without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.descriptors.page.listRules.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRulesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Rule[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Rule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRules.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRules, request));
            assert(
                (client.descriptors.page.listRules.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRulesStream with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRules.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRulesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Rule[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Rule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRules.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRules, request));
            assert(
                (client.descriptors.page.listRules.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRules without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.descriptors.page.listRules.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.chronicle.v1.IRule[] = [];
            const iterable = client.listRulesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRules.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRules.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRules with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRulesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRulesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRules.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRulesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.chronicle.v1.IRule[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRules.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRules.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listRuleRevisions', () => {
        it('invokes listRuleRevisions without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.innerApiCalls.listRuleRevisions = stubSimpleCall(expectedResponse);
            const [response] = await client.listRuleRevisions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleRevisions without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.innerApiCalls.listRuleRevisions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRuleRevisions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRule[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleRevisions with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRuleRevisions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRuleRevisions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleRevisions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleRevisionsStream without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.descriptors.page.listRuleRevisions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRuleRevisionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Rule[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Rule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRuleRevisions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRuleRevisions, request));
            assert(
                (client.descriptors.page.listRuleRevisions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRuleRevisionsStream with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRuleRevisions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRuleRevisionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Rule[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Rule) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRuleRevisions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRuleRevisions, request));
            assert(
                (client.descriptors.page.listRuleRevisions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRuleRevisions without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Rule()),
            ];
            client.descriptors.page.listRuleRevisions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.chronicle.v1.IRule[] = [];
            const iterable = client.listRuleRevisionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRuleRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRuleRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRuleRevisions with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleRevisionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleRevisionsRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRuleRevisions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRuleRevisionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.chronicle.v1.IRule[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRuleRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRuleRevisions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listRetrohunts', () => {
        it('invokes listRetrohunts without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
            ];
            client.innerApiCalls.listRetrohunts = stubSimpleCall(expectedResponse);
            const [response] = await client.listRetrohunts(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRetrohunts without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
            ];
            client.innerApiCalls.listRetrohunts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRetrohunts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRetrohunt[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRetrohunts with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRetrohunts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRetrohunts(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRetrohunts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRetrohuntsStream without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
            ];
            client.descriptors.page.listRetrohunts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRetrohuntsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Retrohunt[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Retrohunt) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRetrohunts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRetrohunts, request));
            assert(
                (client.descriptors.page.listRetrohunts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRetrohuntsStream with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRetrohunts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRetrohuntsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.Retrohunt[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.Retrohunt) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRetrohunts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRetrohunts, request));
            assert(
                (client.descriptors.page.listRetrohunts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRetrohunts without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.Retrohunt()),
            ];
            client.descriptors.page.listRetrohunts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.chronicle.v1.IRetrohunt[] = [];
            const iterable = client.listRetrohuntsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRetrohunts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRetrohunts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRetrohunts with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRetrohuntsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRetrohuntsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRetrohunts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRetrohuntsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.chronicle.v1.IRetrohunt[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRetrohunts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRetrohunts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listRuleDeployments', () => {
        it('invokes listRuleDeployments without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
            ];
            client.innerApiCalls.listRuleDeployments = stubSimpleCall(expectedResponse);
            const [response] = await client.listRuleDeployments(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleDeployments without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
            ];
            client.innerApiCalls.listRuleDeployments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRuleDeployments(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.chronicle.v1.IRuleDeployment[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleDeployments with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listRuleDeployments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRuleDeployments(request), expectedError);
            const actualRequest = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listRuleDeployments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listRuleDeploymentsStream without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
            ];
            client.descriptors.page.listRuleDeployments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRuleDeploymentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.RuleDeployment[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.RuleDeployment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRuleDeployments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRuleDeployments, request));
            assert(
                (client.descriptors.page.listRuleDeployments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listRuleDeploymentsStream with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRuleDeployments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRuleDeploymentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.chronicle.v1.RuleDeployment[] = [];
                stream.on('data', (response: protos.google.cloud.chronicle.v1.RuleDeployment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRuleDeployments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRuleDeployments, request));
            assert(
                (client.descriptors.page.listRuleDeployments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listRuleDeployments without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
              generateSampleMessage(new protos.google.cloud.chronicle.v1.RuleDeployment()),
            ];
            client.descriptors.page.listRuleDeployments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.chronicle.v1.IRuleDeployment[] = [];
            const iterable = client.listRuleDeploymentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRuleDeployments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRuleDeployments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listRuleDeployments with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.chronicle.v1.ListRuleDeploymentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.chronicle.v1.ListRuleDeploymentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listRuleDeployments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRuleDeploymentsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.chronicle.v1.IRuleDeployment[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRuleDeployments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listRuleDeployments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('dataAccessLabel', async () => {
            const fakePath = "/rendered/path/dataAccessLabel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                data_access_label: "dataAccessLabelValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dataAccessLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataAccessLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataAccessLabelPath', () => {
                const result = client.dataAccessLabelPath("projectValue", "locationValue", "instanceValue", "dataAccessLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataAccessLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDataAccessLabelName', () => {
                const result = client.matchProjectFromDataAccessLabelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dataAccessLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataAccessLabelName', () => {
                const result = client.matchLocationFromDataAccessLabelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataAccessLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromDataAccessLabelName', () => {
                const result = client.matchInstanceFromDataAccessLabelName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.dataAccessLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataAccessLabelFromDataAccessLabelName', () => {
                const result = client.matchDataAccessLabelFromDataAccessLabelName(fakePath);
                assert.strictEqual(result, "dataAccessLabelValue");
                assert((client.pathTemplates.dataAccessLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataAccessScope', async () => {
            const fakePath = "/rendered/path/dataAccessScope";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                data_access_scope: "dataAccessScopeValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dataAccessScopePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataAccessScopePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataAccessScopePath', () => {
                const result = client.dataAccessScopePath("projectValue", "locationValue", "instanceValue", "dataAccessScopeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataAccessScopePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDataAccessScopeName', () => {
                const result = client.matchProjectFromDataAccessScopeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dataAccessScopePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDataAccessScopeName', () => {
                const result = client.matchLocationFromDataAccessScopeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dataAccessScopePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromDataAccessScopeName', () => {
                const result = client.matchInstanceFromDataAccessScopeName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.dataAccessScopePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDataAccessScopeFromDataAccessScopeName', () => {
                const result = client.matchDataAccessScopeFromDataAccessScopeName(fakePath);
                assert.strictEqual(result, "dataAccessScopeValue");
                assert((client.pathTemplates.dataAccessScopePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('instance', async () => {
            const fakePath = "/rendered/path/instance";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.instancePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.instancePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('instancePath', () => {
                const result = client.instancePath("projectValue", "locationValue", "instanceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.instancePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInstanceName', () => {
                const result = client.matchProjectFromInstanceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInstanceName', () => {
                const result = client.matchLocationFromInstanceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromInstanceName', () => {
                const result = client.matchInstanceFromInstanceName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.instancePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('referenceList', async () => {
            const fakePath = "/rendered/path/referenceList";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                reference_list: "referenceListValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.referenceListPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.referenceListPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('referenceListPath', () => {
                const result = client.referenceListPath("projectValue", "locationValue", "instanceValue", "referenceListValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.referenceListPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReferenceListName', () => {
                const result = client.matchProjectFromReferenceListName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.referenceListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReferenceListName', () => {
                const result = client.matchLocationFromReferenceListName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.referenceListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromReferenceListName', () => {
                const result = client.matchInstanceFromReferenceListName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.referenceListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReferenceListFromReferenceListName', () => {
                const result = client.matchReferenceListFromReferenceListName(fakePath);
                assert.strictEqual(result, "referenceListValue");
                assert((client.pathTemplates.referenceListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('retrohunt', async () => {
            const fakePath = "/rendered/path/retrohunt";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                rule: "ruleValue",
                retrohunt: "retrohuntValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.retrohuntPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.retrohuntPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('retrohuntPath', () => {
                const result = client.retrohuntPath("projectValue", "locationValue", "instanceValue", "ruleValue", "retrohuntValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.retrohuntPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRetrohuntName', () => {
                const result = client.matchProjectFromRetrohuntName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.retrohuntPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRetrohuntName', () => {
                const result = client.matchLocationFromRetrohuntName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.retrohuntPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromRetrohuntName', () => {
                const result = client.matchInstanceFromRetrohuntName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.retrohuntPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRetrohuntName', () => {
                const result = client.matchRuleFromRetrohuntName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.retrohuntPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRetrohuntFromRetrohuntName', () => {
                const result = client.matchRetrohuntFromRetrohuntName(fakePath);
                assert.strictEqual(result, "retrohuntValue");
                assert((client.pathTemplates.retrohuntPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rule', async () => {
            const fakePath = "/rendered/path/rule";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                rule: "ruleValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rulePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rulePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rulePath', () => {
                const result = client.rulePath("projectValue", "locationValue", "instanceValue", "ruleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rulePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuleName', () => {
                const result = client.matchProjectFromRuleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRuleName', () => {
                const result = client.matchLocationFromRuleName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromRuleName', () => {
                const result = client.matchInstanceFromRuleName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRuleName', () => {
                const result = client.matchRuleFromRuleName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ruleDeployment', async () => {
            const fakePath = "/rendered/path/ruleDeployment";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                rule: "ruleValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.ruleDeploymentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.ruleDeploymentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('ruleDeploymentPath', () => {
                const result = client.ruleDeploymentPath("projectValue", "locationValue", "instanceValue", "ruleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.ruleDeploymentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuleDeploymentName', () => {
                const result = client.matchProjectFromRuleDeploymentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.ruleDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRuleDeploymentName', () => {
                const result = client.matchLocationFromRuleDeploymentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.ruleDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromRuleDeploymentName', () => {
                const result = client.matchInstanceFromRuleDeploymentName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.ruleDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRuleDeploymentName', () => {
                const result = client.matchRuleFromRuleDeploymentName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.ruleDeploymentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('watchlist', async () => {
            const fakePath = "/rendered/path/watchlist";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                instance: "instanceValue",
                watchlist: "watchlistValue",
            };
            const client = new ruleserviceModule.v1.RuleServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.watchlistPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.watchlistPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('watchlistPath', () => {
                const result = client.watchlistPath("projectValue", "locationValue", "instanceValue", "watchlistValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.watchlistPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromWatchlistName', () => {
                const result = client.matchProjectFromWatchlistName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.watchlistPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromWatchlistName', () => {
                const result = client.matchLocationFromWatchlistName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.watchlistPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInstanceFromWatchlistName', () => {
                const result = client.matchInstanceFromWatchlistName(fakePath);
                assert.strictEqual(result, "instanceValue");
                assert((client.pathTemplates.watchlistPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWatchlistFromWatchlistName', () => {
                const result = client.matchWatchlistFromWatchlistName(fakePath);
                assert.strictEqual(result, "watchlistValue");
                assert((client.pathTemplates.watchlistPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
