// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as migrationserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.MigrationServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = migrationserviceModule.v2.MigrationServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = migrationserviceModule.v2.MigrationServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = migrationserviceModule.v2.MigrationServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.migrationServiceStub, undefined);
            await client.initialize();
            assert(client.migrationServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.migrationServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.migrationServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('createMigrationWorkflow', () => {
        it('invokes createMigrationWorkflow without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()
            );
            client.innerApiCalls.createMigrationWorkflow = stubSimpleCall(expectedResponse);
            const [response] = await client.createMigrationWorkflow(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMigrationWorkflow without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()
            );
            client.innerApiCalls.createMigrationWorkflow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createMigrationWorkflow(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMigrationWorkflow with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createMigrationWorkflow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createMigrationWorkflow(request), expectedError);
            const actualRequest = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMigrationWorkflow with closed client', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.CreateMigrationWorkflowRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createMigrationWorkflow(request), expectedError);
        });
    });

    describe('getMigrationWorkflow', () => {
        it('invokes getMigrationWorkflow without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()
            );
            client.innerApiCalls.getMigrationWorkflow = stubSimpleCall(expectedResponse);
            const [response] = await client.getMigrationWorkflow(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationWorkflow without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()
            );
            client.innerApiCalls.getMigrationWorkflow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getMigrationWorkflow(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationWorkflow with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getMigrationWorkflow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getMigrationWorkflow(request), expectedError);
            const actualRequest = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationWorkflow with closed client', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getMigrationWorkflow(request), expectedError);
        });
    });

    describe('deleteMigrationWorkflow', () => {
        it('invokes deleteMigrationWorkflow without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteMigrationWorkflow = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteMigrationWorkflow(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMigrationWorkflow without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteMigrationWorkflow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteMigrationWorkflow(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMigrationWorkflow with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteMigrationWorkflow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteMigrationWorkflow(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMigrationWorkflow with closed client', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.DeleteMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteMigrationWorkflow(request), expectedError);
        });
    });

    describe('startMigrationWorkflow', () => {
        it('invokes startMigrationWorkflow without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.startMigrationWorkflow = stubSimpleCall(expectedResponse);
            const [response] = await client.startMigrationWorkflow(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startMigrationWorkflow without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.startMigrationWorkflow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startMigrationWorkflow(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startMigrationWorkflow with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.startMigrationWorkflow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startMigrationWorkflow(request), expectedError);
            const actualRequest = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startMigrationWorkflow as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startMigrationWorkflow with closed client', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.StartMigrationWorkflowRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.startMigrationWorkflow(request), expectedError);
        });
    });

    describe('getMigrationSubtask', () => {
        it('invokes getMigrationSubtask without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()
            );
            client.innerApiCalls.getMigrationSubtask = stubSimpleCall(expectedResponse);
            const [response] = await client.getMigrationSubtask(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationSubtask without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()
            );
            client.innerApiCalls.getMigrationSubtask = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getMigrationSubtask(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.migration.v2.IMigrationSubtask|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationSubtask with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getMigrationSubtask = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getMigrationSubtask(request), expectedError);
            const actualRequest = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMigrationSubtask as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMigrationSubtask with closed client', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.GetMigrationSubtaskRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getMigrationSubtask(request), expectedError);
        });
    });

    describe('listMigrationWorkflows', () => {
        it('invokes listMigrationWorkflows without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
            ];
            client.innerApiCalls.listMigrationWorkflows = stubSimpleCall(expectedResponse);
            const [response] = await client.listMigrationWorkflows(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationWorkflows without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
            ];
            client.innerApiCalls.listMigrationWorkflows = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMigrationWorkflows(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationWorkflows with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMigrationWorkflows = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMigrationWorkflows(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationWorkflows as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationWorkflowsStream without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
            ];
            client.descriptors.page.listMigrationWorkflows.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMigrationWorkflowsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.migration.v2.MigrationWorkflow[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.migration.v2.MigrationWorkflow) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMigrationWorkflows.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMigrationWorkflows, request));
            assert(
                (client.descriptors.page.listMigrationWorkflows.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMigrationWorkflowsStream with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMigrationWorkflows.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMigrationWorkflowsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.migration.v2.MigrationWorkflow[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.migration.v2.MigrationWorkflow) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMigrationWorkflows.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMigrationWorkflows, request));
            assert(
                (client.descriptors.page.listMigrationWorkflows.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMigrationWorkflows without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationWorkflow()),
            ];
            client.descriptors.page.listMigrationWorkflows.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow[] = [];
            const iterable = client.listMigrationWorkflowsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMigrationWorkflows.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMigrationWorkflows.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMigrationWorkflows with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationWorkflowsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMigrationWorkflows.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMigrationWorkflowsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMigrationWorkflows.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMigrationWorkflows.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listMigrationSubtasks', () => {
        it('invokes listMigrationSubtasks without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
            ];
            client.innerApiCalls.listMigrationSubtasks = stubSimpleCall(expectedResponse);
            const [response] = await client.listMigrationSubtasks(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationSubtasks without error using callback', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
            ];
            client.innerApiCalls.listMigrationSubtasks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMigrationSubtasks(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.migration.v2.IMigrationSubtask[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationSubtasks with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMigrationSubtasks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMigrationSubtasks(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMigrationSubtasks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMigrationSubtasksStream without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
            ];
            client.descriptors.page.listMigrationSubtasks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMigrationSubtasksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.migration.v2.MigrationSubtask[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.migration.v2.MigrationSubtask) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMigrationSubtasks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMigrationSubtasks, request));
            assert(
                (client.descriptors.page.listMigrationSubtasks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMigrationSubtasksStream with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMigrationSubtasks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMigrationSubtasksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.bigquery.migration.v2.MigrationSubtask[] = [];
                stream.on('data', (response: protos.google.cloud.bigquery.migration.v2.MigrationSubtask) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMigrationSubtasks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMigrationSubtasks, request));
            assert(
                (client.descriptors.page.listMigrationSubtasks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMigrationSubtasks without error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
              generateSampleMessage(new protos.google.cloud.bigquery.migration.v2.MigrationSubtask()),
            ];
            client.descriptors.page.listMigrationSubtasks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.bigquery.migration.v2.IMigrationSubtask[] = [];
            const iterable = client.listMigrationSubtasksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMigrationSubtasks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMigrationSubtasks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMigrationSubtasks with error', async () => {
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.migration.v2.ListMigrationSubtasksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMigrationSubtasks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMigrationSubtasksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.bigquery.migration.v2.IMigrationSubtask[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMigrationSubtasks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMigrationSubtasks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('migrationSubtask', () => {
            const fakePath = "/rendered/path/migrationSubtask";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workflow: "workflowValue",
                subtask: "subtaskValue",
            };
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.migrationSubtaskPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.migrationSubtaskPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('migrationSubtaskPath', () => {
                const result = client.migrationSubtaskPath("projectValue", "locationValue", "workflowValue", "subtaskValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.migrationSubtaskPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMigrationSubtaskName', () => {
                const result = client.matchProjectFromMigrationSubtaskName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.migrationSubtaskPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMigrationSubtaskName', () => {
                const result = client.matchLocationFromMigrationSubtaskName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.migrationSubtaskPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkflowFromMigrationSubtaskName', () => {
                const result = client.matchWorkflowFromMigrationSubtaskName(fakePath);
                assert.strictEqual(result, "workflowValue");
                assert((client.pathTemplates.migrationSubtaskPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSubtaskFromMigrationSubtaskName', () => {
                const result = client.matchSubtaskFromMigrationSubtaskName(fakePath);
                assert.strictEqual(result, "subtaskValue");
                assert((client.pathTemplates.migrationSubtaskPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('migrationWorkflow', () => {
            const fakePath = "/rendered/path/migrationWorkflow";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workflow: "workflowValue",
            };
            const client = new migrationserviceModule.v2.MigrationServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.migrationWorkflowPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.migrationWorkflowPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('migrationWorkflowPath', () => {
                const result = client.migrationWorkflowPath("projectValue", "locationValue", "workflowValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.migrationWorkflowPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMigrationWorkflowName', () => {
                const result = client.matchProjectFromMigrationWorkflowName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.migrationWorkflowPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMigrationWorkflowName', () => {
                const result = client.matchLocationFromMigrationWorkflowName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.migrationWorkflowPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkflowFromMigrationWorkflowName', () => {
                const result = client.matchWorkflowFromMigrationWorkflowName(fakePath);
                assert.strictEqual(result, "workflowValue");
                assert((client.pathTemplates.migrationWorkflowPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
