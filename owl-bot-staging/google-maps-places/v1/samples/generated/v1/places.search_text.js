// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(textQuery) {
  // [START places_v1_generated_Places_SearchText_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The text query for textual search.
   */
  // const textQuery = 'abc123'
  /**
   *  Place details will be displayed with the preferred language if available.
   *  If the language code is unspecified or unrecognized, place details of any
   *  language may be returned, with a preference for English if such details
   *  exist.
   *  Current list of supported languages:
   *  https://developers.google.com/maps/faq#languagesupport.
   */
  // const languageCode = 'abc123'
  /**
   *  The Unicode country/region code (CLDR) of the location where the
   *  request is coming from. It is used to display the place details, like
   *  region-specific place name, if available.
   *  For more information, see
   *  http://www.unicode.org/reports/tr35/#unicode_region_subtag.
   *  Note that 3-digit region codes are not currently supported.
   */
  // const regionCode = 'abc123'
  /**
   *  How results will be ranked in the response.
   */
  // const rankPreference = {}
  /**
   *  The requested place type. Full list of types supported:
   *  https://developers.google.com/places/supported_types. Only support one
   *  included type.
   */
  // const includedType = 'abc123'
  /**
   *  Used to restrict the search to places that are open at a specific time.
   *  open_now marks if a business is currently open.
   */
  // const openNow = true
  /**
   *  Filter out results whose average user rating is strictly less than this
   *  limit. A valid value must be an float between 0 and 5 (inclusively) at a
   *  0.5 cadence i.e. `[0, 0.5, 1.0, ... , 5.0]` inclusively. This is to keep
   *  parity with LocalRefinement_UserRating. The input rating will round up to
   *  the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all
   *  results with a less than 1.0 rating.
   */
  // const minRating = 1234
  /**
   *  Maximum number of results to return. It must be between 1 and 20,
   *  inclusively. If the number is unset, it falls back to the upper limit. If
   *  the number is set to negative or exceeds the upper limit, an
   *  INVALID_ARGUMENT error is returned.
   */
  // const maxResultCount = 1234
  /**
   *  Used to restrict the search to places that are marked as certain price
   *  levels. Users can choose any combinations of price levels. Default to
   *  select all price levels.
   */
  // const priceLevels = 1234
  /**
   *  Used to set strict type filtering for included_type. If set to true, only
   *  results of the same type will be returned. Default to false.
   */
  // const strictTypeFiltering = true
  /**
   *  The region to search. This location serves as a bias which means results
   *  around given location might be returned. Cannot be set along with
   *  location_restriction.
   */
  // const locationBias = {}
  /**
   *  The region to search. This location serves as a restriction which means
   *  results outside given location will not be returned. Cannot be set along
   *  with location_bias.
   */
  // const locationRestriction = {}

  // Imports the Places library
  const {PlacesClient} = require('@googlemaps/places').v1;

  // Instantiates a client
  const placesClient = new PlacesClient();

  async function callSearchText() {
    // Construct request
    const request = {
      textQuery,
    };

    // Run request
    const response = await placesClient.searchText(request);
    console.log(response);
  }

  callSearchText();
  // [END places_v1_generated_Places_SearchText_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
