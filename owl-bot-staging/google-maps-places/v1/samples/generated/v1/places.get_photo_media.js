// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name) {
  // [START places_v1_generated_Places_GetPhotoMedia_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of a photo media in the format:
   *  `places/{place_id}/photos/{photo_reference}/media`.
   *  The resource name of a photo as returned in a Place object's `photos.name`
   *  field comes with the format
   *  `places/{place_id}/photos/{photo_reference}`. You need to append `/media`
   *  at the end of the photo resource to get the photo media resource name.
   */
  // const name = 'abc123'
  /**
   *  Optional. Specifies the maximum desired width, in pixels, of the image. If
   *  the image is smaller than the values specified, the original image will be
   *  returned. If the image is larger in either dimension, it will be scaled to
   *  match the smaller of the two dimensions, restricted to its original aspect
   *  ratio. Both the max_height_px and max_width_px properties accept an integer
   *  between 1 and 4800, inclusively. If the value is not within the allowed
   *  range, an INVALID_ARGUMENT error will be returned.
   *  At least one of max_height_px or max_width_px needs to be specified. If
   *  neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT
   *  error will be returned.
   */
  // const maxWidthPx = 1234
  /**
   *  Optional. Specifies the maximum desired height, in pixels, of the image. If
   *  the image is smaller than the values specified, the original image will be
   *  returned. If the image is larger in either dimension, it will be scaled to
   *  match the smaller of the two dimensions, restricted to its original aspect
   *  ratio. Both the max_height_px and max_width_px properties accept an integer
   *  between 1 and 4800, inclusively. If the value is not within the allowed
   *  range, an INVALID_ARGUMENT error will be returned.
   *  At least one of max_height_px or max_width_px needs to be specified. If
   *  neither max_height_px nor max_width_px is specified, an INVALID_ARGUMENT
   *  error will be returned.
   */
  // const maxHeightPx = 1234
  /**
   *  Optional. If set, skip the default HTTP redirect behavior and render a text
   *  format (for example, in JSON format for HTTP use case) response. If not
   *  set, an HTTP redirect will be issued to redirect the call to the image
   *  media. This option is ignored for non-HTTP requests.
   */
  // const skipHttpRedirect = true

  // Imports the Places library
  const {PlacesClient} = require('@googlemaps/places').v1;

  // Instantiates a client
  const placesClient = new PlacesClient();

  async function callGetPhotoMedia() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await placesClient.getPhotoMedia(request);
    console.log(response);
  }

  callGetPhotoMedia();
  // [END places_v1_generated_Places_GetPhotoMedia_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
