// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name) {
  // [START places_v1_generated_Places_GetPlace_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. A place_id returned in a Place (with "places/" prefix), or
   *  equivalently the name in the same Place. Format: places/<place_id>.
   */
  // const name = 'abc123'
  /**
   *  Optional. Place details will be displayed with the preferred language if
   *  available.
   *  Current list of supported languages:
   *  https://developers.google.com/maps/faq#languagesupport.
   */
  // const languageCode = 'abc123'
  /**
   *  Optional. The Unicode country/region code (CLDR) of the location where the
   *  request is coming from. This parameter is used to display the place
   *  details, like region-specific place name, if available. The parameter can
   *  affect results based on applicable law.
   *  For more information, see
   *  http://www.unicode.org/reports/tr35/#unicode_region_subtag.
   *  Note that 3-digit region codes are not currently supported.
   */
  // const regionCode = 'abc123'

  // Imports the Places library
  const {PlacesClient} = require('@googlemaps/places').v1;

  // Instantiates a client
  const placesClient = new PlacesClient();

  async function callGetPlace() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await placesClient.getPlace(request);
    console.log(response);
  }

  callGetPlace();
  // [END places_v1_generated_Places_GetPlace_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
