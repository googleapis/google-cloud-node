// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v3/snooze_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './snooze_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The SnoozeService API is used to temporarily prevent an alert policy from
 *  generating alerts. A Snooze is a description of the criteria under which one
 *  or more alert policies should not fire alerts for the specified duration.
 * @class
 * @memberof v3
 */
export class SnoozeServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('monitoring');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  snoozeServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SnoozeServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SnoozeServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SnoozeServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'monitoring.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/alertPolicies/{alert_policy}'
      ),
      folderAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/alertPolicies/{alert_policy}/conditions/{condition}'
      ),
      folderChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/notificationChannelDescriptors/{channel_descriptor}'
      ),
      folderGroupPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/groups/{group}'
      ),
      folderNotificationChannelPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/notificationChannels/{notification_channel}'
      ),
      folderServicePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/services/{service}'
      ),
      folderServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      folderUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      organizationAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/alertPolicies/{alert_policy}'
      ),
      organizationAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/alertPolicies/{alert_policy}/conditions/{condition}'
      ),
      organizationChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/notificationChannelDescriptors/{channel_descriptor}'
      ),
      organizationGroupPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/groups/{group}'
      ),
      organizationNotificationChannelPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/notificationChannels/{notification_channel}'
      ),
      organizationServicePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/services/{service}'
      ),
      organizationServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      organizationUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/alertPolicies/{alert_policy}'
      ),
      projectAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/alertPolicies/{alert_policy}/conditions/{condition}'
      ),
      projectChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/notificationChannelDescriptors/{channel_descriptor}'
      ),
      projectGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/groups/{group}'
      ),
      projectNotificationChannelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/notificationChannels/{notification_channel}'
      ),
      projectServicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/services/{service}'
      ),
      projectServiceServiceLevelObjectivePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/services/{service}/serviceLevelObjectives/{service_level_objective}'
      ),
      projectUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      snoozePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/snoozes/{snooze}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSnoozes:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'snoozes')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.monitoring.v3.SnoozeService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.snoozeServiceStub) {
      return this.snoozeServiceStub;
    }

    // Put together the "service stub" for
    // google.monitoring.v3.SnoozeService.
    this.snoozeServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.monitoring.v3.SnoozeService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.monitoring.v3.SnoozeService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const snoozeServiceStubMethods =
        ['createSnooze', 'listSnoozes', 'getSnooze', 'updateSnooze'];
    for (const methodName of snoozeServiceStubMethods) {
      const callPromise = this.snoozeServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.snoozeServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'monitoring.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'monitoring.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/monitoring',
      'https://www.googleapis.com/auth/monitoring.read'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a `Snooze` that will prevent alerts, which match the provided
 * criteria, from being opened. The `Snooze` applies for a specific time
 * interval.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The
 *   [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
 *   a `Snooze` should be created. The format is:
 *
 *       projects/[PROJECT_ID_OR_NUMBER]
 * @param {google.monitoring.v3.Snooze} request.snooze
 *   Required. The `Snooze` to create. Omit the `name` field, as it will be
 *   filled in by the API.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v3/snooze_service.create_snooze.js</caption>
 * region_tag:monitoring_v3_generated_SnoozeService_CreateSnooze_async
 */
  createSnooze(
      request?: protos.google.monitoring.v3.ICreateSnoozeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.ICreateSnoozeRequest|undefined, {}|undefined
      ]>;
  createSnooze(
      request: protos.google.monitoring.v3.ICreateSnoozeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.ICreateSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  createSnooze(
      request: protos.google.monitoring.v3.ICreateSnoozeRequest,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.ICreateSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  createSnooze(
      request?: protos.google.monitoring.v3.ICreateSnoozeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.ICreateSnoozeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.ICreateSnoozeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.ICreateSnoozeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createSnooze request %j', request);
    const wrappedCallback: Callback<
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.ICreateSnoozeRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createSnooze response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createSnooze(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.ICreateSnoozeRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createSnooze response %j', response);
        return [response, options, rawResponse];
      });
  }
/**
 * Retrieves a `Snooze` by `name`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The ID of the `Snooze` to retrieve. The format is:
 *
 *       projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v3/snooze_service.get_snooze.js</caption>
 * region_tag:monitoring_v3_generated_SnoozeService_GetSnooze_async
 */
  getSnooze(
      request?: protos.google.monitoring.v3.IGetSnoozeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IGetSnoozeRequest|undefined, {}|undefined
      ]>;
  getSnooze(
      request: protos.google.monitoring.v3.IGetSnoozeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IGetSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  getSnooze(
      request: protos.google.monitoring.v3.IGetSnoozeRequest,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IGetSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  getSnooze(
      request?: protos.google.monitoring.v3.IGetSnoozeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IGetSnoozeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IGetSnoozeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IGetSnoozeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getSnooze request %j', request);
    const wrappedCallback: Callback<
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IGetSnoozeRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getSnooze response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getSnooze(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IGetSnoozeRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getSnooze response %j', response);
        return [response, options, rawResponse];
      });
  }
/**
 * Updates a `Snooze`, identified by its `name`, with the parameters in the
 * given `Snooze` object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.monitoring.v3.Snooze} request.snooze
 *   Required. The `Snooze` to update. Must have the name field present.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The fields to update.
 *
 *   For each field listed in `update_mask`:
 *
 *     * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
 *       value for that field, the value of the field in the existing `Snooze`
 *       will be set to the value of the field in the supplied `Snooze`.
 *     * If the field does not have a value in the supplied `Snooze`, the field
 *       in the existing `Snooze` is set to its default value.
 *
 *   Fields not listed retain their existing value.
 *
 *   The following are the field names that are accepted in `update_mask`:
 *
 *     * `display_name`
 *     * `interval.start_time`
 *     * `interval.end_time`
 *
 *   That said, the start time and end time of the `Snooze` determines which
 *   fields can legally be updated. Before attempting an update, users should
 *   consult the documentation for `UpdateSnoozeRequest`, which talks about
 *   which fields can be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.monitoring.v3.Snooze|Snooze}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v3/snooze_service.update_snooze.js</caption>
 * region_tag:monitoring_v3_generated_SnoozeService_UpdateSnooze_async
 */
  updateSnooze(
      request?: protos.google.monitoring.v3.IUpdateSnoozeRequest,
      options?: CallOptions):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IUpdateSnoozeRequest|undefined, {}|undefined
      ]>;
  updateSnooze(
      request: protos.google.monitoring.v3.IUpdateSnoozeRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IUpdateSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  updateSnooze(
      request: protos.google.monitoring.v3.IUpdateSnoozeRequest,
      callback: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IUpdateSnoozeRequest|null|undefined,
          {}|null|undefined>): void;
  updateSnooze(
      request?: protos.google.monitoring.v3.IUpdateSnoozeRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IUpdateSnoozeRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.monitoring.v3.ISnooze,
          protos.google.monitoring.v3.IUpdateSnoozeRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IUpdateSnoozeRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'snooze.name': request.snooze!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateSnooze request %j', request);
    const wrappedCallback: Callback<
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IUpdateSnoozeRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateSnooze response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateSnooze(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.monitoring.v3.ISnooze,
        protos.google.monitoring.v3.IUpdateSnoozeRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateSnooze response %j', response);
        return [response, options, rawResponse];
      });
  }

 /**
 * Lists the `Snooze`s associated with a project. Can optionally pass in
 * `filter`, which specifies predicates to match `Snooze`s.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The
 *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
 *   `Snooze`s should be listed. The format is:
 *
 *       projects/[PROJECT_ID_OR_NUMBER]
 * @param {string} [request.filter]
 *   Optional. Optional filter to restrict results to the given criteria. The
 *   following fields are supported.
 *
 *     * `interval.start_time`
 *     * `interval.end_time`
 *
 *   For example:
 *
 *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
 *           interval.end_time < "2022-03-12T00:00:00-08:00"
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return for a single query. The
 *   server may further constrain the maximum number of results returned in a
 *   single page. The value should be in the range [1, 1000]. If the value given
 *   is outside this range, the server will decide the number of results to be
 *   returned.
 * @param {string} [request.pageToken]
 *   Optional. The `next_page_token` from a previous call to
 *   `ListSnoozesRequest` to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.monitoring.v3.Snooze|Snooze}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSnoozesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSnoozes(
      request?: protos.google.monitoring.v3.IListSnoozesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.monitoring.v3.ISnooze[],
        protos.google.monitoring.v3.IListSnoozesRequest|null,
        protos.google.monitoring.v3.IListSnoozesResponse
      ]>;
  listSnoozes(
      request: protos.google.monitoring.v3.IListSnoozesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.monitoring.v3.IListSnoozesRequest,
          protos.google.monitoring.v3.IListSnoozesResponse|null|undefined,
          protos.google.monitoring.v3.ISnooze>): void;
  listSnoozes(
      request: protos.google.monitoring.v3.IListSnoozesRequest,
      callback: PaginationCallback<
          protos.google.monitoring.v3.IListSnoozesRequest,
          protos.google.monitoring.v3.IListSnoozesResponse|null|undefined,
          protos.google.monitoring.v3.ISnooze>): void;
  listSnoozes(
      request?: protos.google.monitoring.v3.IListSnoozesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.monitoring.v3.IListSnoozesRequest,
          protos.google.monitoring.v3.IListSnoozesResponse|null|undefined,
          protos.google.monitoring.v3.ISnooze>,
      callback?: PaginationCallback<
          protos.google.monitoring.v3.IListSnoozesRequest,
          protos.google.monitoring.v3.IListSnoozesResponse|null|undefined,
          protos.google.monitoring.v3.ISnooze>):
      Promise<[
        protos.google.monitoring.v3.ISnooze[],
        protos.google.monitoring.v3.IListSnoozesRequest|null,
        protos.google.monitoring.v3.IListSnoozesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.monitoring.v3.IListSnoozesRequest,
      protos.google.monitoring.v3.IListSnoozesResponse|null|undefined,
      protos.google.monitoring.v3.ISnooze>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listSnoozes values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listSnoozes request %j', request);
    return this.innerApiCalls
      .listSnoozes(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.monitoring.v3.ISnooze[],
        protos.google.monitoring.v3.IListSnoozesRequest|null,
        protos.google.monitoring.v3.IListSnoozesResponse
      ]) => {
        this._log.info('listSnoozes values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listSnoozes`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The
 *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
 *   `Snooze`s should be listed. The format is:
 *
 *       projects/[PROJECT_ID_OR_NUMBER]
 * @param {string} [request.filter]
 *   Optional. Optional filter to restrict results to the given criteria. The
 *   following fields are supported.
 *
 *     * `interval.start_time`
 *     * `interval.end_time`
 *
 *   For example:
 *
 *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
 *           interval.end_time < "2022-03-12T00:00:00-08:00"
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return for a single query. The
 *   server may further constrain the maximum number of results returned in a
 *   single page. The value should be in the range [1, 1000]. If the value given
 *   is outside this range, the server will decide the number of results to be
 *   returned.
 * @param {string} [request.pageToken]
 *   Optional. The `next_page_token` from a previous call to
 *   `ListSnoozesRequest` to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.monitoring.v3.Snooze|Snooze} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSnoozesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSnoozesStream(
      request?: protos.google.monitoring.v3.IListSnoozesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSnoozes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listSnoozes stream %j', request);
    return this.descriptors.page.listSnoozes.createStream(
      this.innerApiCalls.listSnoozes as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSnoozes`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The
 *   [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
 *   `Snooze`s should be listed. The format is:
 *
 *       projects/[PROJECT_ID_OR_NUMBER]
 * @param {string} [request.filter]
 *   Optional. Optional filter to restrict results to the given criteria. The
 *   following fields are supported.
 *
 *     * `interval.start_time`
 *     * `interval.end_time`
 *
 *   For example:
 *
 *       interval.start_time > "2022-03-11T00:00:00-08:00" AND
 *           interval.end_time < "2022-03-12T00:00:00-08:00"
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return for a single query. The
 *   server may further constrain the maximum number of results returned in a
 *   single page. The value should be in the range [1, 1000]. If the value given
 *   is outside this range, the server will decide the number of results to be
 *   returned.
 * @param {string} [request.pageToken]
 *   Optional. The `next_page_token` from a previous call to
 *   `ListSnoozesRequest` to get the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.monitoring.v3.Snooze|Snooze}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v3/snooze_service.list_snoozes.js</caption>
 * region_tag:monitoring_v3_generated_SnoozeService_ListSnoozes_async
 */
  listSnoozesAsync(
      request?: protos.google.monitoring.v3.IListSnoozesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.monitoring.v3.ISnooze>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSnoozes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listSnoozes iterate %j', request);
    return this.descriptors.page.listSnoozes.asyncIterate(
      this.innerApiCalls['listSnoozes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.monitoring.v3.ISnooze>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderAlertPolicy resource name string.
   *
   * @param {string} folder
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  folderAlertPolicyPath(folder:string,alertPolicy:string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.render({
      folder: folder,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the folder from FolderAlertPolicy resource.
   *
   * @param {string} folderAlertPolicyName
   *   A fully-qualified path representing folder_alert_policy resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAlertPolicyName(folderAlertPolicyName: string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.match(folderAlertPolicyName).folder;
  }

  /**
   * Parse the alert_policy from FolderAlertPolicy resource.
   *
   * @param {string} folderAlertPolicyName
   *   A fully-qualified path representing folder_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromFolderAlertPolicyName(folderAlertPolicyName: string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.match(folderAlertPolicyName).alert_policy;
  }

  /**
   * Return a fully-qualified folderAlertPolicyCondition resource name string.
   *
   * @param {string} folder
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  folderAlertPolicyConditionPath(folder:string,alertPolicy:string,condition:string) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.render({
      folder: folder,
      alert_policy: alertPolicy,
      condition: condition,
    });
  }

  /**
   * Parse the folder from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).folder;
  }

  /**
   * Parse the alert_policy from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).alert_policy;
  }

  /**
   * Parse the condition from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromFolderAlertPolicyConditionName(folderAlertPolicyConditionName: string) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(folderAlertPolicyConditionName).condition;
  }

  /**
   * Return a fully-qualified folderChannelDescriptor resource name string.
   *
   * @param {string} folder
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  folderChannelDescriptorPath(folder:string,channelDescriptor:string) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.render({
      folder: folder,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the folder from FolderChannelDescriptor resource.
   *
   * @param {string} folderChannelDescriptorName
   *   A fully-qualified path representing folder_channel_descriptor resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderChannelDescriptorName(folderChannelDescriptorName: string) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.match(folderChannelDescriptorName).folder;
  }

  /**
   * Parse the channel_descriptor from FolderChannelDescriptor resource.
   *
   * @param {string} folderChannelDescriptorName
   *   A fully-qualified path representing folder_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromFolderChannelDescriptorName(folderChannelDescriptorName: string) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.match(folderChannelDescriptorName).channel_descriptor;
  }

  /**
   * Return a fully-qualified folderGroup resource name string.
   *
   * @param {string} folder
   * @param {string} group
   * @returns {string} Resource name string.
   */
  folderGroupPath(folder:string,group:string) {
    return this.pathTemplates.folderGroupPathTemplate.render({
      folder: folder,
      group: group,
    });
  }

  /**
   * Parse the folder from FolderGroup resource.
   *
   * @param {string} folderGroupName
   *   A fully-qualified path representing folder_group resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderGroupName(folderGroupName: string) {
    return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName).folder;
  }

  /**
   * Parse the group from FolderGroup resource.
   *
   * @param {string} folderGroupName
   *   A fully-qualified path representing folder_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromFolderGroupName(folderGroupName: string) {
    return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName).group;
  }

  /**
   * Return a fully-qualified folderNotificationChannel resource name string.
   *
   * @param {string} folder
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  folderNotificationChannelPath(folder:string,notificationChannel:string) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.render({
      folder: folder,
      notification_channel: notificationChannel,
    });
  }

  /**
   * Parse the folder from FolderNotificationChannel resource.
   *
   * @param {string} folderNotificationChannelName
   *   A fully-qualified path representing folder_notification_channel resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderNotificationChannelName(folderNotificationChannelName: string) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.match(folderNotificationChannelName).folder;
  }

  /**
   * Parse the notification_channel from FolderNotificationChannel resource.
   *
   * @param {string} folderNotificationChannelName
   *   A fully-qualified path representing folder_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromFolderNotificationChannelName(folderNotificationChannelName: string) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.match(folderNotificationChannelName).notification_channel;
  }

  /**
   * Return a fully-qualified folderService resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @returns {string} Resource name string.
   */
  folderServicePath(folder:string,service:string) {
    return this.pathTemplates.folderServicePathTemplate.render({
      folder: folder,
      service: service,
    });
  }

  /**
   * Parse the folder from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceName(folderServiceName: string) {
    return this.pathTemplates.folderServicePathTemplate.match(folderServiceName).folder;
  }

  /**
   * Parse the service from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceName(folderServiceName: string) {
    return this.pathTemplates.folderServicePathTemplate.match(folderServiceName).service;
  }

  /**
   * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  folderServiceServiceLevelObjectivePath(folder:string,service:string,serviceLevelObjective:string) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.render({
      folder: folder,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the folder from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).folder;
  }

  /**
   * Parse the service from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(folderServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(folderServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified folderUptimeCheckConfig resource name string.
   *
   * @param {string} folder
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  folderUptimeCheckConfigPath(folder:string,uptimeCheckConfig:string) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.render({
      folder: folder,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the folder from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).folder;
  }

  /**
   * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromFolderUptimeCheckConfigName(folderUptimeCheckConfigName: string) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(folderUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Return a fully-qualified organizationAlertPolicy resource name string.
   *
   * @param {string} organization
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  organizationAlertPolicyPath(organization:string,alertPolicy:string) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.render({
      organization: organization,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the organization from OrganizationAlertPolicy resource.
   *
   * @param {string} organizationAlertPolicyName
   *   A fully-qualified path representing organization_alert_policy resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAlertPolicyName(organizationAlertPolicyName: string) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.match(organizationAlertPolicyName).organization;
  }

  /**
   * Parse the alert_policy from OrganizationAlertPolicy resource.
   *
   * @param {string} organizationAlertPolicyName
   *   A fully-qualified path representing organization_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromOrganizationAlertPolicyName(organizationAlertPolicyName: string) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.match(organizationAlertPolicyName).alert_policy;
  }

  /**
   * Return a fully-qualified organizationAlertPolicyCondition resource name string.
   *
   * @param {string} organization
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  organizationAlertPolicyConditionPath(organization:string,alertPolicy:string,condition:string) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.render({
      organization: organization,
      alert_policy: alertPolicy,
      condition: condition,
    });
  }

  /**
   * Parse the organization from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).organization;
  }

  /**
   * Parse the alert_policy from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).alert_policy;
  }

  /**
   * Parse the condition from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromOrganizationAlertPolicyConditionName(organizationAlertPolicyConditionName: string) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(organizationAlertPolicyConditionName).condition;
  }

  /**
   * Return a fully-qualified organizationChannelDescriptor resource name string.
   *
   * @param {string} organization
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  organizationChannelDescriptorPath(organization:string,channelDescriptor:string) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.render({
      organization: organization,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the organization from OrganizationChannelDescriptor resource.
   *
   * @param {string} organizationChannelDescriptorName
   *   A fully-qualified path representing organization_channel_descriptor resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(organizationChannelDescriptorName).organization;
  }

  /**
   * Parse the channel_descriptor from OrganizationChannelDescriptor resource.
   *
   * @param {string} organizationChannelDescriptorName
   *   A fully-qualified path representing organization_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromOrganizationChannelDescriptorName(organizationChannelDescriptorName: string) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(organizationChannelDescriptorName).channel_descriptor;
  }

  /**
   * Return a fully-qualified organizationGroup resource name string.
   *
   * @param {string} organization
   * @param {string} group
   * @returns {string} Resource name string.
   */
  organizationGroupPath(organization:string,group:string) {
    return this.pathTemplates.organizationGroupPathTemplate.render({
      organization: organization,
      group: group,
    });
  }

  /**
   * Parse the organization from OrganizationGroup resource.
   *
   * @param {string} organizationGroupName
   *   A fully-qualified path representing organization_group resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationGroupName(organizationGroupName: string) {
    return this.pathTemplates.organizationGroupPathTemplate.match(organizationGroupName).organization;
  }

  /**
   * Parse the group from OrganizationGroup resource.
   *
   * @param {string} organizationGroupName
   *   A fully-qualified path representing organization_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromOrganizationGroupName(organizationGroupName: string) {
    return this.pathTemplates.organizationGroupPathTemplate.match(organizationGroupName).group;
  }

  /**
   * Return a fully-qualified organizationNotificationChannel resource name string.
   *
   * @param {string} organization
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  organizationNotificationChannelPath(organization:string,notificationChannel:string) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.render({
      organization: organization,
      notification_channel: notificationChannel,
    });
  }

  /**
   * Parse the organization from OrganizationNotificationChannel resource.
   *
   * @param {string} organizationNotificationChannelName
   *   A fully-qualified path representing organization_notification_channel resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationNotificationChannelName(organizationNotificationChannelName: string) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.match(organizationNotificationChannelName).organization;
  }

  /**
   * Parse the notification_channel from OrganizationNotificationChannel resource.
   *
   * @param {string} organizationNotificationChannelName
   *   A fully-qualified path representing organization_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromOrganizationNotificationChannelName(organizationNotificationChannelName: string) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.match(organizationNotificationChannelName).notification_channel;
  }

  /**
   * Return a fully-qualified organizationService resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @returns {string} Resource name string.
   */
  organizationServicePath(organization:string,service:string) {
    return this.pathTemplates.organizationServicePathTemplate.render({
      organization: organization,
      service: service,
    });
  }

  /**
   * Parse the organization from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceName(organizationServiceName: string) {
    return this.pathTemplates.organizationServicePathTemplate.match(organizationServiceName).organization;
  }

  /**
   * Parse the service from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceName(organizationServiceName: string) {
    return this.pathTemplates.organizationServicePathTemplate.match(organizationServiceName).service;
  }

  /**
   * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  organizationServiceServiceLevelObjectivePath(organization:string,service:string,serviceLevelObjective:string) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.render({
      organization: organization,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the organization from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).organization;
  }

  /**
   * Parse the service from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(organizationServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(organizationServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified organizationUptimeCheckConfig resource name string.
   *
   * @param {string} organization
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  organizationUptimeCheckConfigPath(organization:string,uptimeCheckConfig:string) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.render({
      organization: organization,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the organization from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).organization;
  }

  /**
   * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(organizationUptimeCheckConfigName: string) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(organizationUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectAlertPolicy resource name string.
   *
   * @param {string} project
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  projectAlertPolicyPath(project:string,alertPolicy:string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.render({
      project: project,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the project from ProjectAlertPolicy resource.
   *
   * @param {string} projectAlertPolicyName
   *   A fully-qualified path representing project_alert_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAlertPolicyName(projectAlertPolicyName: string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.match(projectAlertPolicyName).project;
  }

  /**
   * Parse the alert_policy from ProjectAlertPolicy resource.
   *
   * @param {string} projectAlertPolicyName
   *   A fully-qualified path representing project_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromProjectAlertPolicyName(projectAlertPolicyName: string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.match(projectAlertPolicyName).alert_policy;
  }

  /**
   * Return a fully-qualified projectAlertPolicyCondition resource name string.
   *
   * @param {string} project
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  projectAlertPolicyConditionPath(project:string,alertPolicy:string,condition:string) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.render({
      project: project,
      alert_policy: alertPolicy,
      condition: condition,
    });
  }

  /**
   * Parse the project from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).project;
  }

  /**
   * Parse the alert_policy from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).alert_policy;
  }

  /**
   * Parse the condition from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromProjectAlertPolicyConditionName(projectAlertPolicyConditionName: string) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(projectAlertPolicyConditionName).condition;
  }

  /**
   * Return a fully-qualified projectChannelDescriptor resource name string.
   *
   * @param {string} project
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  projectChannelDescriptorPath(project:string,channelDescriptor:string) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.render({
      project: project,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the project from ProjectChannelDescriptor resource.
   *
   * @param {string} projectChannelDescriptorName
   *   A fully-qualified path representing project_channel_descriptor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectChannelDescriptorName(projectChannelDescriptorName: string) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.match(projectChannelDescriptorName).project;
  }

  /**
   * Parse the channel_descriptor from ProjectChannelDescriptor resource.
   *
   * @param {string} projectChannelDescriptorName
   *   A fully-qualified path representing project_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromProjectChannelDescriptorName(projectChannelDescriptorName: string) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.match(projectChannelDescriptorName).channel_descriptor;
  }

  /**
   * Return a fully-qualified projectGroup resource name string.
   *
   * @param {string} project
   * @param {string} group
   * @returns {string} Resource name string.
   */
  projectGroupPath(project:string,group:string) {
    return this.pathTemplates.projectGroupPathTemplate.render({
      project: project,
      group: group,
    });
  }

  /**
   * Parse the project from ProjectGroup resource.
   *
   * @param {string} projectGroupName
   *   A fully-qualified path representing project_group resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectGroupName(projectGroupName: string) {
    return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName).project;
  }

  /**
   * Parse the group from ProjectGroup resource.
   *
   * @param {string} projectGroupName
   *   A fully-qualified path representing project_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromProjectGroupName(projectGroupName: string) {
    return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName).group;
  }

  /**
   * Return a fully-qualified projectNotificationChannel resource name string.
   *
   * @param {string} project
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  projectNotificationChannelPath(project:string,notificationChannel:string) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.render({
      project: project,
      notification_channel: notificationChannel,
    });
  }

  /**
   * Parse the project from ProjectNotificationChannel resource.
   *
   * @param {string} projectNotificationChannelName
   *   A fully-qualified path representing project_notification_channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectNotificationChannelName(projectNotificationChannelName: string) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.match(projectNotificationChannelName).project;
  }

  /**
   * Parse the notification_channel from ProjectNotificationChannel resource.
   *
   * @param {string} projectNotificationChannelName
   *   A fully-qualified path representing project_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromProjectNotificationChannelName(projectNotificationChannelName: string) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.match(projectNotificationChannelName).notification_channel;
  }

  /**
   * Return a fully-qualified projectService resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @returns {string} Resource name string.
   */
  projectServicePath(project:string,service:string) {
    return this.pathTemplates.projectServicePathTemplate.render({
      project: project,
      service: service,
    });
  }

  /**
   * Parse the project from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceName(projectServiceName: string) {
    return this.pathTemplates.projectServicePathTemplate.match(projectServiceName).project;
  }

  /**
   * Parse the service from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceName(projectServiceName: string) {
    return this.pathTemplates.projectServicePathTemplate.match(projectServiceName).service;
  }

  /**
   * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  projectServiceServiceLevelObjectivePath(project:string,service:string,serviceLevelObjective:string) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.render({
      project: project,
      service: service,
      service_level_objective: serviceLevelObjective,
    });
  }

  /**
   * Parse the project from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).project;
  }

  /**
   * Parse the service from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service;
  }

  /**
   * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(projectServiceServiceLevelObjectiveName: string) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(projectServiceServiceLevelObjectiveName).service_level_objective;
  }

  /**
   * Return a fully-qualified projectUptimeCheckConfig resource name string.
   *
   * @param {string} project
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  projectUptimeCheckConfigPath(project:string,uptimeCheckConfig:string) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.render({
      project: project,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the project from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).project;
  }

  /**
   * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromProjectUptimeCheckConfigName(projectUptimeCheckConfigName: string) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(projectUptimeCheckConfigName).uptime_check_config;
  }

  /**
   * Return a fully-qualified snooze resource name string.
   *
   * @param {string} project
   * @param {string} snooze
   * @returns {string} Resource name string.
   */
  snoozePath(project:string,snooze:string) {
    return this.pathTemplates.snoozePathTemplate.render({
      project: project,
      snooze: snooze,
    });
  }

  /**
   * Parse the project from Snooze resource.
   *
   * @param {string} snoozeName
   *   A fully-qualified path representing Snooze resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSnoozeName(snoozeName: string) {
    return this.pathTemplates.snoozePathTemplate.match(snoozeName).project;
  }

  /**
   * Parse the snooze from Snooze resource.
   *
   * @param {string} snoozeName
   *   A fully-qualified path representing Snooze resource.
   * @returns {string} A string representing the snooze.
   */
  matchSnoozeFromSnoozeName(snoozeName: string) {
    return this.pathTemplates.snoozePathTemplate.match(snoozeName).snooze;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.snoozeServiceStub && !this._terminated) {
      return this.snoozeServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}