// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(entry) {
  // [START dataplex_v1_generated_CatalogService_UpdateEntry_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Entry resource.
   */
  // const entry = {}
  /**
   *  Optional. Mask of fields to update. To update Aspects, the update_mask must
   *  contain the value "aspects".
   *  If the update_mask is empty, all modifiable fields present in the request
   *  will be updated.
   */
  // const updateMask = {}
  /**
   *  Optional. If set to true and the entry does not exist, it will be created.
   */
  // const allowMissing = true
  /**
   *  Optional. If set to true and the aspect_keys specify aspect ranges, any
   *  existing aspects from that range not provided in the request will be
   *  deleted.
   */
  // const deleteMissingAspects = true
  /**
   *  Optional. The map keys of the Aspects which should be modified. Supports
   *  the following syntaxes:
   *  * <aspect_type_reference> - matches aspect on given type and empty path
   *  * <aspect_type_reference>@path - matches aspect on given type and specified
   *  path
   *  * <aspect_type_reference>* - matches aspects on given type for all paths
   *  * *@path - matches aspects of all types on the given path
   *  Existing aspects matching the syntax will not be removed unless
   *  `delete_missing_aspects` is set to true.
   *  If this field is left empty, it will be treated as specifying exactly those
   *  Aspects present in the request.
   */
  // const aspectKeys = ['abc','def']

  // Imports the Dataplex library
  const {CatalogServiceClient} = require('@google-cloud/dataplex').v1;

  // Instantiates a client
  const dataplexClient = new CatalogServiceClient();

  async function callUpdateEntry() {
    // Construct request
    const request = {
      entry,
    };

    // Run request
    const response = await dataplexClient.updateEntry(request);
    console.log(response);
  }

  callUpdateEntry();
  // [END dataplex_v1_generated_CatalogService_UpdateEntry_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
