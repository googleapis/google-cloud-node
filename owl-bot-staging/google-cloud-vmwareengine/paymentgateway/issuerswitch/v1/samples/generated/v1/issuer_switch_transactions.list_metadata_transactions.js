// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START issuerswitch_v1_generated_IssuerSwitchTransactions_ListMetadataTransactions_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The parent resource. The format is `projects/{project}`.
   */
  // const parent = 'abc123'
  /**
   *  The maximum number of transactions to return. The service may return fewer
   *  than this value. If unspecified or if the specified value is less than 1,
   *  at most 50 transactions will be returned. The maximum value is 1000; values
   *  above 1000 will be coerced to 1000. While paginating, you can specify a new
   *  page size parameter for each page of transactions to be listed.
   */
  // const pageSize = 1234
  /**
   *  A page token, received from a previous `ListMetadataTransactions` call.
   *  Specify this parameter to retrieve the next page of transactions.
   *  When paginating, you must specify only the `page_token` parameter. The
   *  filter that was specified in the initial call to the
   *  `ListMetadataTransactions` method that returned the page token will be
   *  reused for all further calls where the page token parameter is specified.
   */
  // const pageToken = 'abc123'
  /**
   *  An expression that filters the list of metadata transactions.
   *  A filter expression consists of a field name, a comparison
   *  operator, and a value for filtering. The value must be a string, a
   *  number, or a boolean. The comparison operator must be one of: `<`, `>` or
   *  `=`. Filters are not case sensitive.
   *  The following fields in the `MetadataTransaction` are eligible for
   *  filtering:
   *    * `apiType` - The API type of the metadata transaction. Must be one of
   *    ApiType google.cloud.paymentgateway.issuerswitch.v1.ApiType  values. Allowed comparison operators: `=`.
   *    * `transactionType` - The transaction type of the metadata transaction.
   *    Must be one of TransactionType google.cloud.paymentgateway.issuerswitch.v1.TransactionType  values. Allowed comparison
   *    operators: `=`.
   *    * `transactionID` - The UPI transaction ID of the metadata transaction.
   *    Allowed comparison operators: `=`.
   *    * `originVPA` - The VPA of the orignitator of a metadata transaction.
   *    Allowed comparison operators: `=`.
   *    * `createTime` - The time at which the transaction was created
   *    (received) by the issuer switch. The value should be in
   *    the format `YYYY-MM-DDTHH:MM:SSZ`. Allowed comparison operators: `>`,
   *    `<`.
   *    * `state` - The state of the transaction. Must be one of
   *    TransactionInfo.State google.cloud.paymentgateway.issuerswitch.v1.TransactionInfo.State  values. Allowed comparison operators: `=`.
   *    * `errorCode` - Use this filter to list financial transactions which
   *    have failed a particular error code. Allowed comparison operators:
   *    `=`.
   *    * `bankAdapterRequestID` - Request ID used when invoking the Bank
   *    Adapter API for fulfilling a transaction request. Allowed comparison
   *    operators: `=`.
   *  You can combine multiple expressions by enclosing each expression in
   *  parentheses. Expressions are combined with AND logic. No other logical
   *  operators are supported.
   *  Here are a few examples:
   *    * `apiType = LIST_ACCOUNTS` -  - The API type is _LIST_ACCOUNTS_.
   *    * `state = SUCCEEDED` - The transaction's state is _SUCCEEDED_.
   *    * `(apiType = LIST_ACCOUNTS) AND (create_time <
   *    \"2021-08-15T14:50:00Z\")` - The API type is _LIST_ACCOUNTS_ and
   *    the transaction was received before _2021-08-15 14:50:00 UTC_.
   */
  // const filter = 'abc123'

  // Imports the Issuerswitch library
  const {IssuerSwitchTransactionsClient} = require('@google-cloud/issuerswitch').v1;

  // Instantiates a client
  const issuerswitchClient = new IssuerSwitchTransactionsClient();

  async function callListMetadataTransactions() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = await issuerswitchClient.listMetadataTransactionsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListMetadataTransactions();
  // [END issuerswitch_v1_generated_IssuerSwitchTransactions_ListMetadataTransactions_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
