// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as issuerswitchtransactionsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.IssuerSwitchTransactionsClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.issuerSwitchTransactionsStub, undefined);
            await client.initialize();
            assert(client.issuerSwitchTransactionsStub);
        });

        it('has close method for the initialized client', done => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.issuerSwitchTransactionsStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.issuerSwitchTransactionsStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('exportFinancialTransactions', () => {
        it('invokes exportFinancialTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportFinancialTransactions = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportFinancialTransactions(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportFinancialTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportFinancialTransactions = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportFinancialTransactions(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportFinancialTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportFinancialTransactionsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportFinancialTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportFinancialTransactionsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportFinancialTransactions with call error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportFinancialTransactions = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportFinancialTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportFinancialTransactions with LRO error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportFinancialTransactions = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportFinancialTransactions(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportFinancialTransactionsProgress without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportFinancialTransactionsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportFinancialTransactionsProgress with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportFinancialTransactionsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportMetadataTransactions', () => {
        it('invokes exportMetadataTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportMetadataTransactions = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportMetadataTransactions(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMetadataTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportMetadataTransactions = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportMetadataTransactions(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMetadataTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMetadataTransactionsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMetadataTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMetadataTransactionsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMetadataTransactions with call error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportMetadataTransactions = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportMetadataTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMetadataTransactions with LRO error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportMetadataTransactions = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportMetadataTransactions(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportMetadataTransactionsProgress without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportMetadataTransactionsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportMetadataTransactionsProgress with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportMetadataTransactionsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportMandateTransactions', () => {
        it('invokes exportMandateTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportMandateTransactions = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportMandateTransactions(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMandateTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportMandateTransactions = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportMandateTransactions(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMandateTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMandateTransactionsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMandateTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportMandateTransactionsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMandateTransactions with call error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportMandateTransactions = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportMandateTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportMandateTransactions with LRO error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportMandateTransactions = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportMandateTransactions(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportMandateTransactionsProgress without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportMandateTransactionsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportMandateTransactionsProgress with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportMandateTransactionsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportComplaintTransactions', () => {
        it('invokes exportComplaintTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportComplaintTransactions = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportComplaintTransactions(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportComplaintTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportComplaintTransactions = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportComplaintTransactions(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportComplaintTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportComplaintTransactionsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.paymentgateway.issuerswitch.v1.IExportComplaintTransactionsResponse, protos.google.cloud.paymentgateway.issuerswitch.v1.IExportComplaintTransactionsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportComplaintTransactions with call error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportComplaintTransactions = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportComplaintTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportComplaintTransactions with LRO error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ExportComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportComplaintTransactions = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportComplaintTransactions(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportComplaintTransactionsProgress without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportComplaintTransactionsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportComplaintTransactionsProgress with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportComplaintTransactionsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listMetadataTransactions', () => {
        it('invokes listMetadataTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
            ];
            client.innerApiCalls.listMetadataTransactions = stubSimpleCall(expectedResponse);
            const [response] = await client.listMetadataTransactions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMetadataTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
            ];
            client.innerApiCalls.listMetadataTransactions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMetadataTransactions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.paymentgateway.issuerswitch.v1.IMetadataTransaction[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMetadataTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMetadataTransactions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMetadataTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMetadataTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMetadataTransactionsStream without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
            ];
            client.descriptors.page.listMetadataTransactions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMetadataTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMetadataTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMetadataTransactions, request));
            assert(
                (client.descriptors.page.listMetadataTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMetadataTransactionsStream with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMetadataTransactions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMetadataTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMetadataTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMetadataTransactions, request));
            assert(
                (client.descriptors.page.listMetadataTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMetadataTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MetadataTransaction()),
            ];
            client.descriptors.page.listMetadataTransactions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IMetadataTransaction[] = [];
            const iterable = client.listMetadataTransactionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMetadataTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMetadataTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMetadataTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMetadataTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMetadataTransactions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMetadataTransactionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IMetadataTransaction[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMetadataTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMetadataTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listFinancialTransactions', () => {
        it('invokes listFinancialTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
            ];
            client.innerApiCalls.listFinancialTransactions = stubSimpleCall(expectedResponse);
            const [response] = await client.listFinancialTransactions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFinancialTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
            ];
            client.innerApiCalls.listFinancialTransactions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listFinancialTransactions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.paymentgateway.issuerswitch.v1.IFinancialTransaction[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFinancialTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listFinancialTransactions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listFinancialTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listFinancialTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listFinancialTransactionsStream without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
            ];
            client.descriptors.page.listFinancialTransactions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listFinancialTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listFinancialTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFinancialTransactions, request));
            assert(
                (client.descriptors.page.listFinancialTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listFinancialTransactionsStream with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listFinancialTransactions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listFinancialTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listFinancialTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFinancialTransactions, request));
            assert(
                (client.descriptors.page.listFinancialTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listFinancialTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.FinancialTransaction()),
            ];
            client.descriptors.page.listFinancialTransactions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IFinancialTransaction[] = [];
            const iterable = client.listFinancialTransactionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listFinancialTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listFinancialTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listFinancialTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListFinancialTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listFinancialTransactions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listFinancialTransactionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IFinancialTransaction[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listFinancialTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listFinancialTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listMandateTransactions', () => {
        it('invokes listMandateTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
            ];
            client.innerApiCalls.listMandateTransactions = stubSimpleCall(expectedResponse);
            const [response] = await client.listMandateTransactions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMandateTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
            ];
            client.innerApiCalls.listMandateTransactions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMandateTransactions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.paymentgateway.issuerswitch.v1.IMandateTransaction[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMandateTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMandateTransactions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMandateTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMandateTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMandateTransactionsStream without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
            ];
            client.descriptors.page.listMandateTransactions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMandateTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMandateTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMandateTransactions, request));
            assert(
                (client.descriptors.page.listMandateTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMandateTransactionsStream with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMandateTransactions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMandateTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMandateTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMandateTransactions, request));
            assert(
                (client.descriptors.page.listMandateTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMandateTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.MandateTransaction()),
            ];
            client.descriptors.page.listMandateTransactions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IMandateTransaction[] = [];
            const iterable = client.listMandateTransactionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMandateTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMandateTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMandateTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListMandateTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMandateTransactions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMandateTransactionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IMandateTransaction[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMandateTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMandateTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listComplaintTransactions', () => {
        it('invokes listComplaintTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
            ];
            client.innerApiCalls.listComplaintTransactions = stubSimpleCall(expectedResponse);
            const [response] = await client.listComplaintTransactions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComplaintTransactions without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
            ];
            client.innerApiCalls.listComplaintTransactions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listComplaintTransactions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.paymentgateway.issuerswitch.v1.IComplaintTransaction[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComplaintTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listComplaintTransactions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listComplaintTransactions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listComplaintTransactions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listComplaintTransactionsStream without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
            ];
            client.descriptors.page.listComplaintTransactions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listComplaintTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listComplaintTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listComplaintTransactions, request));
            assert(
                (client.descriptors.page.listComplaintTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listComplaintTransactionsStream with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listComplaintTransactions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listComplaintTransactionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction[] = [];
                stream.on('data', (response: protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listComplaintTransactions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listComplaintTransactions, request));
            assert(
                (client.descriptors.page.listComplaintTransactions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listComplaintTransactions without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
              generateSampleMessage(new protos.google.cloud.paymentgateway.issuerswitch.v1.ComplaintTransaction()),
            ];
            client.descriptors.page.listComplaintTransactions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IComplaintTransaction[] = [];
            const iterable = client.listComplaintTransactionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listComplaintTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listComplaintTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listComplaintTransactions with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.paymentgateway.issuerswitch.v1.ListComplaintTransactionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listComplaintTransactions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listComplaintTransactionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.paymentgateway.issuerswitch.v1.IComplaintTransaction[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listComplaintTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listComplaintTransactions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.ListOperationsResponse[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('complaint', () => {
            const fakePath = "/rendered/path/complaint";
            const expectedParameters = {
                project: "projectValue",
                complaint: "complaintValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.complaintPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.complaintPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('complaintPath', () => {
                const result = client.complaintPath("projectValue", "complaintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.complaintPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromComplaintName', () => {
                const result = client.matchProjectFromComplaintName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.complaintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchComplaintFromComplaintName', () => {
                const result = client.matchComplaintFromComplaintName(fakePath);
                assert.strictEqual(result, "complaintValue");
                assert((client.pathTemplates.complaintPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('complaintTransaction', () => {
            const fakePath = "/rendered/path/complaintTransaction";
            const expectedParameters = {
                project: "projectValue",
                transaction: "transactionValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.complaintTransactionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.complaintTransactionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('complaintTransactionPath', () => {
                const result = client.complaintTransactionPath("projectValue", "transactionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.complaintTransactionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromComplaintTransactionName', () => {
                const result = client.matchProjectFromComplaintTransactionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.complaintTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransactionFromComplaintTransactionName', () => {
                const result = client.matchTransactionFromComplaintTransactionName(fakePath);
                assert.strictEqual(result, "transactionValue");
                assert((client.pathTemplates.complaintTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dispute', () => {
            const fakePath = "/rendered/path/dispute";
            const expectedParameters = {
                project: "projectValue",
                dispute: "disputeValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.disputePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.disputePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('disputePath', () => {
                const result = client.disputePath("projectValue", "disputeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.disputePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDisputeName', () => {
                const result = client.matchProjectFromDisputeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.disputePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDisputeFromDisputeName', () => {
                const result = client.matchDisputeFromDisputeName(fakePath);
                assert.strictEqual(result, "disputeValue");
                assert((client.pathTemplates.disputePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('financialTransaction', () => {
            const fakePath = "/rendered/path/financialTransaction";
            const expectedParameters = {
                project: "projectValue",
                transaction: "transactionValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.financialTransactionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.financialTransactionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('financialTransactionPath', () => {
                const result = client.financialTransactionPath("projectValue", "transactionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.financialTransactionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromFinancialTransactionName', () => {
                const result = client.matchProjectFromFinancialTransactionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.financialTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransactionFromFinancialTransactionName', () => {
                const result = client.matchTransactionFromFinancialTransactionName(fakePath);
                assert.strictEqual(result, "transactionValue");
                assert((client.pathTemplates.financialTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mandateTransaction', () => {
            const fakePath = "/rendered/path/mandateTransaction";
            const expectedParameters = {
                project: "projectValue",
                transaction: "transactionValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mandateTransactionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mandateTransactionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mandateTransactionPath', () => {
                const result = client.mandateTransactionPath("projectValue", "transactionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mandateTransactionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMandateTransactionName', () => {
                const result = client.matchProjectFromMandateTransactionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.mandateTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransactionFromMandateTransactionName', () => {
                const result = client.matchTransactionFromMandateTransactionName(fakePath);
                assert.strictEqual(result, "transactionValue");
                assert((client.pathTemplates.mandateTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('metadataTransaction', () => {
            const fakePath = "/rendered/path/metadataTransaction";
            const expectedParameters = {
                project: "projectValue",
                transaction: "transactionValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.metadataTransactionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.metadataTransactionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('metadataTransactionPath', () => {
                const result = client.metadataTransactionPath("projectValue", "transactionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.metadataTransactionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMetadataTransactionName', () => {
                const result = client.matchProjectFromMetadataTransactionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.metadataTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTransactionFromMetadataTransactionName', () => {
                const result = client.matchTransactionFromMetadataTransactionName(fakePath);
                assert.strictEqual(result, "transactionValue");
                assert((client.pathTemplates.metadataTransactionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rule', () => {
            const fakePath = "/rendered/path/rule";
            const expectedParameters = {
                project: "projectValue",
                rule: "ruleValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.rulePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rulePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rulePath', () => {
                const result = client.rulePath("projectValue", "ruleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rulePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuleName', () => {
                const result = client.matchProjectFromRuleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRuleName', () => {
                const result = client.matchRuleFromRuleName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.rulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ruleMetadata', () => {
            const fakePath = "/rendered/path/ruleMetadata";
            const expectedParameters = {
                project: "projectValue",
                rule: "ruleValue",
                metadata: "metadataValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.ruleMetadataPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.ruleMetadataPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('ruleMetadataPath', () => {
                const result = client.ruleMetadataPath("projectValue", "ruleValue", "metadataValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.ruleMetadataPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuleMetadataName', () => {
                const result = client.matchProjectFromRuleMetadataName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.ruleMetadataPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRuleMetadataName', () => {
                const result = client.matchRuleFromRuleMetadataName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.ruleMetadataPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetadataFromRuleMetadataName', () => {
                const result = client.matchMetadataFromRuleMetadataName(fakePath);
                assert.strictEqual(result, "metadataValue");
                assert((client.pathTemplates.ruleMetadataPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ruleMetadataValue', () => {
            const fakePath = "/rendered/path/ruleMetadataValue";
            const expectedParameters = {
                project: "projectValue",
                rule: "ruleValue",
                metadata: "metadataValue",
                value: "valueValue",
            };
            const client = new issuerswitchtransactionsModule.v1.IssuerSwitchTransactionsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.ruleMetadataValuePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.ruleMetadataValuePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('ruleMetadataValuePath', () => {
                const result = client.ruleMetadataValuePath("projectValue", "ruleValue", "metadataValue", "valueValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.ruleMetadataValuePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRuleMetadataValueName', () => {
                const result = client.matchProjectFromRuleMetadataValueName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.ruleMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRuleFromRuleMetadataValueName', () => {
                const result = client.matchRuleFromRuleMetadataValueName(fakePath);
                assert.strictEqual(result, "ruleValue");
                assert((client.pathTemplates.ruleMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMetadataFromRuleMetadataValueName', () => {
                const result = client.matchMetadataFromRuleMetadataValueName(fakePath);
                assert.strictEqual(result, "metadataValue");
                assert((client.pathTemplates.ruleMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchValueFromRuleMetadataValueName', () => {
                const result = client.matchValueFromRuleMetadataValueName(fakePath);
                assert.strictEqual(result, "valueValue");
                assert((client.pathTemplates.ruleMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
