// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/admin_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './admin_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The service that a client application uses to manage topics and
 *  subscriptions, such creating, listing, and deleting topics and subscriptions.
 * @class
 * @memberof v1
 */
export class AdminServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  adminServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AdminServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AdminServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AdminServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      reservationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reservations/{reservation}'
      ),
      subscriptionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/subscriptions/{subscription}'
      ),
      topicPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/topics/{topic}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTopics:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'topics'),
      listTopicSubscriptions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions'),
      listSubscriptions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions'),
      listReservations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'reservations'),
      listReservationTopics:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'topics')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/admin/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/admin/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/admin/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/admin/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const seekSubscriptionResponse = protoFilesRoot.lookup(
      '.google.cloud.pubsublite.v1.SeekSubscriptionResponse') as gax.protobuf.Type;
    const seekSubscriptionMetadata = protoFilesRoot.lookup(
      '.google.cloud.pubsublite.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      seekSubscription: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        seekSubscriptionResponse.decode.bind(seekSubscriptionResponse),
        seekSubscriptionMetadata.decode.bind(seekSubscriptionMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.pubsublite.v1.AdminService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.adminServiceStub) {
      return this.adminServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.pubsublite.v1.AdminService.
    this.adminServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.pubsublite.v1.AdminService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.pubsublite.v1.AdminService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const adminServiceStubMethods =
        ['createTopic', 'getTopic', 'getTopicPartitions', 'listTopics', 'updateTopic', 'deleteTopic', 'listTopicSubscriptions', 'createSubscription', 'getSubscription', 'listSubscriptions', 'updateSubscription', 'deleteSubscription', 'seekSubscription', 'createReservation', 'getReservation', 'listReservations', 'updateReservation', 'deleteReservation', 'listReservationTopics'];
    for (const methodName of adminServiceStubMethods) {
      const callPromise = this.adminServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.adminServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'pubsublite.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'pubsublite.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates a new topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent location in which to create the topic.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {google.cloud.pubsublite.v1.Topic} request.topic
 *   Required. Configuration of the topic to create. Its `name` field is ignored.
 * @param {string} request.topicId
 *   Required. The ID to use for the topic, which will become the final component of
 *   the topic's name.
 *
 *   This value is structured like: `my-topic-name`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Topic]{@link google.cloud.pubsublite.v1.Topic}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.create_topic.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_CreateTopic_async
 */
  createTopic(
      request?: protos.google.cloud.pubsublite.v1.ICreateTopicRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.ICreateTopicRequest|undefined, {}|undefined
      ]>;
  createTopic(
      request: protos.google.cloud.pubsublite.v1.ICreateTopicRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.ICreateTopicRequest|null|undefined,
          {}|null|undefined>): void;
  createTopic(
      request: protos.google.cloud.pubsublite.v1.ICreateTopicRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.ICreateTopicRequest|null|undefined,
          {}|null|undefined>): void;
  createTopic(
      request?: protos.google.cloud.pubsublite.v1.ICreateTopicRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.ICreateTopicRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.ICreateTopicRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.ICreateTopicRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createTopic(request, options, callback);
  }
/**
 * Returns the topic configuration.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the topic whose configuration to return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Topic]{@link google.cloud.pubsublite.v1.Topic}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.get_topic.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_GetTopic_async
 */
  getTopic(
      request?: protos.google.cloud.pubsublite.v1.IGetTopicRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.IGetTopicRequest|undefined, {}|undefined
      ]>;
  getTopic(
      request: protos.google.cloud.pubsublite.v1.IGetTopicRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IGetTopicRequest|null|undefined,
          {}|null|undefined>): void;
  getTopic(
      request: protos.google.cloud.pubsublite.v1.IGetTopicRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IGetTopicRequest|null|undefined,
          {}|null|undefined>): void;
  getTopic(
      request?: protos.google.cloud.pubsublite.v1.IGetTopicRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IGetTopicRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IGetTopicRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.IGetTopicRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getTopic(request, options, callback);
  }
/**
 * Returns the partition information for the requested topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The topic whose partition information to return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TopicPartitions]{@link google.cloud.pubsublite.v1.TopicPartitions}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.get_topic_partitions.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_GetTopicPartitions_async
 */
  getTopicPartitions(
      request?: protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopicPartitions,
        protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|undefined, {}|undefined
      ]>;
  getTopicPartitions(
      request: protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopicPartitions,
          protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|null|undefined,
          {}|null|undefined>): void;
  getTopicPartitions(
      request: protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopicPartitions,
          protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|null|undefined,
          {}|null|undefined>): void;
  getTopicPartitions(
      request?: protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ITopicPartitions,
          protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ITopicPartitions,
          protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopicPartitions,
        protos.google.cloud.pubsublite.v1.IGetTopicPartitionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getTopicPartitions(request, options, callback);
  }
/**
 * Updates properties of the specified topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.pubsublite.v1.Topic} request.topic
 *   Required. The topic to update. Its `name` field must be populated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A mask specifying the topic fields to change.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Topic]{@link google.cloud.pubsublite.v1.Topic}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.update_topic.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_UpdateTopic_async
 */
  updateTopic(
      request?: protos.google.cloud.pubsublite.v1.IUpdateTopicRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|undefined, {}|undefined
      ]>;
  updateTopic(
      request: protos.google.cloud.pubsublite.v1.IUpdateTopicRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|null|undefined,
          {}|null|undefined>): void;
  updateTopic(
      request: protos.google.cloud.pubsublite.v1.IUpdateTopicRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|null|undefined,
          {}|null|undefined>): void;
  updateTopic(
      request?: protos.google.cloud.pubsublite.v1.IUpdateTopicRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ITopic,
          protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic,
        protos.google.cloud.pubsublite.v1.IUpdateTopicRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'topic.name': request.topic!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateTopic(request, options, callback);
  }
/**
 * Deletes the specified topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the topic to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.delete_topic.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_DeleteTopic_async
 */
  deleteTopic(
      request?: protos.google.cloud.pubsublite.v1.IDeleteTopicRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|undefined, {}|undefined
      ]>;
  deleteTopic(
      request: protos.google.cloud.pubsublite.v1.IDeleteTopicRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTopic(
      request: protos.google.cloud.pubsublite.v1.IDeleteTopicRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|null|undefined,
          {}|null|undefined>): void;
  deleteTopic(
      request?: protos.google.cloud.pubsublite.v1.IDeleteTopicRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteTopicRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTopic(request, options, callback);
  }
/**
 * Creates a new subscription.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent location in which to create the subscription.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {google.cloud.pubsublite.v1.Subscription} request.subscription
 *   Required. Configuration of the subscription to create. Its `name` field is ignored.
 * @param {string} request.subscriptionId
 *   Required. The ID to use for the subscription, which will become the final component
 *   of the subscription's name.
 *
 *   This value is structured like: `my-sub-name`.
 * @param {boolean} request.skipBacklog
 *   If true, the newly created subscription will only receive messages
 *   published after the subscription was created. Otherwise, the entire
 *   message backlog will be received on the subscription. Defaults to false.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Subscription]{@link google.cloud.pubsublite.v1.Subscription}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.create_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_CreateSubscription_async
 */
  createSubscription(
      request?: protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|undefined, {}|undefined
      ]>;
  createSubscription(
      request: protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  createSubscription(
      request: protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  createSubscription(
      request?: protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.ICreateSubscriptionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createSubscription(request, options, callback);
  }
/**
 * Returns the subscription configuration.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the subscription whose configuration to return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Subscription]{@link google.cloud.pubsublite.v1.Subscription}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.get_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_GetSubscription_async
 */
  getSubscription(
      request?: protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|undefined, {}|undefined
      ]>;
  getSubscription(
      request: protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  getSubscription(
      request: protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  getSubscription(
      request?: protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.IGetSubscriptionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSubscription(request, options, callback);
  }
/**
 * Updates properties of the specified subscription.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.pubsublite.v1.Subscription} request.subscription
 *   Required. The subscription to update. Its `name` field must be populated.
 *   Topic field must not be populated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A mask specifying the subscription fields to change.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Subscription]{@link google.cloud.pubsublite.v1.Subscription}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.update_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_UpdateSubscription_async
 */
  updateSubscription(
      request?: protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|undefined, {}|undefined
      ]>;
  updateSubscription(
      request: protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  updateSubscription(
      request: protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  updateSubscription(
      request?: protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.ISubscription,
          protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription,
        protos.google.cloud.pubsublite.v1.IUpdateSubscriptionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'subscription.name': request.subscription!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateSubscription(request, options, callback);
  }
/**
 * Deletes the specified subscription.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the subscription to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.delete_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_DeleteSubscription_async
 */
  deleteSubscription(
      request?: protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|undefined, {}|undefined
      ]>;
  deleteSubscription(
      request: protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSubscription(
      request: protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSubscription(
      request?: protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteSubscriptionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSubscription(request, options, callback);
  }
/**
 * Creates a new reservation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent location in which to create the reservation.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {google.cloud.pubsublite.v1.Reservation} request.reservation
 *   Required. Configuration of the reservation to create. Its `name` field is ignored.
 * @param {string} request.reservationId
 *   Required. The ID to use for the reservation, which will become the final component of
 *   the reservation's name.
 *
 *   This value is structured like: `my-reservation-name`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Reservation]{@link google.cloud.pubsublite.v1.Reservation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.create_reservation.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_CreateReservation_async
 */
  createReservation(
      request?: protos.google.cloud.pubsublite.v1.ICreateReservationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.ICreateReservationRequest|undefined, {}|undefined
      ]>;
  createReservation(
      request: protos.google.cloud.pubsublite.v1.ICreateReservationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.ICreateReservationRequest|null|undefined,
          {}|null|undefined>): void;
  createReservation(
      request: protos.google.cloud.pubsublite.v1.ICreateReservationRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.ICreateReservationRequest|null|undefined,
          {}|null|undefined>): void;
  createReservation(
      request?: protos.google.cloud.pubsublite.v1.ICreateReservationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.ICreateReservationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.ICreateReservationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.ICreateReservationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createReservation(request, options, callback);
  }
/**
 * Returns the reservation configuration.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the reservation whose configuration to return.
 *   Structured like:
 *   projects/{project_number}/locations/{location}/reservations/{reservation_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Reservation]{@link google.cloud.pubsublite.v1.Reservation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.get_reservation.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_GetReservation_async
 */
  getReservation(
      request?: protos.google.cloud.pubsublite.v1.IGetReservationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.IGetReservationRequest|undefined, {}|undefined
      ]>;
  getReservation(
      request: protos.google.cloud.pubsublite.v1.IGetReservationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IGetReservationRequest|null|undefined,
          {}|null|undefined>): void;
  getReservation(
      request: protos.google.cloud.pubsublite.v1.IGetReservationRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IGetReservationRequest|null|undefined,
          {}|null|undefined>): void;
  getReservation(
      request?: protos.google.cloud.pubsublite.v1.IGetReservationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IGetReservationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IGetReservationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.IGetReservationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getReservation(request, options, callback);
  }
/**
 * Updates properties of the specified reservation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.pubsublite.v1.Reservation} request.reservation
 *   Required. The reservation to update. Its `name` field must be populated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A mask specifying the reservation fields to change.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Reservation]{@link google.cloud.pubsublite.v1.Reservation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.update_reservation.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_UpdateReservation_async
 */
  updateReservation(
      request?: protos.google.cloud.pubsublite.v1.IUpdateReservationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|undefined, {}|undefined
      ]>;
  updateReservation(
      request: protos.google.cloud.pubsublite.v1.IUpdateReservationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|null|undefined,
          {}|null|undefined>): void;
  updateReservation(
      request: protos.google.cloud.pubsublite.v1.IUpdateReservationRequest,
      callback: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|null|undefined,
          {}|null|undefined>): void;
  updateReservation(
      request?: protos.google.cloud.pubsublite.v1.IUpdateReservationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.pubsublite.v1.IReservation,
          protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation,
        protos.google.cloud.pubsublite.v1.IUpdateReservationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'reservation.name': request.reservation!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateReservation(request, options, callback);
  }
/**
 * Deletes the specified reservation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the reservation to delete.
 *   Structured like:
 *   projects/{project_number}/locations/{location}/reservations/{reservation_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.delete_reservation.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_DeleteReservation_async
 */
  deleteReservation(
      request?: protos.google.cloud.pubsublite.v1.IDeleteReservationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|undefined, {}|undefined
      ]>;
  deleteReservation(
      request: protos.google.cloud.pubsublite.v1.IDeleteReservationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteReservation(
      request: protos.google.cloud.pubsublite.v1.IDeleteReservationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteReservation(
      request?: protos.google.cloud.pubsublite.v1.IDeleteReservationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.pubsublite.v1.IDeleteReservationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteReservation(request, options, callback);
  }

/**
 * Performs an out-of-band seek for a subscription to a specified target,
 * which may be timestamps or named positions within the message backlog.
 * Seek translates these targets to cursors for each partition and
 * orchestrates subscribers to start consuming messages from these seek
 * cursors.
 *
 * If an operation is returned, the seek has been registered and subscribers
 * will eventually receive messages from the seek cursors (i.e. eventual
 * consistency), as long as they are using a minimum supported client library
 * version and not a system that tracks cursors independently of Pub/Sub Lite
 * (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for
 * unsupported clients.
 *
 * If clients would like to know when subscribers react to the seek (or not),
 * they can poll the operation. The seek operation will succeed and complete
 * once subscribers are ready to receive messages from the seek cursors for
 * all partitions of the topic. This means that the seek operation will not
 * complete until all subscribers come online.
 *
 * If the previous seek operation has not yet completed, it will be aborted
 * and the new invocation of seek will supersede it.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the subscription to seek.
 * @param {google.cloud.pubsublite.v1.SeekSubscriptionRequest.NamedTarget} request.namedTarget
 *   Seek to a named position with respect to the message backlog.
 * @param {google.cloud.pubsublite.v1.TimeTarget} request.timeTarget
 *   Seek to the first message whose publish or event time is greater than or
 *   equal to the specified query time. If no such message can be located,
 *   will seek to the end of the message backlog.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.seek_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_SeekSubscription_async
 */
  seekSubscription(
      request?: protos.google.cloud.pubsublite.v1.ISeekSubscriptionRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  seekSubscription(
      request: protos.google.cloud.pubsublite.v1.ISeekSubscriptionRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  seekSubscription(
      request: protos.google.cloud.pubsublite.v1.ISeekSubscriptionRequest,
      callback: Callback<
          LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  seekSubscription(
      request?: protos.google.cloud.pubsublite.v1.ISeekSubscriptionRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.seekSubscription(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `seekSubscription()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.seek_subscription.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_SeekSubscription_async
 */
  async checkSeekSubscriptionProgress(name: string): Promise<LROperation<protos.google.cloud.pubsublite.v1.SeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.seekSubscription, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.pubsublite.v1.SeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.OperationMetadata>;
  }
 /**
 * Returns the list of topics for the given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose topics are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer than
 *   this value.
 *   If unset or zero, all topics for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopics` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Topic]{@link google.cloud.pubsublite.v1.Topic}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTopicsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTopics(
      request?: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic[],
        protos.google.cloud.pubsublite.v1.IListTopicsRequest|null,
        protos.google.cloud.pubsublite.v1.IListTopicsResponse
      ]>;
  listTopics(
      request: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ITopic>): void;
  listTopics(
      request: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ITopic>): void;
  listTopics(
      request?: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ITopic>,
      callback?: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ITopic>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ITopic[],
        protos.google.cloud.pubsublite.v1.IListTopicsRequest|null,
        protos.google.cloud.pubsublite.v1.IListTopicsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listTopics(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose topics are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer than
 *   this value.
 *   If unset or zero, all topics for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopics` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Topic]{@link google.cloud.pubsublite.v1.Topic} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTopicsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTopicsStream(
      request?: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTopics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTopics.createStream(
      this.innerApiCalls.listTopics as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTopics`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose topics are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer than
 *   this value.
 *   If unset or zero, all topics for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopics` must match
 *   the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Topic]{@link google.cloud.pubsublite.v1.Topic}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.list_topics.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_ListTopics_async
 */
  listTopicsAsync(
      request?: protos.google.cloud.pubsublite.v1.IListTopicsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.pubsublite.v1.ITopic>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listTopics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTopics.asyncIterate(
      this.innerApiCalls['listTopics'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.pubsublite.v1.ITopic>;
  }
 /**
 * Lists the subscriptions attached to the specified topic.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the topic whose subscriptions to list.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the given topic will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopicSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopicSubscriptions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTopicSubscriptionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTopicSubscriptions(
      request?: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      options?: CallOptions):
      Promise<[
        string[],
        protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest|null,
        protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse
      ]>;
  listTopicSubscriptions(
      request: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse|null|undefined,
          string>): void;
  listTopicSubscriptions(
      request: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse|null|undefined,
          string>): void;
  listTopicSubscriptions(
      request?: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse|null|undefined,
          string>,
      callback?: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse|null|undefined,
          string>):
      Promise<[
        string[],
        protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest|null,
        protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listTopicSubscriptions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the topic whose subscriptions to list.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the given topic will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopicSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopicSubscriptions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing string on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTopicSubscriptionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listTopicSubscriptionsStream(
      request?: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    const defaultCallSettings = this._defaults['listTopicSubscriptions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTopicSubscriptions.createStream(
      this.innerApiCalls.listTopicSubscriptions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTopicSubscriptions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the topic whose subscriptions to list.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the given topic will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListTopicSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTopicSubscriptions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   string. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.list_topic_subscriptions.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_ListTopicSubscriptions_async
 */
  listTopicSubscriptionsAsync(
      request?: protos.google.cloud.pubsublite.v1.IListTopicSubscriptionsRequest,
      options?: CallOptions):
    AsyncIterable<string>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    const defaultCallSettings = this._defaults['listTopicSubscriptions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTopicSubscriptions.asyncIterate(
      this.innerApiCalls['listTopicSubscriptions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<string>;
  }
 /**
 * Returns the list of subscriptions for the given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose subscriptions are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscriptions` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Subscription]{@link google.cloud.pubsublite.v1.Subscription}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSubscriptionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSubscriptions(
      request?: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription[],
        protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest|null,
        protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse
      ]>;
  listSubscriptions(
      request: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ISubscription>): void;
  listSubscriptions(
      request: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ISubscription>): void;
  listSubscriptions(
      request?: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ISubscription>,
      callback?: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
          protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.ISubscription>):
      Promise<[
        protos.google.cloud.pubsublite.v1.ISubscription[],
        protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest|null,
        protos.google.cloud.pubsublite.v1.IListSubscriptionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listSubscriptions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose subscriptions are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscriptions` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Subscription]{@link google.cloud.pubsublite.v1.Subscription} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSubscriptionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSubscriptionsStream(
      request?: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSubscriptions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSubscriptions.createStream(
      this.innerApiCalls.listSubscriptions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSubscriptions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose subscriptions are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of subscriptions to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all subscriptions for the parent will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListSubscriptions` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListSubscriptions` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Subscription]{@link google.cloud.pubsublite.v1.Subscription}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.list_subscriptions.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_ListSubscriptions_async
 */
  listSubscriptionsAsync(
      request?: protos.google.cloud.pubsublite.v1.IListSubscriptionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.pubsublite.v1.ISubscription>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSubscriptions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSubscriptions.asyncIterate(
      this.innerApiCalls['listSubscriptions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.pubsublite.v1.ISubscription>;
  }
 /**
 * Returns the list of reservations for the given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose reservations are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of reservations to return. The service may return fewer
 *   than this value. If unset or zero, all reservations for the parent will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservations` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Reservation]{@link google.cloud.pubsublite.v1.Reservation}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listReservationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReservations(
      request?: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation[],
        protos.google.cloud.pubsublite.v1.IListReservationsRequest|null,
        protos.google.cloud.pubsublite.v1.IListReservationsResponse
      ]>;
  listReservations(
      request: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.IReservation>): void;
  listReservations(
      request: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.IReservation>): void;
  listReservations(
      request?: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.IReservation>,
      callback?: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationsResponse|null|undefined,
          protos.google.cloud.pubsublite.v1.IReservation>):
      Promise<[
        protos.google.cloud.pubsublite.v1.IReservation[],
        protos.google.cloud.pubsublite.v1.IListReservationsRequest|null,
        protos.google.cloud.pubsublite.v1.IListReservationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listReservations(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose reservations are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of reservations to return. The service may return fewer
 *   than this value. If unset or zero, all reservations for the parent will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservations` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Reservation]{@link google.cloud.pubsublite.v1.Reservation} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listReservationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReservationsStream(
      request?: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listReservations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReservations.createStream(
      this.innerApiCalls.listReservations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listReservations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent whose reservations are to be listed.
 *   Structured like `projects/{project_number}/locations/{location}`.
 * @param {number} request.pageSize
 *   The maximum number of reservations to return. The service may return fewer
 *   than this value. If unset or zero, all reservations for the parent will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservations` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservations` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Reservation]{@link google.cloud.pubsublite.v1.Reservation}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.list_reservations.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_ListReservations_async
 */
  listReservationsAsync(
      request?: protos.google.cloud.pubsublite.v1.IListReservationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.pubsublite.v1.IReservation>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listReservations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReservations.asyncIterate(
      this.innerApiCalls['listReservations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.pubsublite.v1.IReservation>;
  }
 /**
 * Lists the topics attached to the specified reservation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the reservation whose topics to list.
 *   Structured like:
 *   projects/{project_number}/locations/{location}/reservations/{reservation_id}
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all topics for the given reservation will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservationTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservationTopics`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listReservationTopicsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReservationTopics(
      request?: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      options?: CallOptions):
      Promise<[
        string[],
        protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest|null,
        protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse
      ]>;
  listReservationTopics(
      request: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse|null|undefined,
          string>): void;
  listReservationTopics(
      request: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      callback: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse|null|undefined,
          string>): void;
  listReservationTopics(
      request?: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse|null|undefined,
          string>,
      callback?: PaginationCallback<
          protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
          protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse|null|undefined,
          string>):
      Promise<[
        string[],
        protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest|null,
        protos.google.cloud.pubsublite.v1.IListReservationTopicsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listReservationTopics(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the reservation whose topics to list.
 *   Structured like:
 *   projects/{project_number}/locations/{location}/reservations/{reservation_id}
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all topics for the given reservation will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservationTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservationTopics`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing string on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listReservationTopicsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReservationTopicsStream(
      request?: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    const defaultCallSettings = this._defaults['listReservationTopics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReservationTopics.createStream(
      this.innerApiCalls.listReservationTopics as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listReservationTopics`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the reservation whose topics to list.
 *   Structured like:
 *   projects/{project_number}/locations/{location}/reservations/{reservation_id}
 * @param {number} request.pageSize
 *   The maximum number of topics to return. The service may return fewer
 *   than this value.
 *   If unset or zero, all topics for the given reservation will be returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReservationTopics` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListReservationTopics`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   string. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/admin_service.list_reservation_topics.js</caption>
 * region_tag:pubsublite_v1_generated_AdminService_ListReservationTopics_async
 */
  listReservationTopicsAsync(
      request?: protos.google.cloud.pubsublite.v1.IListReservationTopicsRequest,
      options?: CallOptions):
    AsyncIterable<string>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    const defaultCallSettings = this._defaults['listReservationTopics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReservationTopics.asyncIterate(
      this.innerApiCalls['listReservationTopics'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<string>;
  }
/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified reservation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} reservation
   * @returns {string} Resource name string.
   */
  reservationPath(project:string,location:string,reservation:string) {
    return this.pathTemplates.reservationPathTemplate.render({
      project: project,
      location: location,
      reservation: reservation,
    });
  }

  /**
   * Parse the project from Reservation resource.
   *
   * @param {string} reservationName
   *   A fully-qualified path representing Reservation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReservationName(reservationName: string) {
    return this.pathTemplates.reservationPathTemplate.match(reservationName).project;
  }

  /**
   * Parse the location from Reservation resource.
   *
   * @param {string} reservationName
   *   A fully-qualified path representing Reservation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReservationName(reservationName: string) {
    return this.pathTemplates.reservationPathTemplate.match(reservationName).location;
  }

  /**
   * Parse the reservation from Reservation resource.
   *
   * @param {string} reservationName
   *   A fully-qualified path representing Reservation resource.
   * @returns {string} A string representing the reservation.
   */
  matchReservationFromReservationName(reservationName: string) {
    return this.pathTemplates.reservationPathTemplate.match(reservationName).reservation;
  }

  /**
   * Return a fully-qualified subscription resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} subscription
   * @returns {string} Resource name string.
   */
  subscriptionPath(project:string,location:string,subscription:string) {
    return this.pathTemplates.subscriptionPathTemplate.render({
      project: project,
      location: location,
      subscription: subscription,
    });
  }

  /**
   * Parse the project from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).project;
  }

  /**
   * Parse the location from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).location;
  }

  /**
   * Parse the subscription from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the subscription.
   */
  matchSubscriptionFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).subscription;
  }

  /**
   * Return a fully-qualified topic resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} topic
   * @returns {string} Resource name string.
   */
  topicPath(project:string,location:string,topic:string) {
    return this.pathTemplates.topicPathTemplate.render({
      project: project,
      location: location,
      topic: topic,
    });
  }

  /**
   * Parse the project from Topic resource.
   *
   * @param {string} topicName
   *   A fully-qualified path representing Topic resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTopicName(topicName: string) {
    return this.pathTemplates.topicPathTemplate.match(topicName).project;
  }

  /**
   * Parse the location from Topic resource.
   *
   * @param {string} topicName
   *   A fully-qualified path representing Topic resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTopicName(topicName: string) {
    return this.pathTemplates.topicPathTemplate.match(topicName).location;
  }

  /**
   * Parse the topic from Topic resource.
   *
   * @param {string} topicName
   *   A fully-qualified path representing Topic resource.
   * @returns {string} A string representing the topic.
   */
  matchTopicFromTopicName(topicName: string) {
    return this.pathTemplates.topicPathTemplate.match(topicName).topic;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.adminServiceStub && !this._terminated) {
      return this.adminServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
