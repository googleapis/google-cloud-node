// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as topicstatsserviceModule from '../src';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1.TopicStatsServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = topicstatsserviceModule.v1.TopicStatsServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = topicstatsserviceModule.v1.TopicStatsServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = topicstatsserviceModule.v1.TopicStatsServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.topicStatsServiceStub, undefined);
            await client.initialize();
            assert(client.topicStatsServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.topicStatsServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.topicStatsServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('computeMessageStats', () => {
        it('invokes computeMessageStats without error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeMessageStatsRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsResponse()
            );
            client.innerApiCalls.computeMessageStats = stubSimpleCall(expectedResponse);
            const [response] = await client.computeMessageStats(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeMessageStats without error using callback', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeMessageStatsRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsResponse()
            );
            client.innerApiCalls.computeMessageStats = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.computeMessageStats(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IComputeMessageStatsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeMessageStats with error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeMessageStatsRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.computeMessageStats = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.computeMessageStats(request), expectedError);
            const actualRequest = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeMessageStats as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeMessageStats with closed client', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeMessageStatsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeMessageStatsRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.computeMessageStats(request), expectedError);
        });
    });

    describe('computeHeadCursor', () => {
        it('invokes computeHeadCursor without error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeHeadCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorResponse()
            );
            client.innerApiCalls.computeHeadCursor = stubSimpleCall(expectedResponse);
            const [response] = await client.computeHeadCursor(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeHeadCursor without error using callback', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeHeadCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorResponse()
            );
            client.innerApiCalls.computeHeadCursor = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.computeHeadCursor(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IComputeHeadCursorResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeHeadCursor with error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeHeadCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.computeHeadCursor = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.computeHeadCursor(request), expectedError);
            const actualRequest = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeHeadCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeHeadCursor with closed client', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeHeadCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeHeadCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.computeHeadCursor(request), expectedError);
        });
    });

    describe('computeTimeCursor', () => {
        it('invokes computeTimeCursor without error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeTimeCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorResponse()
            );
            client.innerApiCalls.computeTimeCursor = stubSimpleCall(expectedResponse);
            const [response] = await client.computeTimeCursor(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeTimeCursor without error using callback', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeTimeCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorResponse()
            );
            client.innerApiCalls.computeTimeCursor = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.computeTimeCursor(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IComputeTimeCursorResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeTimeCursor with error', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeTimeCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedHeaderRequestParams = `topic=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.computeTimeCursor = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.computeTimeCursor(request), expectedError);
            const actualRequest = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.computeTimeCursor as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes computeTimeCursor with closed client', async () => {
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.pubsublite.v1.ComputeTimeCursorRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.pubsublite.v1.ComputeTimeCursorRequest', ['topic']);
            request.topic = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.computeTimeCursor(request), expectedError);
        });
    });

    describe('Path templates', () => {

        describe('reservation', () => {
            const fakePath = "/rendered/path/reservation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                reservation: "reservationValue",
            };
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.reservationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.reservationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('reservationPath', () => {
                const result = client.reservationPath("projectValue", "locationValue", "reservationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.reservationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReservationName', () => {
                const result = client.matchProjectFromReservationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReservationName', () => {
                const result = client.matchLocationFromReservationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReservationFromReservationName', () => {
                const result = client.matchReservationFromReservationName(fakePath);
                assert.strictEqual(result, "reservationValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('subscription', () => {
            const fakePath = "/rendered/path/subscription";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                subscription: "subscriptionValue",
            };
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.subscriptionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.subscriptionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('subscriptionPath', () => {
                const result = client.subscriptionPath("projectValue", "locationValue", "subscriptionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.subscriptionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSubscriptionName', () => {
                const result = client.matchProjectFromSubscriptionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSubscriptionName', () => {
                const result = client.matchLocationFromSubscriptionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSubscriptionFromSubscriptionName', () => {
                const result = client.matchSubscriptionFromSubscriptionName(fakePath);
                assert.strictEqual(result, "subscriptionValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topic', () => {
            const fakePath = "/rendered/path/topic";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                topic: "topicValue",
            };
            const client = new topicstatsserviceModule.v1.TopicStatsServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicPath', () => {
                const result = client.topicPath("projectValue", "locationValue", "topicValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTopicName', () => {
                const result = client.matchProjectFromTopicName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTopicName', () => {
                const result = client.matchLocationFromTopicName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTopicFromTopicName', () => {
                const result = client.matchTopicFromTopicName(fakePath);
                assert.strictEqual(result, "topicValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
