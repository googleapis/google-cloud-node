// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/auto_ml_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './auto_ml_client_config.json';
const version = require('../../../package.json').version;

/**
 *  AutoML Server API.
 *
 *  The resource names are assigned by the server.
 *  The server never reuses names that it has created after the resources with
 *  those names are deleted.
 *
 *  An ID of a resource is the last element of the item's resource name. For
 *  `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`, then
 *  the id for the item is `{dataset_id}`.
 *
 *  Currently the only supported `location_id` is "us-central1".
 *
 *  On any input that is documented to expect a string parameter in
 *  snake_case or dash-case, either of those cases is accepted.
 * @class
 * @memberof v1
 */
export class AutoMlClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  autoMlStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AutoMlClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AutoMlClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AutoMlClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      annotationSpecPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'
      ),
      datasetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/datasets/{dataset}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      modelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}'
      ),
      modelEvaluationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/models/{model}/modelEvaluations/{model_evaluation}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDatasets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'datasets'),
      listModels:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'model'),
      listModelEvaluations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'modelEvaluation')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1/{resource=projects/*/locations/*}:getIamPolicy',additional_bindings: [{get: '/v1/{resource=projects/*/locations/*/datasets/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/models/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/datasets/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/models/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/*/**}:testIamPermissions',body: '*',},{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',},{selector: 'google.longrunning.Operations.WaitOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:wait',body: '*',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createDatasetResponse = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.Dataset') as gax.protobuf.Type;
    const createDatasetMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteDatasetResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteDatasetMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const importDataResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const importDataMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const exportDataResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const exportDataMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const createModelResponse = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.Model') as gax.protobuf.Type;
    const createModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteModelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const deployModelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deployModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const undeployModelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const undeployModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;
    const exportModelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const exportModelMetadata = protoFilesRoot.lookup(
      '.google.cloud.automl.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createDataset: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDatasetResponse.decode.bind(createDatasetResponse),
        createDatasetMetadata.decode.bind(createDatasetMetadata)),
      deleteDataset: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDatasetResponse.decode.bind(deleteDatasetResponse),
        deleteDatasetMetadata.decode.bind(deleteDatasetMetadata)),
      importData: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importDataResponse.decode.bind(importDataResponse),
        importDataMetadata.decode.bind(importDataMetadata)),
      exportData: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportDataResponse.decode.bind(exportDataResponse),
        exportDataMetadata.decode.bind(exportDataMetadata)),
      createModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createModelResponse.decode.bind(createModelResponse),
        createModelMetadata.decode.bind(createModelMetadata)),
      deleteModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteModelResponse.decode.bind(deleteModelResponse),
        deleteModelMetadata.decode.bind(deleteModelMetadata)),
      deployModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deployModelResponse.decode.bind(deployModelResponse),
        deployModelMetadata.decode.bind(deployModelMetadata)),
      undeployModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        undeployModelResponse.decode.bind(undeployModelResponse),
        undeployModelMetadata.decode.bind(undeployModelMetadata)),
      exportModel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportModelResponse.decode.bind(exportModelResponse),
        exportModelMetadata.decode.bind(exportModelMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.automl.v1.AutoMl', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.autoMlStub) {
      return this.autoMlStub;
    }

    // Put together the "service stub" for
    // google.cloud.automl.v1.AutoMl.
    this.autoMlStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.automl.v1.AutoMl') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.automl.v1.AutoMl,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const autoMlStubMethods =
        ['createDataset', 'getDataset', 'listDatasets', 'updateDataset', 'deleteDataset', 'importData', 'exportData', 'getAnnotationSpec', 'createModel', 'getModel', 'listModels', 'deleteModel', 'updateModel', 'deployModel', 'undeployModel', 'exportModel', 'getModelEvaluation', 'listModelEvaluations'];
    for (const methodName of autoMlStubMethods) {
      const callPromise = this.autoMlStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.autoMlStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'automl.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'automl.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets a dataset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the dataset to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Dataset]{@link google.cloud.automl.v1.Dataset}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.get_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_GetDataset_async
 */
  getDataset(
      request?: protos.google.cloud.automl.v1.IGetDatasetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IDataset,
        protos.google.cloud.automl.v1.IGetDatasetRequest|undefined, {}|undefined
      ]>;
  getDataset(
      request: protos.google.cloud.automl.v1.IGetDatasetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IGetDatasetRequest|null|undefined,
          {}|null|undefined>): void;
  getDataset(
      request: protos.google.cloud.automl.v1.IGetDatasetRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IGetDatasetRequest|null|undefined,
          {}|null|undefined>): void;
  getDataset(
      request?: protos.google.cloud.automl.v1.IGetDatasetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IGetDatasetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IGetDatasetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IDataset,
        protos.google.cloud.automl.v1.IGetDatasetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getDataset(request, options, callback);
  }
/**
 * Updates a dataset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.automl.v1.Dataset} request.dataset
 *   Required. The dataset which replaces the resource on the server.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The update mask applies to the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Dataset]{@link google.cloud.automl.v1.Dataset}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.update_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_UpdateDataset_async
 */
  updateDataset(
      request?: protos.google.cloud.automl.v1.IUpdateDatasetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IDataset,
        protos.google.cloud.automl.v1.IUpdateDatasetRequest|undefined, {}|undefined
      ]>;
  updateDataset(
      request: protos.google.cloud.automl.v1.IUpdateDatasetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IUpdateDatasetRequest|null|undefined,
          {}|null|undefined>): void;
  updateDataset(
      request: protos.google.cloud.automl.v1.IUpdateDatasetRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IUpdateDatasetRequest|null|undefined,
          {}|null|undefined>): void;
  updateDataset(
      request?: protos.google.cloud.automl.v1.IUpdateDatasetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IUpdateDatasetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IDataset,
          protos.google.cloud.automl.v1.IUpdateDatasetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IDataset,
        protos.google.cloud.automl.v1.IUpdateDatasetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'dataset.name': request.dataset!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateDataset(request, options, callback);
  }
/**
 * Gets an annotation spec.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the annotation spec to retrieve.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AnnotationSpec]{@link google.cloud.automl.v1.AnnotationSpec}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.get_annotation_spec.js</caption>
 * region_tag:automl_v1_generated_AutoMl_GetAnnotationSpec_async
 */
  getAnnotationSpec(
      request?: protos.google.cloud.automl.v1.IGetAnnotationSpecRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IAnnotationSpec,
        protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|undefined, {}|undefined
      ]>;
  getAnnotationSpec(
      request: protos.google.cloud.automl.v1.IGetAnnotationSpecRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IAnnotationSpec,
          protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|null|undefined,
          {}|null|undefined>): void;
  getAnnotationSpec(
      request: protos.google.cloud.automl.v1.IGetAnnotationSpecRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IAnnotationSpec,
          protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|null|undefined,
          {}|null|undefined>): void;
  getAnnotationSpec(
      request?: protos.google.cloud.automl.v1.IGetAnnotationSpecRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IAnnotationSpec,
          protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IAnnotationSpec,
          protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IAnnotationSpec,
        protos.google.cloud.automl.v1.IGetAnnotationSpecRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getAnnotationSpec(request, options, callback);
  }
/**
 * Gets a model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the model.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Model]{@link google.cloud.automl.v1.Model}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.get_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_GetModel_async
 */
  getModel(
      request?: protos.google.cloud.automl.v1.IGetModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IModel,
        protos.google.cloud.automl.v1.IGetModelRequest|undefined, {}|undefined
      ]>;
  getModel(
      request: protos.google.cloud.automl.v1.IGetModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IGetModelRequest|null|undefined,
          {}|null|undefined>): void;
  getModel(
      request: protos.google.cloud.automl.v1.IGetModelRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IGetModelRequest|null|undefined,
          {}|null|undefined>): void;
  getModel(
      request?: protos.google.cloud.automl.v1.IGetModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IGetModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IGetModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IModel,
        protos.google.cloud.automl.v1.IGetModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getModel(request, options, callback);
  }
/**
 * Updates a model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.automl.v1.Model} request.model
 *   Required. The model which replaces the resource on the server.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The update mask applies to the resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Model]{@link google.cloud.automl.v1.Model}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.update_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_UpdateModel_async
 */
  updateModel(
      request?: protos.google.cloud.automl.v1.IUpdateModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IModel,
        protos.google.cloud.automl.v1.IUpdateModelRequest|undefined, {}|undefined
      ]>;
  updateModel(
      request: protos.google.cloud.automl.v1.IUpdateModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IUpdateModelRequest|null|undefined,
          {}|null|undefined>): void;
  updateModel(
      request: protos.google.cloud.automl.v1.IUpdateModelRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IUpdateModelRequest|null|undefined,
          {}|null|undefined>): void;
  updateModel(
      request?: protos.google.cloud.automl.v1.IUpdateModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IUpdateModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IModel,
          protos.google.cloud.automl.v1.IUpdateModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IModel,
        protos.google.cloud.automl.v1.IUpdateModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'model.name': request.model!.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateModel(request, options, callback);
  }
/**
 * Gets a model evaluation.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name for the model evaluation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ModelEvaluation]{@link google.cloud.automl.v1.ModelEvaluation}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.get_model_evaluation.js</caption>
 * region_tag:automl_v1_generated_AutoMl_GetModelEvaluation_async
 */
  getModelEvaluation(
      request?: protos.google.cloud.automl.v1.IGetModelEvaluationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IModelEvaluation,
        protos.google.cloud.automl.v1.IGetModelEvaluationRequest|undefined, {}|undefined
      ]>;
  getModelEvaluation(
      request: protos.google.cloud.automl.v1.IGetModelEvaluationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.automl.v1.IModelEvaluation,
          protos.google.cloud.automl.v1.IGetModelEvaluationRequest|null|undefined,
          {}|null|undefined>): void;
  getModelEvaluation(
      request: protos.google.cloud.automl.v1.IGetModelEvaluationRequest,
      callback: Callback<
          protos.google.cloud.automl.v1.IModelEvaluation,
          protos.google.cloud.automl.v1.IGetModelEvaluationRequest|null|undefined,
          {}|null|undefined>): void;
  getModelEvaluation(
      request?: protos.google.cloud.automl.v1.IGetModelEvaluationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.automl.v1.IModelEvaluation,
          protos.google.cloud.automl.v1.IGetModelEvaluationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.automl.v1.IModelEvaluation,
          protos.google.cloud.automl.v1.IGetModelEvaluationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.automl.v1.IModelEvaluation,
        protos.google.cloud.automl.v1.IGetModelEvaluationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getModelEvaluation(request, options, callback);
  }

/**
 * Creates a dataset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project to create the dataset for.
 * @param {google.cloud.automl.v1.Dataset} request.dataset
 *   Required. The dataset to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.create_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_CreateDataset_async
 */
  createDataset(
      request?: protos.google.cloud.automl.v1.ICreateDatasetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createDataset(
      request: protos.google.cloud.automl.v1.ICreateDatasetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDataset(
      request: protos.google.cloud.automl.v1.ICreateDatasetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDataset(
      request?: protos.google.cloud.automl.v1.ICreateDatasetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.automl.v1.IDataset, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createDataset(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createDataset()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.create_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_CreateDataset_async
 */
  async checkCreateDatasetProgress(name: string): Promise<LROperation<protos.google.cloud.automl.v1.Dataset, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDataset, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.automl.v1.Dataset, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Deletes a dataset and all of its contents.
 * Returns empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes,
 * and `delete_details` in the
 * {@link google.longrunning.Operation.metadata|metadata} field.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the dataset to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.delete_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeleteDataset_async
 */
  deleteDataset(
      request?: protos.google.cloud.automl.v1.IDeleteDatasetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteDataset(
      request: protos.google.cloud.automl.v1.IDeleteDatasetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDataset(
      request: protos.google.cloud.automl.v1.IDeleteDatasetRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDataset(
      request?: protos.google.cloud.automl.v1.IDeleteDatasetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteDataset(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteDataset()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.delete_dataset.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeleteDataset_async
 */
  async checkDeleteDatasetProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDataset, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Imports data into a dataset.
 * For Tables this method can only be called on an empty Dataset.
 *
 * For Tables:
 * *   A
 * {@link google.cloud.automl.v1.InputConfig.params|schema_inference_version}
 *     parameter must be explicitly set.
 * Returns an empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Dataset name. Dataset must already exist. All imported
 *   annotations and examples will be added.
 * @param {google.cloud.automl.v1.InputConfig} request.inputConfig
 *   Required. The desired input location and its domain specific semantics,
 *   if any.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.import_data.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ImportData_async
 */
  importData(
      request?: protos.google.cloud.automl.v1.IImportDataRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  importData(
      request: protos.google.cloud.automl.v1.IImportDataRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importData(
      request: protos.google.cloud.automl.v1.IImportDataRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importData(
      request?: protos.google.cloud.automl.v1.IImportDataRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.importData(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `importData()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.import_data.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ImportData_async
 */
  async checkImportDataProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importData, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Exports dataset's data to the provided output location.
 * Returns an empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the dataset.
 * @param {google.cloud.automl.v1.OutputConfig} request.outputConfig
 *   Required. The desired output location.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.export_data.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ExportData_async
 */
  exportData(
      request?: protos.google.cloud.automl.v1.IExportDataRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportData(
      request: protos.google.cloud.automl.v1.IExportDataRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportData(
      request: protos.google.cloud.automl.v1.IExportDataRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportData(
      request?: protos.google.cloud.automl.v1.IExportDataRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.exportData(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `exportData()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.export_data.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ExportData_async
 */
  async checkExportDataProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportData, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Creates a model.
 * Returns a Model in the {@link google.longrunning.Operation.response|response}
 * field when it completes.
 * When you create a model, several model evaluations are created for it:
 * a global evaluation, and one evaluation for each annotation spec.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the parent project where the model is being created.
 * @param {google.cloud.automl.v1.Model} request.model
 *   Required. The model to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.create_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_CreateModel_async
 */
  createModel(
      request?: protos.google.cloud.automl.v1.ICreateModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createModel(
      request: protos.google.cloud.automl.v1.ICreateModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createModel(
      request: protos.google.cloud.automl.v1.ICreateModelRequest,
      callback: Callback<
          LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createModel(
      request?: protos.google.cloud.automl.v1.ICreateModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.automl.v1.IModel, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createModel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.create_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_CreateModel_async
 */
  async checkCreateModelProgress(name: string): Promise<LROperation<protos.google.cloud.automl.v1.Model, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.automl.v1.Model, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Deletes a model.
 * Returns `google.protobuf.Empty` in the
 * {@link google.longrunning.Operation.response|response} field when it completes,
 * and `delete_details` in the
 * {@link google.longrunning.Operation.metadata|metadata} field.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the model being deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.delete_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeleteModel_async
 */
  deleteModel(
      request?: protos.google.cloud.automl.v1.IDeleteModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteModel(
      request: protos.google.cloud.automl.v1.IDeleteModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteModel(
      request: protos.google.cloud.automl.v1.IDeleteModelRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteModel(
      request?: protos.google.cloud.automl.v1.IDeleteModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteModel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.delete_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeleteModel_async
 */
  async checkDeleteModelProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Deploys a model. If a model is already deployed, deploying it with the
 * same parameters has no effect. Deploying with different parametrs
 * (as e.g. changing
 * {@link google.cloud.automl.v1p1beta.ImageObjectDetectionModelDeploymentMetadata.node_number|node_number})
 *  will reset the deployment state without pausing the model's availability.
 *
 * Only applicable for Text Classification, Image Object Detection , Tables, and Image Segmentation; all other domains manage
 * deployment automatically.
 *
 * Returns an empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.automl.v1.ImageObjectDetectionModelDeploymentMetadata} request.imageObjectDetectionModelDeploymentMetadata
 *   Model deployment metadata specific to Image Object Detection.
 * @param {google.cloud.automl.v1.ImageClassificationModelDeploymentMetadata} request.imageClassificationModelDeploymentMetadata
 *   Model deployment metadata specific to Image Classification.
 * @param {string} request.name
 *   Required. Resource name of the model to deploy.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.deploy_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeployModel_async
 */
  deployModel(
      request?: protos.google.cloud.automl.v1.IDeployModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deployModel(
      request: protos.google.cloud.automl.v1.IDeployModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployModel(
      request: protos.google.cloud.automl.v1.IDeployModelRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deployModel(
      request?: protos.google.cloud.automl.v1.IDeployModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deployModel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deployModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.deploy_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_DeployModel_async
 */
  async checkDeployModelProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deployModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Undeploys a model. If the model is not deployed this method has no effect.
 *
 * Only applicable for Text Classification, Image Object Detection and Tables;
 * all other domains manage deployment automatically.
 *
 * Returns an empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Resource name of the model to undeploy.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.undeploy_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_UndeployModel_async
 */
  undeployModel(
      request?: protos.google.cloud.automl.v1.IUndeployModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  undeployModel(
      request: protos.google.cloud.automl.v1.IUndeployModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeployModel(
      request: protos.google.cloud.automl.v1.IUndeployModelRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  undeployModel(
      request?: protos.google.cloud.automl.v1.IUndeployModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.undeployModel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `undeployModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.undeploy_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_UndeployModel_async
 */
  async checkUndeployModelProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeployModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
/**
 * Exports a trained, "export-able", model to a user specified Google Cloud
 * Storage location. A model is considered export-able if and only if it has
 * an export format defined for it in
 * {@link google.cloud.automl.v1.ModelExportOutputConfig|ModelExportOutputConfig}.
 *
 * Returns an empty response in the
 * {@link google.longrunning.Operation.response|response} field when it completes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the model to export.
 * @param {google.cloud.automl.v1.ModelExportOutputConfig} request.outputConfig
 *   Required. The desired output location and configuration.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.export_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ExportModel_async
 */
  exportModel(
      request?: protos.google.cloud.automl.v1.IExportModelRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  exportModel(
      request: protos.google.cloud.automl.v1.IExportModelRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportModel(
      request: protos.google.cloud.automl.v1.IExportModelRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  exportModel(
      request?: protos.google.cloud.automl.v1.IExportModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.automl.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.exportModel(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `exportModel()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.export_model.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ExportModel_async
 */
  async checkExportModelProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportModel, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.automl.v1.OperationMetadata>;
  }
 /**
 * Lists datasets in a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list datasets.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `dataset_metadata` - for existence of the case (e.g.
 *               `image_classification_dataset_metadata:*`). Some examples of using the filter are:
 *
 *     * `translation_dataset_metadata:*` --> The dataset has
 *                                            `translation_dataset_metadata`.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer results than requested.
 *   If unspecified, server will pick a default size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListDatasets|AutoMl.ListDatasets} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Dataset]{@link google.cloud.automl.v1.Dataset}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDatasetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDatasets(
      request?: protos.google.cloud.automl.v1.IListDatasetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IDataset[],
        protos.google.cloud.automl.v1.IListDatasetsRequest|null,
        protos.google.cloud.automl.v1.IListDatasetsResponse
      ]>;
  listDatasets(
      request: protos.google.cloud.automl.v1.IListDatasetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListDatasetsRequest,
          protos.google.cloud.automl.v1.IListDatasetsResponse|null|undefined,
          protos.google.cloud.automl.v1.IDataset>): void;
  listDatasets(
      request: protos.google.cloud.automl.v1.IListDatasetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListDatasetsRequest,
          protos.google.cloud.automl.v1.IListDatasetsResponse|null|undefined,
          protos.google.cloud.automl.v1.IDataset>): void;
  listDatasets(
      request?: protos.google.cloud.automl.v1.IListDatasetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.automl.v1.IListDatasetsRequest,
          protos.google.cloud.automl.v1.IListDatasetsResponse|null|undefined,
          protos.google.cloud.automl.v1.IDataset>,
      callback?: PaginationCallback<
          protos.google.cloud.automl.v1.IListDatasetsRequest,
          protos.google.cloud.automl.v1.IListDatasetsResponse|null|undefined,
          protos.google.cloud.automl.v1.IDataset>):
      Promise<[
        protos.google.cloud.automl.v1.IDataset[],
        protos.google.cloud.automl.v1.IListDatasetsRequest|null,
        protos.google.cloud.automl.v1.IListDatasetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listDatasets(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list datasets.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `dataset_metadata` - for existence of the case (e.g.
 *               `image_classification_dataset_metadata:*`). Some examples of using the filter are:
 *
 *     * `translation_dataset_metadata:*` --> The dataset has
 *                                            `translation_dataset_metadata`.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer results than requested.
 *   If unspecified, server will pick a default size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListDatasets|AutoMl.ListDatasets} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Dataset]{@link google.cloud.automl.v1.Dataset} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDatasetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listDatasetsStream(
      request?: protos.google.cloud.automl.v1.IListDatasetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatasets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDatasets.createStream(
      this.innerApiCalls.listDatasets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDatasets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the project from which to list datasets.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `dataset_metadata` - for existence of the case (e.g.
 *               `image_classification_dataset_metadata:*`). Some examples of using the filter are:
 *
 *     * `translation_dataset_metadata:*` --> The dataset has
 *                                            `translation_dataset_metadata`.
 * @param {number} request.pageSize
 *   Requested page size. Server may return fewer results than requested.
 *   If unspecified, server will pick a default size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListDatasetsResponse.next_page_token|ListDatasetsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListDatasets|AutoMl.ListDatasets} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Dataset]{@link google.cloud.automl.v1.Dataset}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.list_datasets.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ListDatasets_async
 */
  listDatasetsAsync(
      request?: protos.google.cloud.automl.v1.IListDatasetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.automl.v1.IDataset>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatasets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDatasets.asyncIterate(
      this.innerApiCalls['listDatasets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.automl.v1.IDataset>;
  }
 /**
 * Lists models.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the project, from which to list the models.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `model_metadata` - for existence of the case (e.g.
 *               `video_classification_model_metadata:*`).
 *     * `dataset_id` - for = or !=. Some examples of using the filter are:
 *
 *     * `image_classification_model_metadata:*` --> The model has
 *                                        `image_classification_model_metadata`.
 *     * `dataset_id=5` --> The model was created from a dataset with ID 5.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelsResponse.next_page_token|ListModelsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModels|AutoMl.ListModels} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Model]{@link google.cloud.automl.v1.Model}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listModelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listModels(
      request?: protos.google.cloud.automl.v1.IListModelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IModel[],
        protos.google.cloud.automl.v1.IListModelsRequest|null,
        protos.google.cloud.automl.v1.IListModelsResponse
      ]>;
  listModels(
      request: protos.google.cloud.automl.v1.IListModelsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelsRequest,
          protos.google.cloud.automl.v1.IListModelsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModel>): void;
  listModels(
      request: protos.google.cloud.automl.v1.IListModelsRequest,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelsRequest,
          protos.google.cloud.automl.v1.IListModelsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModel>): void;
  listModels(
      request?: protos.google.cloud.automl.v1.IListModelsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.automl.v1.IListModelsRequest,
          protos.google.cloud.automl.v1.IListModelsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModel>,
      callback?: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelsRequest,
          protos.google.cloud.automl.v1.IListModelsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModel>):
      Promise<[
        protos.google.cloud.automl.v1.IModel[],
        protos.google.cloud.automl.v1.IListModelsRequest|null,
        protos.google.cloud.automl.v1.IListModelsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listModels(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the project, from which to list the models.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `model_metadata` - for existence of the case (e.g.
 *               `video_classification_model_metadata:*`).
 *     * `dataset_id` - for = or !=. Some examples of using the filter are:
 *
 *     * `image_classification_model_metadata:*` --> The model has
 *                                        `image_classification_model_metadata`.
 *     * `dataset_id=5` --> The model was created from a dataset with ID 5.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelsResponse.next_page_token|ListModelsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModels|AutoMl.ListModels} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Model]{@link google.cloud.automl.v1.Model} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listModelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listModelsStream(
      request?: protos.google.cloud.automl.v1.IListModelsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listModels.createStream(
      this.innerApiCalls.listModels as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listModels`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the project, from which to list the models.
 * @param {string} request.filter
 *   An expression for filtering the results of the request.
 *
 *     * `model_metadata` - for existence of the case (e.g.
 *               `video_classification_model_metadata:*`).
 *     * `dataset_id` - for = or !=. Some examples of using the filter are:
 *
 *     * `image_classification_model_metadata:*` --> The model has
 *                                        `image_classification_model_metadata`.
 *     * `dataset_id=5` --> The model was created from a dataset with ID 5.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelsResponse.next_page_token|ListModelsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModels|AutoMl.ListModels} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Model]{@link google.cloud.automl.v1.Model}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.list_models.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ListModels_async
 */
  listModelsAsync(
      request?: protos.google.cloud.automl.v1.IListModelsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.automl.v1.IModel>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listModels.asyncIterate(
      this.innerApiCalls['listModels'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.automl.v1.IModel>;
  }
 /**
 * Lists model evaluations.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the model to list the model evaluations for.
 *   If modelId is set as "-", this will list model evaluations from across all
 *   models of the parent location.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *
 *     * `annotation_spec_id` - for =, !=  or existence. See example below for
 *                            the last.
 *
 *   Some examples of using the filter are:
 *
 *     * `annotation_spec_id!=4` --> The model evaluation was done for
 *                               annotation spec with ID different than 4.
 *     * `NOT annotation_spec_id:*` --> The model evaluation was done for
 *                                  aggregate of all annotation specs.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelEvaluationsResponse.next_page_token|ListModelEvaluationsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModelEvaluations|AutoMl.ListModelEvaluations} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ModelEvaluation]{@link google.cloud.automl.v1.ModelEvaluation}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listModelEvaluationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listModelEvaluations(
      request?: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.automl.v1.IModelEvaluation[],
        protos.google.cloud.automl.v1.IListModelEvaluationsRequest|null,
        protos.google.cloud.automl.v1.IListModelEvaluationsResponse
      ]>;
  listModelEvaluations(
      request: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
          protos.google.cloud.automl.v1.IListModelEvaluationsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModelEvaluation>): void;
  listModelEvaluations(
      request: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
          protos.google.cloud.automl.v1.IListModelEvaluationsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModelEvaluation>): void;
  listModelEvaluations(
      request?: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
          protos.google.cloud.automl.v1.IListModelEvaluationsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModelEvaluation>,
      callback?: PaginationCallback<
          protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
          protos.google.cloud.automl.v1.IListModelEvaluationsResponse|null|undefined,
          protos.google.cloud.automl.v1.IModelEvaluation>):
      Promise<[
        protos.google.cloud.automl.v1.IModelEvaluation[],
        protos.google.cloud.automl.v1.IListModelEvaluationsRequest|null,
        protos.google.cloud.automl.v1.IListModelEvaluationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listModelEvaluations(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the model to list the model evaluations for.
 *   If modelId is set as "-", this will list model evaluations from across all
 *   models of the parent location.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *
 *     * `annotation_spec_id` - for =, !=  or existence. See example below for
 *                            the last.
 *
 *   Some examples of using the filter are:
 *
 *     * `annotation_spec_id!=4` --> The model evaluation was done for
 *                               annotation spec with ID different than 4.
 *     * `NOT annotation_spec_id:*` --> The model evaluation was done for
 *                                  aggregate of all annotation specs.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelEvaluationsResponse.next_page_token|ListModelEvaluationsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModelEvaluations|AutoMl.ListModelEvaluations} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ModelEvaluation]{@link google.cloud.automl.v1.ModelEvaluation} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listModelEvaluationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listModelEvaluationsStream(
      request?: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModelEvaluations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listModelEvaluations.createStream(
      this.innerApiCalls.listModelEvaluations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listModelEvaluations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Resource name of the model to list the model evaluations for.
 *   If modelId is set as "-", this will list model evaluations from across all
 *   models of the parent location.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *
 *     * `annotation_spec_id` - for =, !=  or existence. See example below for
 *                            the last.
 *
 *   Some examples of using the filter are:
 *
 *     * `annotation_spec_id!=4` --> The model evaluation was done for
 *                               annotation spec with ID different than 4.
 *     * `NOT annotation_spec_id:*` --> The model evaluation was done for
 *                                  aggregate of all annotation specs.
 * @param {number} request.pageSize
 *   Requested page size.
 * @param {string} request.pageToken
 *   A token identifying a page of results for the server to return.
 *   Typically obtained via
 *   {@link google.cloud.automl.v1.ListModelEvaluationsResponse.next_page_token|ListModelEvaluationsResponse.next_page_token} of the previous
 *   {@link google.cloud.automl.v1.AutoMl.ListModelEvaluations|AutoMl.ListModelEvaluations} call.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ModelEvaluation]{@link google.cloud.automl.v1.ModelEvaluation}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/auto_ml.list_model_evaluations.js</caption>
 * region_tag:automl_v1_generated_AutoMl_ListModelEvaluations_async
 */
  listModelEvaluationsAsync(
      request?: protos.google.cloud.automl.v1.IListModelEvaluationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.automl.v1.IModelEvaluation>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listModelEvaluations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listModelEvaluations.asyncIterate(
      this.innerApiCalls['listModelEvaluations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.automl.v1.IModelEvaluation>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified annotationSpec resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @param {string} annotation_spec
   * @returns {string} Resource name string.
   */
  annotationSpecPath(project:string,location:string,dataset:string,annotationSpec:string) {
    return this.pathTemplates.annotationSpecPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
      annotation_spec: annotationSpec,
    });
  }

  /**
   * Parse the project from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).project;
  }

  /**
   * Parse the location from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).location;
  }

  /**
   * Parse the dataset from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).dataset;
  }

  /**
   * Parse the annotation_spec from AnnotationSpec resource.
   *
   * @param {string} annotationSpecName
   *   A fully-qualified path representing AnnotationSpec resource.
   * @returns {string} A string representing the annotation_spec.
   */
  matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string) {
    return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).annotation_spec;
  }

  /**
   * Return a fully-qualified dataset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataset
   * @returns {string} Resource name string.
   */
  datasetPath(project:string,location:string,dataset:string) {
    return this.pathTemplates.datasetPathTemplate.render({
      project: project,
      location: location,
      dataset: dataset,
    });
  }

  /**
   * Parse the project from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
  }

  /**
   * Parse the location from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
  }

  /**
   * Parse the dataset from Dataset resource.
   *
   * @param {string} datasetName
   *   A fully-qualified path representing Dataset resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromDatasetName(datasetName: string) {
    return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified model resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @returns {string} Resource name string.
   */
  modelPath(project:string,location:string,model:string) {
    return this.pathTemplates.modelPathTemplate.render({
      project: project,
      location: location,
      model: model,
    });
  }

  /**
   * Parse the project from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).project;
  }

  /**
   * Parse the location from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).location;
  }

  /**
   * Parse the model from Model resource.
   *
   * @param {string} modelName
   *   A fully-qualified path representing Model resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelName(modelName: string) {
    return this.pathTemplates.modelPathTemplate.match(modelName).model;
  }

  /**
   * Return a fully-qualified modelEvaluation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} model
   * @param {string} model_evaluation
   * @returns {string} Resource name string.
   */
  modelEvaluationPath(project:string,location:string,model:string,modelEvaluation:string) {
    return this.pathTemplates.modelEvaluationPathTemplate.render({
      project: project,
      location: location,
      model: model,
      model_evaluation: modelEvaluation,
    });
  }

  /**
   * Parse the project from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).project;
  }

  /**
   * Parse the location from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).location;
  }

  /**
   * Parse the model from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the model.
   */
  matchModelFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model;
  }

  /**
   * Parse the model_evaluation from ModelEvaluation resource.
   *
   * @param {string} modelEvaluationName
   *   A fully-qualified path representing ModelEvaluation resource.
   * @returns {string} A string representing the model_evaluation.
   */
  matchModelEvaluationFromModelEvaluationName(modelEvaluationName: string) {
    return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model_evaluation;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.autoMlStub && !this._terminated) {
      return this.autoMlStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
