// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as usereventserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.UserEventServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = usereventserviceModule.v1beta1.UserEventServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = usereventserviceModule.v1beta1.UserEventServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = usereventserviceModule.v1beta1.UserEventServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.userEventServiceStub, undefined);
            await client.initialize();
            assert(client.userEventServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.userEventServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.userEventServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('writeUserEvent', () => {
        it('invokes writeUserEvent without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.UserEvent()
            );
            client.innerApiCalls.writeUserEvent = stubSimpleCall(expectedResponse);
            const [response] = await client.writeUserEvent(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes writeUserEvent without error using callback', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.UserEvent()
            );
            client.innerApiCalls.writeUserEvent = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.writeUserEvent(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.IUserEvent|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes writeUserEvent with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.writeUserEvent = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.writeUserEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.writeUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes writeUserEvent with closed client', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.WriteUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.writeUserEvent(request), expectedError);
        });
    });

    describe('collectUserEvent', () => {
        it('invokes collectUserEvent without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.api.HttpBody()
            );
            client.innerApiCalls.collectUserEvent = stubSimpleCall(expectedResponse);
            const [response] = await client.collectUserEvent(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes collectUserEvent without error using callback', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.api.HttpBody()
            );
            client.innerApiCalls.collectUserEvent = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.collectUserEvent(
                    request,
                    (err?: Error|null, result?: protos.google.api.IHttpBody|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes collectUserEvent with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.collectUserEvent = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.collectUserEvent(request), expectedError);
            const actualRequest = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.collectUserEvent as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes collectUserEvent with closed client', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.CollectUserEventRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.collectUserEvent(request), expectedError);
        });
    });

    describe('purgeUserEvents', () => {
        it('invokes purgeUserEvents without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.purgeUserEvents = stubLongRunningCall(expectedResponse);
            const [operation] = await client.purgeUserEvents(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes purgeUserEvents without error using callback', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.purgeUserEvents = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.purgeUserEvents(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes purgeUserEvents with call error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.purgeUserEvents = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.purgeUserEvents(request), expectedError);
            const actualRequest = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes purgeUserEvents with LRO error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.PurgeUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.purgeUserEvents = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.purgeUserEvents(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.purgeUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkPurgeUserEventsProgress without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkPurgeUserEventsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkPurgeUserEventsProgress with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkPurgeUserEventsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('importUserEvents', () => {
        it('invokes importUserEvents without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.importUserEvents = stubLongRunningCall(expectedResponse);
            const [operation] = await client.importUserEvents(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes importUserEvents without error using callback', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.importUserEvents = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.importUserEvents(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes importUserEvents with call error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.importUserEvents = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.importUserEvents(request), expectedError);
            const actualRequest = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes importUserEvents with LRO error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ImportUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.importUserEvents = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.importUserEvents(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.importUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkImportUserEventsProgress without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkImportUserEventsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkImportUserEventsProgress with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkImportUserEventsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listUserEvents', () => {
        it('invokes listUserEvents without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
            ];
            client.innerApiCalls.listUserEvents = stubSimpleCall(expectedResponse);
            const [response] = await client.listUserEvents(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUserEvents without error using callback', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
            ];
            client.innerApiCalls.listUserEvents = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUserEvents(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.IUserEvent[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUserEvents with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listUserEvents = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUserEvents(request), expectedError);
            const actualRequest = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listUserEvents as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listUserEventsStream without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
            ];
            client.descriptors.page.listUserEvents.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUserEventsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.UserEvent[] = [];
                stream.on('data', (response: protos.google.cloud.recommendationengine.v1beta1.UserEvent) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUserEvents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUserEvents, request));
            assert(
                (client.descriptors.page.listUserEvents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listUserEventsStream with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUserEvents.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUserEventsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.UserEvent[] = [];
                stream.on('data', (response: protos.google.cloud.recommendationengine.v1beta1.UserEvent) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUserEvents.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUserEvents, request));
            assert(
                (client.descriptors.page.listUserEvents.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listUserEvents without error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UserEvent()),
            ];
            client.descriptors.page.listUserEvents.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.recommendationengine.v1beta1.IUserEvent[] = [];
            const iterable = client.listUserEventsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUserEvents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUserEvents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listUserEvents with error', async () => {
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.recommendationengine.v1beta1.ListUserEventsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listUserEvents.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUserEventsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.IUserEvent[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUserEvents.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listUserEvents.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('eventStore', () => {
            const fakePath = "/rendered/path/eventStore";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                event_store: "eventStoreValue",
            };
            const client = new usereventserviceModule.v1beta1.UserEventServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.eventStorePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.eventStorePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('eventStorePath', () => {
                const result = client.eventStorePath("projectValue", "locationValue", "catalogValue", "eventStoreValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.eventStorePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEventStoreName', () => {
                const result = client.matchProjectFromEventStoreName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.eventStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEventStoreName', () => {
                const result = client.matchLocationFromEventStoreName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.eventStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromEventStoreName', () => {
                const result = client.matchCatalogFromEventStoreName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.eventStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEventStoreFromEventStoreName', () => {
                const result = client.matchEventStoreFromEventStoreName(fakePath);
                assert.strictEqual(result, "eventStoreValue");
                assert((client.pathTemplates.eventStorePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
