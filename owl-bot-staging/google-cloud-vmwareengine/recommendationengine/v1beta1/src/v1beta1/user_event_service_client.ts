// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/user_event_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './user_event_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for ingesting end user actions on the customer website.
 * @class
 * @memberof v1beta1
 */
export class UserEventServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  userEventServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of UserEventServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new UserEventServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof UserEventServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      eventStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/eventStores/{event_store}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listUserEvents:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'userEvents')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.GetOperation',get: '/v1beta1/{name=projects/*/locations/*/catalogs/*/operations/*}',additional_bindings: [{get: '/v1beta1/{name=projects/*/locations/*/catalogs/*/eventStores/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1beta1/{name=projects/*/locations/*/catalogs/*}/operations',additional_bindings: [{get: '/v1beta1/{name=projects/*/locations/*/catalogs/*/eventStores/*}/operations',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const purgeUserEventsResponse = protoFilesRoot.lookup(
      '.google.cloud.recommendationengine.v1beta1.PurgeUserEventsResponse') as gax.protobuf.Type;
    const purgeUserEventsMetadata = protoFilesRoot.lookup(
      '.google.cloud.recommendationengine.v1beta1.PurgeUserEventsMetadata') as gax.protobuf.Type;
    const importUserEventsResponse = protoFilesRoot.lookup(
      '.google.cloud.recommendationengine.v1beta1.ImportUserEventsResponse') as gax.protobuf.Type;
    const importUserEventsMetadata = protoFilesRoot.lookup(
      '.google.cloud.recommendationengine.v1beta1.ImportMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      purgeUserEvents: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        purgeUserEventsResponse.decode.bind(purgeUserEventsResponse),
        purgeUserEventsMetadata.decode.bind(purgeUserEventsMetadata)),
      importUserEvents: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importUserEventsResponse.decode.bind(importUserEventsResponse),
        importUserEventsMetadata.decode.bind(importUserEventsMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.recommendationengine.v1beta1.UserEventService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.userEventServiceStub) {
      return this.userEventServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.recommendationengine.v1beta1.UserEventService.
    this.userEventServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.recommendationengine.v1beta1.UserEventService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.recommendationengine.v1beta1.UserEventService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const userEventServiceStubMethods =
        ['writeUserEvent', 'collectUserEvent', 'listUserEvents', 'purgeUserEvents', 'importUserEvents'];
    for (const methodName of userEventServiceStubMethods) {
      const callPromise = this.userEventServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.userEventServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'recommendationengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'recommendationengine.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Writes a single user event.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent eventStore resource name, such as
 *   `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
 * @param {google.cloud.recommendationengine.v1beta1.UserEvent} request.userEvent
 *   Required. User event to write.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UserEvent]{@link google.cloud.recommendationengine.v1beta1.UserEvent}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.write_user_event.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_WriteUserEvent_async
 */
  writeUserEvent(
      request?: protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
        protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|undefined, {}|undefined
      ]>;
  writeUserEvent(
      request: protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
          protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|null|undefined,
          {}|null|undefined>): void;
  writeUserEvent(
      request: protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest,
      callback: Callback<
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
          protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|null|undefined,
          {}|null|undefined>): void;
  writeUserEvent(
      request?: protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
          protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
          protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.recommendationengine.v1beta1.IUserEvent,
        protos.google.cloud.recommendationengine.v1beta1.IWriteUserEventRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.writeUserEvent(request, options, callback);
  }
/**
 * Writes a single user event from the browser. This uses a GET request to
 * due to browser restriction of POST-ing to a 3rd party domain.
 *
 * This method is used only by the Recommendations AI JavaScript pixel.
 * Users should not call this method directly.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent eventStore name, such as
 *   `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
 * @param {string} request.userEvent
 *   Required. URL encoded UserEvent proto.
 * @param {string} [request.uri]
 *   Optional. The url including cgi-parameters but excluding the hash fragment.
 *   The URL must be truncated to 1.5K bytes to conservatively be under the 2K
 *   bytes. This is often more useful than the referer url, because many
 *   browsers only send the domain for 3rd party requests.
 * @param {number} [request.ets]
 *   Optional. The event timestamp in milliseconds. This prevents browser
 *   caching of otherwise identical get requests. The name is abbreviated to
 *   reduce the payload bytes.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [HttpBody]{@link google.api.HttpBody}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.collect_user_event.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_CollectUserEvent_async
 */
  collectUserEvent(
      request?: protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest,
      options?: CallOptions):
      Promise<[
        protos.google.api.IHttpBody,
        protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|undefined, {}|undefined
      ]>;
  collectUserEvent(
      request: protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.api.IHttpBody,
          protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|null|undefined,
          {}|null|undefined>): void;
  collectUserEvent(
      request: protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest,
      callback: Callback<
          protos.google.api.IHttpBody,
          protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|null|undefined,
          {}|null|undefined>): void;
  collectUserEvent(
      request?: protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.api.IHttpBody,
          protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.api.IHttpBody,
          protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.api.IHttpBody,
        protos.google.cloud.recommendationengine.v1beta1.ICollectUserEventRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.collectUserEvent(request, options, callback);
  }

/**
 * Deletes permanently all user events specified by the filter provided.
 * Depending on the number of events specified by the filter, this operation
 * could take hours or days to complete. To test a filter, use the list
 * command first.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource name of the event_store under which the events are
 *   created. The format is
 *   `projects/${projectId}/locations/global/catalogs/${catalogId}/eventStores/${eventStoreId}`
 * @param {string} request.filter
 *   Required. The filter string to specify the events to be deleted. Empty
 *   string filter is not allowed. This filter can also be used with
 *   ListUserEvents API to list events that will be deleted. The eligible fields
 *   for filtering are:
 *   * eventType - UserEvent.eventType field of type string.
 *   * eventTime - in ISO 8601 "zulu" format.
 *   * visitorId - field of type string. Specifying this will delete all events
 *   associated with a visitor.
 *   * userId - field of type string. Specifying this will delete all events
 *   associated with a user.
 *   Example 1: Deleting all events in a time range.
 *   `eventTime > "2012-04-23T18:25:43.511Z" eventTime <
 *   "2012-04-23T18:30:43.511Z"`
 *   Example 2: Deleting specific eventType in time range.
 *   `eventTime > "2012-04-23T18:25:43.511Z" eventType = "detail-page-view"`
 *   Example 3: Deleting all events for a specific visitor
 *   `visitorId = visitor1024`
 *   The filtering fields are assumed to have an implicit AND.
 * @param {boolean} [request.force]
 *   Optional. The default value is false. Override this flag to true to
 *   actually perform the purge. If the field is not set to true, a sampling of
 *   events to be deleted will be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.purge_user_events.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_PurgeUserEvents_async
 */
  purgeUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  purgeUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  purgeUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsRequest,
      callback: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  purgeUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IPurgeUserEventsMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.purgeUserEvents(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `purgeUserEvents()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.purge_user_events.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_PurgeUserEvents_async
 */
  async checkPurgeUserEventsProgress(name: string): Promise<LROperation<protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.purgeUserEvents, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.PurgeUserEventsMetadata>;
  }
/**
 * Bulk import of User events. Request processing might be
 * synchronous. Events that already exist are skipped.
 * Use this method for backfilling historical user events.
 *
 * Operation.response is of type ImportResponse. Note that it is
 * possible for a subset of the items to be successfully inserted.
 * Operation.metadata is of type ImportMetadata.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required.
 *   `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`
 * @param {string} [request.requestId]
 *   Optional. Unique identifier provided by client, within the ancestor
 *   dataset scope. Ensures idempotency for expensive long running operations.
 *   Server-generated if unspecified. Up to 128 characters long. This is
 *   returned as google.longrunning.Operation.name in the response. Note that
 *   this field must not be set if the desired input config is
 *   catalog_inline_source.
 * @param {google.cloud.recommendationengine.v1beta1.InputConfig} request.inputConfig
 *   Required. The desired input location of the data.
 * @param {google.cloud.recommendationengine.v1beta1.ImportErrorsConfig} [request.errorsConfig]
 *   Optional. The desired location of errors incurred during the Import.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.import_user_events.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_ImportUserEvents_async
 */
  importUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  importUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsRequest,
      callback: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  importUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.importUserEvents(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `importUserEvents()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.import_user_events.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_ImportUserEvents_async
 */
  async checkImportUserEventsProgress(name: string): Promise<LROperation<protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.ImportMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importUserEvents, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.recommendationengine.v1beta1.ImportUserEventsResponse, protos.google.cloud.recommendationengine.v1beta1.ImportMetadata>;
  }
 /**
 * Gets a list of user events within a time range, with potential filtering.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent eventStore resource name, such as
 *   `projects/* /locations/* /catalogs/default_catalog/eventStores/default_event_store`.
 * @param {number} [request.pageSize]
 *   Optional. Maximum number of results to return per page. If zero, the
 *   service will choose a reasonable default.
 * @param {string} [request.pageToken]
 *   Optional. The previous ListUserEventsResponse.next_page_token.
 * @param {string} [request.filter]
 *   Optional. Filtering expression to specify restrictions over
 *   returned events. This is a sequence of terms, where each term applies some
 *   kind of a restriction to the returned user events. Use this expression to
 *   restrict results to a specific time range, or filter events by eventType.
 *      eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
 *      eventTime<"2012-04-23T18:25:43.511Z" eventType=search
 *
 *     We expect only 3 types of fields:
 *
 *      * eventTime: this can be specified a maximum of 2 times, once with a
 *        less than operator and once with a greater than operator. The
 *        eventTime restrict should result in one contiguous valid eventTime
 *        range.
 *
 *      * eventType: only 1 eventType restriction can be specified.
 *
 *      * eventsMissingCatalogItems: specififying this will restrict results
 *        to events for which catalog items were not found in the catalog. The
 *        default behavior is to return only those events for which catalog
 *        items were found.
 *
 *     Some examples of valid filters expressions:
 *
 *     * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventTime < "2012-04-23T18:30:43.511Z"
 *     * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventType = detail-page-view
 *     * Example 3: eventsMissingCatalogItems
 *               eventType = search eventTime < "2018-04-23T18:30:43.511Z"
 *     * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
 *     * Example 5: eventType = search
 *     * Example 6: eventsMissingCatalogItems
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [UserEvent]{@link google.cloud.recommendationengine.v1beta1.UserEvent}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listUserEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.recommendationengine.v1beta1.IUserEvent[],
        protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest|null,
        protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse
      ]>;
  listUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse|null|undefined,
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent>): void;
  listUserEvents(
      request: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      callback: PaginationCallback<
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse|null|undefined,
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent>): void;
  listUserEvents(
      request?: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse|null|undefined,
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent>,
      callback?: PaginationCallback<
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
          protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse|null|undefined,
          protos.google.cloud.recommendationengine.v1beta1.IUserEvent>):
      Promise<[
        protos.google.cloud.recommendationengine.v1beta1.IUserEvent[],
        protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest|null,
        protos.google.cloud.recommendationengine.v1beta1.IListUserEventsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listUserEvents(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent eventStore resource name, such as
 *   `projects/* /locations/* /catalogs/default_catalog/eventStores/default_event_store`.
 * @param {number} [request.pageSize]
 *   Optional. Maximum number of results to return per page. If zero, the
 *   service will choose a reasonable default.
 * @param {string} [request.pageToken]
 *   Optional. The previous ListUserEventsResponse.next_page_token.
 * @param {string} [request.filter]
 *   Optional. Filtering expression to specify restrictions over
 *   returned events. This is a sequence of terms, where each term applies some
 *   kind of a restriction to the returned user events. Use this expression to
 *   restrict results to a specific time range, or filter events by eventType.
 *      eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
 *      eventTime<"2012-04-23T18:25:43.511Z" eventType=search
 *
 *     We expect only 3 types of fields:
 *
 *      * eventTime: this can be specified a maximum of 2 times, once with a
 *        less than operator and once with a greater than operator. The
 *        eventTime restrict should result in one contiguous valid eventTime
 *        range.
 *
 *      * eventType: only 1 eventType restriction can be specified.
 *
 *      * eventsMissingCatalogItems: specififying this will restrict results
 *        to events for which catalog items were not found in the catalog. The
 *        default behavior is to return only those events for which catalog
 *        items were found.
 *
 *     Some examples of valid filters expressions:
 *
 *     * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventTime < "2012-04-23T18:30:43.511Z"
 *     * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventType = detail-page-view
 *     * Example 3: eventsMissingCatalogItems
 *               eventType = search eventTime < "2018-04-23T18:30:43.511Z"
 *     * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
 *     * Example 5: eventType = search
 *     * Example 6: eventsMissingCatalogItems
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [UserEvent]{@link google.cloud.recommendationengine.v1beta1.UserEvent} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listUserEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUserEventsStream(
      request?: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listUserEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUserEvents.createStream(
      this.innerApiCalls.listUserEvents as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listUserEvents`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent eventStore resource name, such as
 *   `projects/* /locations/* /catalogs/default_catalog/eventStores/default_event_store`.
 * @param {number} [request.pageSize]
 *   Optional. Maximum number of results to return per page. If zero, the
 *   service will choose a reasonable default.
 * @param {string} [request.pageToken]
 *   Optional. The previous ListUserEventsResponse.next_page_token.
 * @param {string} [request.filter]
 *   Optional. Filtering expression to specify restrictions over
 *   returned events. This is a sequence of terms, where each term applies some
 *   kind of a restriction to the returned user events. Use this expression to
 *   restrict results to a specific time range, or filter events by eventType.
 *      eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
 *      eventTime<"2012-04-23T18:25:43.511Z" eventType=search
 *
 *     We expect only 3 types of fields:
 *
 *      * eventTime: this can be specified a maximum of 2 times, once with a
 *        less than operator and once with a greater than operator. The
 *        eventTime restrict should result in one contiguous valid eventTime
 *        range.
 *
 *      * eventType: only 1 eventType restriction can be specified.
 *
 *      * eventsMissingCatalogItems: specififying this will restrict results
 *        to events for which catalog items were not found in the catalog. The
 *        default behavior is to return only those events for which catalog
 *        items were found.
 *
 *     Some examples of valid filters expressions:
 *
 *     * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventTime < "2012-04-23T18:30:43.511Z"
 *     * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
 *               eventType = detail-page-view
 *     * Example 3: eventsMissingCatalogItems
 *               eventType = search eventTime < "2018-04-23T18:30:43.511Z"
 *     * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
 *     * Example 5: eventType = search
 *     * Example 6: eventsMissingCatalogItems
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [UserEvent]{@link google.cloud.recommendationengine.v1beta1.UserEvent}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta1/user_event_service.list_user_events.js</caption>
 * region_tag:recommendationengine_v1beta1_generated_UserEventService_ListUserEvents_async
 */
  listUserEventsAsync(
      request?: protos.google.cloud.recommendationengine.v1beta1.IListUserEventsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.recommendationengine.v1beta1.IUserEvent>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listUserEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUserEvents.asyncIterate(
      this.innerApiCalls['listUserEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.recommendationengine.v1beta1.IUserEvent>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified eventStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} event_store
   * @returns {string} Resource name string.
   */
  eventStorePath(project:string,location:string,catalog:string,eventStore:string) {
    return this.pathTemplates.eventStorePathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      event_store: eventStore,
    });
  }

  /**
   * Parse the project from EventStore resource.
   *
   * @param {string} eventStoreName
   *   A fully-qualified path representing EventStore resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventStoreName(eventStoreName: string) {
    return this.pathTemplates.eventStorePathTemplate.match(eventStoreName).project;
  }

  /**
   * Parse the location from EventStore resource.
   *
   * @param {string} eventStoreName
   *   A fully-qualified path representing EventStore resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventStoreName(eventStoreName: string) {
    return this.pathTemplates.eventStorePathTemplate.match(eventStoreName).location;
  }

  /**
   * Parse the catalog from EventStore resource.
   *
   * @param {string} eventStoreName
   *   A fully-qualified path representing EventStore resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromEventStoreName(eventStoreName: string) {
    return this.pathTemplates.eventStorePathTemplate.match(eventStoreName).catalog;
  }

  /**
   * Parse the event_store from EventStore resource.
   *
   * @param {string} eventStoreName
   *   A fully-qualified path representing EventStore resource.
   * @returns {string} A string representing the event_store.
   */
  matchEventStoreFromEventStoreName(eventStoreName: string) {
    return this.pathTemplates.eventStorePathTemplate.match(eventStoreName).event_store;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.userEventServiceStub && !this._terminated) {
      return this.userEventServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
