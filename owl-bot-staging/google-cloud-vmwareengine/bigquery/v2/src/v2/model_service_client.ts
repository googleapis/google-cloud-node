// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/model_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './model_service_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v2
 */
export class ModelServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  modelServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ModelServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ModelServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ModelServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.bigquery.v2.ModelService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.modelServiceStub) {
      return this.modelServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.v2.ModelService.
    this.modelServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.bigquery.v2.ModelService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.v2.ModelService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const modelServiceStubMethods =
        ['getModel', 'listModels', 'patchModel', 'deleteModel'];
    for (const methodName of modelServiceStubMethods) {
      const callPromise = this.modelServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.modelServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'bigquery.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'bigquery.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/bigquery.readonly',
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets the specified model resource by model ID.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. Project ID of the requested model.
 * @param {string} request.datasetId
 *   Required. Dataset ID of the requested model.
 * @param {string} request.modelId
 *   Required. Model ID of the requested model.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Model]{@link google.cloud.bigquery.v2.Model}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/model_service.get_model.js</caption>
 * region_tag:bigquery_v2_generated_ModelService_GetModel_async
 */
  getModel(
      request?: protos.google.cloud.bigquery.v2.IGetModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.bigquery.v2.IModel,
        protos.google.cloud.bigquery.v2.IGetModelRequest|undefined, {}|undefined
      ]>;
  getModel(
      request: protos.google.cloud.bigquery.v2.IGetModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IGetModelRequest|null|undefined,
          {}|null|undefined>): void;
  getModel(
      request: protos.google.cloud.bigquery.v2.IGetModelRequest,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IGetModelRequest|null|undefined,
          {}|null|undefined>): void;
  getModel(
      request?: protos.google.cloud.bigquery.v2.IGetModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IGetModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IGetModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.bigquery.v2.IModel,
        protos.google.cloud.bigquery.v2.IGetModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'project_id': request.projectId ?? '',
      'dataset_id': request.datasetId ?? '',
      'model_id': request.modelId ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getModel(request, options, callback);
  }
/**
 * Lists all models in the specified dataset. Requires the READER dataset
 * role. After retrieving the list of models, you can get information about a
 * particular model by calling the models.get method.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. Project ID of the models to list.
 * @param {string} request.datasetId
 *   Required. Dataset ID of the models to list.
 * @param {google.protobuf.UInt32Value} request.maxResults
 *   The maximum number of results to return in a single response page.
 *   Leverage the page tokens to iterate through the entire collection.
 * @param {string} request.pageToken
 *   Page token, returned by a previous call to request the next page of
 *   results
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListModelsResponse]{@link google.cloud.bigquery.v2.ListModelsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/model_service.list_models.js</caption>
 * region_tag:bigquery_v2_generated_ModelService_ListModels_async
 */
  listModels(
      request?: protos.google.cloud.bigquery.v2.IListModelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.bigquery.v2.IListModelsResponse,
        protos.google.cloud.bigquery.v2.IListModelsRequest|undefined, {}|undefined
      ]>;
  listModels(
      request: protos.google.cloud.bigquery.v2.IListModelsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IListModelsResponse,
          protos.google.cloud.bigquery.v2.IListModelsRequest|null|undefined,
          {}|null|undefined>): void;
  listModels(
      request: protos.google.cloud.bigquery.v2.IListModelsRequest,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IListModelsResponse,
          protos.google.cloud.bigquery.v2.IListModelsRequest|null|undefined,
          {}|null|undefined>): void;
  listModels(
      request?: protos.google.cloud.bigquery.v2.IListModelsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.bigquery.v2.IListModelsResponse,
          protos.google.cloud.bigquery.v2.IListModelsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.bigquery.v2.IListModelsResponse,
          protos.google.cloud.bigquery.v2.IListModelsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.bigquery.v2.IListModelsResponse,
        protos.google.cloud.bigquery.v2.IListModelsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'project_id': request.projectId ?? '',
      'dataset_id': request.datasetId ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listModels(request, options, callback);
  }
/**
 * Patch specific fields in the specified model.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. Project ID of the model to patch.
 * @param {string} request.datasetId
 *   Required. Dataset ID of the model to patch.
 * @param {string} request.modelId
 *   Required. Model ID of the model to patch.
 * @param {google.cloud.bigquery.v2.Model} request.model
 *   Required. Patched model.
 *   Follows RFC5789 patch semantics. Missing fields are not updated.
 *   To clear a field, explicitly set to default value.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Model]{@link google.cloud.bigquery.v2.Model}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/model_service.patch_model.js</caption>
 * region_tag:bigquery_v2_generated_ModelService_PatchModel_async
 */
  patchModel(
      request?: protos.google.cloud.bigquery.v2.IPatchModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.bigquery.v2.IModel,
        protos.google.cloud.bigquery.v2.IPatchModelRequest|undefined, {}|undefined
      ]>;
  patchModel(
      request: protos.google.cloud.bigquery.v2.IPatchModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IPatchModelRequest|null|undefined,
          {}|null|undefined>): void;
  patchModel(
      request: protos.google.cloud.bigquery.v2.IPatchModelRequest,
      callback: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IPatchModelRequest|null|undefined,
          {}|null|undefined>): void;
  patchModel(
      request?: protos.google.cloud.bigquery.v2.IPatchModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IPatchModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.bigquery.v2.IModel,
          protos.google.cloud.bigquery.v2.IPatchModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.bigquery.v2.IModel,
        protos.google.cloud.bigquery.v2.IPatchModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'project_id': request.projectId ?? '',
      'dataset_id': request.datasetId ?? '',
      'model_id': request.modelId ?? '',
    });
    this.initialize();
    return this.innerApiCalls.patchModel(request, options, callback);
  }
/**
 * Deletes the model specified by modelId from the dataset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. Project ID of the model to delete.
 * @param {string} request.datasetId
 *   Required. Dataset ID of the model to delete.
 * @param {string} request.modelId
 *   Required. Model ID of the model to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/model_service.delete_model.js</caption>
 * region_tag:bigquery_v2_generated_ModelService_DeleteModel_async
 */
  deleteModel(
      request?: protos.google.cloud.bigquery.v2.IDeleteModelRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.bigquery.v2.IDeleteModelRequest|undefined, {}|undefined
      ]>;
  deleteModel(
      request: protos.google.cloud.bigquery.v2.IDeleteModelRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteModelRequest|null|undefined,
          {}|null|undefined>): void;
  deleteModel(
      request: protos.google.cloud.bigquery.v2.IDeleteModelRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteModelRequest|null|undefined,
          {}|null|undefined>): void;
  deleteModel(
      request?: protos.google.cloud.bigquery.v2.IDeleteModelRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteModelRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.bigquery.v2.IDeleteModelRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.bigquery.v2.IDeleteModelRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'project_id': request.projectId ?? '',
      'dataset_id': request.datasetId ?? '',
      'model_id': request.modelId ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteModel(request, options, callback);
  }


  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.modelServiceStub && !this._terminated) {
      return this.modelServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
