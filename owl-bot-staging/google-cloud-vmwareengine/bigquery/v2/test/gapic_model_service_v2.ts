// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as modelserviceModule from '../src';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v2.ModelServiceClient', () => {
    describe('Common methods', () => {
        it('has servicePath', () => {
            const servicePath = modelserviceModule.v2.ModelServiceClient.servicePath;
            assert(servicePath);
        });

        it('has apiEndpoint', () => {
            const apiEndpoint = modelserviceModule.v2.ModelServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });

        it('has port', () => {
            const port = modelserviceModule.v2.ModelServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new modelserviceModule.v2.ModelServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.modelServiceStub, undefined);
            await client.initialize();
            assert(client.modelServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.modelServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.modelServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getModel', () => {
        it('invokes getModel without error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Model()
            );
            client.innerApiCalls.getModel = stubSimpleCall(expectedResponse);
            const [response] = await client.getModel(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getModel without error using callback', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Model()
            );
            client.innerApiCalls.getModel = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getModel(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IModel|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getModel with error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getModel = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getModel(request), expectedError);
            const actualRequest = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getModel with closed client', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.GetModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.GetModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getModel(request), expectedError);
        });
    });

    describe('listModels', () => {
        it('invokes listModels without error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsResponse()
            );
            client.innerApiCalls.listModels = stubSimpleCall(expectedResponse);
            const [response] = await client.listModels(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listModels without error using callback', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsResponse()
            );
            client.innerApiCalls.listModels = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listModels(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IListModelsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listModels with error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listModels = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listModels(request), expectedError);
            const actualRequest = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listModels as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listModels with closed client', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.ListModelsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.ListModelsRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.listModels(request), expectedError);
        });
    });

    describe('patchModel', () => {
        it('invokes patchModel without error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.PatchModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Model()
            );
            client.innerApiCalls.patchModel = stubSimpleCall(expectedResponse);
            const [response] = await client.patchModel(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchModel without error using callback', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.PatchModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.Model()
            );
            client.innerApiCalls.patchModel = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patchModel(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.bigquery.v2.IModel|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchModel with error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.PatchModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.patchModel = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patchModel(request), expectedError);
            const actualRequest = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.patchModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes patchModel with closed client', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.PatchModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.PatchModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.patchModel(request), expectedError);
        });
    });

    describe('deleteModel', () => {
        it('invokes deleteModel without error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteModel = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteModel(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteModel without error using callback', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.protobuf.Empty()
            );
            client.innerApiCalls.deleteModel = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteModel(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteModel with error', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedHeaderRequestParams = `project_id=${defaultValue1}&dataset_id=${defaultValue2}&model_id=${defaultValue3}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteModel = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteModel(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteModel as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteModel with closed client', async () => {
            const client = new modelserviceModule.v2.ModelServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.bigquery.v2.DeleteModelRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['projectId']);
            request.projectId = defaultValue1;
            const defaultValue2 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['datasetId']);
            request.datasetId = defaultValue2;
            const defaultValue3 =
              getTypeDefaultValue('.google.cloud.bigquery.v2.DeleteModelRequest', ['modelId']);
            request.modelId = defaultValue3;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteModel(request), expectedError);
        });
    });
});
